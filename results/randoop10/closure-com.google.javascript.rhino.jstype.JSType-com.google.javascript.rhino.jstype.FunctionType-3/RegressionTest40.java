import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest40 {

    public static boolean debug = false;

    @Test
    public void test20001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20001");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getReturnType();
        int int14 = jSDocInfo9.getExtendedInterfacesCount();
        jSDocInfo9.setDeprecated(true);
        boolean boolean17 = jSDocInfo9.shouldPreserveTry();
        boolean boolean19 = jSDocInfo9.hasParameterType("true");
        jSDocInfo9.addSuppression("(OR  [quoted: 1]\n)");
        java.lang.String str22 = jSDocInfo9.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "JSDocInfo" + "'", str22, "JSDocInfo");
    }

    @Test
    public void test20002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20002");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        boolean boolean6 = jSDocInfo0.isExport();
        java.lang.String str7 = jSDocInfo0.getFileOverview();
        boolean boolean8 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        java.lang.String str11 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(markerCollection12);
    }

    @Test
    public void test20003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20003");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        boolean boolean4 = node3.isFunction();
        boolean boolean5 = node3.isSwitch();
        boolean boolean6 = node3.isSetterDef();
        boolean boolean7 = node3.isIf();
        boolean boolean8 = node3.isInstanceOf();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(100);
        boolean boolean11 = node10.isFor();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        node14.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int23 = node14.getSideEffectFlags();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node26.addChildToBack(node29);
        com.google.javascript.rhino.Node node33 = node26.getNext();
        com.google.javascript.rhino.Node node34 = node14.useSourceInfoFromForTree(node26);
        boolean boolean35 = node34.isFor();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = null;
        int int43 = node41.getIndexOfChild(node42);
        node38.addChildToBack(node41);
        boolean boolean45 = node41.isName();
        com.google.javascript.rhino.InputId inputId47 = new com.google.javascript.rhino.InputId("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        java.lang.String str48 = inputId47.toString();
        node41.setInputId(inputId47);
        node34.setInputId(inputId47);
        boolean boolean51 = node34.isContinue();
        com.google.javascript.rhino.Node node52 = node10.copyInformationFrom(node34);
        boolean boolean53 = node52.isUnscopedQualifiedName();
        int int54 = node3.getIndexOfChild(node52);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str48, "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test20004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20004");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        node19.setOptionalArg(false);
        node19.setQuotedString();
        java.lang.Object obj30 = node19.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node19.detachFromParent();
        java.lang.String str32 = node31.toString();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean36 = node35.hasChildren();
        boolean boolean37 = node35.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean39 = jSDocInfo38.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList40 = jSDocInfo38.getImplementedInterfaces();
        node35.setJSDocInfo(jSDocInfo38);
        java.lang.String str42 = jSDocInfo38.getMeaning();
        com.google.javascript.rhino.Node node43 = jSDocInfo38.getAssociatedNode();
        java.lang.String str44 = jSDocInfo38.getFileOverview();
        boolean boolean45 = jSDocInfo38.isDefine();
        java.lang.String str46 = jSDocInfo38.getFileOverview();
        java.lang.String str47 = jSDocInfo38.getOriginalCommentString();
        jSDocInfo38.setLicense("GETELEM  [quoted: 1] [source_file: ]");
        boolean boolean50 = jSDocInfo38.hasModifies();
        node31.setJSDocInfo(jSDocInfo38);
        boolean boolean52 = node31.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR  [quoted: 1]" + "'", str32, "OR  [quoted: 1]");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test20005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20005");
        java.lang.String[] strArray7 = new java.lang.String[] { "Not declared as a constructor", "Unknown class name", "Unknown class name", "(hi!)", "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "(hi!)", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        java.lang.Object[] objArray10 = strSet8.toArray();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node12 = typePosition11.getItem();
        boolean boolean13 = strSet8.contains((java.lang.Object) typePosition11);
        int int14 = typePosition11.getPositionOnStartLine();
        typePosition11.setPositionInformation(16, (int) '#', (int) '#', 23);
        com.google.javascript.rhino.Node node20 = typePosition11.getItem();
        int int21 = typePosition11.getPositionOnEndLine();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[Not declared as a constructor, Unknown class name, (hi!), InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[Not declared as a constructor, Unknown class name, (hi!), InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23 + "'", int21 == 23);
    }

    @Test
    public void test20006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20006");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node11 = node10.getLastSibling();
        jSDocInfo0.setAssociatedNode(node11);
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("((OR \n))", 16, (int) '4');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = null;
        int int24 = node22.getIndexOfChild(node23);
        node22.putProp((int) (short) 1, (java.lang.Object) 1);
        node22.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int31 = node22.getSideEffectFlags();
        boolean boolean32 = node22.isParamList();
        int int33 = node22.getLineno();
        boolean boolean34 = node22.hasChildren();
        boolean boolean35 = node22.isBlock();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        node38.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int47 = node38.getSideEffectFlags();
        int int48 = node38.getChildCount();
        boolean boolean49 = node38.isIf();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        com.google.javascript.rhino.Node node54 = node52.getParent();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = null;
        int int59 = node57.getIndexOfChild(node58);
        node57.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean63 = node57.isDec();
        boolean boolean64 = node57.isHook();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(31, node22, node38, node52, node57);
        com.google.javascript.rhino.Node node66 = node18.copyInformationFrom(node38);
        boolean boolean67 = node11.isEquivalentToTyped(node66);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test20007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20007");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        boolean boolean10 = jSDocInfo5.hasDescriptionForParameter("hi!");
        boolean boolean12 = jSDocInfo5.hasParameterType("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        boolean boolean13 = jSDocInfo5.isConsistentIdGenerator();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList14 = com.google.common.collect.ImmutableList.of(jSDocInfo5);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo5.getImplementedInterfaces();
        boolean boolean16 = jSDocInfo5.isNoSideEffects();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList14);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test20008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20008");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node6.getLastSibling();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isNot();
        com.google.javascript.rhino.Node node23 = node19.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node24 = node19.getLastSibling();
        boolean boolean25 = node24.isQuotedString();
        node24.setLineno(32);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test20009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20009");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node16.isNE();
        boolean boolean27 = node16.hasChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean31 = node30.hasChildren();
        boolean boolean32 = node30.isAssignAdd();
        boolean boolean33 = node30.isDebugger();
        boolean boolean34 = node30.isFromExterns();
        node30.setSourceEncodedPosition(35);
        boolean boolean37 = node30.isTypeOf();
        node16.addChildrenToFront(node30);
        boolean boolean39 = node16.isAdd();
        boolean boolean40 = node16.isIn();
        node16.detachChildren();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = new com.google.javascript.rhino.JSTypeExpression(node16, "BITXOR 0\n");
        boolean boolean44 = jSTypeExpression43.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test20010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20010");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        boolean boolean5 = node2.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node6 = node2.getNext();
        node2.setSourceEncodedPositionForTree(45);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = null;
        int int17 = node15.getIndexOfChild(node16);
        node12.addChildToBack(node15);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.isNoShadow();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo19.getParameterNames();
        node12.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node12.getStaticSourceFile();
        node2.putProp((int) '4', (java.lang.Object) node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        boolean boolean27 = node12.isGetProp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.isNoShadow();
        boolean boolean30 = jSDocInfo28.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo28.getParameterType("hi!");
        boolean boolean33 = jSDocInfo28.containsDeclaration();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node36.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean42 = node36.isDec();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean47 = node46.hasChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = null;
        int int52 = node50.getIndexOfChild(node51);
        node50.putProp((int) (short) 1, (java.lang.Object) 1);
        node50.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node59 = node46.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.isContinue();
        boolean boolean65 = node62.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(42, node59, node62, 42, (int) (byte) 100);
        boolean boolean69 = node59.isNE();
        int int70 = node36.getIndexOfChild(node59);
        com.google.javascript.rhino.Node node71 = null;
        boolean boolean72 = node59.hasChild(node71);
        jSDocInfo28.setAssociatedNode(node59);
        java.lang.Object obj75 = node59.getProp(8);
        java.lang.String str76 = node12.checkTreeEquals(node59);
        com.google.javascript.rhino.Node node77 = node12.getFirstChild();
        boolean boolean78 = node77.isWith();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder79 = node77.new FileLevelJsDocBuilder();
        int int80 = node77.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Node tree inequality:\nTree1:\nOR  [jsdoc_info: JSDocInfo]\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR  [jsdoc_info: JSDocInfo]\n    OR \n\n\nSubtree2: OR \n" + "'", str76, "Node tree inequality:\nTree1:\nOR  [jsdoc_info: JSDocInfo]\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR  [jsdoc_info: JSDocInfo]\n    OR \n\n\nSubtree2: OR \n");
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test20011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20011");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isFor();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int22 = node13.getSideEffectFlags();
        node13.setSourceEncodedPositionForTree(1);
        boolean boolean25 = node13.isCase();
        boolean boolean26 = node13.isThrow();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node29.putProp((int) (short) 1, (java.lang.Object) 1);
        node29.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int38 = node29.getSideEffectFlags();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = null;
        int int46 = node44.getIndexOfChild(node45);
        node41.addChildToBack(node44);
        com.google.javascript.rhino.Node node48 = node41.getNext();
        com.google.javascript.rhino.Node node49 = node29.useSourceInfoFromForTree(node41);
        boolean boolean50 = node49.isBreak();
        int int51 = node49.getLength();
        node13.addChildrenToFront(node49);
        com.google.javascript.rhino.Node node53 = node5.srcrefTree(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = node56.getParent();
        boolean boolean58 = node56.isArrayLit();
        node56.setOptionalArg(true);
        boolean boolean61 = node56.isDefaultCase();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = null;
        int int66 = node64.getIndexOfChild(node65);
        node64.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean70 = node64.isDec();
        int int71 = node64.getLineno();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList72 = com.google.common.collect.ImmutableList.of(node56, node64);
        boolean boolean73 = node64.isName();
        node64.setOptionalArg(true);
        boolean boolean76 = node5.hasChild(node64);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(nodeList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test20012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20012");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        boolean boolean5 = jSDocInfo0.isOverride();
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        int int8 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = jSDocInfo0.hasType();
        boolean boolean12 = jSDocInfo0.hasDescriptionForParameter("(java.io.IOException: InputId: hi!)");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20013");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        boolean boolean23 = node22.isAdd();
        node22.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node28.addChildToBack(node31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.isNoShadow();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo35.getParameterNames();
        node28.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node22.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node41 = node22.cloneNode();
        node22.detachChildren();
        boolean boolean43 = node22.isHook();
        node22.setSourceFileForTesting("Node tree inequality:\nTree1:\nERROR 0\n\n\nTree2:\nOR  [slash_v: 2]\n    OR \n\n\nSubtree1: ERROR 0\n\n\nSubtree2: OR  [slash_v: 2]\n    OR \n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test20014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20014");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("(((hi!)))");
        java.lang.String str2 = inputId1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "InputId: (((hi!)))" + "'", str2, "InputId: (((hi!)))");
    }

    @Test
    public void test20015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20015");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.isExport();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test20016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20016");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        boolean boolean93 = typeList91.isEmpty();
        java.lang.Object[] objArray94 = typeList91.toArray();
        int int95 = typeList91.size();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor96 = typeList91.iterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor97 = typeList91.listIterator();
        java.util.Spliterator<java.lang.reflect.Type> typeSpliterator98 = typeList91.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 18 + "'", int95 == 18);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeItor97);
        org.junit.Assert.assertNotNull(typeSpliterator98);
    }

    @Test
    public void test20017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20017");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isConstructor();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        int int7 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        jSDocInfo0.addSuppression("OR  [source_file: Not declared as a type name]");
        boolean boolean13 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20018");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node2.siblings();
        boolean boolean4 = node2.isAssign();
        com.google.javascript.rhino.Node node5 = node2.cloneTree();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.hasChildren();
        com.google.javascript.rhino.Node node11 = node9.getLastSibling();
        node11.setSourceFileForTesting("Not declared as a type name");
        boolean boolean14 = node11.isWith();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100, node11, 51, 10);
        com.google.javascript.rhino.Node node18 = node17.cloneNode();
        boolean boolean19 = node17.isFromExterns();
        com.google.javascript.rhino.Node node20 = node5.copyInformationFrom(node17);
        boolean boolean21 = node5.isCatch();
        boolean boolean22 = node5.isSwitch();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.hasChildren();
        com.google.javascript.rhino.Node node27 = node25.getLastSibling();
        boolean boolean28 = node27.isOr();
        boolean boolean29 = node27.isBreak();
        boolean boolean30 = node27.isNull();
        node27.setQuotedString();
        boolean boolean32 = node27.isDo();
        boolean boolean33 = node5.isEquivalentToTyped(node27);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test20019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20019");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 53, 159793, 1);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test20020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20020");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isFor();
        boolean boolean11 = node5.isIf();
        boolean boolean12 = node5.isScript();
        boolean boolean13 = node5.isCatch();
        int int14 = node5.getSourcePosition();
        boolean boolean15 = node5.isReturn();
        boolean boolean16 = node5.isQualifiedName();
        boolean boolean17 = node5.isCall();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean21 = node20.hasChildren();
        boolean boolean22 = node20.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean24 = jSDocInfo23.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo23.getImplementedInterfaces();
        node20.setJSDocInfo(jSDocInfo23);
        boolean boolean27 = node20.isBlock();
        com.google.javascript.rhino.Node node28 = node20.getLastSibling();
        java.lang.String str32 = node28.toString(true, false, true);
        node28.putIntProp((-2147483648), (int) (byte) 100);
        node5.addChildToBack(node28);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "OR " + "'", str32, "OR ");
    }

    @Test
    public void test20021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20021");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean6 = jSDocInfo0.hasParameter("Not declared as a constructor");
        boolean boolean7 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("Not declared as a type name");
        boolean boolean10 = jSDocInfo0.isNoShadow();
        boolean boolean12 = jSDocInfo0.hasParameter("BITXOR 0\n");
        boolean boolean13 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean15 = jSDocInfo0.hasParameterType("java.io.IOException: OR \n");
        boolean boolean17 = jSDocInfo0.hasParameter("OR  32\n");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test20022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20022");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(16, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        boolean boolean3 = node2.isLabelName();
        node2.putIntProp(7, (int) '#');
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test20023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20023");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        int int9 = strSet6.size();
        boolean boolean10 = strSet6.isEmpty();
        boolean boolean12 = strSet6.add("(hi!)");
        java.lang.Object[] objArray13 = strSet6.toArray();
        java.lang.String[] strArray23 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        java.lang.Object[] objArray26 = strSet24.toArray();
        java.lang.Object[] objArray27 = strSet24.toArray();
        java.lang.String[] strArray40 = new java.lang.String[] { "JSDocInfo", "((hi!))", "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "OR ", "Not declared as a type name", "Not declared as a constructor", "hi!", "JSDocInfo", "Not declared as a constructor", "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        strSet41.clear();
        java.lang.Object obj44 = null;
        boolean boolean45 = strSet41.contains(obj44);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.isContinue();
        node48.setQuotedString();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean54 = node53.hasChildren();
        com.google.javascript.rhino.Node node55 = node53.getLastSibling();
        node55.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = null;
        int int62 = node60.getIndexOfChild(node61);
        node60.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean66 = node60.isDec();
        com.google.javascript.rhino.Node node67 = node55.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.Node node68 = node48.srcrefTree(node67);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable69 = node67.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor70 = ancestorIterable69.iterator();
        boolean boolean71 = strSet41.remove((java.lang.Object) nodeItor70);
        strSet41.clear();
        int int73 = strSet41.size();
        java.lang.Object[] objArray74 = strSet41.toArray();
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList75 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet6, (java.util.AbstractCollection<java.lang.String>) strSet24, (java.util.AbstractCollection<java.lang.String>) strSet41);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[, Not declared as a constructor, Unknown class name, Not declared as a type name, (hi!)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[, Not declared as a constructor, Unknown class name, Not declared as a type name, (hi!)]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(ancestorIterable69);
        org.junit.Assert.assertNotNull(nodeItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertNotNull(strCollectionList75);
    }

    @Test
    public void test20024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20024");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        boolean boolean7 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test20025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20025");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        boolean boolean17 = node15.isNoSideEffectsCall();
        boolean boolean18 = node15.isComma();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.isContinue();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean27 = node26.hasChildren();
        com.google.javascript.rhino.Node node28 = node26.getLastSibling();
        node28.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node33.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean39 = node33.isDec();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node41 = node21.srcrefTree(node40);
        node41.setCharno(0);
        boolean boolean44 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node51.putProp((int) (short) 1, (java.lang.Object) 1);
        node51.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node60 = node47.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean61 = node41.hasChild(node51);
        com.google.javascript.rhino.Node node62 = node15.copyInformationFromForTree(node41);
        boolean boolean63 = node41.isDo();
        boolean boolean64 = node41.isFor();
        com.google.javascript.rhino.InputId inputId65 = node41.getInputId();
        boolean boolean66 = node41.isCase();
        com.google.javascript.rhino.Node node68 = node41.getAncestor(48);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(4095, "(((hi!)))");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = null;
        int int79 = node77.getIndexOfChild(node78);
        node74.addChildToBack(node77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean82 = jSDocInfo81.isNoShadow();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo81.getParameterNames();
        node74.setJSDocInfo(jSDocInfo81);
        node74.setLength(47);
        boolean boolean87 = node74.isNoSideEffectsCall();
        boolean boolean88 = node74.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node89 = node71.useSourceInfoFrom(node74);
        node71.setVarArgs(false);
        com.google.javascript.rhino.Node node92 = node41.useSourceInfoIfMissingFromForTree(node71);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(inputId65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test20026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20026");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        java.lang.String str9 = jSDocInfo5.getMeaning();
        com.google.javascript.rhino.Node node10 = jSDocInfo5.getAssociatedNode();
        java.lang.String str11 = jSDocInfo5.getFileOverview();
        boolean boolean12 = jSDocInfo5.isDefine();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo5.getSuppressions();
        java.util.Iterator<java.lang.String> strItor14 = strSet13.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strItor14);
    }

    @Test
    public void test20027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20027");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = node4.getParent();
        boolean boolean6 = node4.isArrayLit();
        node4.setOptionalArg(true);
        int int9 = node4.getType();
        boolean boolean10 = node4.isLabelName();
        boolean boolean11 = node4.isInstanceOf();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(42, node4, 15, 1);
        boolean boolean15 = node4.isLocalResultCall();
        boolean boolean16 = node4.isDo();
        com.google.javascript.rhino.Node node17 = node4.cloneNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(6, node4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test20028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20028");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, (int) '#', 32);
        java.lang.String str4 = node3.getQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        node8.setCharno(3);
        boolean boolean11 = node3.hasChild(node8);
        boolean boolean12 = node8.isHook();
        boolean boolean13 = node8.isNew();
        boolean boolean14 = node8.isNumber();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean19 = node18.hasChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = null;
        int int24 = node22.getIndexOfChild(node23);
        node22.putProp((int) (short) 1, (java.lang.Object) 1);
        node22.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node31 = node18.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean35 = node34.isContinue();
        boolean boolean37 = node34.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(42, node31, node34, 42, (int) (byte) 100);
        boolean boolean41 = node40.isDec();
        com.google.javascript.rhino.Node node42 = node40.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable43 = node40.children();
        java.lang.String str44 = node40.getSourceFileName();
        com.google.javascript.rhino.Node node45 = node40.removeChildren();
        com.google.javascript.rhino.Node node46 = node8.copyInformationFrom(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean48 = jSDocInfo47.isNoShadow();
        boolean boolean49 = jSDocInfo47.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo47.getExtendedInterfaces();
        boolean boolean51 = jSDocInfo47.hasThisType();
        boolean boolean52 = jSDocInfo47.isNoShadow();
        boolean boolean53 = jSDocInfo47.isNoAlias();
        java.lang.String str54 = jSDocInfo47.getDescription();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo47.getParameterNames();
        node40.setDirectives(strSet55);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = node40.getStaticSourceFile();
        boolean boolean58 = node40.isContinue();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(nodeIterable43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNull(staticSourceFile57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test20029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20029");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.lang.String str5 = jSDocInfo0.getLicense();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getSuppressions();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        boolean boolean9 = jSDocInfo0.isHidden();
        boolean boolean10 = jSDocInfo0.hasThisType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeCollection11);
    }

    @Test
    public void test20030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20030");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getMeaning();
        boolean boolean2 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int15 = node6.getSideEffectFlags();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node18.addChildToBack(node21);
        int int25 = node6.getIndexOfChild(node18);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node41 = node28.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean42 = node41.wasEmptyNode();
        com.google.javascript.rhino.Node node43 = node6.useSourceInfoFrom(node41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean45 = jSDocInfo44.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList46 = jSDocInfo44.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo44.getSuppressions();
        node41.setJSDocInfo(jSDocInfo44);
        boolean boolean49 = jSDocInfo44.isInterface();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList52 = jSDocInfo50.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = jSDocInfo50.getTemplateTypeNames();
        int int54 = jSDocInfo50.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray61 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        java.util.Iterator<java.lang.String> strItor64 = strSet62.iterator();
        strSet62.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean67 = strSet62.equals((java.lang.Object) visibility66);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility71 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray77 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        java.util.Iterator<java.lang.String> strItor80 = strSet78.iterator();
        strSet78.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility82 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean83 = strSet78.equals((java.lang.Object) visibility82);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList84 = com.google.common.collect.ImmutableList.of(visibility55, visibility66, visibility68, visibility69, visibility70, visibility71, visibility82);
        jSDocInfo50.setVisibility(visibility66);
        jSDocInfo44.setVisibility(visibility66);
        jSDocInfo0.setVisibility(visibility66);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility69 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility69.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility70 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility70.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility71 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility71.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertTrue("'" + visibility82 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility82.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(visibilityList84);
    }

    @Test
    public void test20031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20031");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean25 = node19.isDec();
        boolean boolean26 = node15.isEquivalentToTyped(node19);
        int int27 = node19.getLineno();
        boolean boolean28 = node19.isFunction();
        boolean boolean29 = node19.isTry();
        boolean boolean30 = node19.isDelProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test20032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20032");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(97);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test20033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20033");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        com.google.javascript.rhino.Node node11 = typePosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList14 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition12);
        com.google.javascript.rhino.Node node15 = typePosition12.getItem();
        typePosition12.setPositionInformation(39, 4095, 155658, (-2147483648));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(typePositionList14);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test20034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20034");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        node11.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node20 = node7.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.isContinue();
        boolean boolean26 = node23.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(42, node20, node23, 42, (int) (byte) 100);
        boolean boolean30 = node20.isNE();
        com.google.javascript.rhino.Node node31 = node3.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean35 = node34.hasChildren();
        com.google.javascript.rhino.Node node36 = node34.getLastSibling();
        node36.setSourceFileForTesting("Not declared as a type name");
        boolean boolean39 = node36.isBreak();
        node36.setLength(50);
        com.google.javascript.rhino.Node node42 = node31.clonePropsFrom(node36);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node36.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder43.append("InputId: OR  0\n");
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test20035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20035");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.lang.String[] strArray12 = new java.lang.String[] { "Not declared as a type name", "(hi!)", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.String[] strArray24 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.Object[] objArray27 = strSet25.toArray();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList37 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet6, (java.util.AbstractSet<java.lang.String>) strSet13, (java.util.AbstractSet<java.lang.String>) strSet25, (java.util.AbstractSet<java.lang.String>) strSet34);
        java.lang.String[] strArray50 = new java.lang.String[] { "JSDocInfo", "((hi!))", "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "OR ", "Not declared as a type name", "Not declared as a constructor", "hi!", "JSDocInfo", "Not declared as a constructor", "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "hi!", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        strSet51.clear();
        java.lang.Object obj54 = null;
        boolean boolean55 = strSet51.contains(obj54);
        strSet51.clear();
        java.util.LinkedHashSet[] linkedHashSetArray58 = new java.util.LinkedHashSet[2];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray59 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray58;
        strSetArray59[0] = strSet13;
        strSetArray59[1] = strSet51;
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList64 = com.google.common.collect.ImmutableList.of(strSetArray59);
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList65 = com.google.common.collect.ImmutableList.copyOf((java.util.AbstractSet<java.lang.String>[]) strSetArray59);
        java.util.AbstractCollection[] abstractCollectionArray67 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray68 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray67;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList69 = com.google.common.collect.ImmutableList.copyOf(strCollectionArray68);
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>[]> strCollectionArrayList70 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>[]) strSetArray59, strCollectionArray68);
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList71 = com.google.common.collect.ImmutableList.of(strCollectionArray68);
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList72 = com.google.common.collect.ImmutableList.copyOf(strCollectionArray68);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strSetList37);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(linkedHashSetArray58);
        org.junit.Assert.assertNotNull(strSetArray59);
        org.junit.Assert.assertNotNull(strSetList64);
        org.junit.Assert.assertNotNull(strSetList65);
        org.junit.Assert.assertNotNull(abstractCollectionArray67);
        org.junit.Assert.assertNotNull(strCollectionArray68);
        org.junit.Assert.assertNotNull(strCollectionList69);
        org.junit.Assert.assertNotNull(strCollectionArrayList70);
        org.junit.Assert.assertNotNull(strCollectionList71);
        org.junit.Assert.assertNotNull(strCollectionList72);
    }

    @Test
    public void test20036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20036");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        node2.setVarArgs(false);
        java.util.Set<java.lang.String> strSet11 = node2.getDirectives();
        boolean boolean12 = node2.isThis();
        java.lang.String str13 = node2.toString();
        boolean boolean14 = node2.isNull();
        boolean boolean15 = node2.isFor();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        boolean boolean23 = node19.isString();
        boolean boolean24 = node19.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = null;
        int int29 = node27.getIndexOfChild(node28);
        node27.putProp((int) (short) 1, (java.lang.Object) 1);
        node27.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int36 = node27.getSideEffectFlags();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = null;
        int int44 = node42.getIndexOfChild(node43);
        node39.addChildToBack(node42);
        int int46 = node27.getIndexOfChild(node39);
        boolean boolean47 = node27.isBreak();
        boolean boolean48 = node27.isDo();
        boolean boolean49 = node27.isUnscopedQualifiedName();
        boolean boolean50 = node27.isParamList();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(0, node19, node27);
        boolean boolean52 = node19.isFalse();
        boolean boolean53 = node19.isComma();
        boolean boolean54 = node19.isAnd();
        java.lang.String str55 = node19.getString();
        boolean boolean56 = node19.isName();
        boolean boolean57 = node19.isIf();
        java.lang.String str58 = node2.checkTreeEquals(node19);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "OR " + "'", str13, "OR ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n" + "'", str58, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
    }

    @Test
    public void test20037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20037");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder31 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int33 = typePosition32.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int35 = typePosition34.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int37 = typePosition36.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int40 = typePosition39.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList42 = com.google.common.collect.ImmutableList.of(typePosition32, typePosition34, typePosition36, typePosition38, typePosition39, typePosition41);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int44 = typePosition43.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int48 = typePosition47.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int51 = typePosition50.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList53 = com.google.common.collect.ImmutableList.of(typePosition43, typePosition45, typePosition47, typePosition49, typePosition50, typePosition52);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray55 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray56 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray55;
        nodeSourcePositionArray56[0] = typePosition38;
        nodeSourcePositionArray56[1] = typePosition52;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder61 = nodeSourcePositionBuilder31.add(nodeSourcePositionArray56);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder62 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray56);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition63 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder64 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition63);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition65 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition67 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition69 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition70 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList71 = com.google.common.collect.ImmutableList.of(namePosition65, namePosition66, namePosition67, namePosition68, namePosition69, namePosition70);
        com.google.javascript.rhino.Node node72 = namePosition66.getItem();
        int int73 = namePosition66.getPositionOnStartLine();
        int int74 = namePosition66.getPositionOnStartLine();
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder75 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition66);
        com.google.common.collect.ImmutableCollection<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionCollection76 = nodeSourcePositionBuilder0.build();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList77 = nodeSourcePositionBuilder0.build();
        com.google.common.collect.ImmutableCollection<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionCollection78 = nodeSourcePositionBuilder0.build();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(typePositionList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(typePositionList53);
        org.junit.Assert.assertNotNull(sourcePositionArray55);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray56);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder61);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder62);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder64);
        org.junit.Assert.assertNotNull(namePositionList71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder75);
        org.junit.Assert.assertNotNull(nodeSourcePositionCollection76);
        org.junit.Assert.assertNotNull(nodeSourcePositionList77);
        org.junit.Assert.assertNotNull(nodeSourcePositionCollection78);
    }

    @Test
    public void test20038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20038");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("");
        boolean boolean9 = jSDocInfo0.isNoAlias();
        boolean boolean10 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean11 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test20039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20039");
        java.lang.String[] strArray7 = new java.lang.String[] { "Not declared as a constructor", "Unknown class name", "Unknown class name", "(hi!)", "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "(hi!)", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        java.lang.Object[] objArray10 = strSet8.toArray();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node12 = typePosition11.getItem();
        boolean boolean13 = strSet8.contains((java.lang.Object) typePosition11);
        com.google.javascript.rhino.Node node14 = typePosition11.getItem();
        int int15 = typePosition11.getEndLine();
        int int16 = typePosition11.getPositionOnEndLine();
        int int17 = typePosition11.getPositionOnStartLine();
        int int18 = typePosition11.getStartLine();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[Not declared as a constructor, Unknown class name, (hi!), InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[Not declared as a constructor, Unknown class name, (hi!), InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test20040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20040");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int22 = node13.getSideEffectFlags();
        boolean boolean23 = node13.isAssign();
        typePosition7.setItem(node13);
        boolean boolean25 = node13.isWith();
        java.lang.String str26 = node13.getSourceFileName();
        int int27 = node13.getLength();
        boolean boolean28 = node13.isOr();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = null;
        int int36 = node34.getIndexOfChild(node35);
        node31.addChildToBack(node34);
        boolean boolean38 = node34.isTypeOf();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean42 = node41.isContinue();
        node41.setQuotedString();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean47 = node46.hasChildren();
        com.google.javascript.rhino.Node node48 = node46.getLastSibling();
        node48.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = null;
        int int55 = node53.getIndexOfChild(node54);
        node53.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean59 = node53.isDec();
        com.google.javascript.rhino.Node node60 = node48.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node61 = node41.srcrefTree(node60);
        node61.setCharno(0);
        node34.addChildrenToBack(node61);
        boolean boolean65 = node61.isString();
        // The following exception was thrown during execution in test generation
        try {
            node13.addChildrenToFront(node61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test20041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20041");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isDebugger();
        java.lang.String str6 = node2.getQualifiedName();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.isContinue();
        boolean boolean12 = node9.getBooleanProp((int) (byte) 100);
        boolean boolean13 = node9.isString();
        boolean boolean14 = node9.isNoSideEffectsCall();
        node2.addChildToFront(node9);
        int int16 = node2.getSourcePosition();
        com.google.javascript.rhino.Node node18 = node2.getChildAtIndex(0);
        boolean boolean19 = node2.isBlock();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        com.google.javascript.rhino.Node node24 = node22.getLastSibling();
        int int25 = node24.getLength();
        boolean boolean26 = node24.isIf();
        node24.setLineno(32);
        boolean boolean29 = node24.isSyntheticBlock();
        node2.addChildrenToBack(node24);
        com.google.javascript.rhino.Node node31 = node2.cloneNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = new com.google.javascript.rhino.JSTypeExpression(node2, "NUMBER 42.0 32");
        boolean boolean34 = jSTypeExpression33.isOptionalArg();
        boolean boolean35 = jSTypeExpression33.isOptionalArg();
        boolean boolean36 = jSTypeExpression33.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression33);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression37);
    }

    @Test
    public void test20042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20042");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node5.new FileLevelJsDocBuilder();
        int int13 = node5.getIntProp((int) (short) 100);
        int int14 = node5.getCharno();
        boolean boolean15 = node5.isGetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test20043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20043");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(40, nodeArray5);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(23, nodeArray5);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) ' ', nodeArray5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(41001, nodeArray5);
        org.junit.Assert.assertNotNull(nodeArray5);
    }

    @Test
    public void test20044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20044");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isTrue();
        boolean boolean42 = node2.isCatch();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node2.getJSDocInfo();
        boolean boolean44 = node2.isBlock();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(0);
        boolean boolean47 = node46.isScript();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node46.setJSType(jSType48);
        int int50 = node46.getSourceOffset();
        boolean boolean51 = node46.isAnd();
        com.google.javascript.rhino.Node node52 = node2.useSourceInfoFromForTree(node46);
        boolean boolean53 = node46.isAssign();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test20045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20045");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.hasChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node29.putProp((int) (short) 1, (java.lang.Object) 1);
        node29.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node38 = node25.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean39 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node38);
        boolean boolean41 = node40.isWhile();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = null;
        int int46 = node44.getIndexOfChild(node45);
        node44.putProp((int) (short) 1, (java.lang.Object) 1);
        node44.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int53 = node44.getSideEffectFlags();
        boolean boolean54 = node44.isParamList();
        int int55 = node44.getLineno();
        boolean boolean56 = node44.hasChildren();
        com.google.javascript.rhino.Node node57 = node40.useSourceInfoIfMissingFrom(node44);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = node57.siblings();
        boolean boolean59 = node57.isArrayLit();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(2, "java.io.IOException", 29, (int) ' ');
        boolean boolean65 = node57.hasChild(node64);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(0, node64);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(nodeIterable58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test20046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20046");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeItor92.hasPrevious();
        int int94 = typeItor92.nextIndex();
        int int95 = typeItor92.nextIndex();
        java.lang.reflect.Type type96 = typeItor92.next();
        // The following exception was thrown during execution in test generation
        try {
            typeItor92.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(type96);
    }

    @Test
    public void test20047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20047");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        node19.setOptionalArg(false);
        node19.setQuotedString();
        java.lang.Object obj30 = node19.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        boolean boolean35 = node33.isAssignAdd();
        boolean boolean36 = node33.isDebugger();
        boolean boolean37 = node33.isFromExterns();
        node33.setSourceEncodedPosition(35);
        boolean boolean40 = node33.isSetterDef();
        boolean boolean42 = node33.getBooleanProp(51);
        boolean boolean43 = node33.isRegExp();
        node33.setCharno(36);
        boolean boolean46 = node33.isTry();
        com.google.javascript.rhino.Node node47 = node19.srcrefTree(node33);
        com.google.javascript.rhino.Node node48 = node33.getNext();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(15, "(NUMBER 35.0)", (int) (short) -1, (int) (short) 0);
        int int54 = node53.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            node33.removeChild(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test20048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20048");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder31 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int33 = typePosition32.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int35 = typePosition34.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int37 = typePosition36.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int40 = typePosition39.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList42 = com.google.common.collect.ImmutableList.of(typePosition32, typePosition34, typePosition36, typePosition38, typePosition39, typePosition41);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int44 = typePosition43.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int48 = typePosition47.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int51 = typePosition50.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList53 = com.google.common.collect.ImmutableList.of(typePosition43, typePosition45, typePosition47, typePosition49, typePosition50, typePosition52);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray55 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray56 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray55;
        nodeSourcePositionArray56[0] = typePosition38;
        nodeSourcePositionArray56[1] = typePosition52;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder61 = nodeSourcePositionBuilder31.add(nodeSourcePositionArray56);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder62 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray56);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition63 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder64 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition63);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList65 = nodeSourcePositionBuilder0.build();
        com.google.common.collect.ImmutableCollection<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionCollection66 = nodeSourcePositionBuilder0.build();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList67 = nodeSourcePositionBuilder0.build();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition68 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int69 = typePosition68.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition70 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int71 = typePosition70.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition72 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int73 = typePosition72.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition74 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int76 = typePosition75.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList78 = com.google.common.collect.ImmutableList.of(typePosition68, typePosition70, typePosition72, typePosition74, typePosition75, typePosition77);
        int int79 = typePosition72.getEndLine();
        boolean boolean80 = typePosition72.hasBrackets();
        int int81 = typePosition72.getEndLine();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder82 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition72);
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>> nodeSourcePositionBuilderList83 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>) nodeSourcePositionBuilder82);
        com.google.common.collect.ImmutableCollection<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionCollection84 = nodeSourcePositionBuilder82.build();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(typePositionList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(typePositionList53);
        org.junit.Assert.assertNotNull(sourcePositionArray55);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray56);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder61);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder62);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder64);
        org.junit.Assert.assertNotNull(nodeSourcePositionList65);
        org.junit.Assert.assertNotNull(nodeSourcePositionCollection66);
        org.junit.Assert.assertNotNull(nodeSourcePositionList67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(typePositionList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder82);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilderList83);
        org.junit.Assert.assertNotNull(nodeSourcePositionCollection84);
    }

    @Test
    public void test20049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20049");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        boolean boolean8 = jSDocInfo0.hasParameterType("java.io.IOException: java.io.IOException: JSDocInfo");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean10 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test20050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20050");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList94.reverse();
        int int96 = typeList95.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 18 + "'", int96 == 18);
    }

    @Test
    public void test20051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20051");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.hasParameter("hi!");
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = node8.getParent();
        com.google.javascript.rhino.Node node11 = node8.getAncestor((int) (short) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.isNoShadow();
        boolean boolean14 = jSDocInfo12.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo12.getExtendedInterfaces();
        boolean boolean16 = jSDocInfo12.shouldPreserveTry();
        boolean boolean17 = jSDocInfo12.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo12.getThrownTypes();
        java.lang.String str19 = jSDocInfo12.getLendsName();
        java.lang.String str20 = jSDocInfo12.getMeaning();
        boolean boolean21 = jSDocInfo12.isHidden();
        node8.setJSDocInfo(jSDocInfo12);
        boolean boolean23 = jSDocInfo12.isConstant();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node31.putProp((int) (short) 1, (java.lang.Object) 1);
        node31.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node40 = node27.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean44 = node43.isContinue();
        boolean boolean46 = node43.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(42, node40, node43, 42, (int) (byte) 100);
        boolean boolean50 = node40.isNE();
        boolean boolean51 = node40.hasChildren();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean55 = node54.hasChildren();
        boolean boolean56 = node54.isAssignAdd();
        boolean boolean57 = node54.isDebugger();
        boolean boolean58 = node54.isFromExterns();
        node54.setSourceEncodedPosition(35);
        boolean boolean61 = node54.isTypeOf();
        node40.addChildrenToFront(node54);
        boolean boolean63 = node40.isAdd();
        boolean boolean64 = node40.isIn();
        node40.detachChildren();
        com.google.javascript.rhino.Node node66 = node40.removeChildren();
        jSDocInfo12.setAssociatedNode(node40);
        boolean boolean68 = strSet5.contains((java.lang.Object) node40);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test20052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20052");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node6.getLastSibling();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isNot();
        com.google.javascript.rhino.Node node23 = node19.copyInformationFrom(node21);
        boolean boolean24 = node19.isCall();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = null;
        int int32 = node30.getIndexOfChild(node31);
        node27.addChildToBack(node30);
        boolean boolean34 = node30.isTypeOf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isContinue();
        node37.setQuotedString();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        com.google.javascript.rhino.Node node44 = node42.getLastSibling();
        node44.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node49.getIndexOfChild(node50);
        node49.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean55 = node49.isDec();
        com.google.javascript.rhino.Node node56 = node44.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node57 = node37.srcrefTree(node56);
        node57.setCharno(0);
        node30.addChildrenToBack(node57);
        boolean boolean61 = node57.isString();
        boolean boolean62 = node57.isGetProp();
        boolean boolean63 = node57.isOptionalArg();
        boolean boolean64 = node57.isIn();
        com.google.javascript.rhino.Node node65 = node19.srcref(node57);
        boolean boolean66 = node65.isDelProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test20053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20053");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node14.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node14.cloneNode();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        boolean boolean29 = node27.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo30.getImplementedInterfaces();
        node27.setJSDocInfo(jSDocInfo30);
        java.lang.String str34 = jSDocInfo30.getMeaning();
        boolean boolean35 = jSDocInfo30.isIdGenerator();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo30.getSuppressions();
        node24.setDirectives(strSet36);
        java.lang.Object[] objArray38 = strSet36.toArray();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
    }

    @Test
    public void test20054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20054");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.hasChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node29.putProp((int) (short) 1, (java.lang.Object) 1);
        node29.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node38 = node25.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean39 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node38);
        java.lang.Object obj42 = node40.getProp((int) (short) 10);
        boolean boolean43 = node40.isAdd();
        boolean boolean44 = node40.isGetElem();
        boolean boolean45 = node40.isSwitch();
        node40.setQuotedString();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(28, node40, 4095, 0);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        com.google.javascript.rhino.Node node54 = node52.getParent();
        boolean boolean55 = node52.isGetElem();
        boolean boolean56 = node52.isFromExterns();
        node52.setType(29);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean62 = node61.isNot();
        boolean boolean63 = node61.isGetterDef();
        com.google.javascript.rhino.Node node64 = node52.useSourceInfoFrom(node61);
        boolean boolean65 = node61.isThis();
        boolean boolean66 = node61.isVar();
        com.google.javascript.rhino.Node node67 = node40.useSourceInfoFromForTree(node61);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
    }

    @Test
    public void test20055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20055");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isTrue();
        boolean boolean42 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = node2.getLastChild();
        boolean boolean44 = node2.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node45 = node2.getLastChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test20056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20056");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        java.lang.String str9 = jSDocInfo5.getMeaning();
        com.google.javascript.rhino.Node node10 = jSDocInfo5.getAssociatedNode();
        java.lang.String str11 = jSDocInfo5.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo5.getParameterType("");
        boolean boolean14 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo5.getType();
        boolean boolean16 = jSDocInfo5.isConstructor();
        boolean boolean17 = jSDocInfo5.hasTypedefType();
        java.lang.String str18 = jSDocInfo5.getSourceName();
        jSDocInfo5.setLicense("STRING");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test20057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20057");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        boolean boolean15 = node2.isFalse();
        boolean boolean16 = node2.isInc();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isNoShadow();
        boolean boolean19 = jSDocInfo17.isConstant();
        java.lang.String str20 = jSDocInfo17.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection21 = jSDocInfo17.getMarkers();
        boolean boolean23 = jSDocInfo17.hasParameter("Not declared as a constructor");
        boolean boolean24 = jSDocInfo17.isDeprecated();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 10L);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node29.addChildToBack(node32);
        com.google.javascript.rhino.Node node36 = node29.getNext();
        boolean boolean37 = node29.isFalse();
        boolean boolean38 = node26.isEquivalentToTyped(node29);
        boolean boolean39 = node26.isIn();
        jSDocInfo17.setAssociatedNode(node26);
        node26.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node43 = node2.copyInformationFrom(node26);
        boolean boolean44 = node26.isFor();
        boolean boolean45 = node26.isCall();
        boolean boolean46 = node26.wasEmptyNode();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(41, "java.io.IOException: Named type with empty name component", 30, (int) (short) 100);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(25, node52);
        boolean boolean54 = node53.isObjectLit();
        boolean boolean55 = node53.isGetterDef();
        java.lang.String str56 = node26.checkTreeEquals(node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = null;
        int int61 = node59.getIndexOfChild(node60);
        node59.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean65 = node59.isGetterDef();
        boolean boolean66 = node59.isInc();
        node26.addChildrenToFront(node59);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(markerCollection21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nMOD\n    NULL java.io.IOException: Named type with empty name component 30\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: MOD\n    NULL java.io.IOException: Named type with empty name component 30\n" + "'", str56, "Node tree inequality:\nTree1:\nNUMBER 10.0\n\n\nTree2:\nMOD\n    NULL java.io.IOException: Named type with empty name component 30\n\n\nSubtree1: NUMBER 10.0\n\n\nSubtree2: MOD\n    NULL java.io.IOException: Named type with empty name component 30\n");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test20058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20058");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean17 = node11.isDec();
        boolean boolean18 = node2.hasChild(node11);
        boolean boolean20 = node2.getBooleanProp(39);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.isNot();
        boolean boolean25 = node23.isGetterDef();
        com.google.javascript.rhino.Node node26 = node2.copyInformationFrom(node23);
        int int27 = node26.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test20059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20059");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue0.and(ternaryValue2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue0.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue0.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue7.and(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue7.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue7.or(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue12.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue15.and(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue18.and(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue22.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue18.or(ternaryValue22);
        boolean boolean28 = ternaryValue18.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue17.and(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue32.and(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue36.and(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue32.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue31.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue17.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue12.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue0.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue47.and(ternaryValue49);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue51.and(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue47.or(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue46.and(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue58.and(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue57.xor(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue62.and(ternaryValue63);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = ternaryValue57.xor(ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str68 = ternaryValue67.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue69.and(ternaryValue71);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue73.and(ternaryValue75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = ternaryValue69.or(ternaryValue73);
        boolean boolean79 = ternaryValue69.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = ternaryValue67.xor(ternaryValue69);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = ternaryValue57.and(ternaryValue69);
        java.lang.String str82 = ternaryValue81.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = ternaryValue46.xor(ternaryValue81);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = ternaryValue44.xor(ternaryValue83);
        boolean boolean86 = ternaryValue84.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "false" + "'", str68, "false");
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "false" + "'", str82, "false");
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test20060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20060");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        int int4 = node2.getSourcePosition();
        com.google.javascript.rhino.Node node5 = node2.removeChildren();
        java.lang.String str6 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(47, (int) (byte) 100, 45);
        node2.addChildToBack(node10);
        node10.setType(36);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags16 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags16.setThrows();
        sideEffectFlags16.setReturnsTainted();
        sideEffectFlags16.setThrows();
        sideEffectFlags16.setThrows();
        node10.putProp(13, (java.lang.Object) sideEffectFlags16);
        boolean boolean22 = node10.isHook();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test20061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20061");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        node11.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node20 = node7.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.isContinue();
        boolean boolean26 = node23.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(42, node20, node23, 42, (int) (byte) 100);
        boolean boolean30 = node20.isNE();
        com.google.javascript.rhino.Node node31 = node3.clonePropsFrom(node20);
        boolean boolean32 = node20.isGetProp();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = node35.getParent();
        boolean boolean37 = node35.isArrayLit();
        node35.setOptionalArg(true);
        com.google.javascript.rhino.jstype.JSType jSType40 = node35.getJSType();
        node20.addChildToFront(node35);
        com.google.javascript.rhino.Node node42 = node20.getLastChild();
        boolean boolean43 = node20.isReturn();
        int int44 = node20.getChildCount();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test20062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20062");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = node3.getParent();
        boolean boolean5 = node3.isArrayLit();
        boolean boolean6 = node3.isThrow();
        boolean boolean7 = node3.isInc();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(47, (int) (byte) 100, 45);
        com.google.javascript.rhino.Node node12 = node3.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(97, node3);
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = node18.getParent();
        com.google.javascript.rhino.Node node21 = node18.getAncestor((int) (short) 0);
        node21.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node21.getJsDocBuilderForNode();
        node21.setSourceFileForTesting("JSDocInfo");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean30 = node29.isContinue();
        int int31 = node29.getSourcePosition();
        com.google.javascript.rhino.Node node32 = node29.removeChildren();
        boolean boolean33 = node21.hasChild(node29);
        boolean boolean34 = node29.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = node37.getParent();
        boolean boolean39 = node37.isArrayLit();
        node37.setType(54);
        com.google.javascript.rhino.Node node42 = node29.copyInformationFromForTree(node37);
        boolean boolean43 = node37.isOptionalArg();
        node37.removeProp(49);
        boolean boolean46 = node37.isLabel();
        com.google.javascript.rhino.Node node47 = node3.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node[] nodeArray50 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((-1), nodeArray50, 1, (int) '#');
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(49, nodeArray50, 48, (int) (byte) 0);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = null;
        int int61 = node59.getIndexOfChild(node60);
        node59.putProp((int) (short) 1, (java.lang.Object) 1);
        node59.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int68 = node59.getSideEffectFlags();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = null;
        int int76 = node74.getIndexOfChild(node75);
        node71.addChildToBack(node74);
        com.google.javascript.rhino.Node node78 = node71.getNext();
        com.google.javascript.rhino.Node node79 = node59.useSourceInfoFromForTree(node71);
        boolean boolean80 = node71.isNot();
        boolean boolean81 = node71.isCatch();
        boolean boolean82 = node71.isUnscopedQualifiedName();
        boolean boolean83 = node71.isSyntheticBlock();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) 100, (int) '#', 32);
        boolean boolean88 = node71.isEquivalentTo(node87);
        boolean boolean89 = node87.isCall();
        boolean boolean90 = node56.hasChild(node87);
        boolean boolean91 = node56.isGetProp();
        boolean boolean92 = node56.isObjectLit();
        com.google.javascript.rhino.Node node93 = node56.cloneTree();
        node47.addChildToBack(node56);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeArray50);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test20063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20063");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node7.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node7.getLastSibling();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node23.addChildToBack(node26);
        com.google.javascript.rhino.Node node30 = node23.getNext();
        com.google.javascript.rhino.Node node31 = node7.copyInformationFrom(node23);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(10, node7);
        java.lang.Object obj34 = node7.getProp(44);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = node37.getParent();
        boolean boolean39 = node37.isArrayLit();
        boolean boolean40 = node37.isThrow();
        boolean boolean41 = node37.isInstanceOf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node47.getIndexOfChild(node48);
        node44.addChildToBack(node47);
        com.google.javascript.rhino.Node node51 = node44.getNext();
        boolean boolean52 = node44.isFalse();
        node37.addChildrenToBack(node44);
        boolean boolean54 = node44.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder55 = node44.new FileLevelJsDocBuilder();
        boolean boolean56 = node44.isCase();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = null;
        int int61 = node59.getIndexOfChild(node60);
        node59.putProp((int) (short) 1, (java.lang.Object) 1);
        node59.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int68 = node59.getSideEffectFlags();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = null;
        int int76 = node74.getIndexOfChild(node75);
        node71.addChildToBack(node74);
        com.google.javascript.rhino.Node node78 = node71.getNext();
        com.google.javascript.rhino.Node node79 = node59.useSourceInfoFromForTree(node71);
        boolean boolean80 = node71.isNot();
        boolean boolean81 = node71.isCatch();
        boolean boolean82 = node71.isUnscopedQualifiedName();
        boolean boolean83 = node71.isSyntheticBlock();
        boolean boolean84 = node71.isName();
        boolean boolean85 = node71.isObjectLit();
        node44.addChildToBack(node71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = node71.getJSDocInfo();
        com.google.javascript.rhino.Node node88 = node7.copyInformationFromForTree(node71);
        com.google.javascript.rhino.Node node89 = node88.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test20064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20064");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.lang.String str92 = typeList91.toString();
        java.lang.Object[] objArray93 = typeList91.toArray();
        boolean boolean94 = typeList91.isEmpty();
        java.util.Spliterator<java.lang.reflect.Type> typeSpliterator95 = typeList91.spliterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor97 = typeList91.listIterator((int) (short) 1);
        int int98 = typeList91.size();
        java.util.Spliterator<java.lang.reflect.Type> typeSpliterator99 = typeList91.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str92, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeSpliterator95);
        org.junit.Assert.assertNotNull(typeItor97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 18 + "'", int98 == 18);
        org.junit.Assert.assertNotNull(typeSpliterator99);
    }

    @Test
    public void test20065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20065");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "hi!", 38, 10);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(46, node11);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean17 = node16.isDo();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.hasChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node25.putProp((int) (short) 1, (java.lang.Object) 1);
        node25.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node34 = node21.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isContinue();
        boolean boolean40 = node37.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(42, node34, node37, 42, (int) (byte) 100);
        node37.setOptionalArg(false);
        boolean boolean46 = node37.hasChildren();
        com.google.javascript.rhino.Node node47 = node16.copyInformationFrom(node37);
        boolean boolean48 = node47.isNumber();
        boolean boolean49 = node12.hasChild(node47);
        jSDocInfo0.setAssociatedNode(node12);
        java.util.Set<java.lang.String> strSet51 = jSDocInfo0.getSuppressions();
        java.lang.String str52 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test20066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20066");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node39.isWhile();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = null;
        int int45 = node43.getIndexOfChild(node44);
        node43.putProp((int) (short) 1, (java.lang.Object) 1);
        node43.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int52 = node43.getSideEffectFlags();
        boolean boolean53 = node43.isParamList();
        int int54 = node43.getLineno();
        boolean boolean55 = node43.hasChildren();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoIfMissingFrom(node43);
        boolean boolean57 = node39.isBlock();
        boolean boolean58 = node39.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test20067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20067");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        boolean boolean6 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
    }

    @Test
    public void test20068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20068");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        com.google.javascript.rhino.Node node15 = node2.getFirstChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.hasChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = null;
        int int25 = node23.getIndexOfChild(node24);
        node23.putProp((int) (short) 1, (java.lang.Object) 1);
        node23.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node32 = node19.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean36 = node35.isContinue();
        boolean boolean38 = node35.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(42, node32, node35, 42, (int) (byte) 100);
        boolean boolean42 = node32.isNE();
        boolean boolean43 = node32.hasChildren();
        com.google.javascript.rhino.Node node44 = node2.copyInformationFromForTree(node32);
        boolean boolean45 = node32.isDefaultCase();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.isContinue();
        node48.setQuotedString();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean54 = node53.hasChildren();
        com.google.javascript.rhino.Node node55 = node53.getLastSibling();
        node55.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = null;
        int int62 = node60.getIndexOfChild(node61);
        node60.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean66 = node60.isDec();
        com.google.javascript.rhino.Node node67 = node55.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.Node node68 = node48.srcrefTree(node67);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = node68.getStaticSourceFile();
        int int71 = staticSourceFile69.getLineOffset(39);
        java.lang.String str72 = staticSourceFile69.getName();
        int int74 = staticSourceFile69.getLineOfOffset((int) (byte) 10);
        boolean boolean75 = staticSourceFile69.isExtern();
        boolean boolean76 = staticSourceFile69.isExtern();
        node32.setStaticSourceFile(staticSourceFile69);
        java.lang.Object obj79 = node32.getProp(1);
        boolean boolean80 = node32.isSwitch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(staticSourceFile69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-2147483648) + "'", int71 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Not declared as a type name" + "'", str72, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test20069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20069");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator(2);
        java.util.ListIterator<java.lang.reflect.Type> typeItor94 = typeList91.listIterator();
        boolean boolean95 = typeItor94.hasNext();
        int int96 = typeItor94.nextIndex();
        java.lang.reflect.Type type97 = typeItor94.next();
        // The following exception was thrown during execution in test generation
        try {
            typeItor94.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(type97);
    }

    @Test
    public void test20070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20070");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = marker5.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker5.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker8.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker8.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = marker11.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = marker13.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = marker13.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList16 = com.google.common.collect.ImmutableList.of(marker5, marker8, marker11, marker13);
        com.google.javascript.rhino.JSDocInfo.Marker marker17 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = marker17.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = marker19.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker22 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = marker22.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = marker22.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker25 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = marker25.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = marker25.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition28 = marker25.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker29 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition30 = marker29.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition31 = marker29.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker32 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = marker32.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = marker32.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker35 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition36 = marker35.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition37 = marker35.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker38 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = marker38.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker40 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = marker40.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = marker40.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList43 = com.google.common.collect.ImmutableList.of(marker32, marker35, marker38, marker40);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition44 = marker35.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = marker35.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList46 = com.google.common.collect.ImmutableList.of(marker0, marker8, marker17, marker19, marker22, marker25, marker29, marker35);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition47 = marker29.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition48 = marker29.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition49 = marker29.getAnnotation();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(typePosition6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(typePosition12);
        org.junit.Assert.assertNull(typePosition14);
        org.junit.Assert.assertNull(typePosition15);
        org.junit.Assert.assertNotNull(markerList16);
        org.junit.Assert.assertNull(typePosition18);
        org.junit.Assert.assertNull(typePosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition23);
        org.junit.Assert.assertNull(typePosition24);
        org.junit.Assert.assertNull(typePosition26);
        org.junit.Assert.assertNull(stringPosition27);
        org.junit.Assert.assertNull(nodeSourcePosition28);
        org.junit.Assert.assertNull(stringPosition30);
        org.junit.Assert.assertNull(stringPosition31);
        org.junit.Assert.assertNull(typePosition33);
        org.junit.Assert.assertNull(typePosition34);
        org.junit.Assert.assertNull(stringPosition36);
        org.junit.Assert.assertNull(stringPosition37);
        org.junit.Assert.assertNull(typePosition39);
        org.junit.Assert.assertNull(typePosition41);
        org.junit.Assert.assertNull(typePosition42);
        org.junit.Assert.assertNotNull(markerList43);
        org.junit.Assert.assertNull(stringPosition44);
        org.junit.Assert.assertNull(typePosition45);
        org.junit.Assert.assertNotNull(markerList46);
        org.junit.Assert.assertNull(nodeSourcePosition47);
        org.junit.Assert.assertNull(stringPosition48);
        org.junit.Assert.assertNull(stringPosition49);
    }

    @Test
    public void test20071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20071");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 15, 100, 48);
        boolean boolean4 = node3.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test20072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20072");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node22.isFor();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node26.addChildToBack(node29);
        boolean boolean33 = node29.isName();
        com.google.javascript.rhino.InputId inputId35 = new com.google.javascript.rhino.InputId("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        java.lang.String str36 = inputId35.toString();
        node29.setInputId(inputId35);
        node22.setInputId(inputId35);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = null;
        int int43 = node41.getIndexOfChild(node42);
        node41.putProp((int) (short) 1, (java.lang.Object) 1);
        node41.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int50 = node41.getSideEffectFlags();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = null;
        int int58 = node56.getIndexOfChild(node57);
        node53.addChildToBack(node56);
        int int60 = node41.getIndexOfChild(node53);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean64 = node63.hasChildren();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = null;
        int int69 = node67.getIndexOfChild(node68);
        node67.putProp((int) (short) 1, (java.lang.Object) 1);
        node67.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node76 = node63.useSourceInfoIfMissingFromForTree(node67);
        boolean boolean77 = node76.wasEmptyNode();
        com.google.javascript.rhino.Node node78 = node41.useSourceInfoFrom(node76);
        com.google.javascript.rhino.jstype.JSType jSType79 = node78.getJSType();
        com.google.javascript.rhino.Node node80 = node78.cloneNode();
        boolean boolean81 = inputId35.equals((java.lang.Object) node80);
        java.lang.String str82 = inputId35.getIdName();
        java.lang.String str83 = inputId35.getIdName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str36, "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str82, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str83, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test20073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20073");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.util.Iterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.reverse();
        java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList94.listIterator();
        java.lang.reflect.Type type96 = typeItor95.next();
        boolean boolean97 = typeItor95.hasPrevious();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test20074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20074");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        boolean boolean22 = node2.isBreak();
        boolean boolean23 = node2.isDo();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = node2.useSourceInfoFromForTree(node27);
        boolean boolean29 = node2.isReturn();
        boolean boolean30 = node2.isVarArgs();
        node2.putBooleanProp(29, false);
        node2.setQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = null;
        int int39 = node37.getIndexOfChild(node38);
        node37.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean43 = node37.isFunction();
        node37.setOptionalArg(false);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.hasChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node52.getIndexOfChild(node53);
        node52.putProp((int) (short) 1, (java.lang.Object) 1);
        node52.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node61 = node48.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean62 = node61.isSwitch();
        com.google.javascript.rhino.Node node63 = null;
        node37.addChildrenAfter(node61, node63);
        com.google.javascript.rhino.Node node65 = node2.copyInformationFrom(node37);
        boolean boolean66 = node65.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test20075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20075");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        java.lang.String str9 = jSDocInfo5.getMeaning();
        com.google.javascript.rhino.Node node10 = jSDocInfo5.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo5.getThrownTypes();
        java.lang.String str12 = jSDocInfo5.getVersion();
        java.lang.String str13 = jSDocInfo5.getMeaning();
        boolean boolean14 = jSDocInfo5.isInterface();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test20076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20076");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isConstructor();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        boolean boolean12 = jSDocInfo0.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getThrownTypes();
        boolean boolean14 = jSDocInfo0.isNoTypeCheck();
        boolean boolean15 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test20077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20077");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(40, nodeArray3);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(48, nodeArray3);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray3);
        node6.addSuppression("java.io.IOException");
        boolean boolean9 = node6.isFor();
        node6.setType(33);
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20078");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node2.isThrow();
        node2.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        node14.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int23 = node14.getSideEffectFlags();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node26.addChildToBack(node29);
        int int33 = node14.getIndexOfChild(node26);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean37 = node36.hasChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = null;
        int int42 = node40.getIndexOfChild(node41);
        node40.putProp((int) (short) 1, (java.lang.Object) 1);
        node40.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node49 = node36.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean50 = node49.wasEmptyNode();
        com.google.javascript.rhino.Node node51 = node14.useSourceInfoFrom(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean53 = jSDocInfo52.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList54 = jSDocInfo52.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo52.getSuppressions();
        node49.setJSDocInfo(jSDocInfo52);
        boolean boolean57 = jSDocInfo52.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList58 = jSDocInfo52.getImplementedInterfaces();
        jSDocInfo52.setLicense("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        node2.setJSDocInfo(jSDocInfo52);
        boolean boolean62 = node2.isComma();
        node2.removeProp(16);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList54);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test20079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20079");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        boolean boolean5 = node2.isThrow();
        boolean boolean6 = node2.isInc();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(47, (int) (byte) 100, 45);
        com.google.javascript.rhino.Node node11 = node2.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean12 = node10.isRegExp();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        boolean boolean22 = node18.isTypeOf();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.isContinue();
        node25.setQuotedString();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean31 = node30.hasChildren();
        com.google.javascript.rhino.Node node32 = node30.getLastSibling();
        node32.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = null;
        int int39 = node37.getIndexOfChild(node38);
        node37.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean43 = node37.isDec();
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node45 = node25.srcrefTree(node44);
        node45.setCharno(0);
        node18.addChildrenToBack(node45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean50 = jSDocInfo49.isNoShadow();
        boolean boolean51 = jSDocInfo49.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo49.getParameterType("hi!");
        jSDocInfo49.setLicense("Unknown class name");
        boolean boolean56 = jSDocInfo49.isNoShadow();
        boolean boolean57 = jSDocInfo49.isNoTypeCheck();
        boolean boolean59 = jSDocInfo49.hasParameter("java.io.IOException: OR \n");
        node45.setJSDocInfo(jSDocInfo49);
        java.lang.String str61 = jSDocInfo49.getFileOverview();
        boolean boolean62 = jSDocInfo49.hasBaseType();
        node10.setJSDocInfo(jSDocInfo49);
        boolean boolean64 = node10.isNull();
        com.google.javascript.rhino.Node node65 = null;
        // The following exception was thrown during execution in test generation
        try {
            node10.addChildrenToFront(node65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test20080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20080");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("Named type with empty name component");
        java.lang.String str2 = inputId1.toString();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags4.setAllFlags();
        sideEffectFlags4.setMutatesGlobalState();
        sideEffectFlags4.setMutatesArguments();
        boolean boolean8 = sideEffectFlags4.areAllFlagsSet();
        sideEffectFlags4.clearAllFlags();
        boolean boolean10 = inputId1.equals((java.lang.Object) sideEffectFlags4);
        int int11 = sideEffectFlags4.valueOf();
        sideEffectFlags4.setMutatesGlobalState();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "InputId: Named type with empty name component" + "'", str2, "InputId: Named type with empty name component");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
    }

    @Test
    public void test20081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20081");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        int int11 = typePosition2.getStartLine();
        boolean boolean12 = typePosition2.hasBrackets();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node28 = node15.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean29 = node28.wasEmptyNode();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean38 = node32.isDec();
        boolean boolean39 = node28.isEquivalentToTyped(node32);
        boolean boolean40 = node28.isNumber();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node28.siblings();
        typePosition2.setItem(node28);
        boolean boolean43 = typePosition2.hasBrackets();
        int int44 = typePosition2.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test20082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20082");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test20083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20083");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean11 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test20084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20084");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 1, 51, 43);
        node7.removeProp(50);
        boolean boolean10 = node3.hasChild(node7);
        com.google.javascript.rhino.Node node11 = node7.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test20085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20085");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        java.lang.Object obj41 = node39.getProp((int) (short) 10);
        boolean boolean42 = node39.isAdd();
        boolean boolean43 = node39.isUnscopedQualifiedName();
        boolean boolean45 = node39.getBooleanProp(97);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node39.siblings();
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean48 = jSDocInfo47.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList49 = jSDocInfo47.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = jSDocInfo47.getTemplateTypeNames();
        boolean boolean51 = jSDocInfo47.isNoTypeCheck();
        boolean boolean52 = jSDocInfo47.containsDeclaration();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean57 = node56.hasChildren();
        com.google.javascript.rhino.Node node58 = node56.getLastSibling();
        node58.setSourceFileForTesting("Not declared as a type name");
        boolean boolean61 = node58.isWith();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(100, node58, 51, 10);
        jSDocInfo47.setAssociatedNode(node64);
        boolean boolean66 = node39.isEquivalentTo(node64);
        boolean boolean67 = node64.isInstanceOf();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(0, "IN");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = node64.getChildBefore(node70);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node70);
    }

    @Test
    public void test20086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20086");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(42, 43, 45);
        node3.setSourceEncodedPositionForTree(100);
        node3.addSuppression("(BITXOR (java.io.IOException))");
        com.google.javascript.rhino.Node node8 = node3.removeChildren();
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test20087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20087");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node4.addChildToBack(node7);
        java.util.Set<java.lang.String> strSet11 = node7.getDirectives();
        boolean boolean12 = node7.isCall();
        boolean boolean13 = node7.isRegExp();
        node7.setIsSyntheticBlock(false);
        boolean boolean16 = node7.isFunction();
        boolean boolean17 = node7.isName();
        boolean boolean18 = node7.isContinue();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(0, node1, node7, 35, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test20088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20088");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.common.collect.ImmutableCollection<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionCollection1 = nodeSourcePositionBuilder0.build();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int7 = typePosition6.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int10 = typePosition9.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList12 = com.google.common.collect.ImmutableList.of(typePosition2, typePosition4, typePosition6, typePosition8, typePosition9, typePosition11);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int14 = typePosition13.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int16 = typePosition15.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int18 = typePosition17.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int21 = typePosition20.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList23 = com.google.common.collect.ImmutableList.of(typePosition13, typePosition15, typePosition17, typePosition19, typePosition20, typePosition22);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int25 = typePosition24.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int27 = typePosition26.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int29 = typePosition28.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int32 = typePosition31.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList34 = com.google.common.collect.ImmutableList.of(typePosition24, typePosition26, typePosition28, typePosition30, typePosition31, typePosition33);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int36 = typePosition35.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int38 = typePosition37.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int40 = typePosition39.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int43 = typePosition42.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList45 = com.google.common.collect.ImmutableList.of(typePosition35, typePosition37, typePosition39, typePosition41, typePosition42, typePosition44);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int47 = typePosition46.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int49 = typePosition48.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int51 = typePosition50.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int54 = typePosition53.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList56 = com.google.common.collect.ImmutableList.of(typePosition46, typePosition48, typePosition50, typePosition52, typePosition53, typePosition55);
        typePosition46.setPositionInformation((int) ' ', (int) ' ', (int) (byte) 100, 31);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray63 = new com.google.javascript.rhino.SourcePosition[5];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray64 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray63;
        nodeSourcePositionArray64[0] = typePosition8;
        nodeSourcePositionArray64[1] = typePosition15;
        nodeSourcePositionArray64[2] = typePosition26;
        nodeSourcePositionArray64[3] = typePosition35;
        nodeSourcePositionArray64[4] = typePosition46;
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder75 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray64);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList76 = nodeSourcePositionBuilder75.build();
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray78 = new com.google.javascript.rhino.SourcePosition[0];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray79 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray78;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder80 = nodeSourcePositionBuilder75.add(nodeSourcePositionArray79);
        org.junit.Assert.assertNotNull(nodeSourcePositionCollection1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(typePositionList12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(typePositionList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(typePositionList34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(typePositionList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(typePositionList56);
        org.junit.Assert.assertNotNull(sourcePositionArray63);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray64);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder75);
        org.junit.Assert.assertNotNull(nodeSourcePositionList76);
        org.junit.Assert.assertNotNull(sourcePositionArray78);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray79);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder80);
    }

    @Test
    public void test20089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20089");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        boolean boolean23 = node3.isBreak();
        boolean boolean24 = node3.isDo();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node29 = node3.useSourceInfoFromForTree(node28);
        boolean boolean30 = node3.isReturn();
        boolean boolean31 = node3.isWhile();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = null;
        int int36 = node34.getIndexOfChild(node35);
        node34.putProp((int) (short) 1, (java.lang.Object) 1);
        node34.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int43 = node34.getSideEffectFlags();
        boolean boolean44 = node34.isExprResult();
        boolean boolean45 = node34.wasEmptyNode();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node48.addChildToBack(node51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean56 = jSDocInfo55.isNoShadow();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo55.getParameterNames();
        node48.setJSDocInfo(jSDocInfo55);
        java.lang.String str59 = node48.getString();
        boolean boolean60 = node48.isAnd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(0, "(hi!)", 42, 30);
        boolean boolean66 = node65.isIn();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(48, node3, node34, node48, node65);
        com.google.javascript.rhino.Node node68 = node67.cloneNode();
        boolean boolean69 = node68.isNot();
        com.google.javascript.rhino.Node node70 = node68.getLastSibling();
        com.google.javascript.rhino.Node node71 = node68.cloneTree();
        boolean boolean72 = node68.isIn();
        boolean boolean73 = node68.isGetElem();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test20090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20090");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node14.isNot();
        java.lang.String[] strArray29 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.util.Iterator<java.lang.String> strItor32 = strSet30.iterator();
        java.lang.String[] strArray36 = new java.lang.String[] { "Not declared as a type name", "(hi!)", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.String[] strArray48 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.lang.Object[] objArray51 = strSet49.toArray();
        java.lang.String[] strArray57 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        java.util.Iterator<java.lang.String> strItor60 = strSet58.iterator();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList61 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet30, (java.util.AbstractSet<java.lang.String>) strSet37, (java.util.AbstractSet<java.lang.String>) strSet49, (java.util.AbstractSet<java.lang.String>) strSet58);
        boolean boolean62 = strSet58.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator63 = strSet58.spliterator();
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList64 = com.google.common.collect.ImmutableList.of(strSet58);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet58);
        java.util.Spliterator<java.lang.String> strSpliterator66 = strSet58.spliterator();
        boolean boolean68 = strSet58.add("ERROR");
        com.google.javascript.rhino.JSDocInfo.Marker marker69 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition70 = marker69.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = marker69.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker72 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker72.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition74 = marker72.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker75 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = marker75.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker77 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition78 = marker77.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = marker77.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList80 = com.google.common.collect.ImmutableList.of(marker69, marker72, marker75, marker77);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition81 = marker72.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition82 = marker72.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition83 = marker72.getName();
        boolean boolean84 = strSet58.contains((java.lang.Object) marker72);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition85 = marker72.getType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(strSetList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertNotNull(strSetList64);
        org.junit.Assert.assertNotNull(strSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(typePosition70);
        org.junit.Assert.assertNull(typePosition71);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNull(stringPosition74);
        org.junit.Assert.assertNull(typePosition76);
        org.junit.Assert.assertNull(typePosition78);
        org.junit.Assert.assertNull(typePosition79);
        org.junit.Assert.assertNotNull(markerList80);
        org.junit.Assert.assertNull(stringPosition81);
        org.junit.Assert.assertNull(nodeSourcePosition82);
        org.junit.Assert.assertNull(stringPosition83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(typePosition85);
    }

    @Test
    public void test20091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20091");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean9 = jSDocInfo0.hasParameterType("GETELEM 10");
        jSDocInfo0.addSuppression("(([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]))");
        com.google.javascript.rhino.Node node12 = jSDocInfo0.getAssociatedNode();
        boolean boolean13 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20092");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, 15, 40);
        boolean boolean4 = node3.isLabel();
        boolean boolean5 = node3.isNew();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test20093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20093");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test20094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20094");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        boolean boolean4 = node3.isFunction();
        boolean boolean5 = node3.isSwitch();
        boolean boolean6 = node3.isLabelName();
        node3.putIntProp(1, 44);
        boolean boolean10 = node3.isInstanceOf();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean19 = node18.hasChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = null;
        int int24 = node22.getIndexOfChild(node23);
        node22.putProp((int) (short) 1, (java.lang.Object) 1);
        node22.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node31 = node18.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean35 = node34.isContinue();
        boolean boolean37 = node34.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(42, node31, node34, 42, (int) (byte) 100);
        boolean boolean41 = node31.isNE();
        com.google.javascript.rhino.Node node42 = node14.clonePropsFrom(node31);
        boolean boolean43 = node31.isGetProp();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = node46.getParent();
        boolean boolean48 = node46.isArrayLit();
        node46.setOptionalArg(true);
        com.google.javascript.rhino.jstype.JSType jSType51 = node46.getJSType();
        node31.addChildToFront(node46);
        com.google.javascript.rhino.Node node53 = node31.getLastChild();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = node57.getParent();
        com.google.javascript.rhino.Node node60 = node57.getAncestor((int) (short) 0);
        node60.putBooleanProp((int) (short) 10, false);
        boolean boolean64 = node60.isHook();
        boolean boolean65 = node60.isVarArgs();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(39);
        boolean boolean68 = node67.isDebugger();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, node67, (-1), (int) (short) -1);
        com.google.javascript.rhino.Node node72 = node31.useSourceInfoIfMissingFromForTree(node67);
        node31.setOptionalArg(false);
        boolean boolean75 = node31.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node76 = node3.clonePropsFrom(node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Node has existing properties.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test20095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20095");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node5 = node3.getLastSibling();
        node5.setSourceFileForTesting("Not declared as a type name");
        boolean boolean8 = node5.isWith();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(100, node5, 51, 10);
        boolean boolean12 = node11.isDebugger();
        com.google.javascript.rhino.Node node13 = node11.getNext();
        int int14 = node11.getType();
        com.google.javascript.rhino.Node node15 = node11.cloneTree();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        boolean boolean21 = node20.isFunction();
        boolean boolean22 = node20.isSwitch();
        boolean boolean23 = node20.isBlock();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 100, node20, 35, (int) 'a');
        boolean boolean27 = node15.isEquivalentToTyped(node26);
        int int28 = node26.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test20096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20096");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("NUMBER 42.0 0");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(NUMBER 42.0 0)" + "'", str1, "(NUMBER 42.0 0)");
    }

    @Test
    public void test20097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20097");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setPositionInformation(40, 10, (int) (short) 100, 40);
        stringPosition0.setItem("OR \n");
        int int16 = stringPosition0.getStartLine();
        java.lang.String str17 = stringPosition0.getItem();
        java.lang.String str18 = stringPosition0.getItem();
        stringPosition0.setPositionInformation(46, 15, (int) (byte) 100, 9);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OR \n" + "'", str17, "OR \n");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OR \n" + "'", str18, "OR \n");
    }

    @Test
    public void test20098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20098");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        node16.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node25 = node12.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.isContinue();
        boolean boolean31 = node28.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(42, node25, node28, 42, (int) (byte) 100);
        boolean boolean35 = node25.isNE();
        int int36 = node2.getIndexOfChild(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node25.children();
        boolean boolean38 = node25.isEmpty();
        com.google.javascript.rhino.InputId inputId39 = node25.getInputId();
        boolean boolean40 = node25.isFunction();
        boolean boolean41 = node25.isTry();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputId39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test20099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20099");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
    }

    @Test
    public void test20100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20100");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Named type with empty name component");
        boolean boolean7 = jSDocInfo0.hasParameter("BITXOR (java.io.IOException)");
        boolean boolean8 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        java.lang.Object[] objArray10 = strSet9.toArray();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test20101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20101");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        boolean boolean23 = node22.isAdd();
        node22.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node28.addChildToBack(node31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.isNoShadow();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo35.getParameterNames();
        node28.setJSDocInfo(jSDocInfo35);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node28.getStaticSourceFile();
        com.google.javascript.rhino.Node node40 = node22.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node41 = node22.cloneNode();
        node22.detachChildren();
        boolean boolean43 = node22.isHook();
        boolean boolean44 = node22.isDefaultCase();
        boolean boolean45 = node22.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test20102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20102");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        jSDocInfo0.setLicense("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility6);
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        boolean boolean11 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test20103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20103");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
    }

    @Test
    public void test20104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20104");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        boolean boolean15 = node2.isThrow();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node18.putProp((int) (short) 1, (java.lang.Object) 1);
        node18.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int27 = node18.getSideEffectFlags();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node30.addChildToBack(node33);
        com.google.javascript.rhino.Node node37 = node30.getNext();
        com.google.javascript.rhino.Node node38 = node18.useSourceInfoFromForTree(node30);
        boolean boolean39 = node38.isBreak();
        int int40 = node38.getLength();
        node2.addChildrenToFront(node38);
        boolean boolean42 = node2.isSyntheticBlock();
        boolean boolean43 = node2.isBlock();
        boolean boolean44 = node2.isNew();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection46 = jSDocInfo45.getMarkers();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo45.getParameterNames();
        boolean boolean48 = jSDocInfo45.isDeprecated();
        java.lang.String str49 = jSDocInfo45.getReturnDescription();
        java.lang.String str50 = jSDocInfo45.toString();
        java.util.Collection<java.lang.String> strCollection51 = jSDocInfo45.getAuthors();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = null;
        int int56 = node54.getIndexOfChild(node55);
        node54.putProp((int) (short) 1, (java.lang.Object) 1);
        node54.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int63 = node54.getSideEffectFlags();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = null;
        int int71 = node69.getIndexOfChild(node70);
        node66.addChildToBack(node69);
        int int73 = node54.getIndexOfChild(node66);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean77 = node76.hasChildren();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = null;
        int int82 = node80.getIndexOfChild(node81);
        node80.putProp((int) (short) 1, (java.lang.Object) 1);
        node80.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node89 = node76.useSourceInfoIfMissingFromForTree(node80);
        boolean boolean90 = node89.wasEmptyNode();
        com.google.javascript.rhino.Node node91 = node54.useSourceInfoFrom(node89);
        java.lang.Object obj93 = node91.getProp((int) (short) 10);
        boolean boolean94 = node91.isAdd();
        boolean boolean95 = node91.isGetElem();
        jSDocInfo45.setAssociatedNode(node91);
        com.google.javascript.rhino.Node node97 = node2.srcrefTree(node91);
        com.google.javascript.rhino.InputId inputId98 = node97.getInputId();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(markerCollection46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "JSDocInfo" + "'", str50, "JSDocInfo");
        org.junit.Assert.assertNull(strCollection51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNull(inputId98);
    }

    @Test
    public void test20105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20105");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node14.isNot();
        boolean boolean24 = node14.isCatch();
        int int26 = node14.getIntProp((int) (byte) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node28.getJSDocInfo();
        boolean boolean30 = node28.isContinue();
        node14.addChildrenToFront(node28);
        boolean boolean32 = node14.isCase();
        boolean boolean33 = node14.isSwitch();
        boolean boolean34 = node14.isParamList();
        boolean boolean35 = node14.isScript();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node14.setJSType(jSType36);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test20106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20106");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        java.util.Iterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        boolean boolean95 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type> typeList98 = typeList91.subList((int) (short) 100, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (100) must not be greater than size (18)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test20107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20107");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        boolean boolean5 = jSDocInfo0.isExpose();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        boolean boolean9 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean11 = jSDocInfo10.isNoShadow();
        boolean boolean12 = jSDocInfo10.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo10.getParameterType("hi!");
        boolean boolean15 = jSDocInfo10.containsDeclaration();
        int int16 = jSDocInfo10.getExtendedInterfacesCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection17 = jSDocInfo10.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray24 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.util.Iterator<java.lang.String> strItor27 = strSet25.iterator();
        strSet25.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility29 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean30 = strSet25.equals((java.lang.Object) visibility29);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray40 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        java.util.Iterator<java.lang.String> strItor43 = strSet41.iterator();
        strSet41.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean46 = strSet41.equals((java.lang.Object) visibility45);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList47 = com.google.common.collect.ImmutableList.of(visibility18, visibility29, visibility31, visibility32, visibility33, visibility34, visibility45);
        jSDocInfo10.setVisibility(visibility18);
        jSDocInfo0.setVisibility(visibility18);
        jSDocInfo0.setLicense("InputId: hi!");
        java.util.Set<java.lang.String> strSet52 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo0.getParameterType("THROW 10");
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeCollection17);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertTrue("'" + visibility29 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility29.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strItor43);
        org.junit.Assert.assertTrue("'" + visibility45 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility45.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(visibilityList47);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(jSTypeExpression54);
    }

    @Test
    public void test20108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20108");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        boolean boolean15 = node2.isFalse();
        int int16 = node2.getLineno();
        boolean boolean17 = node2.isContinue();
        boolean boolean18 = node2.isGetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test20109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20109");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        boolean boolean4 = jSDocInfo0.isConstant();
        java.lang.String str5 = jSDocInfo0.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.hasModifies();
        jSDocInfo0.setLicense("java.io.IOException: OR \n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str11 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.io.IOException: OR \n" + "'", str11, "java.io.IOException: OR \n");
    }

    @Test
    public void test20110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20110");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node5.isName();
        com.google.javascript.rhino.Node node10 = node5.detachFromParent();
        java.lang.String str11 = node10.getString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test20111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20111");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition2 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition4 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList6 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition2, namePosition3, namePosition4, namePosition5);
        int int7 = namePosition3.getPositionOnStartLine();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 10L);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.isContinue();
        boolean boolean14 = node12.isFromExterns();
        boolean boolean15 = node12.wasEmptyNode();
        int int16 = node12.getCharno();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node12);
        namePosition3.setItem(node9);
        // The following exception was thrown during execution in test generation
        try {
            node9.setString("InputId: STRING (hi!) 1");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 10.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namePositionList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test20112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20112");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        node11.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node20 = node7.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.isContinue();
        boolean boolean26 = node23.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(42, node20, node23, 42, (int) (byte) 100);
        boolean boolean30 = node20.isNE();
        com.google.javascript.rhino.Node node31 = node3.clonePropsFrom(node20);
        boolean boolean32 = node20.isGetProp();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = node35.getParent();
        boolean boolean37 = node35.isArrayLit();
        node35.setOptionalArg(true);
        com.google.javascript.rhino.jstype.JSType jSType40 = node35.getJSType();
        node20.addChildToFront(node35);
        com.google.javascript.rhino.Node node42 = node20.getLastChild();
        node20.setVarArgs(false);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = node20.getExistingIntProp(28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 28");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test20113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20113");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        boolean boolean22 = node2.isBreak();
        boolean boolean23 = node2.isEmpty();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node2.getJsDocBuilderForNode();
        boolean boolean25 = node2.isArrayLit();
        boolean boolean26 = node2.wasEmptyNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test20114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20114");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setType(54);
        boolean boolean7 = node2.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "hi!", 38, 10);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(46, node13);
        boolean boolean15 = node14.isGetProp();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int19 = typePosition18.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int21 = typePosition20.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition22 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int24 = typePosition23.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList26 = com.google.common.collect.ImmutableList.of(typePosition16, typePosition18, typePosition20, typePosition22, typePosition23, typePosition25);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node29.putProp((int) (short) 1, (java.lang.Object) 1);
        node29.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int38 = node29.getSideEffectFlags();
        boolean boolean39 = node29.isAssign();
        typePosition23.setItem(node29);
        com.google.javascript.rhino.Node node41 = node14.copyInformationFrom(node29);
        com.google.javascript.rhino.Node node42 = node2.srcref(node14);
        boolean boolean43 = node42.isFromExterns();
        boolean boolean44 = node42.isParamList();
        node42.setSourceFileForTesting("java.io.IOException: OR 51");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(typePositionList26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test20115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20115");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.and(ternaryValue1);
        boolean boolean4 = ternaryValue1.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue1.not();
        boolean boolean7 = ternaryValue1.toBoolean(true);
        boolean boolean9 = ternaryValue1.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue11.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue10.xor(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue12.not();
        boolean boolean17 = ternaryValue15.toBoolean(false);
        boolean boolean19 = ternaryValue15.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue20.and(ternaryValue21);
        boolean boolean24 = ternaryValue21.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue15.xor(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue28.and(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue27.xor(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue29.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue34.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue38.and(ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue34.or(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue33.xor(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue38.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue29.or(ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue29.not();
        java.lang.String str47 = ternaryValue46.toString();
        boolean boolean49 = ternaryValue46.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue21.and(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue1.or(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "true" + "'", str47, "true");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
    }

    @Test
    public void test20116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20116");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        boolean boolean3 = jSDocInfo0.isNoCompile();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("()");
        java.lang.String str8 = jSDocInfo0.getVersion();
        java.lang.String str9 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
    }

    @Test
    public void test20117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20117");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(java.io.IOException: (hi!))");
        boolean boolean2 = node1.isRegExp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test20118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20118");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node5.isTypeOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.isContinue();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        node19.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean30 = node24.isDec();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = node12.srcrefTree(node31);
        node32.setCharno(0);
        node5.addChildrenToBack(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean40 = node39.hasChildren();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = null;
        int int45 = node43.getIndexOfChild(node44);
        node43.putProp((int) (short) 1, (java.lang.Object) 1);
        node43.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node52 = node39.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean56 = node55.isContinue();
        boolean boolean58 = node55.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(42, node52, node55, 42, (int) (byte) 100);
        boolean boolean62 = node52.isNE();
        com.google.javascript.rhino.Node node63 = node32.useSourceInfoIfMissingFrom(node52);
        boolean boolean64 = node32.isEmpty();
        com.google.javascript.rhino.InputId inputId66 = new com.google.javascript.rhino.InputId("JSDocInfo");
        java.lang.String str67 = inputId66.getIdName();
        node32.setInputId(inputId66);
        java.lang.String str72 = node32.toString(true, true, true);
        node32.detachChildren();
        boolean boolean74 = node32.isVar();
        boolean boolean75 = node32.isVar();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "JSDocInfo" + "'", str67, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "OR  [quoted: 1] [source_file: Not declared as a type name] [input_id: InputId: JSDocInfo]" + "'", str72, "OR  [quoted: 1] [source_file: Not declared as a type name] [input_id: InputId: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test20119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20119");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.hasChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node29.putProp((int) (short) 1, (java.lang.Object) 1);
        node29.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node38 = node25.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean39 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node38);
        boolean boolean41 = node3.isCatch();
        boolean boolean42 = node3.isTrue();
        boolean boolean43 = node3.isCatch();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = node3.getJSDocInfo();
        boolean boolean45 = node3.isBlock();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node48.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean54 = node48.isGetterDef();
        boolean boolean55 = node48.isVoid();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node48.getStaticSourceFile();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((-2147483648), node3, node48);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean62 = node61.hasChildren();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = null;
        int int67 = node65.getIndexOfChild(node66);
        node65.putProp((int) (short) 1, (java.lang.Object) 1);
        node65.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node74 = node61.useSourceInfoIfMissingFromForTree(node65);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.isContinue();
        boolean boolean80 = node77.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(42, node74, node77, 42, (int) (byte) 100);
        boolean boolean84 = node77.isParamList();
        boolean boolean85 = node57.hasChild(node77);
        node77.setLength(50);
        java.lang.String str88 = node77.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test20120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20120");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node7.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node7.getLastSibling();
        boolean boolean21 = node7.isVoid();
        boolean boolean22 = node7.isNot();
        boolean boolean23 = node7.isOr();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean27 = node26.hasChildren();
        com.google.javascript.rhino.Node node28 = node26.getLastSibling();
        boolean boolean29 = node28.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        boolean boolean34 = node32.isAssignAdd();
        boolean boolean35 = node32.isQuotedString();
        node32.setCharno(36);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(0, node7, node28, node32);
        com.google.javascript.rhino.Node node39 = node7.removeFirstChild();
        boolean boolean40 = node7.isParamList();
        int int41 = node7.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test20121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20121");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node8.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean14 = node8.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean19 = node18.hasChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = null;
        int int24 = node22.getIndexOfChild(node23);
        node22.putProp((int) (short) 1, (java.lang.Object) 1);
        node22.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node31 = node18.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean35 = node34.isContinue();
        boolean boolean37 = node34.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(42, node31, node34, 42, (int) (byte) 100);
        boolean boolean41 = node31.isNE();
        int int42 = node8.getIndexOfChild(node31);
        com.google.javascript.rhino.Node node43 = null;
        boolean boolean44 = node31.hasChild(node43);
        jSDocInfo0.setAssociatedNode(node31);
        java.lang.String str46 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test20122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20122");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, 46, 30);
        node3.setSourceEncodedPositionForTree(0);
        boolean boolean6 = node3.isThis();
        boolean boolean7 = node3.isRegExp();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test20123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20123");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList31 = nodeSourcePositionBuilder0.build();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList32 = nodeSourcePositionBuilder0.build();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder33 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int35 = typePosition34.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int37 = typePosition36.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int39 = typePosition38.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int42 = typePosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList44 = com.google.common.collect.ImmutableList.of(typePosition34, typePosition36, typePosition38, typePosition40, typePosition41, typePosition43);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int48 = typePosition47.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int50 = typePosition49.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition51 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition52 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int53 = typePosition52.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList55 = com.google.common.collect.ImmutableList.of(typePosition45, typePosition47, typePosition49, typePosition51, typePosition52, typePosition54);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray57 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray58 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray57;
        nodeSourcePositionArray58[0] = typePosition40;
        nodeSourcePositionArray58[1] = typePosition54;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder63 = nodeSourcePositionBuilder33.add(nodeSourcePositionArray58);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition64 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int65 = typePosition64.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition66 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int67 = typePosition66.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition68 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int69 = typePosition68.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition70 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition71 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int72 = typePosition71.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition73 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList74 = com.google.common.collect.ImmutableList.of(typePosition64, typePosition66, typePosition68, typePosition70, typePosition71, typePosition73);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder75 = nodeSourcePositionBuilder63.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition73);
        int int76 = typePosition73.getEndLine();
        int int77 = typePosition73.getEndLine();
        int int78 = typePosition73.getEndLine();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder79 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition73);
        int int80 = typePosition73.getPositionOnEndLine();
        int int81 = typePosition73.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertNotNull(nodeSourcePositionList31);
        org.junit.Assert.assertNotNull(nodeSourcePositionList32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(typePositionList44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(typePositionList55);
        org.junit.Assert.assertNotNull(sourcePositionArray57);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray58);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(typePositionList74);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test20124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20124");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        boolean boolean17 = node15.isNoSideEffectsCall();
        boolean boolean18 = node15.isComma();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.isContinue();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean27 = node26.hasChildren();
        com.google.javascript.rhino.Node node28 = node26.getLastSibling();
        node28.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node33.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean39 = node33.isDec();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node41 = node21.srcrefTree(node40);
        node41.setCharno(0);
        boolean boolean44 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node51.putProp((int) (short) 1, (java.lang.Object) 1);
        node51.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node60 = node47.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean61 = node41.hasChild(node51);
        com.google.javascript.rhino.Node node62 = node15.copyInformationFromForTree(node41);
        boolean boolean63 = node41.isDo();
        boolean boolean64 = node41.isWhile();
        com.google.javascript.rhino.Node node65 = node41.removeChildren();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags67 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        sideEffectFlags67.clearAllFlags();
        sideEffectFlags67.setThrows();
        sideEffectFlags67.setMutatesGlobalState();
        sideEffectFlags67.setThrows();
        sideEffectFlags67.setMutatesGlobalState();
        sideEffectFlags67.clearSideEffectFlags();
        sideEffectFlags67.setMutatesArguments();
        sideEffectFlags67.clearAllFlags();
        sideEffectFlags67.setAllFlags();
        int int77 = sideEffectFlags67.valueOf();
        // The following exception was thrown during execution in test generation
        try {
            node41.setSideEffectFlags(sideEffectFlags67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test20125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20125");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean26 = node25.hasChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node29.putProp((int) (short) 1, (java.lang.Object) 1);
        node29.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node38 = node25.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean39 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFrom(node38);
        com.google.javascript.rhino.jstype.JSType jSType41 = node3.getJSType();
        boolean boolean42 = node3.isFor();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = null;
        int int47 = node45.getIndexOfChild(node46);
        node45.putProp((int) (short) 1, (java.lang.Object) 1);
        node45.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int54 = node45.getSideEffectFlags();
        boolean boolean55 = node45.isParamList();
        int int56 = node45.getLineno();
        boolean boolean57 = node45.hasChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean61 = node60.hasChildren();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = null;
        int int66 = node64.getIndexOfChild(node65);
        node64.putProp((int) (short) 1, (java.lang.Object) 1);
        node64.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node73 = node60.useSourceInfoIfMissingFromForTree(node64);
        node73.addSuppression("");
        node73.setSourceEncodedPosition(37);
        com.google.javascript.rhino.Node node78 = node73.getNext();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = node81.getParent();
        boolean boolean83 = node81.isArrayLit();
        node81.setOptionalArg(true);
        int int86 = node81.getType();
        boolean boolean87 = node81.isLabelName();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(48, node3, node45, node73, node81);
        boolean boolean89 = node73.isString();
        int int90 = node73.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(jSType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 100 + "'", int86 == 100);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test20126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20126");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test20127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20127");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        boolean boolean6 = node5.isOnlyModifiesThisCall();
        boolean boolean7 = node5.isSwitch();
        boolean boolean8 = node5.isTrue();
        boolean boolean9 = node5.isFromExterns();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20128");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("(((hi!)))");
        java.lang.String str2 = inputId1.getIdName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(((hi!)))" + "'", str2, "(((hi!)))");
    }

    @Test
    public void test20129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20129");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean23 = node22.isIn();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(38, node3, node20, node22, 39, (-1));
        int int27 = node20.getChildCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = new com.google.javascript.rhino.JSTypeExpression(node20, "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
        com.google.javascript.rhino.Node node30 = jSTypeExpression29.getRoot();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = null;
        int int39 = node37.getIndexOfChild(node38);
        node37.putProp((int) (short) 1, (java.lang.Object) 1);
        node37.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node46 = node33.useSourceInfoIfMissingFromForTree(node37);
        node46.addSuppression("");
        boolean boolean49 = node46.isReturn();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = null;
        node46.setJSDocInfo(jSDocInfo50);
        boolean boolean52 = node46.isIn();
        com.google.javascript.rhino.Node node53 = node46.getLastSibling();
        node53.addSuppression("(OR \n)");
        boolean boolean56 = jSTypeExpression29.equals((java.lang.Object) "(OR \n)");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test20130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20130");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(15, "STRING InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        int int5 = node2.getIntProp((int) (short) 0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test20131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20131");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        node22.setCharno(0);
        boolean boolean25 = node22.isAdd();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node41 = node28.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean42 = node22.hasChild(node32);
        node22.setOptionalArg(true);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = null;
        int int52 = node50.getIndexOfChild(node51);
        node47.addChildToBack(node50);
        node47.setVarArgs(false);
        java.lang.Object obj57 = node47.getProp(52);
        int int58 = node47.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        node47.setJSType(jSType59);
        boolean boolean61 = node47.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node62 = node22.srcref(node47);
        boolean boolean63 = node62.isSyntheticBlock();
        boolean boolean64 = node62.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            node62.setDouble((double) 118884);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  [quoted: 1] [opt_arg: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test20132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20132");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node2.isEmpty();
        com.google.javascript.rhino.Node node24 = node2.cloneNode();
        java.lang.String str25 = node24.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test20133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20133");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        boolean boolean13 = node3.isParamList();
        int int14 = node3.getLineno();
        boolean boolean15 = node3.hasChildren();
        boolean boolean16 = node3.isBlock();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int28 = node19.getSideEffectFlags();
        int int29 = node19.getChildCount();
        boolean boolean30 = node19.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        com.google.javascript.rhino.Node node35 = node33.getParent();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean44 = node38.isDec();
        boolean boolean45 = node38.isHook();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(31, node3, node19, node33, node38);
        boolean boolean47 = node19.isAssign();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        node19.addChildToBack(node50);
        boolean boolean52 = node19.isLocalResultCall();
        boolean boolean53 = node19.isFunction();
        boolean boolean54 = node19.isOptionalArg();
        boolean boolean55 = node19.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test20134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20134");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        boolean boolean16 = node15.wasEmptyNode();
        boolean boolean17 = node15.isNoSideEffectsCall();
        boolean boolean18 = node15.isComma();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.isContinue();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean27 = node26.hasChildren();
        com.google.javascript.rhino.Node node28 = node26.getLastSibling();
        node28.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node33.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean39 = node33.isDec();
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node41 = node21.srcrefTree(node40);
        node41.setCharno(0);
        boolean boolean44 = node41.isAdd();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node51.putProp((int) (short) 1, (java.lang.Object) 1);
        node51.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node60 = node47.useSourceInfoIfMissingFromForTree(node51);
        boolean boolean61 = node41.hasChild(node51);
        com.google.javascript.rhino.Node node62 = node15.copyInformationFromForTree(node41);
        boolean boolean63 = node41.isDo();
        node41.putBooleanProp(51, false);
        boolean boolean67 = node41.isSetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test20135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20135");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.jstype.JSType jSType40 = node2.getJSType();
        com.google.javascript.rhino.Node node41 = node2.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean43 = jSDocInfo42.isNoShadow();
        boolean boolean44 = jSDocInfo42.isConstant();
        java.lang.String str45 = jSDocInfo42.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection46 = jSDocInfo42.getMarkers();
        boolean boolean47 = jSDocInfo42.hasBaseType();
        java.util.Set<java.lang.String> strSet48 = jSDocInfo42.getModifies();
        java.util.Iterator<java.lang.String> strItor49 = strSet48.iterator();
        node2.setDirectives(strSet48);
        boolean boolean51 = node2.isScript();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(markerCollection46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test20136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20136");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        java.lang.String str10 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test20137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20137");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 27);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test20138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20138");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        java.lang.String str4 = jSDocInfo0.getVersion();
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test20139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20139");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(12, node4, 18, 50);
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isOr();
        boolean boolean10 = node7.isOptionalArg();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        node14.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int23 = node14.getSideEffectFlags();
        node14.setSourceEncodedPositionForTree(1);
        boolean boolean26 = node14.isCase();
        boolean boolean27 = node14.isThrow();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean34 = node33.isIn();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(38, node14, node31, node33, 39, (-1));
        int int38 = node31.getChildCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = new com.google.javascript.rhino.JSTypeExpression(node31, "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
        com.google.javascript.rhino.Node node41 = jSTypeExpression40.getRoot();
        com.google.javascript.rhino.Node node42 = node7.srcrefTree(node41);
        com.google.javascript.rhino.Node node43 = node42.getLastSibling();
        boolean boolean44 = node42.isSyntheticBlock();
        boolean boolean45 = node42.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test20140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20140");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.hasBaseType();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfo0.isDefine();
        int int10 = jSDocInfo0.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
    }

    @Test
    public void test20141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20141");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator(0);
        int int96 = typeItor95.nextIndex();
        java.lang.reflect.Type type97 = typeItor95.next();
        java.lang.reflect.Type type98 = typeItor95.next();
        // The following exception was thrown during execution in test generation
        try {
            typeItor95.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(type97);
        org.junit.Assert.assertNotNull(type98);
    }

    @Test
    public void test20142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20142");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        boolean boolean5 = node2.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node6 = node2.getNext();
        node2.setSourceEncodedPositionForTree(45);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = null;
        int int17 = node15.getIndexOfChild(node16);
        node12.addChildToBack(node15);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean20 = jSDocInfo19.isNoShadow();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo19.getParameterNames();
        node12.setJSDocInfo(jSDocInfo19);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node12.getStaticSourceFile();
        node2.putProp((int) '4', (java.lang.Object) node12);
        boolean boolean25 = node12.isLabel();
        boolean boolean26 = node12.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = node29.getParent();
        com.google.javascript.rhino.Node node32 = node29.getAncestor((int) (short) 0);
        node32.putBooleanProp((int) (short) 10, false);
        java.lang.String str36 = node32.toStringTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node32.getJSDocInfo();
        boolean boolean38 = node32.isVarArgs();
        com.google.javascript.rhino.Node node39 = null;
        // The following exception was thrown during execution in test generation
        try {
            node12.replaceChildAfter(node32, node39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "OR \n" + "'", str36, "OR \n");
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test20143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20143");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        com.google.javascript.rhino.Node node11 = typePosition0.getItem();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = null;
        int int17 = node15.getIndexOfChild(node16);
        node15.putProp((int) (short) 1, (java.lang.Object) 1);
        node15.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int24 = node15.getSideEffectFlags();
        node15.setSourceEncodedPositionForTree(1);
        boolean boolean27 = node15.isCase();
        boolean boolean28 = node15.isThrow();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(38, node15, node32, node34, 39, (-1));
        int int39 = node32.getChildCount();
        typePosition0.setItem(node32);
        boolean boolean41 = typePosition0.hasBrackets();
        int int42 = typePosition0.getEndLine();
        int int43 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test20144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20144");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(40, "BITXOR 32\n    OR \n        OR \n", 30, 0);
        boolean boolean5 = node4.isComma();
        boolean boolean6 = node4.isQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test20145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20145");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        java.lang.String str9 = jSDocInfo5.getSourceName();
        java.lang.String str10 = jSDocInfo5.getLendsName();
        java.lang.String str11 = jSDocInfo5.getVersion();
        boolean boolean12 = jSDocInfo5.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo5.getExtendedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection15 = jSDocInfo14.getMarkers();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo14.getParameterNames();
        boolean boolean17 = jSDocInfo14.isDeprecated();
        java.lang.String str18 = jSDocInfo14.getReturnDescription();
        java.lang.String str19 = jSDocInfo14.toString();
        java.lang.String str20 = jSDocInfo14.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = jSDocInfo14.getThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo14.getImplementedInterfaces();
        boolean boolean23 = jSDocInfo14.hasType();
        boolean boolean24 = jSDocInfo14.hasModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection26 = jSDocInfo25.getMarkers();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo25.getParameterNames();
        boolean boolean28 = jSDocInfo25.hasFileOverview();
        boolean boolean29 = jSDocInfo25.isConstructor();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        boolean boolean34 = node32.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList37 = jSDocInfo35.getImplementedInterfaces();
        node32.setJSDocInfo(jSDocInfo35);
        java.lang.String str39 = jSDocInfo35.getMeaning();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean41 = jSDocInfo40.isNoShadow();
        boolean boolean42 = jSDocInfo40.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo40.getParameterType("hi!");
        jSDocInfo40.setLicense("Unknown class name");
        java.lang.String str47 = jSDocInfo40.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo40.getReturnType();
        int int49 = jSDocInfo40.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean51 = jSDocInfo50.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList52 = jSDocInfo50.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = jSDocInfo50.getTemplateTypeNames();
        int int54 = jSDocInfo50.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray61 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        java.util.Iterator<java.lang.String> strItor64 = strSet62.iterator();
        strSet62.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean67 = strSet62.equals((java.lang.Object) visibility66);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility70 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility71 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray77 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        java.util.Iterator<java.lang.String> strItor80 = strSet78.iterator();
        strSet78.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility82 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean83 = strSet78.equals((java.lang.Object) visibility82);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList84 = com.google.common.collect.ImmutableList.of(visibility55, visibility66, visibility68, visibility69, visibility70, visibility71, visibility82);
        jSDocInfo50.setVisibility(visibility66);
        jSDocInfo40.setVisibility(visibility66);
        jSDocInfo35.setVisibility(visibility66);
        jSDocInfo25.setVisibility(visibility66);
        jSDocInfo14.setVisibility(visibility66);
        jSDocInfo5.setVisibility(visibility66);
        int int91 = jSDocInfo5.getParameterCount();
        boolean boolean92 = jSDocInfo5.isJavaDispatch();
        boolean boolean93 = jSDocInfo5.isDeprecated();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNotNull(markerCollection15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JSDocInfo" + "'", str19, "JSDocInfo");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(jSTypeExpression21);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(markerCollection26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList37);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList52);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility69 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility69.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility70 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility70.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility71 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility71.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertTrue("'" + visibility82 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility82.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(visibilityList84);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test20146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20146");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20147");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean6 = jSDocInfo0.hasParameter("Not declared as a constructor");
        boolean boolean7 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        boolean boolean11 = jSDocInfo0.isExterns();
        boolean boolean12 = jSDocInfo0.hasFileOverview();
        boolean boolean13 = jSDocInfo0.hasModifies();
        boolean boolean14 = jSDocInfo0.isExpose();
        java.lang.String str15 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test20148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20148");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int22 = node13.getSideEffectFlags();
        boolean boolean23 = node13.isAssign();
        typePosition7.setItem(node13);
        com.google.javascript.rhino.Node node25 = node13.cloneNode();
        int int26 = node25.getType();
        boolean boolean27 = node25.isCall();
        boolean boolean28 = node25.isNE();
        boolean boolean29 = node25.isQualifiedName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test20149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20149");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        boolean boolean12 = node2.getBooleanProp(48);
        boolean boolean13 = node2.isLabelName();
        node2.setSourceFileForTesting("(java.io.IOException: ((hi!)))");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean19 = node18.hasChildren();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = null;
        int int24 = node22.getIndexOfChild(node23);
        node22.putProp((int) (short) 1, (java.lang.Object) 1);
        node22.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node31 = node18.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        node22.setStaticSourceFile(staticSourceFile32);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = node22.getStaticSourceFile();
        com.google.javascript.rhino.Node node35 = node22.getLastSibling();
        boolean boolean36 = node22.isVoid();
        boolean boolean37 = node22.isStringKey();
        boolean boolean38 = node22.isReturn();
        boolean boolean39 = node22.isEmpty();
        boolean boolean40 = node2.hasChild(node22);
        boolean boolean41 = node2.isNoSideEffectsCall();
        boolean boolean42 = node2.isBreak();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(staticSourceFile34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test20150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20150");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(hi!)");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (short) 1, 16);
        com.google.javascript.rhino.Node node6 = node1.useSourceInfoIfMissingFrom(node5);
        node1.setString("java.io.IOException: DELPROP OR ");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node1.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
    }

    @Test
    public void test20151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20151");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        java.lang.String str3 = jSDocInfo0.getFileOverview();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("Node tree inequality:\nTree1:\nOR  [slash_v: 2]\n    OR \n\n\nTree2:\nSTRING (hi!)\n\n\nSubtree1: OR  [slash_v: 2]\n    OR \n\n\nSubtree2: STRING (hi!)\n");
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test20152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20152");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test20153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20153");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        boolean boolean22 = node2.isBreak();
        boolean boolean23 = node2.isDo();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = node2.useSourceInfoFromForTree(node27);
        boolean boolean29 = node27.isCatch();
        int int30 = node27.getSourceOffset();
        node27.removeProp(29);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node27.getAncestors();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = null;
        int int43 = node41.getIndexOfChild(node42);
        node41.putProp((int) (short) 1, (java.lang.Object) 1);
        node41.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node50 = node37.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean54 = node53.isContinue();
        boolean boolean56 = node53.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(42, node50, node53, 42, (int) (byte) 100);
        boolean boolean60 = node53.isBlock();
        boolean boolean61 = node27.hasChild(node53);
        com.google.javascript.rhino.Node node62 = node53.detachFromParent();
        java.lang.String str63 = node53.getQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test20154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20154");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        boolean boolean9 = node2.isBlock();
        com.google.javascript.rhino.Node node10 = node2.getLastSibling();
        java.lang.String str11 = node10.getSourceFileName();
        boolean boolean12 = node10.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20155");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        com.google.javascript.rhino.Node node15 = node2.getFirstChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.hasChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = null;
        int int25 = node23.getIndexOfChild(node24);
        node23.putProp((int) (short) 1, (java.lang.Object) 1);
        node23.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node32 = node19.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean36 = node35.isContinue();
        boolean boolean38 = node35.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(42, node32, node35, 42, (int) (byte) 100);
        boolean boolean42 = node32.isNE();
        boolean boolean43 = node32.hasChildren();
        com.google.javascript.rhino.Node node44 = node2.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node32.isEquivalentToTyped(node47);
        boolean boolean49 = node47.hasMoreThanOneChild();
        boolean boolean50 = node47.isNot();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test20156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20156");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.lang.String[] strArray12 = new java.lang.String[] { "Not declared as a type name", "(hi!)", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.String[] strArray24 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.Object[] objArray27 = strSet25.toArray();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList37 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet6, (java.util.AbstractSet<java.lang.String>) strSet13, (java.util.AbstractSet<java.lang.String>) strSet25, (java.util.AbstractSet<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean41 = node40.isContinue();
        boolean boolean42 = node40.isNE();
        java.lang.String str43 = node40.getString();
        boolean boolean44 = strSet6.contains((java.lang.Object) node40);
        boolean boolean45 = node40.isThis();
        boolean boolean46 = node40.isIn();
        // The following exception was thrown during execution in test generation
        try {
            int int48 = node40.getExistingIntProp(204810);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 204810");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strSetList37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test20157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20157");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        node16.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node25 = node12.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.isContinue();
        boolean boolean31 = node28.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(42, node25, node28, 42, (int) (byte) 100);
        boolean boolean35 = node25.isNE();
        int int36 = node2.getIndexOfChild(node25);
        java.lang.String str37 = node25.toStringTree();
        boolean boolean38 = node25.isNot();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = null;
        int int44 = node42.getIndexOfChild(node43);
        node42.putProp((int) (short) 1, (java.lang.Object) 1);
        node42.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int51 = node42.getSideEffectFlags();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = null;
        int int59 = node57.getIndexOfChild(node58);
        node54.addChildToBack(node57);
        com.google.javascript.rhino.Node node61 = node54.getNext();
        com.google.javascript.rhino.Node node62 = node42.useSourceInfoFromForTree(node54);
        boolean boolean63 = node54.isNot();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(10, node54, (int) ' ', (int) '4');
        boolean boolean67 = node66.isQualifiedName();
        boolean boolean68 = node66.isBlock();
        java.lang.String str69 = node66.toStringTree();
        com.google.javascript.rhino.Node node70 = node25.copyInformationFromForTree(node66);
        com.google.javascript.rhino.Node[] nodeArray74 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(40, nodeArray74);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(48, nodeArray74);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray74);
        boolean boolean78 = node77.isReturn();
        node77.setCharno((int) '#');
        int int81 = node77.getSourceOffset();
        com.google.javascript.rhino.Node node82 = node70.useSourceInfoIfMissingFrom(node77);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder83 = node82.new FileLevelJsDocBuilder();
        node82.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "OR \n" + "'", str37, "OR \n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "BITXOR 32\n    OR \n        OR \n" + "'", str69, "BITXOR 32\n    OR \n        OR \n");
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(nodeArray74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test20158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20158");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isDefine();
        boolean boolean6 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test20159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20159");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(12, node4, 18, 50);
        node7.setSourceFileForTesting("BITXOR (java.io.IOException)");
        int int10 = node7.getLength();
        com.google.javascript.rhino.Node node11 = node7.getLastSibling();
        boolean boolean12 = node7.isOnlyModifiesThisCall();
        boolean boolean13 = node7.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20160");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node6.getLastSibling();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("");
        boolean boolean22 = node21.isNot();
        com.google.javascript.rhino.Node node23 = node19.copyInformationFrom(node21);
        boolean boolean24 = node19.isCall();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = null;
        int int32 = node30.getIndexOfChild(node31);
        node27.addChildToBack(node30);
        boolean boolean34 = node30.isTypeOf();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isContinue();
        node37.setQuotedString();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        com.google.javascript.rhino.Node node44 = node42.getLastSibling();
        node44.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node49.getIndexOfChild(node50);
        node49.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean55 = node49.isDec();
        com.google.javascript.rhino.Node node56 = node44.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node57 = node37.srcrefTree(node56);
        node57.setCharno(0);
        node30.addChildrenToBack(node57);
        boolean boolean61 = node57.isString();
        boolean boolean62 = node57.isGetProp();
        boolean boolean63 = node57.isOptionalArg();
        boolean boolean64 = node57.isIn();
        com.google.javascript.rhino.Node node65 = node19.srcref(node57);
        boolean boolean66 = node57.isVar();
        // The following exception was thrown during execution in test generation
        try {
            int int68 = node57.getExistingIntProp(38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 38");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test20161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20161");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getReturnType();
        boolean boolean14 = jSDocInfo9.isNoShadow();
        java.lang.String str15 = jSDocInfo9.getOriginalCommentString();
        boolean boolean16 = jSDocInfo9.isNoAlias();
        boolean boolean18 = jSDocInfo9.hasParameterType("InputId: Named type with empty name component");
        java.util.Collection<java.lang.String> strCollection19 = jSDocInfo9.getAuthors();
        java.lang.String str20 = jSDocInfo9.getLicense();
        java.lang.String str21 = jSDocInfo9.getMeaning();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strCollection19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test20162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20162");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(42, 43, 45);
        node3.setSourceEncodedPositionForTree(100);
        node3.addSuppression("(BITXOR (java.io.IOException))");
        node3.setIsSyntheticBlock(false);
    }

    @Test
    public void test20163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20163");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(4095, 50, 47);
        boolean boolean5 = node4.isHook();
        int int6 = node4.getType();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = null;
        int int12 = node10.getIndexOfChild(node11);
        node10.putProp((int) (short) 1, (java.lang.Object) 1);
        node10.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int19 = node10.getSideEffectFlags();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node22.addChildToBack(node25);
        int int29 = node10.getIndexOfChild(node22);
        boolean boolean30 = node22.isVarArgs();
        com.google.javascript.rhino.Node[] nodeArray31 = new com.google.javascript.rhino.Node[] { node22 };
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(39, nodeArray31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(36, "JSDocInfo", 2, 0);
        boolean boolean38 = node37.isObjectLit();
        boolean boolean39 = node37.isCall();
        node32.addChildToFront(node37);
        node4.addChildToFront(node32);
        boolean boolean42 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = null;
        int int47 = node45.getIndexOfChild(node46);
        node45.putProp((int) (short) 1, (java.lang.Object) 1);
        node45.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int54 = node45.getSideEffectFlags();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = null;
        int int62 = node60.getIndexOfChild(node61);
        node57.addChildToBack(node60);
        int int64 = node45.getIndexOfChild(node57);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(42, node4, node57, 12289, 38);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4095 + "'", int6 == 4095);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeArray31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test20164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20164");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue2.and(ternaryValue4);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue6.and(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue2.or(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue1.and(ternaryValue6);
        java.lang.String str12 = ternaryValue11.toString();
        boolean boolean14 = ternaryValue11.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "false" + "'", str12, "false");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test20165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20165");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(44, "java.io.IOException: OR \n", 54, 4);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = node7.getParent();
        com.google.javascript.rhino.Node node10 = node7.getAncestor((int) (short) 0);
        node10.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node10.getJsDocBuilderForNode();
        node10.setSourceFileForTesting("JSDocInfo");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean19 = node18.isContinue();
        int int20 = node18.getSourcePosition();
        com.google.javascript.rhino.Node node21 = node18.removeChildren();
        boolean boolean22 = node10.hasChild(node18);
        boolean boolean23 = node18.isQuotedString();
        boolean boolean24 = node18.isObjectLit();
        node18.putProp((int) (short) 10, (java.lang.Object) "OR ");
        java.lang.String str28 = node18.getSourceFileName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        int int34 = node31.getLength();
        com.google.javascript.rhino.Node node35 = node18.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean36 = node4.isEquivalentTo(node35);
        boolean boolean37 = node35.isQualifiedName();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node40.siblings();
        boolean boolean42 = node40.isAssign();
        node40.setSourceEncodedPosition(46);
        boolean boolean45 = node40.isDefaultCase();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node48.putProp((int) (short) 1, (java.lang.Object) 1);
        node48.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int57 = node48.getSideEffectFlags();
        int int58 = node48.getChildCount();
        boolean boolean59 = node48.isIf();
        int int60 = node48.getSourceOffset();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean64 = node63.isContinue();
        int int65 = node63.getSourcePosition();
        boolean boolean66 = node63.isLabelName();
        node63.setSourceFileForTesting("OR ");
        boolean boolean69 = node63.isParamList();
        com.google.javascript.rhino.Node node70 = node48.useSourceInfoIfMissingFrom(node63);
        boolean boolean71 = node63.isGetterDef();
        com.google.javascript.rhino.Node node72 = node40.copyInformationFromForTree(node63);
        com.google.javascript.rhino.Node node73 = node35.useSourceInfoFromForTree(node40);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test20166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20166");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(stringPosition6);
    }

    @Test
    public void test20167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20167");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node5.isTypeOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.isContinue();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        node19.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean30 = node24.isDec();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = node12.srcrefTree(node31);
        node32.setCharno(0);
        node5.addChildrenToBack(node32);
        boolean boolean36 = node32.isString();
        boolean boolean37 = node32.isVar();
        java.lang.Object obj39 = node32.getProp(38);
        java.lang.String str40 = node32.getString();
        com.google.javascript.rhino.Node node41 = node32.cloneTree();
        node41.removeProp((int) (short) 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(36, "JSDocInfo", 2, 0);
        boolean boolean49 = node48.isObjectLit();
        boolean boolean50 = node48.isFor();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = null;
        int int55 = node53.getIndexOfChild(node54);
        node53.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean59 = node53.isDec();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = null;
        int int64 = node62.getIndexOfChild(node63);
        node62.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean68 = node62.isDec();
        boolean boolean69 = node53.hasChild(node62);
        boolean boolean70 = node53.isRegExp();
        boolean boolean71 = node53.isString();
        boolean boolean72 = node53.isExprResult();
        node48.addChildToFront(node53);
        boolean boolean74 = node48.isInc();
        boolean boolean75 = node48.hasChildren();
        node48.setSourceEncodedPositionForTree(29);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node78 = node41.getChildBefore(node48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test20168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20168");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean5 = node4.hasChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node8.putProp((int) (short) 1, (java.lang.Object) 1);
        node8.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node17 = node4.useSourceInfoIfMissingFromForTree(node8);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean21 = node20.isContinue();
        boolean boolean23 = node20.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(42, node17, node20, 42, (int) (byte) 100);
        com.google.javascript.rhino.Node node27 = node26.getNext();
        boolean boolean28 = node26.isGetProp();
        boolean boolean29 = node26.isStringKey();
        int int30 = node26.getType();
        boolean boolean31 = node26.isObjectLit();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = null;
        int int36 = node34.getIndexOfChild(node35);
        node34.putProp((int) (short) 1, (java.lang.Object) 1);
        node34.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int43 = node34.getSideEffectFlags();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node49.getIndexOfChild(node50);
        node46.addChildToBack(node49);
        int int53 = node34.getIndexOfChild(node46);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean57 = node56.hasChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = null;
        int int62 = node60.getIndexOfChild(node61);
        node60.putProp((int) (short) 1, (java.lang.Object) 1);
        node60.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node69 = node56.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean70 = node69.wasEmptyNode();
        com.google.javascript.rhino.Node node71 = node34.useSourceInfoFrom(node69);
        java.lang.String str75 = node69.toString(false, false, true);
        boolean boolean77 = node69.getBooleanProp((int) (short) 100);
        com.google.javascript.rhino.Node node78 = node26.useSourceInfoFromForTree(node69);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(32, node26);
        com.google.javascript.rhino.jstype.JSType jSType80 = node79.getJSType();
        boolean boolean81 = node79.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 42 + "'", int30 == 42);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "OR " + "'", str75, "OR ");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test20169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20169");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        boolean boolean19 = node6.isCatch();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node6.setJSType(jSType20);
        boolean boolean22 = node6.isCase();
        int int23 = node6.getType();
        boolean boolean24 = node6.isBlock();
        boolean boolean25 = node6.isSetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test20170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20170");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        boolean boolean95 = typeList91.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList91.reverse();
        int int97 = typeList91.size();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList98 = typeList91.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream99 = typeList98.parallelStream();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 18 + "'", int97 == 18);
        org.junit.Assert.assertNotNull(typeList98);
        org.junit.Assert.assertNotNull(typeStream99);
    }

    @Test
    public void test20171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20171");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.isExport();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getParameterNames();
        boolean boolean8 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test20172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20172");
        java.io.IOException iOException3 = new java.io.IOException("(hi!)");
        java.io.IOException iOException4 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException3);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList5 = com.google.common.collect.ImmutableList.of(iOException3);
        java.io.IOException iOException6 = new java.io.IOException("JSDocInfo", (java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray7 = iOException6.getSuppressed();
        java.lang.String str8 = iOException6.toString();
        org.junit.Assert.assertNotNull(iOExceptionList5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.io.IOException: JSDocInfo" + "'", str8, "java.io.IOException: JSDocInfo");
    }

    @Test
    public void test20173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20173");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        int int4 = node2.getSourcePosition();
        boolean boolean5 = node2.isLabelName();
        node2.setSourceFileForTesting("OR ");
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node2.getAncestors();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator9 = ancestorIterable8.spliterator();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(47, (int) (byte) 100, 45);
        boolean boolean14 = node13.isExprResult();
        int int15 = node13.getSourceOffset();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node13.getAncestors();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable17 = node13.getAncestors();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.AncestorIterable> ancestorIterableList18 = com.google.common.collect.ImmutableList.of(ancestorIterable8, ancestorIterable17);
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator19 = ancestorIterable8.spliterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor20 = ancestorIterable8.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertNotNull(ancestorIterable17);
        org.junit.Assert.assertNotNull(ancestorIterableList18);
        org.junit.Assert.assertNotNull(nodeSpliterator19);
        org.junit.Assert.assertNotNull(nodeItor20);
    }

    @Test
    public void test20174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20174");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int32 = typePosition31.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int36 = typePosition35.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int39 = typePosition38.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList41 = com.google.common.collect.ImmutableList.of(typePosition31, typePosition33, typePosition35, typePosition37, typePosition38, typePosition40);
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder42 = nodeSourcePositionBuilder30.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition40);
        int int43 = typePosition40.getEndLine();
        int int44 = typePosition40.getEndLine();
        int int45 = typePosition40.getEndLine();
        int int46 = typePosition40.getPositionOnEndLine();
        int int47 = typePosition40.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(typePositionList41);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test20175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20175");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getThisType();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test20176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20176");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((-1), nodeArray4, 1, (int) '#');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(49, nodeArray4, 48, (int) (byte) 0);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(48, nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(41, nodeArray4, (int) (short) 10, 30);
        boolean boolean15 = node14.isObjectLit();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test20177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20177");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(12, node4, 18, 50);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node10.addChildToBack(node13);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isNoShadow();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo17.getParameterNames();
        node10.setJSDocInfo(jSDocInfo17);
        java.lang.String str21 = node10.getString();
        boolean boolean22 = node10.isAnd();
        boolean boolean23 = node4.isEquivalentTo(node10);
        boolean boolean24 = node4.isWhile();
        int int26 = node4.getIntProp(10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection28 = jSDocInfo27.getMarkers();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo27.getParameterNames();
        boolean boolean30 = jSDocInfo27.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo27.getThisType();
        boolean boolean32 = jSDocInfo27.containsDeclaration();
        boolean boolean33 = jSDocInfo27.isExport();
        node4.setJSDocInfo(jSDocInfo27);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((-1), nodeArray38, 1, (int) '#');
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(49, nodeArray38, 48, (int) (byte) 0);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(45, nodeArray38, 40, (int) 'a');
        boolean boolean48 = node47.isReturn();
        boolean boolean49 = node47.isFalse();
        int int50 = node47.getSideEffectFlags();
        com.google.javascript.rhino.Node node51 = node4.srcrefTree(node47);
        node47.setSourceFileForTesting("STRING Named type with empty name component\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(markerCollection28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test20178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20178");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test20179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20179");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean3 = jSDocInfo0.isNoSideEffects();
        java.lang.String str4 = jSDocInfo0.getLicense();
        int int5 = jSDocInfo0.getParameterCount();
        boolean boolean6 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(true);
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20180");
        java.io.IOException iOException2 = new java.io.IOException("(hi!)");
        java.io.IOException iOException3 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException2);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException5);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test20181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20181");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node7.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node7.getLastSibling();
        boolean boolean21 = node7.isVoid();
        boolean boolean22 = node7.isNot();
        boolean boolean23 = node7.isOr();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean27 = node26.hasChildren();
        com.google.javascript.rhino.Node node28 = node26.getLastSibling();
        boolean boolean29 = node28.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        boolean boolean34 = node32.isAssignAdd();
        boolean boolean35 = node32.isQuotedString();
        node32.setCharno(36);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(0, node7, node28, node32);
        boolean boolean39 = node28.isExprResult();
        boolean boolean40 = node28.isTry();
        boolean boolean41 = node28.isAssignAdd();
        com.google.javascript.rhino.Node node42 = node28.removeChildren();
        boolean boolean43 = node28.isGetElem();
        boolean boolean44 = node28.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test20182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20182");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getReferences();
        jSDocInfo0.setLicense("OR  [length: 32]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
    }

    @Test
    public void test20183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20183");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10L);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node4.addChildToBack(node7);
        com.google.javascript.rhino.Node node11 = node4.getNext();
        boolean boolean12 = node4.isFalse();
        boolean boolean13 = node1.isEquivalentToTyped(node4);
        boolean boolean14 = node1.isIn();
        int int15 = node1.getSourceOffset();
        java.lang.String str16 = node1.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 10.0\n" + "'", str16, "NUMBER 10.0\n");
    }

    @Test
    public void test20184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20184");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "(java.io.IOException: JSDocInfo)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20185");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getReturnType();
        int int14 = jSDocInfo9.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo9.getTypedefType();
        boolean boolean17 = jSDocInfo9.hasParameterType("Unknown class name");
        int int18 = jSDocInfo9.getParameterCount();
        boolean boolean20 = jSDocInfo9.hasParameterType("GETELEM 0");
        boolean boolean21 = jSDocInfo9.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo9.getThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = null;
        jSDocInfo9.setVisibility(visibility23);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
    }

    @Test
    public void test20186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20186");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        node5.setSourceFileForTesting("JSDocInfo");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean14 = node13.isContinue();
        int int15 = node13.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node13.removeChildren();
        boolean boolean17 = node5.hasChild(node13);
        boolean boolean18 = node13.isQuotedString();
        boolean boolean19 = node13.isObjectLit();
        node13.putProp((int) (short) 10, (java.lang.Object) "OR ");
        int int23 = node13.getLineno();
        int int24 = node13.getChildCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node31.putProp((int) (short) 1, (java.lang.Object) 1);
        node31.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node40 = node27.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean41 = node40.wasEmptyNode();
        boolean boolean42 = node40.isNoSideEffectsCall();
        boolean boolean43 = node40.isComma();
        com.google.javascript.rhino.Node node44 = node13.copyInformationFromForTree(node40);
        int int45 = node40.getLineno();
        boolean boolean46 = node40.isDec();
        boolean boolean47 = node40.isNull();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node49 = node40.getChildAtIndex(12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test20187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20187");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.util.Iterator<java.lang.reflect.Type> typeItor93 = typeList91.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.reverse();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream95 = typeList94.stream();
        java.lang.Object[] objArray96 = typeList94.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor97 = typeList94.iterator();
        int int98 = typeList94.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeStream95);
        org.junit.Assert.assertNotNull(objArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray96), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray96), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 18 + "'", int98 == 18);
    }

    @Test
    public void test20188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20188");
        java.io.IOException iOException2 = new java.io.IOException("(hi!)");
        java.io.IOException iOException3 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("this");
        iOException3.addSuppressed((java.lang.Throwable) iOException5);
        java.lang.Throwable[] throwableArray7 = iOException5.getSuppressed();
        java.lang.String str8 = iOException5.toString();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.io.IOException: this" + "'", str8, "java.io.IOException: this");
    }

    @Test
    public void test20189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20189");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "hi!", 38, 10);
        java.lang.String str5 = node4.getString();
        int int6 = node4.getLength();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.isContinue();
        node9.setQuotedString();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean15 = node14.hasChildren();
        com.google.javascript.rhino.Node node16 = node14.getLastSibling();
        node16.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node21.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean27 = node21.isDec();
        com.google.javascript.rhino.Node node28 = node16.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node29 = node9.srcrefTree(node28);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node28.getAncestors();
        boolean boolean31 = node28.isIn();
        com.google.javascript.rhino.Node node32 = node4.clonePropsFrom(node28);
        boolean boolean33 = node32.isWhile();
        com.google.javascript.rhino.InputId inputId34 = node32.getInputId();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(inputId34);
    }

    @Test
    public void test20190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20190");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        com.google.javascript.rhino.Node node22 = node15.getNext();
        com.google.javascript.rhino.Node node23 = node3.useSourceInfoFromForTree(node15);
        boolean boolean24 = node3.isDebugger();
        java.lang.String str25 = node3.getSourceFileName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 0, node3, (int) 'a', 12);
        boolean boolean29 = node28.isFalse();
        com.google.javascript.rhino.Node node30 = node28.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test20191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20191");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        boolean boolean7 = jSDocInfo0.hasThisType();
        jSDocInfo0.addSuppression("");
        java.lang.String str10 = jSDocInfo0.getVersion();
        boolean boolean12 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nOR \n\n\nTree2:\nOR \n    REGEXP 100\n\n\nSubtree1: OR \n\n\nSubtree2: OR \n    REGEXP 100\n");
        java.lang.String str13 = jSDocInfo0.getFileOverview();
        java.lang.String str14 = jSDocInfo0.getLendsName();
        boolean boolean15 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test20192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20192");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray11 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.util.Iterator<java.lang.String> strItor14 = strSet12.iterator();
        strSet12.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean17 = strSet12.equals((java.lang.Object) visibility16);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray27 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        java.util.Iterator<java.lang.String> strItor30 = strSet28.iterator();
        strSet28.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean33 = strSet28.equals((java.lang.Object) visibility32);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList34 = com.google.common.collect.ImmutableList.of(visibility5, visibility16, visibility18, visibility19, visibility20, visibility21, visibility32);
        jSDocInfo0.setVisibility(visibility18);
        int int36 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList37 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(visibilityList34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList37);
    }

    @Test
    public void test20193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20193");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isIn();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean11 = node10.hasChildren();
        com.google.javascript.rhino.Node node12 = node10.getLastSibling();
        boolean boolean13 = node12.isOr();
        boolean boolean14 = node12.isBreak();
        boolean boolean15 = node12.isNull();
        node12.setQuotedString();
        boolean boolean17 = node12.isGetterDef();
        boolean boolean18 = node12.isRegExp();
        boolean boolean19 = node12.isName();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node12.getJsDocBuilderForNode();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
    }

    @Test
    public void test20194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20194");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        java.lang.String str9 = node2.getString();
        node2.setSourceFileForTesting("hi!");
        boolean boolean12 = node2.isRegExp();
        node2.removeProp((-2147483648));
        boolean boolean15 = node2.isEmpty();
        java.util.Set<java.lang.String> strSet16 = node2.getDirectives();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(40, nodeArray23);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(48, nodeArray23);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) '#', nodeArray23);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(0, nodeArray23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(16, nodeArray23);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray23);
        com.google.javascript.rhino.Node node30 = node2.srcrefTree(node29);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("InputId: hi!");
        com.google.javascript.rhino.Node node33 = node30.useSourceInfoFromForTree(node32);
        com.google.javascript.rhino.Node node34 = node33.getParent();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test20195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20195");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        node2.setString("");
        com.google.javascript.rhino.Node node13 = node2.cloneNode();
        boolean boolean14 = node13.isTrue();
        int int15 = node13.getLength();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test20196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20196");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        boolean boolean9 = node5.isTypeOf();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.isContinue();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        node19.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean30 = node24.isDec();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = node12.srcrefTree(node31);
        node32.setCharno(0);
        node5.addChildrenToBack(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        node38.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int47 = node38.getSideEffectFlags();
        boolean boolean48 = node38.isExprResult();
        boolean boolean49 = node38.wasEmptyNode();
        com.google.javascript.rhino.Node node50 = node32.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(53, "Named type with empty name component");
        com.google.javascript.rhino.Node node54 = node50.srcrefTree(node53);
        node54.detachChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test20197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20197");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        node5.setSourceFileForTesting("JSDocInfo");
        boolean boolean11 = node5.isHook();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean15 = node14.hasChildren();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node18.putProp((int) (short) 1, (java.lang.Object) 1);
        node18.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node27 = node14.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node18.setStaticSourceFile(staticSourceFile28);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node18.cloneTree();
        node5.addChildrenToFront(node31);
        boolean boolean33 = node5.isLocalResultCall();
        boolean boolean34 = node5.isAdd();
        com.google.javascript.rhino.Node node35 = node5.cloneNode();
        com.google.javascript.rhino.Node node36 = node5.removeChildren();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test20198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20198");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        int int5 = stringPosition0.getEndLine();
        stringPosition0.setItem("java.io.IOException: java.io.IOException: (hi!)");
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnEndLine();
        int int10 = stringPosition0.getEndLine();
        int int11 = stringPosition0.getEndLine();
        java.lang.String str12 = stringPosition0.getItem();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.io.IOException: java.io.IOException: (hi!)" + "'", str12, "java.io.IOException: java.io.IOException: (hi!)");
    }

    @Test
    public void test20199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20199");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        stringPosition0.setItem("((([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])))");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test20200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20200");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue0.and(ternaryValue2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str6 = ternaryValue5.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue7.and(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue11.and(ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue7.or(ternaryValue11);
        boolean boolean17 = ternaryValue7.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue5.xor(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue2.and(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue20.and(ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue20.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue20.or(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue19.and(ternaryValue20);
        boolean boolean29 = ternaryValue19.toBoolean(false);
        java.lang.String str30 = ternaryValue19.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue32.and(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue31.xor(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue33.not();
        boolean boolean38 = ternaryValue36.toBoolean(false);
        boolean boolean40 = ternaryValue36.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue41.and(ternaryValue42);
        boolean boolean45 = ternaryValue42.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue42.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue36.xor(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue49.and(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue48.xor(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue50.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue55.and(ternaryValue57);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue59.and(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue55.or(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue54.xor(ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = ternaryValue59.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue50.or(ternaryValue65);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue50.not();
        java.lang.String str68 = ternaryValue67.toString();
        boolean boolean70 = ternaryValue67.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue42.and(ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue73.and(ternaryValue75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = ternaryValue73.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue72.or(ternaryValue77);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue82 = ternaryValue80.and(ternaryValue81);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = ternaryValue79.xor(ternaryValue81);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue84 = ternaryValue78.or(ternaryValue79);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = ternaryValue78.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = ternaryValue71.and(ternaryValue85);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue87 = ternaryValue19.or(ternaryValue86);
        boolean boolean89 = ternaryValue86.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "false" + "'", str6, "false");
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "false" + "'", str30, "false");
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "true" + "'", str68, "true");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValue82);
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue84);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(ternaryValue87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test20201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20201");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        java.lang.String str9 = jSDocInfo5.getSourceName();
        java.lang.String str10 = jSDocInfo5.getLendsName();
        java.lang.String str11 = jSDocInfo5.getVersion();
        boolean boolean12 = jSDocInfo5.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo5.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo5.getModifies();
        strSet14.clear();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node18.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean24 = node18.isDec();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = null;
        int int29 = node27.getIndexOfChild(node28);
        node27.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean33 = node27.isDec();
        boolean boolean34 = node18.hasChild(node27);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node27.setStaticSourceFile(staticSourceFile35);
        java.lang.Object obj38 = node27.getProp(4095);
        boolean boolean39 = strSet14.equals((java.lang.Object) 4095);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test20202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20202");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        jSDocInfo0.setLicense("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility6);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection8 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        int int12 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNotNull(markerCollection8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test20203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20203");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean9 = node8.hasChildren();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = null;
        int int14 = node12.getIndexOfChild(node13);
        node12.putProp((int) (short) 1, (java.lang.Object) 1);
        node12.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node21 = node8.useSourceInfoIfMissingFromForTree(node12);
        node21.addSuppression("");
        boolean boolean24 = node21.isReturn();
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = null;
        node21.setJSDocInfo(jSDocInfo25);
        boolean boolean27 = node21.isIn();
        boolean boolean28 = node21.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.isContinue();
        boolean boolean34 = node31.getBooleanProp((int) (byte) 100);
        boolean boolean35 = node31.isString();
        boolean boolean36 = node31.isNoSideEffectsCall();
        boolean boolean37 = node31.isDebugger();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(42, node21, node31, 49, 44);
        com.google.javascript.rhino.Node node41 = node2.copyInformationFromForTree(node21);
        boolean boolean42 = node21.isHook();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node45.addChildToBack(node48);
        java.util.Set<java.lang.String> strSet52 = node48.getDirectives();
        boolean boolean53 = node48.isFor();
        boolean boolean54 = node48.isIf();
        node48.addSuppression("java.io.IOException: ((hi!))");
        com.google.javascript.rhino.Node node57 = node21.clonePropsFrom(node48);
        boolean boolean58 = node48.isFalse();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test20204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20204");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        boolean boolean5 = node2.isThrow();
        boolean boolean6 = node2.isInc();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(47, (int) (byte) 100, 45);
        com.google.javascript.rhino.Node node11 = node2.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean12 = node11.isGetElem();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20205");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(54, (int) '4', 47);
        boolean boolean4 = node3.isIn();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test20206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20206");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node2.siblings();
        boolean boolean4 = node2.isAssign();
        com.google.javascript.rhino.Node node5 = node2.cloneTree();
        java.lang.String str6 = node5.getQualifiedName();
        boolean boolean7 = node5.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test20207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20207");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node2.getAncestors();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = node19.getParent();
        boolean boolean21 = node19.isArrayLit();
        boolean boolean22 = node19.isThrow();
        boolean boolean23 = node19.isInstanceOf();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node26.addChildToBack(node29);
        com.google.javascript.rhino.Node node33 = node26.getNext();
        boolean boolean34 = node26.isFalse();
        node19.addChildrenToBack(node26);
        boolean boolean36 = node26.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node26.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile38 = node26.getStaticSourceFile();
        boolean boolean39 = node26.isNot();
        com.google.javascript.rhino.Node node40 = node2.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = null;
        int int48 = node46.getIndexOfChild(node47);
        node43.addChildToBack(node46);
        java.util.Set<java.lang.String> strSet50 = node46.getDirectives();
        node46.setOptionalArg(false);
        boolean boolean53 = node46.isLabel();
        com.google.javascript.rhino.Node node54 = node26.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean60 = node59.isDo();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean65 = node64.hasChildren();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = null;
        int int70 = node68.getIndexOfChild(node69);
        node68.putProp((int) (short) 1, (java.lang.Object) 1);
        node68.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node77 = node64.useSourceInfoIfMissingFromForTree(node68);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean81 = node80.isContinue();
        boolean boolean83 = node80.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(42, node77, node80, 42, (int) (byte) 100);
        node80.setOptionalArg(false);
        boolean boolean89 = node80.hasChildren();
        com.google.javascript.rhino.Node node90 = node59.copyInformationFrom(node80);
        boolean boolean91 = node90.isNumber();
        node54.putProp(18, (java.lang.Object) node90);
        java.util.Set<java.lang.String> strSet93 = node54.getDirectives();
        node54.addSuppression("((((hi!))))");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(staticSourceFile38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(strSet50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(strSet93);
    }

    @Test
    public void test20208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20208");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        boolean boolean12 = node2.isParamList();
        node2.setVarArgs(true);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node18.putProp((int) (short) 1, (java.lang.Object) 1);
        node18.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int27 = node18.getSideEffectFlags();
        boolean boolean28 = node18.isParamList();
        int int29 = node18.getLineno();
        boolean boolean30 = node18.hasChildren();
        boolean boolean31 = node18.isBlock();
        int int32 = node18.getCharno();
        node2.putProp(40, (java.lang.Object) node18);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean37 = node36.isContinue();
        boolean boolean38 = node36.isNE();
        boolean boolean39 = node36.isVoid();
        boolean boolean40 = node36.isArrayLit();
        com.google.javascript.rhino.Node node41 = node2.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean45 = node44.hasChildren();
        com.google.javascript.rhino.Node node46 = node44.getLastSibling();
        node46.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node51.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean57 = node51.isDec();
        com.google.javascript.rhino.Node node58 = node46.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        boolean boolean63 = node62.isFunction();
        com.google.javascript.rhino.jstype.JSType jSType64 = node62.getJSType();
        int int65 = node62.getChildCount();
        node58.addChildrenToBack(node62);
        boolean boolean67 = node62.isAdd();
        int int68 = node2.getIndexOfChild(node62);
        node62.setString("Not declared as a constructor");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node72 = node62.getChildAtIndex(10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test20209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20209");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        java.lang.String str5 = jSDocInfo0.toString();
        int int6 = jSDocInfo0.getParameterCount();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        java.lang.String str11 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test20210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20210");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isDebugger();
        boolean boolean6 = node2.isFromExterns();
        node2.setSourceEncodedPosition(35);
        boolean boolean9 = node2.isTypeOf();
        com.google.javascript.rhino.Node node10 = node2.removeFirstChild();
        boolean boolean11 = node2.isArrayLit();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node2.getStaticSourceFile();
        boolean boolean13 = node2.isWhile();
        boolean boolean14 = node2.isNE();
        boolean boolean15 = node2.isEmpty();
        boolean boolean16 = node2.isExprResult();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test20211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20211");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        java.util.Iterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        boolean boolean95 = typeList91.isEmpty();
        java.lang.Object[] objArray96 = typeList91.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor98 = typeList91.listIterator(15);
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor99 = typeList91.listIterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(objArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray96), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray96), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor98);
        org.junit.Assert.assertNotNull(typeItor99);
    }

    @Test
    public void test20212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20212");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isConstructor();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getParameterNames();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection10 = jSDocInfo0.getMarkers();
        boolean boolean11 = jSDocInfo0.isNoTypeCheck();
        boolean boolean12 = jSDocInfo0.shouldPreserveTry();
        boolean boolean13 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(markerCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
    }

    @Test
    public void test20213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20213");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = null;
        int int6 = node4.getIndexOfChild(node5);
        node4.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean10 = node4.isDec();
        int int11 = node4.getLineno();
        com.google.javascript.rhino.Node node12 = node1.clonePropsFrom(node4);
        boolean boolean13 = node1.isName();
        boolean boolean14 = node1.isNew();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test20214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20214");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "java.io.IOException: java.io.IOException: ((hi!))");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20215");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        java.util.Set<java.lang.String> strSet13 = jSDocInfo9.getModifies();
        boolean boolean14 = jSDocInfo9.isHidden();
        boolean boolean15 = jSDocInfo9.containsDeclaration();
        boolean boolean16 = jSDocInfo9.hasEnumParameterType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test20216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20216");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.lang.String str93 = typeList91.toString();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor95 = typeList94.iterator();
        boolean boolean96 = typeList94.isEmpty();
        int int97 = typeList94.size();
        boolean boolean98 = typeList94.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str93, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 18 + "'", int97 == 18);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test20217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20217");
        java.io.IOException iOException1 = new java.io.IOException("(JSDocInfo)");
        java.io.IOException iOException4 = new java.io.IOException("this");
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = iOException4.getSuppressed();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException8 = new java.io.IOException("(((hi!)))", (java.lang.Throwable) iOException4);
        java.io.IOException iOException12 = new java.io.IOException("(hi!)");
        java.io.IOException iOException13 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException12);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList14 = com.google.common.collect.ImmutableList.of(iOException12);
        java.io.IOException iOException18 = new java.io.IOException("(hi!)");
        java.io.IOException iOException19 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException18);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList20 = com.google.common.collect.ImmutableList.of(iOException18);
        java.io.IOException iOException21 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException18);
        iOException12.addSuppressed((java.lang.Throwable) iOException18);
        java.io.IOException iOException25 = new java.io.IOException("(hi!)");
        java.io.IOException iOException26 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException25);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList27 = com.google.common.collect.ImmutableList.of(iOException25);
        java.io.IOException iOException30 = new java.io.IOException("(hi!)");
        java.io.IOException iOException31 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException30);
        iOException25.addSuppressed((java.lang.Throwable) iOException31);
        iOException18.addSuppressed((java.lang.Throwable) iOException25);
        java.io.IOException iOException35 = new java.io.IOException("OR \n");
        iOException18.addSuppressed((java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException38 = new java.io.IOException("(OR  [quoted: 1]\n)", (java.lang.Throwable) iOException18);
        java.io.IOException iOException43 = new java.io.IOException("(hi!)");
        java.io.IOException iOException44 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException43);
        java.io.IOException iOException45 = new java.io.IOException("ERROR", (java.lang.Throwable) iOException44);
        java.io.IOException iOException46 = new java.io.IOException("OR \n", (java.lang.Throwable) iOException45);
        java.io.IOException iOException48 = new java.io.IOException();
        java.io.IOException iOException49 = new java.io.IOException("(java.io.IOException)", (java.lang.Throwable) iOException48);
        java.io.IOException iOException53 = new java.io.IOException("(hi!)");
        java.io.IOException iOException54 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException53);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList55 = com.google.common.collect.ImmutableList.of(iOException53);
        java.io.IOException iOException56 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException53);
        java.io.IOException iOException59 = new java.io.IOException("(hi!)");
        java.io.IOException iOException60 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException59);
        java.io.IOException iOException63 = new java.io.IOException("(hi!)");
        java.io.IOException iOException64 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException63);
        java.io.IOException iOException67 = new java.io.IOException("(hi!)");
        java.io.IOException iOException68 = new java.io.IOException("", (java.lang.Throwable) iOException67);
        java.io.IOException iOException72 = new java.io.IOException("(hi!)");
        java.io.IOException iOException73 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException72);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList74 = com.google.common.collect.ImmutableList.of(iOException72);
        java.io.IOException iOException75 = new java.io.IOException("((hi!))", (java.lang.Throwable) iOException72);
        java.io.IOException iOException77 = new java.io.IOException("(hi!)");
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList78 = com.google.common.collect.ImmutableList.of(iOException53, iOException60, iOException64, iOException68, iOException72, iOException77);
        java.io.IOException iOException79 = new java.io.IOException((java.lang.Throwable) iOException72);
        iOException49.addSuppressed((java.lang.Throwable) iOException79);
        java.io.IOException iOException82 = new java.io.IOException("OR \n");
        java.lang.Throwable[] throwableArray83 = iOException82.getSuppressed();
        java.io.IOException iOException87 = new java.io.IOException("(hi!)");
        java.io.IOException iOException88 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException87);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList89 = com.google.common.collect.ImmutableList.of(iOException87);
        java.io.IOException iOException90 = new java.io.IOException("JSDocInfo", (java.lang.Throwable) iOException87);
        java.lang.Throwable[] throwableArray91 = iOException90.getSuppressed();
        java.io.IOException iOException93 = new java.io.IOException("java.io.IOException: (((hi!)))");
        java.io.IOException iOException94 = new java.io.IOException((java.lang.Throwable) iOException93);
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList95 = com.google.common.collect.ImmutableList.of((java.lang.Throwable) iOException1, (java.lang.Throwable) iOException4, (java.lang.Throwable) iOException38, (java.lang.Throwable) iOException45, (java.lang.Throwable) iOException49, (java.lang.Throwable) iOException82, (java.lang.Throwable) iOException90, (java.lang.Throwable) iOException94);
        java.lang.String str96 = iOException45.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(iOExceptionList14);
        org.junit.Assert.assertNotNull(iOExceptionList20);
        org.junit.Assert.assertNotNull(iOExceptionList27);
        org.junit.Assert.assertNotNull(iOExceptionList55);
        org.junit.Assert.assertNotNull(iOExceptionList74);
        org.junit.Assert.assertNotNull(iOExceptionList78);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(iOExceptionList89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableList95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "java.io.IOException: ERROR" + "'", str96, "java.io.IOException: ERROR");
    }

    @Test
    public void test20218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20218");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("OR ");
        stringPosition0.setItem("([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
        stringPosition0.setItem("java.io.IOException");
        int int9 = stringPosition0.getEndLine();
        int int10 = stringPosition0.getEndLine();
        java.lang.String str11 = stringPosition0.getItem();
        int int12 = stringPosition0.getStartLine();
        int int13 = stringPosition0.getStartLine();
        int int14 = stringPosition0.getPositionOnStartLine();
        int int15 = stringPosition0.getEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.io.IOException" + "'", str11, "java.io.IOException");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test20219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20219");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node6.getLastSibling();
        boolean boolean20 = node6.wasEmptyNode();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.hasChildren();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = null;
        int int29 = node27.getIndexOfChild(node28);
        node27.putProp((int) (short) 1, (java.lang.Object) 1);
        node27.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node36 = node23.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node37 = node36.cloneNode();
        boolean boolean38 = node36.isGetProp();
        boolean boolean39 = node36.isDebugger();
        int int40 = node36.getCharno();
        com.google.javascript.rhino.Node[] nodeArray46 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(40, nodeArray46);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(48, nodeArray46);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) '#', nodeArray46);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray46, 5, 43);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(0, nodeArray46, 0, 8);
        boolean boolean56 = node55.isAnd();
        com.google.javascript.rhino.Node node57 = node36.srcref(node55);
        com.google.javascript.rhino.Node node58 = node6.srcrefTree(node57);
        // The following exception was thrown during execution in test generation
        try {
            node6.setDouble((double) 32783);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(nodeArray46);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test20220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20220");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node7.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node7.getLastSibling();
        boolean boolean21 = node7.isVoid();
        boolean boolean22 = node7.isNot();
        boolean boolean23 = node7.isOr();
        boolean boolean24 = node7.isFunction();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((-1), node7);
        boolean boolean26 = node7.isParamList();
        boolean boolean27 = node7.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test20221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20221");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test20222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20222");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        int int5 = node2.getSourceOffset();
        boolean boolean6 = node2.isSetterDef();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean11 = node10.isDo();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node28 = node15.useSourceInfoIfMissingFromForTree(node19);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.isContinue();
        boolean boolean34 = node31.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(42, node28, node31, 42, (int) (byte) 100);
        node31.setOptionalArg(false);
        boolean boolean40 = node31.hasChildren();
        com.google.javascript.rhino.Node node41 = node10.copyInformationFrom(node31);
        boolean boolean42 = node41.isNumber();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 41, 37, 48);
        node46.setVarArgs(false);
        node41.addChildToBack(node46);
        com.google.javascript.rhino.Node node50 = node2.useSourceInfoFromForTree(node41);
        boolean boolean51 = node2.isAssignAdd();
        boolean boolean52 = node2.isAnd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test20223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20223");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node21.addChildToBack(node24);
        com.google.javascript.rhino.Node node28 = node21.getNext();
        com.google.javascript.rhino.Node node29 = node9.useSourceInfoFromForTree(node21);
        boolean boolean30 = node21.isNot();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(10, node21, (int) ' ', (int) '4');
        boolean boolean34 = node21.isCase();
        boolean boolean35 = node21.isFor();
        node21.putBooleanProp(5, true);
        com.google.javascript.rhino.Node node39 = node4.copyInformationFromForTree(node21);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean44 = node43.hasChildren();
        com.google.javascript.rhino.Node node45 = node43.getLastSibling();
        node45.setSourceFileForTesting("Not declared as a type name");
        boolean boolean48 = node45.isWith();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(100, node45, 51, 10);
        com.google.javascript.rhino.Node node52 = node4.clonePropsFrom(node45);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean57 = node56.hasChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = null;
        int int62 = node60.getIndexOfChild(node61);
        node60.putProp((int) (short) 1, (java.lang.Object) 1);
        node60.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node69 = node56.useSourceInfoIfMissingFromForTree(node60);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.isContinue();
        boolean boolean75 = node72.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(42, node69, node72, 42, (int) (byte) 100);
        boolean boolean79 = node78.isDec();
        com.google.javascript.rhino.Node node80 = node78.cloneTree();
        boolean boolean81 = node78.isDo();
        node78.setVarArgs(true);
        int int84 = node52.getIndexOfChild(node78);
        com.google.javascript.rhino.jstype.JSType jSType85 = node52.getJSType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNull(jSType85);
    }

    @Test
    public void test20224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20224");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType8, jSType9);
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair10.typeA;
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair14 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType12, jSType13);
        com.google.javascript.rhino.jstype.JSType jSType15 = typePair14.typeA;
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair18 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType16, jSType17);
        com.google.javascript.rhino.jstype.JSType jSType19 = typePair18.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList20 = com.google.common.collect.ImmutableList.of(typePair10, typePair14, typePair18);
        com.google.javascript.rhino.jstype.JSType jSType21 = typePair14.typeA;
        com.google.javascript.rhino.jstype.JSType jSType22 = typePair14.typeB;
        com.google.javascript.rhino.jstype.JSType jSType23 = typePair14.typeA;
        com.google.javascript.rhino.jstype.JSType jSType24 = typePair14.typeA;
        com.google.javascript.rhino.jstype.JSType jSType25 = typePair14.typeA;
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair28 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType26, jSType27);
        com.google.javascript.rhino.jstype.JSType jSType29 = typePair28.typeA;
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair32 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType30, jSType31);
        com.google.javascript.rhino.jstype.JSType jSType33 = typePair32.typeA;
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair36 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType34, jSType35);
        com.google.javascript.rhino.jstype.JSType jSType37 = typePair36.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList38 = com.google.common.collect.ImmutableList.of(typePair28, typePair32, typePair36);
        com.google.javascript.rhino.jstype.JSType jSType39 = typePair32.typeA;
        com.google.javascript.rhino.jstype.JSType jSType40 = typePair32.typeB;
        com.google.javascript.rhino.jstype.JSType jSType41 = typePair32.typeA;
        com.google.javascript.rhino.jstype.JSType jSType42 = typePair32.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList43 = com.google.common.collect.ImmutableList.of(typePair2, typePair14, typePair32);
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair46 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType44, jSType45);
        com.google.javascript.rhino.jstype.JSType jSType47 = typePair46.typeA;
        com.google.javascript.rhino.jstype.JSType jSType48 = typePair46.typeA;
        com.google.javascript.rhino.jstype.JSType jSType49 = typePair46.typeA;
        com.google.javascript.rhino.jstype.JSType jSType50 = typePair46.typeA;
        com.google.javascript.rhino.jstype.JSType jSType51 = typePair46.typeB;
        com.google.javascript.rhino.jstype.JSType jSType52 = typePair46.typeA;
        com.google.javascript.rhino.jstype.JSType jSType53 = typePair46.typeB;
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair56 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType54, jSType55);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList57 = com.google.common.collect.ImmutableList.of(typePair2, typePair46, typePair56);
        com.google.javascript.rhino.jstype.JSType jSType58 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType59 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertNotNull(typePairList20);
        org.junit.Assert.assertNull(jSType21);
        org.junit.Assert.assertNull(jSType22);
        org.junit.Assert.assertNull(jSType23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertNull(jSType29);
        org.junit.Assert.assertNull(jSType33);
        org.junit.Assert.assertNull(jSType37);
        org.junit.Assert.assertNotNull(typePairList38);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNull(jSType41);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertNotNull(typePairList43);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertNull(jSType48);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertNotNull(typePairList57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertNull(jSType59);
    }

    @Test
    public void test20225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20225");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(Node tree inequality:\nTree1:\nOR  [slash_v: 2]\n    OR \n\n\nTree2:\nSTRING (hi!)\n\n\nSubtree1: OR  [slash_v: 2]\n    OR \n\n\nSubtree2: STRING (hi!)\n)", 35, (int) (short) 1);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test20226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20226");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        jSDocInfo0.setLicense("Not declared as a constructor");
        java.lang.String str9 = jSDocInfo0.getLicense();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean14 = node13.hasChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node17.putProp((int) (short) 1, (java.lang.Object) 1);
        node17.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node26 = node13.useSourceInfoIfMissingFromForTree(node17);
        node26.addSuppression("");
        node26.setSourceEncodedPosition(37);
        com.google.javascript.rhino.Node node31 = node26.getNext();
        jSDocInfo0.setAssociatedNode(node31);
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str34 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str35 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Not declared as a constructor" + "'", str9, "Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test20227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20227");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair6 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType4, jSType5);
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair6.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType8, jSType9);
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair10.typeA;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType.TypePair> typePairList12 = com.google.common.collect.ImmutableList.of(typePair2, typePair6, typePair10);
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair6.typeB;
        com.google.javascript.rhino.jstype.JSType jSType14 = typePair6.typeA;
        com.google.javascript.rhino.jstype.JSType jSType15 = typePair6.typeB;
        com.google.javascript.rhino.jstype.JSType jSType16 = typePair6.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNotNull(typePairList12);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertNull(jSType16);
    }

    @Test
    public void test20228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20228");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        com.google.javascript.rhino.Node node15 = node2.getFirstChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.hasChildren();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = null;
        int int25 = node23.getIndexOfChild(node24);
        node23.putProp((int) (short) 1, (java.lang.Object) 1);
        node23.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node32 = node19.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean36 = node35.isContinue();
        boolean boolean38 = node35.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(42, node32, node35, 42, (int) (byte) 100);
        boolean boolean42 = node32.isNE();
        boolean boolean43 = node32.hasChildren();
        com.google.javascript.rhino.Node node44 = node2.copyInformationFromForTree(node32);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node32.isEquivalentToTyped(node47);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = null;
        int int56 = node54.getIndexOfChild(node55);
        node51.addChildToBack(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean59 = jSDocInfo58.isNoShadow();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo58.getParameterNames();
        node51.setJSDocInfo(jSDocInfo58);
        node51.setLength(47);
        boolean boolean64 = node51.isFor();
        com.google.javascript.rhino.Node node65 = node32.useSourceInfoFrom(node51);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = null;
        int int70 = node68.getIndexOfChild(node69);
        node68.putProp((int) (short) 1, (java.lang.Object) 1);
        node68.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int77 = node68.getSideEffectFlags();
        boolean boolean78 = node68.isParamList();
        int int79 = node68.getLineno();
        boolean boolean80 = node68.hasChildren();
        node68.removeProp((int) (byte) -1);
        boolean boolean83 = node68.isLabel();
        boolean boolean84 = node68.isScript();
        boolean boolean86 = node68.getBooleanProp((int) (short) 10);
        int int87 = node68.getChildCount();
        node68.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node90 = node32.srcref(node68);
        boolean boolean91 = node90.isTry();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test20229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20229");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        node5.setOptionalArg(false);
        boolean boolean12 = node5.isString();
        boolean boolean13 = node5.isObjectLit();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node5.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
    }

    @Test
    public void test20230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20230");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue0.and(ternaryValue2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue0.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue0.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str9 = ternaryValue8.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str12 = ternaryValue11.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue8.and(ternaryValue11);
        boolean boolean15 = ternaryValue11.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue17.and(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue16.xor(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue18.not();
        java.lang.String str22 = ternaryValue18.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue18.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue11.and(ternaryValue23);
        java.lang.String str25 = ternaryValue24.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue6.and(ternaryValue24);
        boolean boolean28 = ternaryValue26.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "false" + "'", str9, "false");
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "false" + "'", str12, "false");
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "false" + "'", str22, "false");
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "false" + "'", str25, "false");
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test20231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20231");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        boolean boolean23 = node22.isAdd();
        node22.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean34 = node28.isDec();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = null;
        int int39 = node37.getIndexOfChild(node38);
        node37.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean43 = node37.isDec();
        boolean boolean44 = node28.hasChild(node37);
        boolean boolean45 = node28.isRegExp();
        boolean boolean46 = node28.isString();
        boolean boolean47 = node28.isContinue();
        com.google.javascript.rhino.Node node48 = node22.srcref(node28);
        com.google.javascript.rhino.jstype.JSType jSType49 = node48.getJSType();
        boolean boolean50 = node48.isInstanceOf();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test20232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20232");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeItor92.hasPrevious();
        boolean boolean94 = typeItor92.hasPrevious();
        java.lang.reflect.Type type95 = typeItor92.next();
        boolean boolean96 = typeItor92.hasNext();
        boolean boolean97 = typeItor92.hasPrevious();
        java.lang.reflect.Type type98 = typeItor92.next();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(type98);
    }

    @Test
    public void test20233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20233");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        node2.putIntProp(54, 2);
        boolean boolean12 = node2.isThrow();
        java.lang.String str13 = node2.getSourceFileName();
        boolean boolean14 = node2.isDelProp();
        boolean boolean15 = node2.isDec();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test20234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20234");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(0, "", (int) 'a', (int) (byte) 0);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        boolean boolean10 = node9.isFunction();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int22 = node13.getSideEffectFlags();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node25.addChildToBack(node28);
        int int32 = node13.getIndexOfChild(node25);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean36 = node35.hasChildren();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = null;
        int int41 = node39.getIndexOfChild(node40);
        node39.putProp((int) (short) 1, (java.lang.Object) 1);
        node39.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node48 = node35.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean49 = node48.wasEmptyNode();
        com.google.javascript.rhino.Node node50 = node13.useSourceInfoFrom(node48);
        boolean boolean51 = node13.isCatch();
        boolean boolean52 = node13.isRegExp();
        boolean boolean53 = node13.isInc();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean57 = node56.hasChildren();
        boolean boolean58 = node56.isAssignAdd();
        boolean boolean59 = node56.isDebugger();
        boolean boolean60 = node56.isFromExterns();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile61 = node56.getStaticSourceFile();
        boolean boolean62 = node56.isNew();
        boolean boolean63 = node56.isDefaultCase();
        node56.removeProp(31);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) '#', node5, node9, node13, node56, 46, (int) (byte) 100);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean72 = node71.isContinue();
        node71.setQuotedString();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean77 = node76.hasChildren();
        com.google.javascript.rhino.Node node78 = node76.getLastSibling();
        node78.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = null;
        int int85 = node83.getIndexOfChild(node84);
        node83.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean89 = node83.isDec();
        com.google.javascript.rhino.Node node90 = node78.useSourceInfoIfMissingFromForTree(node83);
        com.google.javascript.rhino.Node node91 = node71.srcrefTree(node90);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile92 = node91.getStaticSourceFile();
        int int94 = staticSourceFile92.getLineOffset(39);
        node5.setStaticSourceFile(staticSourceFile92);
        com.google.javascript.rhino.Node node96 = node5.detachFromParent();
        boolean boolean97 = node96.isQualifiedName();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(staticSourceFile61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(staticSourceFile92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-2147483648) + "'", int94 == (-2147483648));
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test20235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20235");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 100);
        boolean boolean4 = node3.isBlock();
        node3.addSuppression("EQ 30");
        com.google.javascript.rhino.Node node7 = node3.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test20236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20236");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        boolean boolean3 = jSDocInfo0.isNoCompile();
        boolean boolean4 = jSDocInfo0.isHidden();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test20237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20237");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        boolean boolean94 = typeList91.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream96 = typeList95.stream();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList95.asList();
        java.lang.Object[] objArray98 = typeList95.toArray();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeStream96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(objArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray98), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray98), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test20238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20238");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        java.util.ListIterator<java.lang.reflect.Type> typeItor94 = typeList91.listIterator();
        java.lang.Object[] objArray95 = typeList91.toArray();
        boolean boolean96 = typeList91.isEmpty();
        java.util.ListIterator<java.lang.reflect.Type> typeItor97 = typeList91.listIterator();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor98 = typeList91.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(typeItor97);
        org.junit.Assert.assertNotNull(typeItor98);
    }

    @Test
    public void test20239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20239");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("InputId: Named type with empty name component");
        boolean boolean9 = jSDocInfo0.isExterns();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        boolean boolean11 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean13 = jSDocInfo12.isNoShadow();
        boolean boolean14 = jSDocInfo12.isConstant();
        boolean boolean15 = jSDocInfo12.isInterface();
        boolean boolean16 = jSDocInfo12.hasEnumParameterType();
        java.lang.String str17 = jSDocInfo12.getDeprecationReason();
        boolean boolean18 = jSDocInfo12.isExterns();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.hasChildren();
        boolean boolean23 = node21.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean25 = jSDocInfo24.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo24.getImplementedInterfaces();
        node21.setJSDocInfo(jSDocInfo24);
        java.lang.String str28 = jSDocInfo24.getMeaning();
        com.google.javascript.rhino.Node node29 = jSDocInfo24.getAssociatedNode();
        java.lang.String str30 = jSDocInfo24.getFileOverview();
        boolean boolean31 = jSDocInfo24.isDefine();
        java.lang.String str32 = jSDocInfo24.getFileOverview();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo24.getSuppressions();
        java.lang.String str34 = jSDocInfo24.getFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection35 = jSDocInfo24.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo24.getBaseType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean38 = jSDocInfo37.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList39 = jSDocInfo37.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = jSDocInfo37.getTemplateTypeNames();
        boolean boolean41 = jSDocInfo37.isNoTypeCheck();
        com.google.javascript.rhino.Node node42 = jSDocInfo37.getAssociatedNode();
        boolean boolean43 = jSDocInfo37.shouldPreserveTry();
        java.lang.String str44 = jSDocInfo37.getFileOverview();
        boolean boolean45 = jSDocInfo37.isHidden();
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean47 = jSDocInfo46.isNoShadow();
        int int48 = jSDocInfo46.getParameterCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo46.setVisibility(visibility49);
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = jSDocInfo46.getTemplateTypeNames();
        boolean boolean52 = jSDocInfo46.hasThisType();
        java.lang.String str54 = jSDocInfo46.getDescriptionForParameter("JSDocInfo");
        boolean boolean55 = jSDocInfo46.containsDeclaration();
        java.lang.String str56 = jSDocInfo46.getOriginalCommentString();
        int int57 = jSDocInfo46.getParameterCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection59 = jSDocInfo58.getMarkers();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo58.getParameterNames();
        boolean boolean61 = jSDocInfo58.isImplicitCast();
        java.util.Collection<java.lang.String> strCollection62 = jSDocInfo58.getReferences();
        boolean boolean63 = jSDocInfo58.isExpose();
        boolean boolean64 = jSDocInfo58.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression65 = jSDocInfo58.getThisType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection67 = jSDocInfo66.getMarkers();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo66.getParameterNames();
        boolean boolean69 = jSDocInfo66.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo66.getThisType();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo66.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo66.setVisibility(visibility72);
        boolean boolean74 = jSDocInfo66.isNoAlias();
        boolean boolean75 = jSDocInfo66.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.isNoShadow();
        boolean boolean78 = jSDocInfo76.isOverride();
        boolean boolean79 = jSDocInfo76.isIdGenerator();
        java.lang.String str81 = jSDocInfo76.getDescriptionForParameter("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        java.util.Set<java.lang.String> strSet82 = jSDocInfo76.getModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList83 = jSDocInfo76.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection85 = jSDocInfo84.getMarkers();
        java.util.Set<java.lang.String> strSet86 = jSDocInfo84.getParameterNames();
        boolean boolean87 = jSDocInfo84.isDeprecated();
        java.lang.String str88 = jSDocInfo84.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo84.getType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection90 = jSDocInfo84.getMarkers();
        java.lang.String str91 = jSDocInfo84.getLicense();
        boolean boolean93 = jSDocInfo84.hasParameter("hi!");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList94 = com.google.common.collect.ImmutableList.of(jSDocInfo0, jSDocInfo12, jSDocInfo24, jSDocInfo37, jSDocInfo46, jSDocInfo58, jSDocInfo66, jSDocInfo76, jSDocInfo84);
        jSDocInfo58.setDeprecated(false);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection97 = jSDocInfo58.getMarkers();
        jSDocInfo58.setDeprecated(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(nodeCollection35);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList39);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(markerCollection59);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(strCollection62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSTypeExpression65);
        org.junit.Assert.assertNotNull(markerCollection67);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(markerCollection85);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNull(jSTypeExpression89);
        org.junit.Assert.assertNotNull(markerCollection90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList94);
        org.junit.Assert.assertNotNull(markerCollection97);
    }

    @Test
    public void test20240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20240");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue0.and(ternaryValue2);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue0.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue0.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue7.and(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue7.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue7.or(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue12.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue15.and(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue18.and(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue22.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue18.or(ternaryValue22);
        boolean boolean28 = ternaryValue18.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue17.and(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue32.and(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue36.and(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue32.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue31.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue17.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue12.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue0.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue0.or(ternaryValue46);
        boolean boolean49 = ternaryValue47.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test20241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20241");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        int int5 = node4.getSourcePosition();
        boolean boolean6 = node4.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = node4.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSDocInfo7);
    }

    @Test
    public void test20242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20242");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        int int4 = node2.getSourcePosition();
        com.google.javascript.rhino.Node node5 = node2.removeChildren();
        boolean boolean6 = node2.isQuotedString();
        boolean boolean7 = node2.isFor();
        boolean boolean8 = node2.hasOneChild();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        node11.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int20 = node11.getSideEffectFlags();
        node11.setSourceEncodedPositionForTree(1);
        boolean boolean23 = node11.isCase();
        node11.removeProp(0);
        // The following exception was thrown during execution in test generation
        try {
            node2.removeChild(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test20243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20243");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            typeItor95.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertNotNull(typeItor95);
    }

    @Test
    public void test20244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20244");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(40, nodeArray7);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 10, nodeArray7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(23, nodeArray7);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) ' ', nodeArray7);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(13, nodeArray7, 9, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(12289, nodeArray7);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(47, nodeArray7, 97, 28);
        org.junit.Assert.assertNotNull(nodeArray7);
    }

    @Test
    public void test20245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20245");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node22.getStaticSourceFile();
        int int25 = staticSourceFile23.getLineOfOffset(0);
        int int27 = staticSourceFile23.getLineOfOffset(8);
        java.lang.String str28 = staticSourceFile23.getName();
        int int30 = staticSourceFile23.getColumnOfOffset(42);
        java.lang.String str31 = staticSourceFile23.getName();
        java.lang.String str32 = staticSourceFile23.getName();
        int int34 = staticSourceFile23.getColumnOfOffset((int) '#');
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Not declared as a type name" + "'", str28, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Not declared as a type name" + "'", str31, "Not declared as a type name");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Not declared as a type name" + "'", str32, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test20246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20246");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getEnumParameterType();
        boolean boolean6 = jSDocInfo0.isDeprecated();
        boolean boolean8 = jSDocInfo0.hasParameter("(java.io.IOException: Named type with empty name component)");
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test20247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20247");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        strSet3.clear();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        boolean boolean8 = jSDocInfo5.hasDescriptionForParameter("Named type with empty name component");
        boolean boolean9 = strSet3.contains((java.lang.Object) jSDocInfo5);
        java.lang.String str10 = jSDocInfo5.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo5.getEnumParameterType();
        java.lang.String str12 = jSDocInfo5.getReturnDescription();
        boolean boolean13 = jSDocInfo5.isExport();
        java.lang.String str14 = jSDocInfo5.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test20248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20248");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int22 = node13.getSideEffectFlags();
        boolean boolean23 = node13.isAssign();
        typePosition7.setItem(node13);
        boolean boolean25 = node13.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean27 = jSDocInfo26.isNoShadow();
        boolean boolean28 = jSDocInfo26.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo26.getParameterType("hi!");
        boolean boolean31 = jSDocInfo26.isImplicitCast();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo26.getSuppressions();
        boolean boolean33 = jSDocInfo26.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo26.getType();
        jSDocInfo26.setDeprecated(false);
        node13.setJSDocInfo(jSDocInfo26);
        boolean boolean38 = node13.isFalse();
        int int39 = node13.getCharno();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test20249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20249");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        node16.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int25 = node16.getSideEffectFlags();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node28.addChildToBack(node31);
        com.google.javascript.rhino.Node node35 = node28.getNext();
        com.google.javascript.rhino.Node node36 = node16.useSourceInfoFromForTree(node28);
        boolean boolean37 = node28.isNot();
        boolean boolean38 = node28.isCatch();
        com.google.javascript.rhino.Node node39 = node2.copyInformationFromForTree(node28);
        boolean boolean40 = node28.isOptionalArg();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = node28.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
    }

    @Test
    public void test20250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20250");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int22 = node13.getSideEffectFlags();
        boolean boolean23 = node13.isAssign();
        typePosition7.setItem(node13);
        boolean boolean25 = node13.isWith();
        int int26 = node13.getType();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean30 = node29.isContinue();
        boolean boolean31 = node29.isStringKey();
        node29.addSuppression("");
        boolean boolean34 = node29.isOptionalArg();
        boolean boolean35 = node29.isVarArgs();
        com.google.javascript.rhino.jstype.JSType jSType36 = node29.getJSType();
        node13.addChildrenToBack(node29);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = null;
        int int42 = node40.getIndexOfChild(node41);
        node40.putProp((int) (short) 1, (java.lang.Object) 1);
        node40.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int49 = node40.getSideEffectFlags();
        boolean boolean50 = node40.isParamList();
        node40.setVarArgs(true);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = null;
        int int58 = node56.getIndexOfChild(node57);
        node56.putProp((int) (short) 1, (java.lang.Object) 1);
        node56.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int65 = node56.getSideEffectFlags();
        boolean boolean66 = node56.isParamList();
        int int67 = node56.getLineno();
        boolean boolean68 = node56.hasChildren();
        boolean boolean69 = node56.isBlock();
        int int70 = node56.getCharno();
        node40.putProp(40, (java.lang.Object) node56);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = node75.getParent();
        boolean boolean77 = node75.isArrayLit();
        node75.setOptionalArg(true);
        int int80 = node75.getType();
        boolean boolean81 = node75.isLabelName();
        boolean boolean82 = node75.isInstanceOf();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(42, node75, 15, 1);
        java.lang.Object obj87 = node85.getProp(48);
        com.google.javascript.rhino.Node node88 = node56.useSourceInfoFromForTree(node85);
        boolean boolean89 = node13.isEquivalentTo(node88);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 100 + "'", int80 == 100);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test20251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20251");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        java.lang.String str5 = jSDocInfo0.getDescription();
        java.lang.String str6 = jSDocInfo0.getVersion();
        boolean boolean7 = jSDocInfo0.isInterface();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test20252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20252");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getReturnType();
        boolean boolean14 = jSDocInfo9.isNoShadow();
        java.lang.String str15 = jSDocInfo9.getOriginalCommentString();
        java.lang.String str16 = jSDocInfo9.getReturnDescription();
        boolean boolean17 = jSDocInfo9.isNoSideEffects();
        boolean boolean18 = jSDocInfo9.hasBaseType();
        boolean boolean19 = jSDocInfo9.hasType();
        boolean boolean20 = jSDocInfo9.hasThisType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection21 = jSDocInfo9.getMarkers();
        boolean boolean22 = jSDocInfo9.isNoAlias();
        boolean boolean23 = jSDocInfo9.isConstant();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(markerCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test20253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20253");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        java.util.ListIterator<java.lang.reflect.Type> typeItor94 = typeList91.listIterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        boolean boolean96 = typeList95.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test20254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20254");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        boolean boolean15 = node2.isFalse();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node18.addChildToBack(node21);
        boolean boolean25 = node21.isTypeOf();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.isContinue();
        node28.setQuotedString();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        com.google.javascript.rhino.Node node35 = node33.getLastSibling();
        node35.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = null;
        int int42 = node40.getIndexOfChild(node41);
        node40.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean46 = node40.isDec();
        com.google.javascript.rhino.Node node47 = node35.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node48 = node28.srcrefTree(node47);
        node48.setCharno(0);
        node21.addChildrenToBack(node48);
        boolean boolean52 = node48.isString();
        boolean boolean53 = node48.isGetProp();
        java.lang.String str54 = node48.getString();
        boolean boolean55 = node48.wasEmptyNode();
        boolean boolean56 = node2.hasChild(node48);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = node59.getParent();
        boolean boolean61 = node59.isArrayLit();
        boolean boolean62 = node59.isThrow();
        boolean boolean63 = node59.isReturn();
        boolean boolean64 = node59.isSetterDef();
        com.google.javascript.rhino.Node node65 = node2.copyInformationFrom(node59);
        boolean boolean66 = node59.isVoid();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test20255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20255");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        int int26 = node16.getLength();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable27 = node16.getAncestors();
        boolean boolean28 = node16.isName();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.hasChildren();
        com.google.javascript.rhino.Node node33 = node31.getLastSibling();
        boolean boolean34 = node33.isOr();
        boolean boolean35 = node33.isBreak();
        node33.setSourceEncodedPosition((int) (byte) 100);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean41 = node40.hasChildren();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = null;
        int int46 = node44.getIndexOfChild(node45);
        node44.putProp((int) (short) 1, (java.lang.Object) 1);
        node44.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node53 = node40.useSourceInfoIfMissingFromForTree(node44);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable54 = node40.getAncestors();
        com.google.javascript.rhino.Node node55 = node33.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean56 = node40.isDo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = new com.google.javascript.rhino.JSTypeExpression(node40, "Named type with empty name component");
        java.lang.String str59 = node16.checkTreeEquals(node40);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder60 = node16.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(ancestorIterable54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str59);
    }

    @Test
    public void test20256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20256");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        boolean boolean4 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        boolean boolean6 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.isNoShadow();
        boolean boolean9 = jSDocInfo7.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo7.getParameterType("hi!");
        jSDocInfo7.setLicense("Unknown class name");
        java.lang.String str14 = jSDocInfo7.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo7.getReturnType();
        int int16 = jSDocInfo7.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean18 = jSDocInfo17.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo17.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = jSDocInfo17.getTemplateTypeNames();
        int int21 = jSDocInfo17.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility22 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray28 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.util.Iterator<java.lang.String> strItor31 = strSet29.iterator();
        strSet29.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility33 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean34 = strSet29.equals((java.lang.Object) visibility33);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility36 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility38 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray44 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        java.util.Iterator<java.lang.String> strItor47 = strSet45.iterator();
        strSet45.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility49 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean50 = strSet45.equals((java.lang.Object) visibility49);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList51 = com.google.common.collect.ImmutableList.of(visibility22, visibility33, visibility35, visibility36, visibility37, visibility38, visibility49);
        jSDocInfo17.setVisibility(visibility33);
        jSDocInfo7.setVisibility(visibility33);
        jSDocInfo0.setVisibility(visibility33);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>> visibilityEnumList55 = com.google.common.collect.ImmutableList.of((java.lang.Enum<com.google.javascript.rhino.JSDocInfo.Visibility>) visibility33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + visibility22 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility22.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertTrue("'" + visibility33 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility33.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility36 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility36.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility38 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility38.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertTrue("'" + visibility49 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility49.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(visibilityList51);
        org.junit.Assert.assertNotNull(visibilityEnumList55);
    }

    @Test
    public void test20257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20257");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        boolean boolean9 = node2.isHook();
        boolean boolean10 = node2.isBreak();
        boolean boolean11 = node2.isDefaultCase();
        boolean boolean12 = node2.isDec();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = null;
        int int17 = node15.getIndexOfChild(node16);
        node15.putProp((int) (short) 1, (java.lang.Object) 1);
        node15.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int24 = node15.getSideEffectFlags();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = null;
        int int32 = node30.getIndexOfChild(node31);
        node27.addChildToBack(node30);
        com.google.javascript.rhino.Node node34 = node27.getNext();
        com.google.javascript.rhino.Node node35 = node15.useSourceInfoFromForTree(node27);
        boolean boolean36 = node15.isEmpty();
        java.lang.String str37 = node15.getSourceFileName();
        boolean boolean38 = node15.isReturn();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = null;
        int int44 = node42.getIndexOfChild(node43);
        node42.putProp((int) (short) 1, (java.lang.Object) 1);
        node42.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int51 = node42.getSideEffectFlags();
        node42.setSourceEncodedPositionForTree(1);
        boolean boolean54 = node42.isCase();
        boolean boolean55 = node42.isThrow();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean62 = node61.isIn();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(38, node42, node59, node61, 39, (-1));
        node42.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node68 = node15.useSourceInfoFromForTree(node42);
        int int69 = node2.getIndexOfChild(node68);
        boolean boolean70 = node2.isName();
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test20258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20258");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isDebugger();
        int int42 = node2.getSourcePosition();
        java.lang.String str43 = node2.getSourceFileName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test20259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20259");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isFor();
        boolean boolean11 = node5.isIf();
        node5.addSuppression("java.io.IOException: ((hi!))");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean22 = node16.isWhile();
        boolean boolean23 = node16.isLabelName();
        node16.setOptionalArg(false);
        boolean boolean26 = node16.isCall();
        com.google.javascript.rhino.Node node27 = node5.srcrefTree(node16);
        int int28 = node5.getSourceOffset();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node36.putProp((int) (short) 1, (java.lang.Object) 1);
        node36.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node45 = node32.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.isContinue();
        boolean boolean51 = node48.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(42, node45, node48, 42, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            node5.addChildToFront(node48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test20260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20260");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        java.util.Set<java.lang.String> strSet4 = node2.getDirectives();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo5.getMarkers();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo5.getParameterNames();
        boolean boolean8 = jSDocInfo5.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo5.getThisType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo5.getParameterNames();
        node2.setDirectives(strSet10);
        boolean boolean12 = node2.isScript();
        boolean boolean13 = node2.wasEmptyNode();
        boolean boolean14 = node2.isHook();
        boolean boolean15 = node2.isAssignAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test20261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20261");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = node3.getParent();
        boolean boolean5 = node3.isArrayLit();
        node3.setOptionalArg(true);
        int int8 = node3.getType();
        boolean boolean9 = node3.isLabelName();
        boolean boolean10 = node3.isInstanceOf();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(42, node3, 15, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.Node node18 = node16.getLastSibling();
        node18.setSourceFileForTesting("Not declared as a type name");
        boolean boolean21 = node18.isBreak();
        int int22 = node18.getSideEffectFlags();
        boolean boolean23 = node18.isAnd();
        int int24 = node13.getIndexOfChild(node18);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags26 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags26.setThrows();
        int int28 = sideEffectFlags26.valueOf();
        boolean boolean29 = sideEffectFlags26.areAllFlagsSet();
        sideEffectFlags26.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node13.setSideEffectFlags(sideEffectFlags26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got THIS");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 37 + "'", int28 == 37);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test20262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20262");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        com.google.javascript.rhino.Node node11 = typePosition0.getItem();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = null;
        int int17 = node15.getIndexOfChild(node16);
        node15.putProp((int) (short) 1, (java.lang.Object) 1);
        node15.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int24 = node15.getSideEffectFlags();
        node15.setSourceEncodedPositionForTree(1);
        boolean boolean27 = node15.isCase();
        boolean boolean28 = node15.isThrow();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) ' ', 49, 32);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("(hi!)");
        boolean boolean35 = node34.isIn();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(38, node15, node32, node34, 39, (-1));
        int int39 = node32.getChildCount();
        typePosition0.setItem(node32);
        com.google.javascript.rhino.Node node41 = typePosition0.getItem();
        int int42 = typePosition0.getPositionOnStartLine();
        int int43 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node44 = typePosition0.getItem();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node44.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(staticSourceFile45);
    }

    @Test
    public void test20263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20263");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        boolean boolean7 = jSDocInfo0.hasThisType();
        jSDocInfo0.addSuppression("");
        int int10 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        boolean boolean12 = jSDocInfo0.isIdGenerator();
        boolean boolean13 = jSDocInfo0.hasBaseType();
        boolean boolean14 = jSDocInfo0.isHidden();
        boolean boolean15 = jSDocInfo0.isHidden();
        boolean boolean16 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
    }

    @Test
    public void test20264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20264");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        boolean boolean23 = node3.isBreak();
        boolean boolean24 = node3.isDo();
        boolean boolean25 = node3.isUnscopedQualifiedName();
        boolean boolean26 = node3.isParamList();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(39, node3, 54, 35);
        boolean boolean30 = node3.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = node3.toString(true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test20265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20265");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        boolean boolean6 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
    }

    @Test
    public void test20266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20266");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        int int97 = typeList96.size();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor98 = typeList96.iterator();
        // The following exception was thrown during execution in test generation
        try {
            typeItor98.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 18 + "'", int97 == 18);
        org.junit.Assert.assertNotNull(typeItor98);
    }

    @Test
    public void test20267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20267");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        node19.setOptionalArg(false);
        boolean boolean28 = node19.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean30 = jSDocInfo29.isNoShadow();
        boolean boolean31 = jSDocInfo29.isConstant();
        java.lang.String str32 = jSDocInfo29.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection33 = jSDocInfo29.getMarkers();
        boolean boolean35 = jSDocInfo29.hasParameter("Not declared as a constructor");
        java.lang.String str36 = jSDocInfo29.getDescription();
        boolean boolean37 = jSDocInfo29.hasModifies();
        node19.setJSDocInfo(jSDocInfo29);
        boolean boolean39 = jSDocInfo29.hasFileOverview();
        boolean boolean40 = jSDocInfo29.isImplicitCast();
        boolean boolean41 = jSDocInfo29.containsDeclaration();
        boolean boolean42 = jSDocInfo29.hasFileOverview();
        boolean boolean43 = jSDocInfo29.hasBaseType();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo29.getSuppressions();
        boolean boolean45 = strSet44.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(markerCollection33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test20268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20268");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(17, "unknown", 44, (int) (short) 100);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int16 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = null;
        int int24 = node22.getIndexOfChild(node23);
        node19.addChildToBack(node22);
        int int26 = node7.getIndexOfChild(node19);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean30 = node29.hasChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node33.putProp((int) (short) 1, (java.lang.Object) 1);
        node33.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node42 = node29.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean43 = node42.wasEmptyNode();
        com.google.javascript.rhino.Node node44 = node7.useSourceInfoFrom(node42);
        boolean boolean45 = node7.isCatch();
        boolean boolean46 = node7.isTrue();
        boolean boolean47 = node7.isCatch();
        boolean boolean48 = node7.isLabelName();
        com.google.javascript.rhino.InputId inputId49 = node7.getInputId();
        boolean boolean50 = node7.isTypeOf();
        com.google.javascript.rhino.Node node51 = node4.copyInformationFrom(node7);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test20269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20269");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor95 = typeList91.listIterator(0);
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList91.iterator();
        java.lang.Object[] objArray97 = typeList91.toArray();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(objArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray97), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray97), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test20270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20270");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        node5.setOptionalArg(false);
        boolean boolean12 = node5.isString();
        boolean boolean13 = node5.isSetterDef();
        node5.setString("(OR  [quoted: 1]\n)");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20271");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.lang.String[] strArray12 = new java.lang.String[] { "Not declared as a type name", "(hi!)", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.String[] strArray24 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.Object[] objArray27 = strSet25.toArray();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList37 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet6, (java.util.AbstractSet<java.lang.String>) strSet13, (java.util.AbstractSet<java.lang.String>) strSet25, (java.util.AbstractSet<java.lang.String>) strSet34);
        boolean boolean38 = strSet25.isEmpty();
        strSet25.clear();
        strSet25.clear();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int42 = typePosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int44 = typePosition43.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int49 = typePosition48.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList51 = com.google.common.collect.ImmutableList.of(typePosition41, typePosition43, typePosition45, typePosition47, typePosition48, typePosition50);
        java.lang.Class<?> wildcardClass52 = typePosition43.getClass();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = null;
        int int60 = node58.getIndexOfChild(node59);
        node55.addChildToBack(node58);
        java.lang.Class<?> wildcardClass62 = node58.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList63 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass52, (java.lang.reflect.Type) wildcardClass62);
        java.lang.Object[] objArray64 = typeList63.toArray();
        boolean boolean65 = strSet25.retainAll((java.util.Collection<java.lang.reflect.Type>) typeList63);
        java.util.Iterator<java.lang.reflect.Type> typeItor66 = typeList63.iterator();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags68 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags68.setThrows();
        sideEffectFlags68.setReturnsTainted();
        sideEffectFlags68.setThrows();
        sideEffectFlags68.setAllFlags();
        sideEffectFlags68.setMutatesThis();
        int int74 = sideEffectFlags68.valueOf();
        boolean boolean75 = sideEffectFlags68.areAllFlagsSet();
        sideEffectFlags68.setMutatesArguments();
        int int77 = typeList63.indexOf((java.lang.Object) sideEffectFlags68);
        java.util.Spliterator<java.lang.reflect.Type> typeSpliterator78 = typeList63.spliterator();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strSetList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(typePositionList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(typeList63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[class com.google.javascript.rhino.JSDocInfo$TypePosition, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[class com.google.javascript.rhino.JSDocInfo$TypePosition, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(typeItor66);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(typeSpliterator78);
    }

    @Test
    public void test20272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20272");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.Node[] nodeArray12 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(40, nodeArray12);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(48, nodeArray12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) '#', nodeArray12);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, nodeArray12);
        jSDocInfo0.setAssociatedNode(node16);
        boolean boolean18 = node16.isDebugger();
        boolean boolean19 = node16.isAssignAdd();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeArray12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test20273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20273");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setThrows();
        boolean boolean7 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test20274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20274");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("InputId: Named type with empty name component");
        boolean boolean9 = jSDocInfo0.isDefine();
        java.lang.String str10 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test20275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20275");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        node22.setCharno(0);
        boolean boolean25 = node22.isAdd();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.hasChildren();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node41 = node28.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean42 = node22.hasChild(node32);
        node32.setVarArgs(false);
        boolean boolean45 = node32.hasOneChild();
        boolean boolean46 = node32.isIn();
        boolean boolean47 = node32.isInc();
        boolean boolean48 = node32.isUnscopedQualifiedName();
        node32.setSourceFileForTesting("java.io.IOException: Unknown class name");
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node32.setJSType(jSType51);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test20276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20276");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isRegExp();
        com.google.javascript.rhino.Node node42 = node2.getLastSibling();
        boolean boolean43 = node2.isName();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(50, 31, 43);
        int int48 = node47.getSourceOffset();
        node2.addChildToFront(node47);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test20277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20277");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        node15.addSuppression("");
        boolean boolean18 = node15.isReturn();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString((int) (short) 1, "hi!", 16, (int) (byte) 0);
        boolean boolean24 = node23.isQuotedString();
        com.google.javascript.rhino.Node node25 = node15.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean26 = node23.isThis();
        boolean boolean27 = node23.isExprResult();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test20278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20278");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(41, "java.io.IOException: Named type with empty name component", 30, (int) (short) 100);
        boolean boolean5 = node4.isCase();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(12, node10, 18, 50);
        boolean boolean14 = node13.isFunction();
        boolean boolean15 = node13.isSetterDef();
        com.google.javascript.rhino.Node node16 = node4.srcrefTree(node13);
        boolean boolean17 = node16.isScript();
        boolean boolean18 = node16.isSwitch();
        boolean boolean19 = node16.isTry();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test20279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20279");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.Node node6 = jSDocInfo0.getAssociatedNode();
        boolean boolean7 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.setLicense("(hi!)");
        boolean boolean10 = jSDocInfo0.isConstructor();
        java.lang.String str11 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo0.getVisibility();
        boolean boolean13 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(visibility12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20280");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        boolean boolean10 = jSDocInfo5.hasDescriptionForParameter("hi!");
        boolean boolean12 = jSDocInfo5.hasParameterType("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        boolean boolean13 = jSDocInfo5.isConsistentIdGenerator();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = jSDocInfo5.getTypeNodes();
        java.lang.String str15 = jSDocInfo5.getLicense();
        boolean boolean16 = jSDocInfo5.isJavaDispatch();
        boolean boolean17 = jSDocInfo5.hasModifies();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeCollection14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test20281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20281");
        java.lang.String[] strArray9 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.lang.Object[] objArray12 = strSet10.toArray();
        java.lang.Object[] objArray13 = strSet10.toArray();
        java.lang.Object[] objArray14 = strSet10.toArray();
        int int15 = strSet10.size();
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test20282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20282");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(47, (int) (byte) 100, 45);
        boolean boolean4 = node3.isExprResult();
        int int5 = node3.getSourceOffset();
        boolean boolean6 = node3.isQuotedString();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("");
        boolean boolean10 = node9.isNot();
        com.google.javascript.rhino.InputId inputId11 = node9.getInputId();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) 'a', node9);
        com.google.javascript.rhino.Node node13 = node3.copyInformationFrom(node12);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean22 = node16.isDec();
        int int23 = node16.getLineno();
        boolean boolean24 = node16.isInc();
        boolean boolean25 = node16.isTry();
        com.google.javascript.rhino.Node node26 = node3.srcrefTree(node16);
        com.google.javascript.rhino.Node node27 = node3.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = node27.isString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node27);
    }

    @Test
    public void test20283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20283");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        boolean boolean19 = node6.isCatch();
        boolean boolean20 = node6.isCall();
        com.google.javascript.rhino.Node node22 = node6.getAncestor(30);
        java.util.Set<java.lang.String> strSet23 = node6.getDirectives();
        boolean boolean24 = node6.isNumber();
        node6.setSourceEncodedPositionForTree(28);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test20284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20284");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream97 = typeList95.parallelStream();
        boolean boolean98 = typeList95.isEmpty();
        int int99 = typeList95.size();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeStream97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 18 + "'", int99 == 18);
    }

    @Test
    public void test20285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20285");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.setDeprecated(true);
        boolean boolean9 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("");
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20286");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        boolean boolean6 = node3.getBooleanProp((int) (byte) 100);
        boolean boolean7 = node3.isString();
        boolean boolean8 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        node11.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int20 = node11.getSideEffectFlags();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node23.addChildToBack(node26);
        int int30 = node11.getIndexOfChild(node23);
        boolean boolean31 = node11.isBreak();
        boolean boolean32 = node11.isDo();
        boolean boolean33 = node11.isUnscopedQualifiedName();
        boolean boolean34 = node11.isParamList();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(0, node3, node11);
        node35.setVarArgs(true);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = null;
        int int45 = node43.getIndexOfChild(node44);
        node40.addChildToBack(node43);
        boolean boolean47 = node43.isTypeOf();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean51 = node50.isContinue();
        node50.setQuotedString();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean56 = node55.hasChildren();
        com.google.javascript.rhino.Node node57 = node55.getLastSibling();
        node57.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = null;
        int int64 = node62.getIndexOfChild(node63);
        node62.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean68 = node62.isDec();
        com.google.javascript.rhino.Node node69 = node57.useSourceInfoIfMissingFromForTree(node62);
        com.google.javascript.rhino.Node node70 = node50.srcrefTree(node69);
        node70.setCharno(0);
        node43.addChildrenToBack(node70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean75 = jSDocInfo74.isNoShadow();
        boolean boolean76 = jSDocInfo74.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = jSDocInfo74.getParameterType("hi!");
        jSDocInfo74.setLicense("Unknown class name");
        boolean boolean81 = jSDocInfo74.isNoShadow();
        boolean boolean82 = jSDocInfo74.isNoTypeCheck();
        boolean boolean84 = jSDocInfo74.hasParameter("java.io.IOException: OR \n");
        node70.setJSDocInfo(jSDocInfo74);
        boolean boolean86 = node70.isName();
        // The following exception was thrown during execution in test generation
        try {
            node35.addChildToBack(node70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test20287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20287");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setPositionInformation((int) (byte) 1, (int) '#', (int) (byte) 10, 5);
        int int14 = stringPosition0.getPositionOnEndLine();
        java.lang.String str15 = stringPosition0.getItem();
        java.lang.String str16 = stringPosition0.getItem();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test20288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20288");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor95 = typeList94.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList94.asList();
        // The following exception was thrown during execution in test generation
        try {
            typeList94.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertNotNull(typeList96);
    }

    @Test
    public void test20289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20289");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        node11.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node20 = node7.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.isContinue();
        boolean boolean26 = node23.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(42, node20, node23, 42, (int) (byte) 100);
        boolean boolean30 = node20.isNE();
        com.google.javascript.rhino.Node node31 = node3.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean35 = node34.hasChildren();
        com.google.javascript.rhino.Node node36 = node34.getLastSibling();
        node36.setSourceFileForTesting("Not declared as a type name");
        boolean boolean39 = node36.isBreak();
        node36.setLength(50);
        com.google.javascript.rhino.Node node42 = node31.clonePropsFrom(node36);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = node45.getParent();
        boolean boolean47 = node45.isArrayLit();
        node45.setType(54);
        boolean boolean50 = node45.isCall();
        node45.putBooleanProp(51, true);
        boolean boolean54 = node31.isEquivalentToTyped(node45);
        java.util.Set<java.lang.String> strSet55 = node45.getDirectives();
        boolean boolean56 = node45.isDec();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test20290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20290");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '#', 29, (int) (byte) 100);
        boolean boolean4 = node3.isGetProp();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(4095, 50, 47);
        boolean boolean9 = node8.isHook();
        boolean boolean10 = node3.isEquivalentToTyped(node8);
        boolean boolean11 = node3.isStringKey();
        boolean boolean12 = node3.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20291");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        java.lang.String str9 = jSDocInfo5.getMeaning();
        com.google.javascript.rhino.Node node10 = jSDocInfo5.getAssociatedNode();
        java.lang.String str11 = jSDocInfo5.getFileOverview();
        boolean boolean12 = jSDocInfo5.isDefine();
        java.lang.String str13 = jSDocInfo5.getFileOverview();
        boolean boolean14 = jSDocInfo5.isExport();
        boolean boolean15 = jSDocInfo5.isExport();
        java.lang.String str17 = jSDocInfo5.getDescriptionForParameter("");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test20292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20292");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        com.google.javascript.rhino.Node node22 = node15.getNext();
        com.google.javascript.rhino.Node node23 = node3.useSourceInfoFromForTree(node15);
        boolean boolean24 = node15.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(10, node15, (int) ' ', (int) '4');
        boolean boolean28 = node15.isInstanceOf();
        int int29 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        com.google.javascript.rhino.Node node34 = node32.getLastSibling();
        node34.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = null;
        int int41 = node39.getIndexOfChild(node40);
        node39.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean45 = node39.isDec();
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node39);
        node46.putBooleanProp(1, true);
        boolean boolean50 = node46.wasEmptyNode();
        boolean boolean51 = node15.hasChild(node46);
        boolean boolean52 = node15.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test20293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20293");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        int int8 = strSet7.size();
        java.util.Iterator<java.lang.String> strItor9 = strSet7.iterator();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strItor9);
    }

    @Test
    public void test20294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20294");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeCollection10);
    }

    @Test
    public void test20295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20295");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node5.setJSType(jSType6);
        boolean boolean8 = node5.isLocalResultCall();
        boolean boolean9 = node5.isWhile();
        com.google.javascript.rhino.Node node10 = node5.cloneNode();
        com.google.javascript.rhino.Node[] nodeArray15 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((-1), nodeArray15, 1, (int) '#');
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(49, nodeArray15, 48, (int) (byte) 0);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(45, nodeArray15, 40, (int) 'a');
        com.google.javascript.rhino.Node[] nodeArray28 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(43, nodeArray28, 97, 0);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(97, nodeArray28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray28);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList34 = com.google.common.collect.ImmutableList.of(nodeArray15, nodeArray28);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(1, nodeArray15);
        node10.addChildrenToFront(node35);
        node35.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray15);
        org.junit.Assert.assertNotNull(nodeArray28);
        org.junit.Assert.assertNotNull(nodeArrayList34);
    }

    @Test
    public void test20296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20296");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
    }

    @Test
    public void test20297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20297");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        boolean boolean6 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        jSDocInfo0.setLicense("java.io.IOException: OR \n");
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        int int12 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test20298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20298");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        int int2 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility3 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo0.setVisibility(visibility3);
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = jSDocInfo0.hasThisType();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isDeprecated();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        boolean boolean12 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + visibility3 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility3.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test20299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20299");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node19.isParamList();
        node19.setSourceEncodedPosition(31);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node19.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = null;
        int int36 = node34.getIndexOfChild(node35);
        node34.putProp((int) (short) 1, (java.lang.Object) 1);
        node34.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int43 = node34.getSideEffectFlags();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node49.getIndexOfChild(node50);
        node46.addChildToBack(node49);
        int int53 = node34.getIndexOfChild(node46);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean57 = node56.hasChildren();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = null;
        int int62 = node60.getIndexOfChild(node61);
        node60.putProp((int) (short) 1, (java.lang.Object) 1);
        node60.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node69 = node56.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean70 = node69.wasEmptyNode();
        com.google.javascript.rhino.Node node71 = node34.useSourceInfoFrom(node69);
        java.lang.Object obj73 = node71.getProp((int) (short) 10);
        boolean boolean74 = node71.isAdd();
        boolean boolean75 = node71.isGetElem();
        boolean boolean76 = node71.isSwitch();
        node71.setQuotedString();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(28, node71, 4095, 0);
        com.google.javascript.rhino.Node node81 = node19.srcref(node71);
        boolean boolean82 = node81.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test20300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20300");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        boolean boolean3 = jSDocInfo0.isNoCompile();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test20301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20301");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        int int22 = node3.getIndexOfChild(node15);
        boolean boolean23 = node3.isBreak();
        boolean boolean24 = node3.isDo();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node29 = node3.useSourceInfoFromForTree(node28);
        boolean boolean30 = node3.isReturn();
        boolean boolean31 = node3.isWhile();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = null;
        int int36 = node34.getIndexOfChild(node35);
        node34.putProp((int) (short) 1, (java.lang.Object) 1);
        node34.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int43 = node34.getSideEffectFlags();
        boolean boolean44 = node34.isExprResult();
        boolean boolean45 = node34.wasEmptyNode();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node48.addChildToBack(node51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean56 = jSDocInfo55.isNoShadow();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo55.getParameterNames();
        node48.setJSDocInfo(jSDocInfo55);
        java.lang.String str59 = node48.getString();
        boolean boolean60 = node48.isAnd();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(0, "(hi!)", 42, 30);
        boolean boolean66 = node65.isIn();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(48, node3, node34, node48, node65);
        com.google.javascript.rhino.Node node68 = node67.cloneNode();
        boolean boolean69 = node68.isNot();
        com.google.javascript.rhino.Node node70 = node68.getLastSibling();
        com.google.javascript.rhino.Node node71 = node68.cloneTree();
        boolean boolean72 = node71.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test20302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20302");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "hi!", 38, 10);
        java.lang.String str5 = node4.getString();
        int int6 = node4.getLength();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.isContinue();
        node9.setQuotedString();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean15 = node14.hasChildren();
        com.google.javascript.rhino.Node node16 = node14.getLastSibling();
        node16.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node21.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean27 = node21.isDec();
        com.google.javascript.rhino.Node node28 = node16.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node29 = node9.srcrefTree(node28);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node28.getAncestors();
        boolean boolean31 = node28.isIn();
        com.google.javascript.rhino.Node node32 = node4.clonePropsFrom(node28);
        boolean boolean33 = node28.isGetElem();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node28.siblings();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hi!" + "'", str5, "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
    }

    @Test
    public void test20303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20303");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        java.lang.String str23 = node2.getQualifiedName();
        boolean boolean24 = node2.isArrayLit();
        boolean boolean25 = node2.isSetterDef();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = new com.google.javascript.rhino.JSTypeExpression(node2, "");
        boolean boolean28 = jSTypeExpression27.isVarArgs();
        boolean boolean29 = jSTypeExpression27.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression27);
        boolean boolean31 = jSTypeExpression30.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test20304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20304");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 12289, 4, (int) (byte) 100);
        boolean boolean4 = node3.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test20305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20305");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '#', 29, (int) (byte) 100);
        boolean boolean4 = node3.isGetProp();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(4095, 50, 47);
        boolean boolean9 = node8.isHook();
        boolean boolean10 = node3.isEquivalentToTyped(node8);
        boolean boolean11 = node3.isThis();
        boolean boolean12 = node3.isReturn();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "hi!", 38, 10);
        java.lang.String str18 = node17.getString();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node26.putProp((int) (short) 1, (java.lang.Object) 1);
        node26.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node35 = node22.useSourceInfoIfMissingFromForTree(node26);
        node35.addSuppression("");
        boolean boolean38 = node35.isSwitch();
        boolean boolean39 = node35.isString();
        boolean boolean40 = node35.isStringKey();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = null;
        int int45 = node43.getIndexOfChild(node44);
        node43.putProp((int) (short) 1, (java.lang.Object) 1);
        node43.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int52 = node43.getSideEffectFlags();
        node43.setSourceEncodedPositionForTree(1);
        boolean boolean55 = node43.isCase();
        boolean boolean56 = node43.isThrow();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = null;
        int int61 = node59.getIndexOfChild(node60);
        node59.putProp((int) (short) 1, (java.lang.Object) 1);
        node59.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int68 = node59.getSideEffectFlags();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = null;
        int int76 = node74.getIndexOfChild(node75);
        node71.addChildToBack(node74);
        com.google.javascript.rhino.Node node78 = node71.getNext();
        com.google.javascript.rhino.Node node79 = node59.useSourceInfoFromForTree(node71);
        boolean boolean80 = node79.isBreak();
        int int81 = node79.getLength();
        node43.addChildrenToFront(node79);
        java.util.Set<java.lang.String> strSet83 = node43.getDirectives();
        boolean boolean84 = node43.isFunction();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.isContinue();
        node87.setQuotedString();
        int int90 = node87.getSourceOffset();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (byte) 100, node35, node43, node87);
        com.google.javascript.rhino.Node node92 = node17.useSourceInfoFromForTree(node35);
        boolean boolean93 = node3.hasChild(node17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 35.0 29 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test20306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20306");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        jSDocInfo0.setLicense("GETELEM 100");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        boolean boolean11 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.Node node17 = node15.getLastSibling();
        boolean boolean18 = node17.isOr();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node21.putProp((int) (short) 1, (java.lang.Object) 1);
        node21.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int30 = node21.getSideEffectFlags();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node33.addChildToBack(node36);
        com.google.javascript.rhino.Node node40 = node33.getNext();
        com.google.javascript.rhino.Node node41 = node21.useSourceInfoFromForTree(node33);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean45 = node44.isContinue();
        node44.setQuotedString();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean50 = node49.hasChildren();
        com.google.javascript.rhino.Node node51 = node49.getLastSibling();
        node51.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = null;
        int int58 = node56.getIndexOfChild(node57);
        node56.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean62 = node56.isDec();
        com.google.javascript.rhino.Node node63 = node51.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.Node node64 = node44.srcrefTree(node63);
        boolean boolean65 = node63.isString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(40, node17, node41, node63, (int) (byte) -1, 3);
        boolean boolean69 = node17.isVoid();
        boolean boolean70 = node17.isReturn();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean74 = node73.hasChildren();
        boolean boolean75 = node73.isAssignAdd();
        boolean boolean76 = node73.isDebugger();
        boolean boolean77 = node73.isFromExterns();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = node73.getStaticSourceFile();
        boolean boolean79 = node73.isNew();
        node73.setSourceEncodedPositionForTree(18);
        com.google.javascript.rhino.Node node82 = node17.useSourceInfoFromForTree(node73);
        jSDocInfo0.setAssociatedNode(node73);
        boolean boolean84 = jSDocInfo0.isConstant();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(staticSourceFile78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test20307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20307");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        node4.setSourceFileForTesting("Not declared as a type name");
        boolean boolean7 = node4.isBreak();
        boolean boolean8 = node4.isEmpty();
        java.util.Set<java.lang.String> strSet9 = node4.getDirectives();
        java.lang.String str10 = node4.toStringTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "OR  [source_file: Not declared as a type name]\n" + "'", str10, "OR  [source_file: Not declared as a type name]\n");
    }

    @Test
    public void test20308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20308");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 100);
        java.lang.String str4 = node3.getSourceFileName();
        node3.addSuppression("Not declared as a type name");
        boolean boolean7 = node3.hasMoreThanOneChild();
        java.lang.String str8 = node3.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING hi! 100 [jsdoc_info: JSDocInfo] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test20309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20309");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(18);
        node1.addSuppression("((java.io.IOException))");
        node1.setOptionalArg(true);
        boolean boolean6 = node1.isLabel();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test20310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20310");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.isDefine();
        boolean boolean9 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
        org.junit.Assert.assertNull(strCollection11);
    }

    @Test
    public void test20311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20311");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator();
        java.lang.Object obj94 = null;
        boolean boolean95 = typeList91.contains(obj94);
        boolean boolean96 = typeList91.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList91.asList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(typeList97);
    }

    @Test
    public void test20312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20312");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node2.siblings();
        boolean boolean4 = node2.isAssign();
        com.google.javascript.rhino.Node node5 = node2.cloneTree();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.hasChildren();
        com.google.javascript.rhino.Node node11 = node9.getLastSibling();
        node11.setSourceFileForTesting("Not declared as a type name");
        boolean boolean14 = node11.isWith();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100, node11, 51, 10);
        com.google.javascript.rhino.Node node18 = node17.cloneNode();
        boolean boolean19 = node17.isFromExterns();
        com.google.javascript.rhino.Node node20 = node5.copyInformationFrom(node17);
        node17.setSourceFileForTesting("java.io.IOException: (JSDocInfo)");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test20313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20313");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "REGEXP OR  10 7", 65536, 2);
        boolean boolean5 = node4.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test20314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20314");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setPositionInformation(40, 10, (int) (short) 100, 40);
        stringPosition0.setItem("OR \n");
        stringPosition0.setPositionInformation((-2147483648), (int) '4', (int) (byte) -1, 100);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test20315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20315");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean41 = jSDocInfo40.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo40.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo40.getSuppressions();
        node37.setJSDocInfo(jSDocInfo40);
        java.lang.String str45 = jSDocInfo40.getDescription();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node48.putProp((int) (short) 1, (java.lang.Object) 1);
        node48.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int57 = node48.getSideEffectFlags();
        node48.setSourceEncodedPositionForTree(1);
        boolean boolean60 = node48.isCase();
        com.google.javascript.rhino.Node node61 = node48.getFirstChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean66 = node65.hasChildren();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = null;
        int int71 = node69.getIndexOfChild(node70);
        node69.putProp((int) (short) 1, (java.lang.Object) 1);
        node69.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node78 = node65.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean82 = node81.isContinue();
        boolean boolean84 = node81.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(42, node78, node81, 42, (int) (byte) 100);
        boolean boolean88 = node78.isNE();
        boolean boolean89 = node78.hasChildren();
        com.google.javascript.rhino.Node node90 = node48.copyInformationFromForTree(node78);
        jSDocInfo40.setAssociatedNode(node48);
        java.lang.String str92 = jSDocInfo40.getSourceName();
        java.lang.String str94 = jSDocInfo40.getDescriptionForParameter("java.io.IOException: ERROR");
        boolean boolean95 = jSDocInfo40.isNoAlias();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test20316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20316");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "(hi!)", 42, 30);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isTry();
        boolean boolean7 = node4.wasEmptyNode();
        boolean boolean8 = node4.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            node4.setDouble((double) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test20317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20317");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        java.util.ListIterator<java.lang.reflect.Type> typeItor94 = typeList91.listIterator();
        int int95 = typeList91.size();
        java.lang.String str96 = typeList91.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 18 + "'", int95 == 18);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str96, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test20318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20318");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        int int11 = typePosition6.getStartLine();
        int int12 = typePosition6.getStartLine();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(12, node17, 18, 50);
        typePosition6.setItem(node17);
        boolean boolean22 = node17.isReturn();
        com.google.javascript.rhino.Node node23 = node17.removeChildren();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test20319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20319");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean6 = jSDocInfo0.isDefine();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        jSDocInfo0.addSuppression("THIS 42");
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
    }

    @Test
    public void test20320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20320");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        boolean boolean9 = jSDocInfo0.isInterface();
        java.lang.String str10 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        java.util.Spliterator<java.lang.String> strSpliterator12 = strSet11.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(strSpliterator12);
    }

    @Test
    public void test20321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20321");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        int int11 = typePosition6.getStartLine();
        int int12 = typePosition6.getStartLine();
        int int13 = typePosition6.getPositionOnEndLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition6.setPositionInformation(118884, 52, 11, 172032);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 118884?end-line: 11");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test20322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20322");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasThisType();
        boolean boolean4 = jSDocInfo0.hasParameterType("([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
        java.lang.String str5 = jSDocInfo0.getMeaning();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(43, nodeArray9, 97, 0);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(97, nodeArray9);
        jSDocInfo0.setAssociatedNode(node13);
        boolean boolean15 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(nodeArray9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test20323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20323");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isCase();
        boolean boolean3 = node1.isAssign();
        node1.setType((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test20324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20324");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node2.new FileLevelJsDocBuilder();
        boolean boolean14 = node2.isExprResult();
        boolean boolean15 = node2.isComma();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = node18.getParent();
        boolean boolean20 = node18.isArrayLit();
        com.google.common.collect.ImmutableList.Builder<java.lang.Throwable> throwableBuilder22 = new com.google.common.collect.ImmutableList.Builder<java.lang.Throwable>();
        node18.putProp(50, (java.lang.Object) throwableBuilder22);
        java.util.Set<java.lang.String> strSet24 = node18.getDirectives();
        java.lang.String str25 = node2.checkTreeEquals(node18);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strSet24);
    }

    @Test
    public void test20325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20325");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        int int8 = stringPosition0.getStartLine();
        int int9 = stringPosition0.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
    }

    @Test
    public void test20326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20326");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node2.isCatch();
        boolean boolean41 = node2.isTrue();
        boolean boolean42 = node2.isCatch();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = node2.getJSDocInfo();
        java.util.Set<java.lang.String> strSet44 = node2.getDirectives();
        boolean boolean46 = node2.getBooleanProp(30);
        boolean boolean47 = node2.isNull();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node2.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator49 = nodeIterable48.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSDocInfo43);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertNotNull(nodeSpliterator49);
    }

    @Test
    public void test20327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20327");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = node22.getStaticSourceFile();
        int int25 = staticSourceFile23.getLineOffset(39);
        int int27 = staticSourceFile23.getColumnOfOffset(41);
        int int29 = staticSourceFile23.getLineOffset(15);
        int int31 = staticSourceFile23.getLineOfOffset(36);
        boolean boolean32 = staticSourceFile23.isExtern();
        com.google.javascript.rhino.jstype.StaticSourceFile[] staticSourceFileArray33 = new com.google.javascript.rhino.jstype.StaticSourceFile[] { staticSourceFile23 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.StaticSourceFile> staticSourceFileList34 = com.google.common.collect.ImmutableList.of(staticSourceFileArray33);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.StaticSourceFile> staticSourceFileList35 = com.google.common.collect.ImmutableList.copyOf(staticSourceFileArray33);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.StaticSourceFile> staticSourceFileList36 = com.google.common.collect.ImmutableList.of(staticSourceFileArray33);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(staticSourceFile23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-2147483648) + "'", int25 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-2147483648) + "'", int29 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(staticSourceFileArray33);
        org.junit.Assert.assertNotNull(staticSourceFileList34);
        org.junit.Assert.assertNotNull(staticSourceFileList35);
        org.junit.Assert.assertNotNull(staticSourceFileList36);
    }

    @Test
    public void test20328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20328");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        int int6 = jSDocInfo0.getParameterCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameter("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        boolean boolean10 = jSDocInfo0.isConstructor();
        jSDocInfo0.setLicense("OR  [directives: [, Not declared as a constructor, Unknown class name, Not declared as a type name]] [source_file: Not declared as a type name] [length: 50]");
        boolean boolean13 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20329");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList92 = typeList91.asList();
        boolean boolean93 = typeList91.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test20330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20330");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node39.isCall();
        boolean boolean41 = node39.isSetterDef();
        boolean boolean42 = node39.isWith();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test20331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20331");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.lang.String[] strArray12 = new java.lang.String[] { "Not declared as a type name", "(hi!)", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.String[] strArray24 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.Object[] objArray27 = strSet25.toArray();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList37 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet6, (java.util.AbstractSet<java.lang.String>) strSet13, (java.util.AbstractSet<java.lang.String>) strSet25, (java.util.AbstractSet<java.lang.String>) strSet34);
        boolean boolean38 = strSet25.isEmpty();
        strSet25.clear();
        strSet25.clear();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int42 = typePosition41.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int44 = typePosition43.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int49 = typePosition48.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList51 = com.google.common.collect.ImmutableList.of(typePosition41, typePosition43, typePosition45, typePosition47, typePosition48, typePosition50);
        java.lang.Class<?> wildcardClass52 = typePosition43.getClass();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = null;
        int int60 = node58.getIndexOfChild(node59);
        node55.addChildToBack(node58);
        java.lang.Class<?> wildcardClass62 = node58.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList63 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass52, (java.lang.reflect.Type) wildcardClass62);
        java.lang.Object[] objArray64 = typeList63.toArray();
        boolean boolean65 = strSet25.retainAll((java.util.Collection<java.lang.reflect.Type>) typeList63);
        java.util.Iterator<java.lang.reflect.Type> typeItor66 = typeList63.iterator();
        // The following exception was thrown during execution in test generation
        try {
            typeItor66.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strSetList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(typePositionList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(typeList63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[class com.google.javascript.rhino.JSDocInfo$TypePosition, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[class com.google.javascript.rhino.JSDocInfo$TypePosition, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(typeItor66);
    }

    @Test
    public void test20332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20332");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        strSet6.clear();
        boolean boolean11 = strSet6.contains((java.lang.Object) 54);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(39);
        int int14 = node13.getSourceOffset();
        boolean boolean15 = node13.isNE();
        boolean boolean16 = node13.isOnlyModifiesThisCall();
        int int17 = node13.getSourceOffset();
        boolean boolean18 = strSet6.remove((java.lang.Object) node13);
        boolean boolean19 = strSet6.isEmpty();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test20333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20333");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("OR ");
        boolean boolean9 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test20334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20334");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        stringPosition0.setItem("Named type with empty name component");
        int int4 = stringPosition0.getStartLine();
        java.lang.String str5 = stringPosition0.getItem();
        stringPosition0.setItem("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        int int8 = stringPosition0.getStartLine();
        int int9 = stringPosition0.getPositionOnEndLine();
        java.lang.String str10 = stringPosition0.getItem();
        int int11 = stringPosition0.getPositionOnEndLine();
        java.lang.String str12 = stringPosition0.getItem();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Named type with empty name component" + "'", str5, "Named type with empty name component");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str10, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str12, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test20335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20335");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        boolean boolean5 = node3.isAssignAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(41, node3);
        node3.addSuppression("OR \n");
        boolean boolean10 = node3.isTrue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder11.append("NUMBER 42.0 0");
        fileLevelJsDocBuilder11.append("OR 51");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test20336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20336");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(45, "([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node2.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder3);
    }

    @Test
    public void test20337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20337");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(100);
        boolean boolean3 = node2.isFor();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int15 = node6.getSideEffectFlags();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node18.addChildToBack(node21);
        com.google.javascript.rhino.Node node25 = node18.getNext();
        com.google.javascript.rhino.Node node26 = node6.useSourceInfoFromForTree(node18);
        boolean boolean27 = node26.isFor();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node30.addChildToBack(node33);
        boolean boolean37 = node33.isName();
        com.google.javascript.rhino.InputId inputId39 = new com.google.javascript.rhino.InputId("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        java.lang.String str40 = inputId39.toString();
        node33.setInputId(inputId39);
        node26.setInputId(inputId39);
        boolean boolean43 = node26.isContinue();
        com.google.javascript.rhino.Node node44 = node2.copyInformationFrom(node26);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean49 = node48.hasChildren();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node52.getIndexOfChild(node53);
        node52.putProp((int) (short) 1, (java.lang.Object) 1);
        node52.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node61 = node48.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean65 = node64.isContinue();
        boolean boolean67 = node64.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(42, node61, node64, 42, (int) (byte) 100);
        com.google.javascript.rhino.Node node71 = node70.getNext();
        boolean boolean72 = node70.isGetProp();
        boolean boolean73 = node70.isStringKey();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = node76.getParent();
        com.google.javascript.rhino.Node node79 = node76.getAncestor((int) (short) 0);
        boolean boolean80 = node79.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node81 = node70.useSourceInfoFrom(node79);
        boolean boolean82 = node70.isNew();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(18, node44, node70, 4, 50);
        boolean boolean86 = node44.isEmpty();
        com.google.javascript.rhino.Node node87 = node44.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = node87.isVarArgs();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str40, "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node87);
    }

    @Test
    public void test20338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20338");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        node4.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean15 = node9.isDec();
        com.google.javascript.rhino.Node node16 = node4.useSourceInfoIfMissingFromForTree(node9);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node4.siblings();
        boolean boolean18 = node4.hasMoreThanOneChild();
        boolean boolean19 = node4.isIn();
        com.google.javascript.rhino.jstype.JSType jSType20 = node4.getJSType();
        // The following exception was thrown during execution in test generation
        try {
            node4.setDouble((double) 17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  [source_file: Not declared as a type name] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSType20);
    }

    @Test
    public void test20339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20339");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        boolean boolean95 = typeList91.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList91.asList();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList98 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            typeList98.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeList98);
    }

    @Test
    public void test20340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20340");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 39, 196708);
    }

    @Test
    public void test20341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20341");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        com.google.javascript.rhino.Node node5 = node2.getAncestor((int) (short) 0);
        node5.setType(50);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node5.getJsDocBuilderForNode();
        node5.setSourceFileForTesting("JSDocInfo");
        boolean boolean11 = node5.isHook();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean15 = node14.hasChildren();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node18.putProp((int) (short) 1, (java.lang.Object) 1);
        node18.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node27 = node14.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node18.setStaticSourceFile(staticSourceFile28);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = node18.getStaticSourceFile();
        com.google.javascript.rhino.Node node31 = node18.cloneTree();
        node5.addChildrenToFront(node31);
        int int33 = node31.getLength();
        node31.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(staticSourceFile30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test20342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20342");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        node4.setSourceFileForTesting("Not declared as a type name");
        boolean boolean7 = node4.isBreak();
        int int8 = node4.getSideEffectFlags();
        boolean boolean9 = node4.isParamList();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = null;
        int int15 = node13.getIndexOfChild(node14);
        node13.putProp((int) (short) 1, (java.lang.Object) 1);
        node13.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int22 = node13.getSideEffectFlags();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node25.addChildToBack(node28);
        int int32 = node13.getIndexOfChild(node25);
        boolean boolean33 = node13.isBreak();
        boolean boolean34 = node13.isDo();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = node13.useSourceInfoFromForTree(node38);
        boolean boolean40 = node13.isReturn();
        boolean boolean41 = node13.isWhile();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = null;
        int int46 = node44.getIndexOfChild(node45);
        node44.putProp((int) (short) 1, (java.lang.Object) 1);
        node44.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int53 = node44.getSideEffectFlags();
        boolean boolean54 = node44.isExprResult();
        boolean boolean55 = node44.wasEmptyNode();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = null;
        int int63 = node61.getIndexOfChild(node62);
        node58.addChildToBack(node61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean66 = jSDocInfo65.isNoShadow();
        java.util.Set<java.lang.String> strSet67 = jSDocInfo65.getParameterNames();
        node58.setJSDocInfo(jSDocInfo65);
        java.lang.String str69 = node58.getString();
        boolean boolean70 = node58.isAnd();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(0, "(hi!)", 42, 30);
        boolean boolean76 = node75.isIn();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(48, node13, node44, node58, node75);
        com.google.javascript.rhino.Node node78 = node77.cloneNode();
        boolean boolean79 = node78.isNot();
        com.google.javascript.rhino.Node node80 = node78.getLastSibling();
        com.google.javascript.rhino.Node node81 = node78.cloneTree();
        boolean boolean82 = node78.isCase();
        boolean boolean83 = node4.hasChild(node78);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test20343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20343");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        boolean boolean4 = jSDocInfo0.isNoCompile();
        boolean boolean5 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test20344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20344");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node15.addChildToBack(node18);
        com.google.javascript.rhino.Node node22 = node15.getNext();
        com.google.javascript.rhino.Node node23 = node3.useSourceInfoFromForTree(node15);
        boolean boolean24 = node15.isNot();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(10, node15, (int) ' ', (int) '4');
        boolean boolean28 = node27.isQualifiedName();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean33 = node32.isDo();
        com.google.javascript.rhino.Node node34 = node27.srcref(node32);
        boolean boolean35 = node34.isWith();
        boolean boolean36 = node34.isDo();
        boolean boolean37 = node34.isFor();
        boolean boolean38 = node34.isReturn();
        boolean boolean39 = node34.isQuotedString();
        boolean boolean40 = node34.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test20345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20345");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isCase();
        com.google.javascript.rhino.InputId inputId3 = node1.getInputId();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = node6.getParent();
        boolean boolean8 = node6.isArrayLit();
        node6.setOptionalArg(true);
        com.google.javascript.rhino.jstype.JSType jSType11 = node6.getJSType();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile12 = node6.getStaticSourceFile();
        boolean boolean13 = node6.isNew();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = null;
        int int23 = node21.getIndexOfChild(node22);
        node21.putProp((int) (short) 1, (java.lang.Object) 1);
        node21.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node30 = node17.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node21.setStaticSourceFile(staticSourceFile31);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node21.getStaticSourceFile();
        com.google.javascript.rhino.Node node34 = node21.getLastSibling();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = null;
        int int42 = node40.getIndexOfChild(node41);
        node37.addChildToBack(node40);
        com.google.javascript.rhino.Node node44 = node37.getNext();
        com.google.javascript.rhino.Node node45 = node21.copyInformationFrom(node37);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(10, node21);
        com.google.javascript.rhino.jstype.JSType jSType47 = node46.getJSType();
        int int48 = node46.getSourcePosition();
        com.google.javascript.rhino.Node node49 = node6.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node50 = node1.useSourceInfoIfMissingFrom(node6);
        boolean boolean51 = node6.isAdd();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(inputId3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(staticSourceFile12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(staticSourceFile33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test20346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20346");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isStringKey();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node8.putProp((int) (short) 1, (java.lang.Object) 1);
        node8.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int17 = node8.getSideEffectFlags();
        boolean boolean18 = node8.isParamList();
        int int19 = node8.getLineno();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(30, node3, node8, 46, 38);
        boolean boolean23 = node3.isWhile();
        com.google.javascript.rhino.InputId inputId24 = node3.getInputId();
        boolean boolean25 = node3.isDec();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node28.addChildToBack(node31);
        node28.putIntProp(54, 2);
        java.lang.String str38 = node28.getSourceFileName();
        com.google.javascript.rhino.Node node39 = node28.cloneNode();
        boolean boolean40 = node28.isEmpty();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean44 = node43.hasChildren();
        com.google.javascript.rhino.Node node45 = node43.getLastSibling();
        node45.setSourceFileForTesting("Not declared as a type name");
        boolean boolean48 = node45.isBreak();
        boolean boolean49 = node45.isEmpty();
        com.google.javascript.rhino.Node node50 = node28.srcref(node45);
        boolean boolean51 = node45.isThrow();
        boolean boolean52 = node3.isEquivalentToTyped(node45);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(inputId24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test20347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20347");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 10, 100, 40);
        node3.setVarArgs(false);
        boolean boolean6 = node3.isInc();
        node3.setType((int) (short) -1);
        boolean boolean9 = node3.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20348");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("hi!");
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test20349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20349");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test20350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20350");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        java.lang.String str5 = jSDocInfo0.toString();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str9 = jSDocInfo0.getLicense();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        boolean boolean11 = jSDocInfo0.isNoCompile();
        boolean boolean12 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20351");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isConstructor();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        boolean boolean12 = jSDocInfo0.hasParameterType("true");
        jSDocInfo0.setDeprecated(false);
        java.util.Set<java.lang.String> strSet15 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet15);
    }

    @Test
    public void test20352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20352");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("OR ");
        stringPosition0.setItem("([class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode])");
        stringPosition0.setItem("java.io.IOException");
        int int9 = stringPosition0.getEndLine();
        int int10 = stringPosition0.getEndLine();
        java.lang.String str11 = stringPosition0.getItem();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(196708, 2, 35, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 196708?end-line: 35");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.io.IOException" + "'", str11, "java.io.IOException");
    }

    @Test
    public void test20353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20353");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node6.getLastSibling();
        boolean boolean20 = node6.isVoid();
        boolean boolean21 = node6.isString();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node6.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
    }

    @Test
    public void test20354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20354");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test20355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20355");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        boolean boolean94 = typeList91.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test20356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20356");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.lang.String[] strArray12 = new java.lang.String[] { "Not declared as a type name", "(hi!)", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.String[] strArray24 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.Object[] objArray27 = strSet25.toArray();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList37 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet6, (java.util.AbstractSet<java.lang.String>) strSet13, (java.util.AbstractSet<java.lang.String>) strSet25, (java.util.AbstractSet<java.lang.String>) strSet34);
        boolean boolean38 = strSet34.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator39 = strSet34.spliterator();
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList40 = com.google.common.collect.ImmutableList.of(strSet34);
        java.util.Iterator<java.lang.String> strItor41 = strSet34.iterator();
        java.lang.Object[] objArray42 = strSet34.toArray();
        com.google.javascript.rhino.JSDocInfo.Marker marker43 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = marker43.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = marker43.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition46 = marker43.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = marker43.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker48 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = marker48.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = marker48.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker51 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = marker51.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition53 = marker51.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker54 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition55 = marker54.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker56 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = marker56.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition58 = marker56.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList59 = com.google.common.collect.ImmutableList.of(marker48, marker51, marker54, marker56);
        com.google.javascript.rhino.JSDocInfo.Marker marker60 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition61 = marker60.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker62 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition63 = marker62.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition64 = marker62.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker65 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition66 = marker65.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition67 = marker65.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker68 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition69 = marker68.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker68.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition71 = marker68.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker72 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker72.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition74 = marker72.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker75 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = marker75.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition77 = marker75.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker78 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition79 = marker78.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition80 = marker78.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker81 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition82 = marker81.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker83 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition84 = marker83.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition85 = marker83.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList86 = com.google.common.collect.ImmutableList.of(marker75, marker78, marker81, marker83);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition87 = marker78.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition88 = marker78.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList89 = com.google.common.collect.ImmutableList.of(marker43, marker51, marker60, marker62, marker65, marker68, marker72, marker78);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition90 = marker43.getDescription();
        boolean boolean91 = strSet34.equals((java.lang.Object) marker43);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strSetList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSpliterator39);
        org.junit.Assert.assertNotNull(strSetList40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[, Not declared as a constructor, Unknown class name, Not declared as a type name]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[, Not declared as a constructor, Unknown class name, Not declared as a type name]");
        org.junit.Assert.assertNull(typePosition44);
        org.junit.Assert.assertNull(stringPosition45);
        org.junit.Assert.assertNull(nodeSourcePosition46);
        org.junit.Assert.assertNull(typePosition47);
        org.junit.Assert.assertNull(typePosition49);
        org.junit.Assert.assertNull(typePosition50);
        org.junit.Assert.assertNull(stringPosition52);
        org.junit.Assert.assertNull(stringPosition53);
        org.junit.Assert.assertNull(typePosition55);
        org.junit.Assert.assertNull(typePosition57);
        org.junit.Assert.assertNull(typePosition58);
        org.junit.Assert.assertNotNull(markerList59);
        org.junit.Assert.assertNull(typePosition61);
        org.junit.Assert.assertNull(typePosition63);
        org.junit.Assert.assertNull(stringPosition64);
        org.junit.Assert.assertNull(typePosition66);
        org.junit.Assert.assertNull(typePosition67);
        org.junit.Assert.assertNull(typePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(nodeSourcePosition71);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNull(stringPosition74);
        org.junit.Assert.assertNull(typePosition76);
        org.junit.Assert.assertNull(typePosition77);
        org.junit.Assert.assertNull(stringPosition79);
        org.junit.Assert.assertNull(stringPosition80);
        org.junit.Assert.assertNull(typePosition82);
        org.junit.Assert.assertNull(typePosition84);
        org.junit.Assert.assertNull(typePosition85);
        org.junit.Assert.assertNotNull(markerList86);
        org.junit.Assert.assertNull(stringPosition87);
        org.junit.Assert.assertNull(typePosition88);
        org.junit.Assert.assertNotNull(markerList89);
        org.junit.Assert.assertNull(stringPosition90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test20357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20357");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node5.new FileLevelJsDocBuilder();
        boolean boolean12 = node5.isVarArgs();
        boolean boolean13 = node5.isCatch();
        boolean boolean14 = node5.isAdd();
        boolean boolean15 = node5.isIn();
        boolean boolean16 = node5.isVoid();
        boolean boolean17 = node5.isParamList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test20358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20358");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        boolean boolean6 = node3.getBooleanProp((int) (byte) 100);
        boolean boolean7 = node3.isString();
        boolean boolean8 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        node11.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int20 = node11.getSideEffectFlags();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node23.addChildToBack(node26);
        int int30 = node11.getIndexOfChild(node23);
        boolean boolean31 = node11.isBreak();
        boolean boolean32 = node11.isDo();
        boolean boolean33 = node11.isUnscopedQualifiedName();
        boolean boolean34 = node11.isParamList();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(0, node3, node11);
        boolean boolean36 = node3.isFalse();
        boolean boolean37 = node3.isComma();
        boolean boolean38 = node3.isAnd();
        com.google.javascript.rhino.Node node39 = node3.getNext();
        boolean boolean40 = node39.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test20359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20359");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        boolean boolean94 = typeList91.contains((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList95.reverse();
        int int97 = typeList96.size();
        java.lang.String str98 = typeList96.toString();
        // The following exception was thrown during execution in test generation
        try {
            typeList96.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 18 + "'", int97 == 18);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str98, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test20360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20360");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        java.lang.String str23 = node2.getQualifiedName();
        boolean boolean24 = node2.isArrayLit();
        boolean boolean25 = node2.isSetterDef();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = new com.google.javascript.rhino.JSTypeExpression(node2, "");
        boolean boolean28 = jSTypeExpression27.isVarArgs();
        com.google.javascript.rhino.Node node29 = jSTypeExpression27.getRoot();
        boolean boolean30 = jSTypeExpression27.isVarArgs();
        com.google.javascript.rhino.Node node31 = jSTypeExpression27.getRoot();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression27);
        boolean boolean33 = jSTypeExpression27.isOptionalArg();
        boolean boolean34 = jSTypeExpression27.isOptionalArg();
        boolean boolean35 = jSTypeExpression27.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test20361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20361");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        boolean boolean4 = node3.isFunction();
        boolean boolean5 = node3.isSwitch();
        boolean boolean6 = node3.isIn();
        boolean boolean7 = node3.isVoid();
        java.lang.String str8 = node3.toString();
        boolean boolean9 = node3.isComma();
        boolean boolean10 = node3.isGetProp();
        boolean boolean11 = node3.isUnscopedQualifiedName();
        int int12 = node3.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str8, "STRING InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test20362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20362");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.lang.String str93 = typeList91.toString();
        java.lang.String str94 = typeList91.toString();
        java.util.Spliterator<java.lang.reflect.Type> typeSpliterator95 = typeList91.spliterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList96 = typeList91.asList();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            typeList91.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str93, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str94, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeSpliterator95);
        org.junit.Assert.assertNotNull(typeList96);
        org.junit.Assert.assertNotNull(typeList97);
    }

    @Test
    public void test20363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20363");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getThisType();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("OR  [quoted: 1]\n");
        boolean boolean9 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20364");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isImplicitCast();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean7 = jSDocInfo0.hasParameter("java.io.IOException: OR \n");
        boolean boolean8 = jSDocInfo0.isExport();
        boolean boolean9 = jSDocInfo0.isNoShadow();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean12 = jSDocInfo0.hasParameterType("OR  [empty_block: 1]");
        boolean boolean13 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20365");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        boolean boolean4 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.isContinue();
        int int9 = node7.getSourcePosition();
        com.google.javascript.rhino.Node node10 = node7.removeChildren();
        java.lang.String str11 = node7.getSourceFileName();
        boolean boolean12 = node7.isNoSideEffectsCall();
        jSDocInfo0.setAssociatedNode(node7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20366");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getLastSibling();
        int int5 = node4.getLength();
        node4.setQuotedString();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node21.addChildToBack(node24);
        int int28 = node9.getIndexOfChild(node21);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.hasChildren();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = null;
        int int37 = node35.getIndexOfChild(node36);
        node35.putProp((int) (short) 1, (java.lang.Object) 1);
        node35.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node44 = node31.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean45 = node44.wasEmptyNode();
        com.google.javascript.rhino.Node node46 = node9.useSourceInfoFrom(node44);
        boolean boolean47 = node46.isWhile();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = null;
        int int52 = node50.getIndexOfChild(node51);
        node50.putProp((int) (short) 1, (java.lang.Object) 1);
        node50.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int59 = node50.getSideEffectFlags();
        boolean boolean60 = node50.isParamList();
        int int61 = node50.getLineno();
        boolean boolean62 = node50.hasChildren();
        com.google.javascript.rhino.Node node63 = node46.useSourceInfoIfMissingFrom(node50);
        boolean boolean64 = node46.isArrayLit();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean67 = node66.isScript();
        java.lang.String[] strArray73 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        java.util.Iterator<java.lang.String> strItor76 = strSet74.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator77 = strSet74.spliterator();
        node66.setDirectives((java.util.Set<java.lang.String>) strSet74);
        boolean boolean79 = node66.isCatch();
        boolean boolean80 = node66.isBlock();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(0);
        boolean boolean83 = node82.isCase();
        boolean boolean84 = node82.isFunction();
        boolean boolean85 = node82.isSwitch();
        com.google.javascript.rhino.Node node86 = node66.useSourceInfoFromForTree(node82);
        com.google.javascript.rhino.Node node87 = node46.copyInformationFromForTree(node82);
        com.google.javascript.rhino.Node node88 = node4.useSourceInfoIfMissingFromForTree(node87);
        com.google.javascript.rhino.InputId inputId89 = node87.getInputId();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strItor76);
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(inputId89);
    }

    @Test
    public void test20367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20367");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        node19.setOptionalArg(false);
        boolean boolean28 = node19.isStringKey();
        com.google.javascript.rhino.Node node29 = node19.getLastSibling();
        boolean boolean30 = node19.isGetterDef();
        node19.setCharno(10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test20368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20368");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node2.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor17 = ancestorIterable16.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor18 = ancestorIterable16.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor19 = ancestorIterable16.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNotNull(nodeItor19);
    }

    @Test
    public void test20369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20369");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        java.lang.String str7 = jSDocInfo0.getLicense();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test20370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20370");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(25, "Unknown class name");
        int int4 = node2.getIntProp(5);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test20371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20371");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(12289);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 12289 + "'", int2 == 12289);
    }

    @Test
    public void test20372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20372");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isConstructor();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        boolean boolean12 = jSDocInfo0.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getThrownTypes();
        boolean boolean14 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(2);
        boolean boolean17 = node16.isLabelName();
        boolean boolean18 = node16.isEmpty();
        com.google.javascript.rhino.Node node19 = node16.cloneNode();
        boolean boolean20 = node16.isInc();
        jSDocInfo0.setAssociatedNode(node16);
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test20373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20373");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.lang.String str93 = typeList91.toString();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor95 = typeList94.listIterator();
        int int96 = typeItor95.nextIndex();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str93, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test20374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20374");
        java.io.IOException iOException4 = new java.io.IOException("(hi!)");
        java.io.IOException iOException5 = new java.io.IOException("Named type with empty name component", (java.lang.Throwable) iOException4);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList6 = com.google.common.collect.ImmutableList.of(iOException4);
        java.io.IOException iOException7 = new java.io.IOException("JSDocInfo", (java.lang.Throwable) iOException4);
        java.lang.Throwable[] throwableArray8 = iOException7.getSuppressed();
        java.io.IOException iOException9 = new java.io.IOException("OR  [empty_block: 1]", (java.lang.Throwable) iOException7);
        java.lang.String str10 = iOException7.toString();
        org.junit.Assert.assertNotNull(iOExceptionList6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.io.IOException: JSDocInfo" + "'", str10, "java.io.IOException: JSDocInfo");
    }

    @Test
    public void test20375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20375");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        node16.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node25 = node12.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.isContinue();
        boolean boolean31 = node28.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(42, node25, node28, 42, (int) (byte) 100);
        boolean boolean35 = node25.isNE();
        int int36 = node2.getIndexOfChild(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node25.children();
        boolean boolean38 = node25.isEmpty();
        com.google.javascript.rhino.InputId inputId39 = node25.getInputId();
        boolean boolean40 = node25.isAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node25.siblings();
        boolean boolean42 = node25.isNumber();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputId39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test20376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20376");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1);
        boolean boolean15 = node3.isCase();
        boolean boolean16 = node3.isThrow();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(1, node3);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.hasChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = null;
        int int27 = node25.getIndexOfChild(node26);
        node25.putProp((int) (short) 1, (java.lang.Object) 1);
        node25.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node34 = node21.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isContinue();
        boolean boolean40 = node37.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(42, node34, node37, 42, (int) (byte) 100);
        boolean boolean44 = node43.isDec();
        com.google.javascript.rhino.Node node45 = node43.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node43.children();
        node43.setOptionalArg(false);
        com.google.javascript.rhino.Node node49 = node17.srcrefTree(node43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.isContinue();
        boolean boolean54 = node52.isFromExterns();
        boolean boolean55 = node52.wasEmptyNode();
        com.google.javascript.rhino.Node node56 = node49.copyInformationFromForTree(node52);
        boolean boolean57 = node52.hasChildren();
        boolean boolean58 = node52.isAssignAdd();
        node52.setType((int) 'a');
        com.google.javascript.rhino.Node node61 = node52.cloneTree();
        java.lang.String str62 = node61.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ASSIGN_MOD \n" + "'", str62, "ASSIGN_MOD \n");
    }

    @Test
    public void test20377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20377");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean2 = node1.isCase();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node5.addChildToBack(node8);
        java.util.Set<java.lang.String> strSet12 = node8.getDirectives();
        boolean boolean13 = node8.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node8.new FileLevelJsDocBuilder();
        boolean boolean15 = node8.isVarArgs();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean19 = node18.isContinue();
        node18.setQuotedString();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.hasChildren();
        com.google.javascript.rhino.Node node25 = node23.getLastSibling();
        node25.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = null;
        int int32 = node30.getIndexOfChild(node31);
        node30.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean36 = node30.isDec();
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node38 = node18.srcrefTree(node37);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node38.getStaticSourceFile();
        int int41 = staticSourceFile39.getLineOffset(39);
        node8.setStaticSourceFile(staticSourceFile39);
        node1.setStaticSourceFile(staticSourceFile39);
        int int45 = staticSourceFile39.getColumnOfOffset(31);
        int int47 = staticSourceFile39.getLineOfOffset(16);
        int int49 = staticSourceFile39.getLineOffset(1);
        boolean boolean50 = staticSourceFile39.isExtern();
        java.lang.String str51 = staticSourceFile39.getName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-2147483648) + "'", int41 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-2147483648) + "'", int49 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Not declared as a type name" + "'", str51, "Not declared as a type name");
    }

    @Test
    public void test20378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20378");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) ' ');
        boolean boolean2 = node1.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder3 = node1.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean7 = node6.isContinue();
        boolean boolean9 = node6.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.isContinue();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        com.google.javascript.rhino.Node node19 = node17.getLastSibling();
        node19.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node24.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean30 = node24.isDec();
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node32 = node12.srcrefTree(node31);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node32.getStaticSourceFile();
        int int35 = staticSourceFile33.getLineOffset(39);
        int int37 = staticSourceFile33.getColumnOfOffset(41);
        node6.setStaticSourceFile(staticSourceFile33);
        int int40 = staticSourceFile33.getColumnOfOffset(8);
        int int42 = staticSourceFile33.getLineOffset(38);
        int int44 = staticSourceFile33.getLineOffset(43);
        int int46 = staticSourceFile33.getLineOffset(12);
        node1.setStaticSourceFile(staticSourceFile33);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(staticSourceFile33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-2147483648) + "'", int35 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-2147483648) + "'", int42 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-2147483648) + "'", int44 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-2147483648) + "'", int46 == (-2147483648));
    }

    @Test
    public void test20379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20379");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        int int10 = stringPosition8.getPositionOnEndLine();
        stringPosition8.setItem("OR ");
        int int13 = stringPosition8.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int15 = stringPosition14.getStartLine();
        int int16 = stringPosition14.getPositionOnStartLine();
        int int17 = stringPosition14.getPositionOnEndLine();
        stringPosition14.setPositionInformation(4, 50, 45, (int) (byte) 0);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int24 = stringPosition23.getPositionOnStartLine();
        int int25 = stringPosition23.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int27 = stringPosition26.getStartLine();
        int int28 = stringPosition26.getEndLine();
        int int29 = stringPosition26.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition8, stringPosition14, stringPosition23, stringPosition26);
        int int31 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
    }

    @Test
    public void test20380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20380");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(40, nodeArray6);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(48, nodeArray6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) '4', nodeArray6);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, nodeArray6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(16, nodeArray6);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(38, nodeArray6);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        node16.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int25 = node16.getSideEffectFlags();
        boolean boolean26 = node16.isParamList();
        int int27 = node16.getLineno();
        boolean boolean28 = node16.hasChildren();
        boolean boolean29 = node16.isBlock();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        node32.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int41 = node32.getSideEffectFlags();
        int int42 = node32.getChildCount();
        boolean boolean43 = node32.isIf();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean47 = node46.hasChildren();
        com.google.javascript.rhino.Node node48 = node46.getParent();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = null;
        int int53 = node51.getIndexOfChild(node52);
        node51.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean57 = node51.isDec();
        boolean boolean58 = node51.isHook();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(31, node16, node32, node46, node51);
        boolean boolean60 = node32.isAssign();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        node32.addChildToBack(node63);
        node63.setOptionalArg(true);
        com.google.javascript.rhino.Node node67 = node12.srcrefTree(node63);
        boolean boolean68 = node63.isExprResult();
        boolean boolean69 = node63.isGetElem();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test20381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20381");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node16.isNE();
        boolean boolean27 = node16.hasChildren();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean31 = node30.hasChildren();
        boolean boolean32 = node30.isAssignAdd();
        boolean boolean33 = node30.isDebugger();
        boolean boolean34 = node30.isFromExterns();
        node30.setSourceEncodedPosition(35);
        boolean boolean37 = node30.isTypeOf();
        node16.addChildrenToFront(node30);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node41 = node30.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = null;
        int int49 = node47.getIndexOfChild(node48);
        node44.addChildToBack(node47);
        java.util.Set<java.lang.String> strSet51 = node47.getDirectives();
        boolean boolean52 = node47.isCall();
        boolean boolean53 = node47.isRegExp();
        node47.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node56 = node47.getLastSibling();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean60 = node59.hasChildren();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = null;
        int int65 = node63.getIndexOfChild(node64);
        node63.putProp((int) (short) 1, (java.lang.Object) 1);
        node63.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node72 = node59.useSourceInfoIfMissingFromForTree(node63);
        boolean boolean73 = node63.isExprResult();
        node47.addChildToBack(node63);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder75 = node47.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean77 = jSDocInfo76.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList78 = jSDocInfo76.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList79 = jSDocInfo76.getTemplateTypeNames();
        boolean boolean80 = jSDocInfo76.isNoTypeCheck();
        com.google.javascript.rhino.Node node81 = jSDocInfo76.getAssociatedNode();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList82 = jSDocInfo76.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo76.getEnumParameterType();
        boolean boolean84 = jSDocInfo76.hasTypedefType();
        node47.setJSDocInfo(jSDocInfo76);
        com.google.javascript.rhino.Node node86 = node30.clonePropsFrom(node47);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(jSTypeExpressionList82);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test20382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20382");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = null;
        int int6 = node4.getIndexOfChild(node5);
        node4.putProp((int) (short) 1, (java.lang.Object) 1);
        node4.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int13 = node4.getSideEffectFlags();
        node4.setSourceEncodedPositionForTree(1);
        boolean boolean16 = node4.isCase();
        boolean boolean17 = node4.isThrow();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(1, node4);
        node4.setSourceFileForTesting("ERROR");
        boolean boolean21 = node4.isContinue();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node4.new FileLevelJsDocBuilder();
        node4.setSourceEncodedPosition(43);
        com.google.javascript.rhino.Node node25 = null;
        com.google.javascript.rhino.Node node26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(38, node4, node25, node26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test20383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20383");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeItor92.hasPrevious();
        java.lang.reflect.Type type94 = typeItor92.next();
        boolean boolean95 = typeItor92.hasNext();
        int int96 = typeItor92.previousIndex();
        java.lang.reflect.Type type97 = typeItor92.previous();
        boolean boolean98 = typeItor92.hasPrevious();
        java.lang.reflect.Type type99 = typeItor92.next();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(type97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(type99);
    }

    @Test
    public void test20384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20384");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isJavaDispatch();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        boolean boolean9 = jSDocInfo0.hasParameter("(NUMBER 10.0)");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20385");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        int int5 = stringPosition0.getEndLine();
        stringPosition0.setItem("java.io.IOException: java.io.IOException: (hi!)");
        int int8 = stringPosition0.getEndLine();
        stringPosition0.setItem("this");
        int int11 = stringPosition0.getEndLine();
        int int12 = stringPosition0.getEndLine();
        int int13 = stringPosition0.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test20386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20386");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean6 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str7 = jSDocInfo0.getDescription();
        boolean boolean8 = jSDocInfo0.hasModifies();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        boolean boolean11 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(visibility12);
    }

    @Test
    public void test20387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20387");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(49, "Node tree inequality:\nTree1:\nOR \n\n\nTree2:\nOR \n    REGEXP 100\n\n\nSubtree1: OR \n\n\nSubtree2: OR \n    REGEXP 100\n", (int) (byte) -1, 40992);
        int int5 = node4.getLength();
        com.google.javascript.rhino.Node node6 = node4.cloneNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
    }

    @Test
    public void test20388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20388");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        boolean boolean10 = jSDocInfo5.hasDescriptionForParameter("hi!");
        boolean boolean12 = jSDocInfo5.hasParameterType("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        boolean boolean13 = jSDocInfo5.isConsistentIdGenerator();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = jSDocInfo5.getTypeNodes();
        java.lang.String str15 = jSDocInfo5.getLicense();
        boolean boolean16 = jSDocInfo5.isJavaDispatch();
        boolean boolean17 = jSDocInfo5.isIdGenerator();
        java.lang.String str18 = jSDocInfo5.getReturnDescription();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeCollection14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test20389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20389");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node4 = null;
        int int5 = node3.getIndexOfChild(node4);
        node3.putProp((int) (short) 1, (java.lang.Object) 1);
        node3.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int12 = node3.getSideEffectFlags();
        boolean boolean13 = node3.isParamList();
        int int14 = node3.getLineno();
        boolean boolean15 = node3.hasChildren();
        boolean boolean16 = node3.isBlock();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int28 = node19.getSideEffectFlags();
        int int29 = node19.getChildCount();
        boolean boolean30 = node19.isIf();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean34 = node33.hasChildren();
        com.google.javascript.rhino.Node node35 = node33.getParent();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = null;
        int int40 = node38.getIndexOfChild(node39);
        node38.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean44 = node38.isDec();
        boolean boolean45 = node38.isHook();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(31, node3, node19, node33, node38);
        boolean boolean47 = node19.isAssign();
        boolean boolean48 = node19.isParamList();
        boolean boolean49 = node19.isParamList();
        boolean boolean50 = node19.isDebugger();
        node19.putBooleanProp(48, false);
        boolean boolean54 = node19.isSwitch();
        node19.setType((int) (byte) -1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test20390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20390");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesGlobalState();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
    }

    @Test
    public void test20391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20391");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int32 = typePosition31.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int36 = typePosition35.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int39 = typePosition38.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList41 = com.google.common.collect.ImmutableList.of(typePosition31, typePosition33, typePosition35, typePosition37, typePosition38, typePosition40);
        int int42 = typePosition33.getPositionOnStartLine();
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder43 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition33);
        int int44 = typePosition33.getPositionOnEndLine();
        int int45 = typePosition33.getPositionOnStartLine();
        int int46 = typePosition33.getStartLine();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 100, (int) '#', 32);
        java.lang.String str51 = node50.getQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        node55.setCharno(3);
        boolean boolean58 = node50.hasChild(node55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean62 = node61.hasChildren();
        boolean boolean63 = node61.isAssignAdd();
        boolean boolean64 = node61.isDebugger();
        java.lang.String str65 = node61.getQualifiedName();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean69 = node68.isContinue();
        boolean boolean71 = node68.getBooleanProp((int) (byte) 100);
        boolean boolean72 = node68.isString();
        boolean boolean73 = node68.isNoSideEffectsCall();
        node61.addChildToFront(node68);
        com.google.javascript.rhino.Node node75 = node55.srcref(node68);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean79 = node78.hasChildren();
        com.google.javascript.rhino.Node node80 = node78.getLastSibling();
        int int81 = node80.getLength();
        node80.setQuotedString();
        int int83 = node80.getLineno();
        com.google.javascript.rhino.Node node84 = node75.useSourceInfoIfMissingFrom(node80);
        typePosition33.setItem(node84);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(typePositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test20392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20392");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.lang.String str92 = typeList91.toString();
        boolean boolean93 = typeList91.isEmpty();
        boolean boolean95 = typeList91.equals((java.lang.Object) 42);
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor97 = typeList91.listIterator(9);
        java.lang.Object[] objArray98 = typeList91.toArray();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str92, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(typeItor97);
        org.junit.Assert.assertNotNull(objArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray98), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray98), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test20393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20393");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(30, 45, (int) 'a');
        int int4 = node3.getChildCount();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int16 = node7.getSideEffectFlags();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = null;
        int int24 = node22.getIndexOfChild(node23);
        node19.addChildToBack(node22);
        com.google.javascript.rhino.Node node26 = node19.getNext();
        com.google.javascript.rhino.Node node27 = node7.useSourceInfoFromForTree(node19);
        boolean boolean28 = node27.isFor();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = null;
        int int36 = node34.getIndexOfChild(node35);
        node31.addChildToBack(node34);
        boolean boolean38 = node34.isName();
        com.google.javascript.rhino.InputId inputId40 = new com.google.javascript.rhino.InputId("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        java.lang.String str41 = inputId40.toString();
        node34.setInputId(inputId40);
        node27.setInputId(inputId40);
        boolean boolean44 = node27.isContinue();
        boolean boolean45 = node27.isSyntheticBlock();
        com.google.javascript.rhino.Node node46 = node3.copyInformationFrom(node27);
        boolean boolean47 = node46.isTypeOf();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str41, "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test20394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20394");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node2.getStaticSourceFile();
        boolean boolean14 = node2.wasEmptyNode();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node18.putProp((int) (short) 1, (java.lang.Object) 1);
        node18.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int27 = node18.getSideEffectFlags();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node30.addChildToBack(node33);
        com.google.javascript.rhino.Node node37 = node30.getNext();
        com.google.javascript.rhino.Node node38 = node18.useSourceInfoFromForTree(node30);
        boolean boolean39 = node30.isNot();
        boolean boolean40 = node30.isCatch();
        int int42 = node30.getIntProp((int) (byte) 0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node44.getJSDocInfo();
        boolean boolean46 = node44.isContinue();
        node30.addChildrenToFront(node44);
        boolean boolean48 = node30.isCase();
        boolean boolean49 = node30.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node50 = node2.copyInformationFromForTree(node30);
        boolean boolean51 = node50.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test20395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20395");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(5, (int) (short) 1, 43);
    }

    @Test
    public void test20396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20396");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeList91.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.reverse();
        boolean boolean95 = typeList91.isEmpty();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList91.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList91.asList();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type type99 = typeList91.remove(51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
    }

    @Test
    public void test20397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20397");
        java.io.IOException iOException2 = new java.io.IOException("(NUMBER 35.0)");
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.io.IOException iOException4 = new java.io.IOException("NUMBER 0.0 50", (java.lang.Throwable) iOException2);
        java.lang.String str5 = iOException4.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.io.IOException: NUMBER 0.0 50" + "'", str5, "java.io.IOException: NUMBER 0.0 50");
    }

    @Test
    public void test20398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20398");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4, (int) (byte) 100, 4095);
        boolean boolean4 = node3.isStringKey();
        com.google.javascript.rhino.Node node6 = node3.getAncestor(97);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test20399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20399");
        java.io.IOException iOException2 = new java.io.IOException("Not declared as a type name");
        java.lang.Throwable[] throwableArray3 = iOException2.getSuppressed();
        java.io.IOException iOException4 = new java.io.IOException("GETELEM 0", (java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException2);
        org.junit.Assert.assertNotNull(throwableArray3);
    }

    @Test
    public void test20400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20400");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray11 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.util.Iterator<java.lang.String> strItor14 = strSet12.iterator();
        strSet12.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean17 = strSet12.equals((java.lang.Object) visibility16);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility19 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility21 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray27 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        java.util.Iterator<java.lang.String> strItor30 = strSet28.iterator();
        strSet28.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility32 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean33 = strSet28.equals((java.lang.Object) visibility32);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList34 = com.google.common.collect.ImmutableList.of(visibility5, visibility16, visibility18, visibility19, visibility20, visibility21, visibility32);
        jSDocInfo0.setVisibility(visibility18);
        int int36 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean37 = jSDocInfo0.isHidden();
        java.lang.String str38 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertTrue("'" + visibility16 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility16.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility19 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility19.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility21 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility21.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertTrue("'" + visibility32 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility32.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(visibilityList34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "JSDocInfo" + "'", str38, "JSDocInfo");
    }

    @Test
    public void test20401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20401");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        int int4 = jSDocInfo0.getParameterCount();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test20402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20402");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        java.lang.String str23 = node2.getQualifiedName();
        boolean boolean24 = node2.isArrayLit();
        boolean boolean25 = node2.isSetterDef();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = new com.google.javascript.rhino.JSTypeExpression(node2, "");
        boolean boolean28 = jSTypeExpression27.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection30 = jSDocInfo29.getMarkers();
        java.util.Set<java.lang.String> strSet31 = jSDocInfo29.getParameterNames();
        boolean boolean32 = jSDocInfo29.isDeprecated();
        java.lang.String str33 = jSDocInfo29.getReturnDescription();
        boolean boolean34 = jSDocInfo29.isConstructor();
        boolean boolean35 = jSDocInfo29.shouldPreserveTry();
        boolean boolean36 = jSDocInfo29.isExpose();
        boolean boolean37 = jSDocInfo29.hasBaseType();
        int int38 = jSDocInfo29.getParameterCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray45 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        java.util.Iterator<java.lang.String> strItor48 = strSet46.iterator();
        strSet46.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility50 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean51 = strSet46.equals((java.lang.Object) visibility50);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        com.google.javascript.rhino.JSDocInfo.Visibility visibility55 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        java.lang.String[] strArray61 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        java.util.Iterator<java.lang.String> strItor64 = strSet62.iterator();
        strSet62.clear();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean67 = strSet62.equals((java.lang.Object) visibility66);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList68 = com.google.common.collect.ImmutableList.of(visibility39, visibility50, visibility52, visibility53, visibility54, visibility55, visibility66);
        jSDocInfo29.setVisibility(visibility39);
        boolean boolean70 = jSTypeExpression27.equals((java.lang.Object) jSDocInfo29);
        java.lang.Object obj71 = null;
        boolean boolean72 = jSTypeExpression27.equals(obj71);
        com.google.javascript.rhino.Node node73 = jSTypeExpression27.getRoot();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression27);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression74);
        boolean boolean76 = jSTypeExpression75.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(markerCollection30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertTrue("'" + visibility50 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility50.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + visibility52 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility52.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + visibility55 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility55.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertTrue("'" + visibility66 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility66.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(visibilityList68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSTypeExpression74);
        org.junit.Assert.assertNotNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test20403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20403");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder1 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.common.collect.ImmutableCollection<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionCollection2 = nodeSourcePositionBuilder1.build();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int11 = typePosition10.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList13 = com.google.common.collect.ImmutableList.of(typePosition3, typePosition5, typePosition7, typePosition9, typePosition10, typePosition12);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int19 = typePosition18.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int22 = typePosition21.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList24 = com.google.common.collect.ImmutableList.of(typePosition14, typePosition16, typePosition18, typePosition20, typePosition21, typePosition23);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition25 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int26 = typePosition25.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int28 = typePosition27.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int30 = typePosition29.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int33 = typePosition32.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList35 = com.google.common.collect.ImmutableList.of(typePosition25, typePosition27, typePosition29, typePosition31, typePosition32, typePosition34);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int37 = typePosition36.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int39 = typePosition38.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int41 = typePosition40.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int44 = typePosition43.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList46 = com.google.common.collect.ImmutableList.of(typePosition36, typePosition38, typePosition40, typePosition42, typePosition43, typePosition45);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int48 = typePosition47.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int50 = typePosition49.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition51 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int52 = typePosition51.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition53 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition54 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int55 = typePosition54.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList57 = com.google.common.collect.ImmutableList.of(typePosition47, typePosition49, typePosition51, typePosition53, typePosition54, typePosition56);
        typePosition47.setPositionInformation((int) ' ', (int) ' ', (int) (byte) 100, 31);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray64 = new com.google.javascript.rhino.SourcePosition[5];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray65 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray64;
        nodeSourcePositionArray65[0] = typePosition9;
        nodeSourcePositionArray65[1] = typePosition16;
        nodeSourcePositionArray65[2] = typePosition27;
        nodeSourcePositionArray65[3] = typePosition36;
        nodeSourcePositionArray65[4] = typePosition47;
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder76 = nodeSourcePositionBuilder1.add(nodeSourcePositionArray65);
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder77 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray65);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition78 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder79 = nodeSourcePositionBuilder77.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition78);
        com.google.common.collect.ImmutableCollection<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionCollection80 = nodeSourcePositionBuilder77.build();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList81 = nodeSourcePositionBuilder77.build();
        org.junit.Assert.assertNotNull(nodeSourcePositionCollection2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(typePositionList13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(typePositionList24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(typePositionList35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(typePositionList46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(typePositionList57);
        org.junit.Assert.assertNotNull(sourcePositionArray64);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray65);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder76);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder77);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder79);
        org.junit.Assert.assertNotNull(nodeSourcePositionCollection80);
        org.junit.Assert.assertNotNull(nodeSourcePositionList81);
    }

    @Test
    public void test20404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20404");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags1.setThrows();
        int int3 = sideEffectFlags1.valueOf();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 37 + "'", int3 == 37);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test20405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20405");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        java.lang.String str9 = node2.getString();
        boolean boolean10 = node2.isScript();
        boolean boolean11 = node2.isSetterDef();
        boolean boolean12 = node2.isDefaultCase();
        boolean boolean13 = node2.isThis();
        // The following exception was thrown during execution in test generation
        try {
            node2.setSideEffectFlags(42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20406");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        boolean boolean4 = node3.isFunction();
        boolean boolean5 = node3.isSwitch();
        boolean boolean6 = node3.isSetterDef();
        boolean boolean7 = node3.isIf();
        boolean boolean8 = node3.isInstanceOf();
        boolean boolean9 = node3.isRegExp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20407");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isCall();
        boolean boolean11 = node5.isRegExp();
        node5.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node14 = node5.getLastSibling();
        boolean boolean15 = node14.isDefaultCase();
        boolean boolean16 = node14.isThrow();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test20408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20408");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node2.siblings();
        boolean boolean4 = node2.isAssign();
        com.google.javascript.rhino.Node node5 = node2.cloneTree();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.hasChildren();
        com.google.javascript.rhino.Node node11 = node9.getLastSibling();
        node11.setSourceFileForTesting("Not declared as a type name");
        boolean boolean14 = node11.isWith();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(100, node11, 51, 10);
        com.google.javascript.rhino.Node node18 = node17.cloneNode();
        boolean boolean19 = node17.isFromExterns();
        com.google.javascript.rhino.Node node20 = node5.copyInformationFrom(node17);
        boolean boolean21 = node5.isCatch();
        boolean boolean22 = node5.isLocalResultCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test20409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20409");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = null;
        int int6 = node4.getIndexOfChild(node5);
        node4.putProp((int) (short) 1, (java.lang.Object) 1);
        node4.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int13 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node16.addChildToBack(node19);
        com.google.javascript.rhino.Node node23 = node16.getNext();
        com.google.javascript.rhino.Node node24 = node4.useSourceInfoFromForTree(node16);
        boolean boolean25 = node16.isNot();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(10, node16, (int) ' ', (int) '4');
        boolean boolean29 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) '#', 39, 49);
        boolean boolean34 = node33.isDo();
        com.google.javascript.rhino.Node node35 = node28.srcref(node33);
        boolean boolean36 = node28.isThis();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node39.siblings();
        boolean boolean41 = node39.isAssign();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = null;
        int int46 = node44.getIndexOfChild(node45);
        node44.putProp((int) (short) 1, (java.lang.Object) 1);
        node44.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int53 = node44.getSideEffectFlags();
        boolean boolean54 = node44.isParamList();
        int int55 = node44.getLineno();
        boolean boolean56 = node44.hasChildren();
        boolean boolean57 = node44.isBlock();
        int int58 = node44.getCharno();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(32, node28, node39, node44, 53, 5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = node61.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test20410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20410");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray93 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray94 = typeList91.toArray(genericDeclarationArray93);
        java.util.Iterator<java.lang.reflect.Type> typeItor95 = typeList91.iterator();
        java.lang.Object obj96 = null;
        int int97 = typeList91.lastIndexOf(obj96);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(genericDeclarationArray93);
        org.junit.Assert.assertNotNull(genericDeclarationArray94);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test20411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20411");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        java.lang.String str9 = node2.getString();
        boolean boolean10 = node2.isScript();
        boolean boolean11 = node2.isGetProp();
        com.google.javascript.rhino.Node node12 = node2.getNext();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node2.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node17.putProp((int) (short) 1, (java.lang.Object) 1);
        node17.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int26 = node17.getSideEffectFlags();
        boolean boolean27 = node17.isParamList();
        int int28 = node17.getLineno();
        boolean boolean29 = node17.hasChildren();
        boolean boolean30 = node17.isBlock();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node33.putProp((int) (short) 1, (java.lang.Object) 1);
        node33.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int42 = node33.getSideEffectFlags();
        int int43 = node33.getChildCount();
        boolean boolean44 = node33.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        com.google.javascript.rhino.Node node49 = node47.getParent();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = null;
        int int54 = node52.getIndexOfChild(node53);
        node52.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean58 = node52.isDec();
        boolean boolean59 = node52.isHook();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(31, node17, node33, node47, node52);
        boolean boolean61 = node33.isAssign();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = null;
        int int66 = node64.getIndexOfChild(node65);
        node64.putProp((int) (short) 1, (java.lang.Object) 1);
        node64.putIntProp((int) (byte) 1, (int) (byte) 10);
        boolean boolean74 = node64.getBooleanProp(48);
        com.google.javascript.rhino.Node node75 = node33.useSourceInfoFrom(node64);
        boolean boolean76 = node64.hasOneChild();
        boolean boolean77 = node2.isEquivalentToTyped(node64);
        java.util.Set<java.lang.String> strSet78 = node64.getDirectives();
        boolean boolean79 = node64.isDelProp();
        boolean boolean80 = node64.isTry();
        boolean boolean81 = node64.isObjectLit();
        boolean boolean82 = node64.isAssignAdd();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(strSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test20412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20412");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 32, (int) (byte) 1, 42);
        boolean boolean4 = node3.isOr();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("Not declared as a type name", 42, 40);
        boolean boolean9 = node8.isInc();
        boolean boolean10 = node8.isQuotedString();
        node3.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node12 = node8.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test20413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20413");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(45);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
    }

    @Test
    public void test20414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20414");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.hasThisType();
        boolean boolean5 = jSDocInfo0.isNoShadow();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        boolean boolean7 = jSDocInfo0.hasThisType();
        jSDocInfo0.addSuppression("");
        int int10 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        boolean boolean12 = jSDocInfo0.isIdGenerator();
        boolean boolean13 = jSDocInfo0.hasBaseType();
        boolean boolean14 = jSDocInfo0.isHidden();
        boolean boolean15 = jSDocInfo0.isHidden();
        boolean boolean16 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test20415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20415");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        boolean boolean93 = typeItor92.hasPrevious();
        int int94 = typeItor92.nextIndex();
        int int95 = typeItor92.nextIndex();
        int int96 = typeItor92.nextIndex();
        boolean boolean97 = typeItor92.hasNext();
        int int98 = typeItor92.nextIndex();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test20416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20416");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        java.lang.String str43 = node37.toString(false, false, true);
        boolean boolean44 = node37.isNot();
        boolean boolean45 = node37.isWhile();
        boolean boolean46 = node37.isString();
        int int47 = node37.getLength();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR " + "'", str43, "OR ");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test20417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20417");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Iterator<java.lang.String> strItor8 = strSet6.iterator();
        java.lang.String[] strArray12 = new java.lang.String[] { "Not declared as a type name", "(hi!)", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.String[] strArray24 = new java.lang.String[] { "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "Not declared as a constructor", "((hi!))", "hi!", "JSDocInfo", "((hi!))", "Not declared as a type name", "Not declared as a constructor", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.Object[] objArray27 = strSet25.toArray();
        java.lang.String[] strArray33 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        java.util.Iterator<java.lang.String> strItor36 = strSet34.iterator();
        com.google.common.collect.ImmutableList<java.util.AbstractSet<java.lang.String>> strSetList37 = com.google.common.collect.ImmutableList.of((java.util.AbstractSet<java.lang.String>) strSet6, (java.util.AbstractSet<java.lang.String>) strSet13, (java.util.AbstractSet<java.lang.String>) strSet25, (java.util.AbstractSet<java.lang.String>) strSet34);
        boolean boolean38 = strSet13.isEmpty();
        java.util.Iterator<java.lang.String> strItor39 = strSet13.iterator();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = null;
        int int47 = node45.getIndexOfChild(node46);
        node42.addChildToBack(node45);
        node42.setVarArgs(false);
        java.util.Set<java.lang.String> strSet51 = node42.getDirectives();
        boolean boolean52 = node42.isThis();
        boolean boolean53 = strSet13.equals((java.lang.Object) boolean52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = null;
        int int63 = node61.getIndexOfChild(node62);
        node61.putProp((int) (short) 1, (java.lang.Object) 1);
        node61.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node70 = node57.useSourceInfoIfMissingFromForTree(node61);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean74 = node73.isContinue();
        boolean boolean76 = node73.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(42, node70, node73, 42, (int) (byte) 100);
        boolean boolean80 = node70.isNE();
        boolean boolean81 = node70.hasChildren();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean85 = node84.hasChildren();
        boolean boolean86 = node84.isAssignAdd();
        boolean boolean87 = node84.isDebugger();
        boolean boolean88 = node84.isFromExterns();
        node84.setSourceEncodedPosition(35);
        boolean boolean91 = node84.isTypeOf();
        node70.addChildrenToFront(node84);
        boolean boolean93 = strSet13.contains((java.lang.Object) node70);
        com.google.javascript.rhino.Node node94 = node70.getLastChild();
        boolean boolean95 = node70.isScript();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strSetList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test20418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20418");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.isContinue();
        int int5 = node3.getSourcePosition();
        boolean boolean6 = node3.isLabelName();
        node3.setSourceFileForTesting("OR ");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean12 = node11.isContinue();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean17 = node16.hasChildren();
        com.google.javascript.rhino.Node node18 = node16.getLastSibling();
        node18.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = null;
        int int25 = node23.getIndexOfChild(node24);
        node23.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean29 = node23.isDec();
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node31 = node11.srcrefTree(node30);
        node31.setCharno(0);
        boolean boolean34 = node31.isAdd();
        boolean boolean35 = node31.isTry();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.isNoShadow();
        boolean boolean38 = jSDocInfo36.isConstant();
        boolean boolean39 = jSDocInfo36.isNoCompile();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo36.getModifies();
        java.lang.String str41 = jSDocInfo36.getMeaning();
        java.lang.String str43 = jSDocInfo36.getDescriptionForParameter("JSDocInfo");
        node31.setJSDocInfo(jSDocInfo36);
        com.google.javascript.rhino.Node node45 = node3.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node48.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean54 = node48.isDec();
        boolean boolean55 = node48.isHook();
        boolean boolean56 = node48.isBreak();
        node45.addChildToBack(node48);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        boolean boolean62 = node61.isFunction();
        com.google.javascript.rhino.jstype.JSType jSType63 = node61.getJSType();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(97, node45, node61, 2, (int) (byte) 10);
        boolean boolean67 = node66.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(jSType63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test20419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20419");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        boolean boolean5 = node2.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node6 = node2.getNext();
        node2.setSourceEncodedPositionForTree(45);
        boolean boolean9 = node2.isReturn();
        boolean boolean10 = node2.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection13 = jSDocInfo12.getMarkers();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo12.getParameterNames();
        boolean boolean15 = jSDocInfo12.isImplicitCast();
        java.util.Collection<java.lang.String> strCollection16 = jSDocInfo12.getReferences();
        boolean boolean17 = jSDocInfo12.isIdGenerator();
        java.util.Collection<java.lang.String> strCollection18 = jSDocInfo12.getReferences();
        boolean boolean19 = jSDocInfo12.isExpose();
        boolean boolean20 = jSDocInfo12.isConstructor();
        int int21 = jSDocInfo12.getExtendedInterfacesCount();
        node2.putProp(37, (java.lang.Object) jSDocInfo12);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(markerCollection13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strCollection18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test20420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20420");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.ImmutableList<java.util.Collection<java.lang.reflect.Type>> typeCollectionList92 = com.google.common.collect.ImmutableList.of((java.util.Collection<java.lang.reflect.Type>) typeList91);
        java.lang.Object[] objArray93 = typeList91.toArray();
        java.util.ListIterator<java.lang.reflect.Type> typeItor94 = typeList91.listIterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.reverse();
        boolean boolean96 = typeList95.isEmpty();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeCollectionList92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test20421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20421");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        int int11 = typePosition2.getStartLine();
        boolean boolean12 = typePosition2.hasBrackets();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean16 = node15.hasChildren();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node19.putProp((int) (short) 1, (java.lang.Object) 1);
        node19.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node28 = node15.useSourceInfoIfMissingFromForTree(node19);
        boolean boolean29 = node28.wasEmptyNode();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = null;
        int int34 = node32.getIndexOfChild(node33);
        node32.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean38 = node32.isDec();
        boolean boolean39 = node28.isEquivalentToTyped(node32);
        boolean boolean40 = node28.isNumber();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node28.siblings();
        typePosition2.setItem(node28);
        int int43 = typePosition2.getPositionOnStartLine();
        com.google.javascript.rhino.Node node44 = typePosition2.getItem();
        int int45 = typePosition2.getPositionOnEndLine();
        int int46 = typePosition2.getStartLine();
        boolean boolean47 = typePosition2.hasBrackets();
        int int48 = typePosition2.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test20422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20422");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        jSDocInfo0.setLicense("Not declared as a constructor");
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean12 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20423");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(43, nodeArray3, 97, 0);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(54, nodeArray3, 52, 8);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) '4', nodeArray3, 50, 159793);
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test20424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20424");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.Node node19 = node6.cloneTree();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = null;
        int int28 = node26.getIndexOfChild(node27);
        node23.addChildToBack(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean31 = jSDocInfo30.isNoShadow();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo30.getParameterNames();
        node23.setJSDocInfo(jSDocInfo30);
        boolean boolean34 = jSDocInfo30.isNoAlias();
        node19.putProp(48, (java.lang.Object) boolean34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((-1), 37, 25);
        node39.setSourceEncodedPosition(43);
        com.google.javascript.rhino.Node node42 = node19.copyInformationFromForTree(node39);
        boolean boolean43 = node39.isStringKey();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test20425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20425");
        java.io.IOException iOException1 = new java.io.IOException("(java.io.IOException: Named type with empty name component)");
        java.io.IOException iOException3 = new java.io.IOException("Node tree inequality:\nTree1:\nOR  [empty_block: 1]\n    OR \n\n\nTree2:\nOR  [length: 32]\n\n\nSubtree1: OR  [empty_block: 1]\n    OR \n\n\nSubtree2: OR  [length: 32]\n");
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
        java.lang.Class<?> wildcardClass5 = iOException3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test20426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20426");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = marker5.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker5.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker8.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker8.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = marker11.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker13 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = marker13.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = marker13.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList16 = com.google.common.collect.ImmutableList.of(marker5, marker8, marker11, marker13);
        com.google.javascript.rhino.JSDocInfo.Marker marker17 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = marker17.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = marker19.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker22 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition23 = marker22.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition24 = marker22.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker25 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition26 = marker25.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = marker25.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition28 = marker25.getNameNode();
        com.google.javascript.rhino.JSDocInfo.Marker marker29 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition30 = marker29.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition31 = marker29.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker32 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = marker32.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = marker32.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker35 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition36 = marker35.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition37 = marker35.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker38 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = marker38.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker40 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = marker40.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = marker40.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList43 = com.google.common.collect.ImmutableList.of(marker32, marker35, marker38, marker40);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition44 = marker35.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = marker35.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList46 = com.google.common.collect.ImmutableList.of(marker0, marker8, marker17, marker19, marker22, marker25, marker29, marker35);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition47 = marker17.getNameNode();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(typePosition6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(typePosition12);
        org.junit.Assert.assertNull(typePosition14);
        org.junit.Assert.assertNull(typePosition15);
        org.junit.Assert.assertNotNull(markerList16);
        org.junit.Assert.assertNull(typePosition18);
        org.junit.Assert.assertNull(typePosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(typePosition23);
        org.junit.Assert.assertNull(typePosition24);
        org.junit.Assert.assertNull(typePosition26);
        org.junit.Assert.assertNull(stringPosition27);
        org.junit.Assert.assertNull(nodeSourcePosition28);
        org.junit.Assert.assertNull(stringPosition30);
        org.junit.Assert.assertNull(stringPosition31);
        org.junit.Assert.assertNull(typePosition33);
        org.junit.Assert.assertNull(typePosition34);
        org.junit.Assert.assertNull(stringPosition36);
        org.junit.Assert.assertNull(stringPosition37);
        org.junit.Assert.assertNull(typePosition39);
        org.junit.Assert.assertNull(typePosition41);
        org.junit.Assert.assertNull(typePosition42);
        org.junit.Assert.assertNotNull(markerList43);
        org.junit.Assert.assertNull(stringPosition44);
        org.junit.Assert.assertNull(typePosition45);
        org.junit.Assert.assertNotNull(markerList46);
        org.junit.Assert.assertNull(nodeSourcePosition47);
    }

    @Test
    public void test20427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20427");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        node2.setString("");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("(java.io.IOException: Named type with empty name component)");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean47 = node46.hasChildren();
        boolean boolean48 = node46.isAssignAdd();
        boolean boolean49 = node46.isFalse();
        boolean boolean50 = node46.isGetElem();
        // The following exception was thrown during execution in test generation
        try {
            node2.replaceChild(node43, node46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test20428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20428");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "java.io.IOException: JSDocInfo");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20429");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isRegExp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test20430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20430");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker3.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker6 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker6.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = marker8.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = marker8.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList11 = com.google.common.collect.ImmutableList.of(marker0, marker3, marker6, marker8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition15 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = marker0.getDescription();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(typePosition9);
        org.junit.Assert.assertNull(typePosition10);
        org.junit.Assert.assertNotNull(markerList11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition13);
        org.junit.Assert.assertNull(stringPosition14);
        org.junit.Assert.assertNull(nodeSourcePosition15);
        org.junit.Assert.assertNull(stringPosition16);
    }

    @Test
    public void test20431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20431");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setPositionInformation((int) (byte) 1, (int) '#', (int) (byte) 10, 5);
        int int14 = stringPosition0.getPositionOnEndLine();
        java.lang.String str15 = stringPosition0.getItem();
        int int16 = stringPosition0.getStartLine();
        int int17 = stringPosition0.getPositionOnStartLine();
        int int18 = stringPosition0.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test20432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20432");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getFileOverview();
        boolean boolean5 = jSDocInfo0.containsDeclaration();
        java.lang.String str6 = jSDocInfo0.getVersion();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test20433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20433");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        node16.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node25 = node12.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean29 = node28.isContinue();
        boolean boolean31 = node28.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(42, node25, node28, 42, (int) (byte) 100);
        boolean boolean35 = node25.isNE();
        int int36 = node2.getIndexOfChild(node25);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node25.children();
        boolean boolean38 = node25.isEmpty();
        com.google.javascript.rhino.InputId inputId39 = node25.getInputId();
        boolean boolean40 = node25.isAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node25.siblings();
        com.google.javascript.rhino.Node node42 = node25.getNext();
        boolean boolean43 = node42.isGetElem();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(inputId39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test20434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20434");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a type name", 23, (int) ' ');
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "hi!", 38, 10);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(46, node9);
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoFromForTree(node9);
        boolean boolean12 = node3.isDo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node3.getStaticSourceFile();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "Not declared as a constructor", "Unknown class name", "Not declared as a type name", "Not declared as a type name" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.util.Iterator<java.lang.String> strItor22 = strSet20.iterator();
        int int23 = strSet20.size();
        boolean boolean24 = strSet20.isEmpty();
        boolean boolean26 = strSet20.add("(hi!)");
        java.util.Spliterator<java.lang.String> strSpliterator27 = strSet20.spliterator();
        strSet20.clear();
        boolean boolean29 = strSet20.isEmpty();
        java.util.Iterator<java.lang.String> strItor30 = strSet20.iterator();
        node3.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node3.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strItor30);
    }

    @Test
    public void test20435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20435");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node2.getAncestors();
        boolean boolean17 = node2.isNumber();
        boolean boolean18 = node2.isVarArgs();
        boolean boolean19 = node2.isLabel();
        int int20 = node2.getSideEffectFlags();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection22 = jSDocInfo21.getMarkers();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo21.getParameterNames();
        boolean boolean24 = jSDocInfo21.isImplicitCast();
        java.lang.String str25 = jSDocInfo21.getLicense();
        boolean boolean26 = jSDocInfo21.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo21.getImplementedInterfaces();
        java.lang.String str28 = jSDocInfo21.getDeprecationReason();
        node2.setJSDocInfo(jSDocInfo21);
        java.lang.String str30 = jSDocInfo21.toString();
        java.lang.String str32 = jSDocInfo21.getDescriptionForParameter("((java.io.IOException))");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(markerCollection22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JSDocInfo" + "'", str30, "JSDocInfo");
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test20436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20436");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "(hi!)", 42, 30);
        boolean boolean5 = node4.isIn();
        boolean boolean6 = node4.isInstanceOf();
        node4.setOptionalArg(false);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node11.addChildToBack(node14);
        java.util.Set<java.lang.String> strSet18 = node14.getDirectives();
        boolean boolean19 = node14.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node14.new FileLevelJsDocBuilder();
        boolean boolean21 = node14.isVarArgs();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.isContinue();
        node24.setQuotedString();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean30 = node29.hasChildren();
        com.google.javascript.rhino.Node node31 = node29.getLastSibling();
        node31.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = null;
        int int38 = node36.getIndexOfChild(node37);
        node36.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean42 = node36.isDec();
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node44 = node24.srcrefTree(node43);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node44.getStaticSourceFile();
        int int47 = staticSourceFile45.getLineOffset(39);
        node14.setStaticSourceFile(staticSourceFile45);
        boolean boolean49 = staticSourceFile45.isExtern();
        node4.setStaticSourceFile(staticSourceFile45);
        boolean boolean51 = staticSourceFile45.isExtern();
        int int53 = staticSourceFile45.getColumnOfOffset(39);
        int int55 = staticSourceFile45.getColumnOfOffset(172032);
        int int57 = staticSourceFile45.getLineOfOffset(65536);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(staticSourceFile45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-2147483648) + "'", int47 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test20437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20437");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        boolean boolean4 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("(java.io.IOException: Named type with empty name component)");
        boolean boolean7 = jSDocInfo0.isExterns();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20438");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue0.and(ternaryValue1);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str5 = ternaryValue4.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue6.and(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue10.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue6.or(ternaryValue10);
        boolean boolean16 = ternaryValue6.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue4.xor(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue18.and(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue18.xor(ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue17.or(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue26.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue23.or(ternaryValue26);
        boolean boolean30 = ternaryValue26.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue2.or(ternaryValue26);
        java.lang.String str32 = ternaryValue31.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "false" + "'", str5, "false");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "true" + "'", str32, "true");
    }

    @Test
    public void test20439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20439");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean41 = jSDocInfo40.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo40.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo40.getSuppressions();
        node37.setJSDocInfo(jSDocInfo40);
        java.lang.String str45 = jSDocInfo40.getDescription();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo40.getModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList47 = jSDocInfo40.getExtendedInterfaces();
        boolean boolean48 = jSDocInfo40.isNoShadow();
        boolean boolean49 = jSDocInfo40.hasBaseType();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(jSTypeExpressionList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test20440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20440");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        boolean boolean5 = node2.isThrow();
        boolean boolean6 = node2.isInstanceOf();
        boolean boolean7 = node2.isSwitch();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node2.getJSDocInfo();
        node2.setLength(65536);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSDocInfo8);
    }

    @Test
    public void test20441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20441");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        java.lang.String str23 = node2.getQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable24 = node2.siblings();
        boolean boolean25 = node2.isNot();
        boolean boolean26 = node2.isScript();
        java.lang.Object obj28 = node2.getProp(0);
        boolean boolean29 = node2.isContinue();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(nodeIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test20442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20442");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (short) 10);
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test20443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20443");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean8 = node2.isDec();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = null;
        int int13 = node11.getIndexOfChild(node12);
        node11.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean17 = node11.isDec();
        boolean boolean18 = node2.hasChild(node11);
        boolean boolean20 = node2.getBooleanProp(39);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean24 = node23.isNot();
        boolean boolean25 = node23.isGetterDef();
        com.google.javascript.rhino.Node node26 = node2.copyInformationFrom(node23);
        node26.setWasEmptyNode(true);
        boolean boolean29 = node26.isDebugger();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test20444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20444");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        boolean boolean2 = jSDocInfo0.isNoTypeCheck();
        int int3 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean4 = jSDocInfo0.isNoSideEffects();
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test20445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20445");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        boolean boolean22 = node2.isBreak();
        boolean boolean23 = node2.isDo();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", 48, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = node2.useSourceInfoFromForTree(node27);
        boolean boolean29 = node27.isCatch();
        int int30 = node27.getSourceOffset();
        node27.removeProp(29);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable33 = node27.getAncestors();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node27.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator35 = nodeIterable34.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator36 = nodeIterable34.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable33);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertNotNull(nodeSpliterator35);
        org.junit.Assert.assertNotNull(nodeSpliterator36);
    }

    @Test
    public void test20446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20446");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        int int93 = typeItor92.nextIndex();
        int int94 = typeItor92.previousIndex();
        java.lang.reflect.Type type95 = typeItor92.next();
        java.lang.reflect.Type type96 = typeItor92.next();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertNotNull(type96);
    }

    @Test
    public void test20447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20447");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node2.getStaticSourceFile();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = null;
        int int18 = node16.getIndexOfChild(node17);
        node16.putProp((int) (short) 1, (java.lang.Object) 1);
        node16.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int25 = node16.getSideEffectFlags();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = null;
        int int33 = node31.getIndexOfChild(node32);
        node28.addChildToBack(node31);
        int int35 = node16.getIndexOfChild(node28);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean39 = node38.hasChildren();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = null;
        int int44 = node42.getIndexOfChild(node43);
        node42.putProp((int) (short) 1, (java.lang.Object) 1);
        node42.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node51 = node38.useSourceInfoIfMissingFromForTree(node42);
        boolean boolean52 = node51.wasEmptyNode();
        com.google.javascript.rhino.Node node53 = node16.useSourceInfoFrom(node51);
        java.lang.String str57 = node51.toString(false, false, true);
        boolean boolean58 = node51.isRegExp();
        com.google.javascript.rhino.Node node59 = node2.copyInformationFrom(node51);
        java.util.Set<java.lang.String> strSet60 = node51.getDirectives();
        boolean boolean61 = node51.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR " + "'", str57, "OR ");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test20448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20448");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor93 = typeList91.listIterator(2);
        java.util.ListIterator<java.lang.reflect.Type> typeItor94 = typeList91.listIterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList95 = typeList91.asList();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream96 = typeList95.parallelStream();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream97 = typeList95.parallelStream();
        java.util.Iterator<java.lang.reflect.Type> typeItor98 = typeList95.iterator();
        java.lang.reflect.Type type99 = typeItor98.next();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor93);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertNotNull(typeList95);
        org.junit.Assert.assertNotNull(typeStream96);
        org.junit.Assert.assertNotNull(typeStream97);
        org.junit.Assert.assertNotNull(typeItor98);
        org.junit.Assert.assertNotNull(type99);
    }

    @Test
    public void test20449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20449");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.hasParameter("hi!");
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        boolean boolean6 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test20450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20450");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((-1), nodeArray4, 1, (int) '#');
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(49, nodeArray4, 48, (int) (byte) 0);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(45, nodeArray4, 40, (int) 'a');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(32, nodeArray4);
        int int15 = node14.getSourcePosition();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test20451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20451");
        java.lang.String[] strArray7 = new java.lang.String[] { "Not declared as a constructor", "Unknown class name", "Unknown class name", "(hi!)", "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]", "(hi!)", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        java.lang.Object[] objArray10 = strSet8.toArray();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.Node node12 = typePosition11.getItem();
        boolean boolean13 = strSet8.contains((java.lang.Object) typePosition11);
        boolean boolean15 = strSet8.add("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        boolean boolean20 = node19.isThrow();
        boolean boolean21 = node19.isIn();
        boolean boolean23 = node19.getBooleanProp(32);
        boolean boolean24 = strSet8.equals((java.lang.Object) node19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean26 = jSDocInfo25.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo25.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = jSDocInfo25.getTemplateTypeNames();
        boolean boolean29 = jSDocInfo25.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo25.getThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo25.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo25.getEnumParameterType();
        boolean boolean33 = jSDocInfo25.hasFileOverview();
        boolean boolean34 = strSet8.remove((java.lang.Object) jSDocInfo25);
        int int35 = strSet8.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean37 = jSDocInfo36.isNoShadow();
        boolean boolean38 = jSDocInfo36.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList39 = jSDocInfo36.getExtendedInterfaces();
        boolean boolean40 = jSDocInfo36.hasThisType();
        boolean boolean41 = jSDocInfo36.isNoShadow();
        boolean boolean42 = jSDocInfo36.isNoAlias();
        jSDocInfo36.setLicense("Named type with empty name component");
        java.util.Set<java.lang.String> strSet45 = jSDocInfo36.getModifies();
        boolean boolean46 = strSet8.remove((java.lang.Object) jSDocInfo36);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[Not declared as a constructor, Unknown class name, (hi!), InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[Not declared as a constructor, Unknown class name, (hi!), InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]]");
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test20452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20452");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean7 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.isOverride();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20453");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker3.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker6 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker6.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = marker8.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = marker8.getType();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList11 = com.google.common.collect.ImmutableList.of(marker0, marker3, marker6, marker8);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = marker8.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = marker8.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = marker8.getDescription();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(typePosition9);
        org.junit.Assert.assertNull(typePosition10);
        org.junit.Assert.assertNotNull(markerList11);
        org.junit.Assert.assertNull(stringPosition12);
        org.junit.Assert.assertNull(stringPosition13);
        org.junit.Assert.assertNull(stringPosition14);
    }

    @Test
    public void test20454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20454");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isConstructor();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test20455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20455");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        boolean boolean12 = node2.isParamList();
        int int13 = node2.getLineno();
        boolean boolean14 = node2.hasChildren();
        boolean boolean15 = node2.isBlock();
        int int16 = node2.getCharno();
        boolean boolean17 = node2.isReturn();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean22 = node21.hasChildren();
        boolean boolean23 = node21.isAssignAdd();
        boolean boolean24 = node21.isDebugger();
        boolean boolean25 = node21.isCase();
        boolean boolean26 = node21.isAssign();
        node2.putProp(0, (java.lang.Object) node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.isNoShadow();
        boolean boolean30 = jSDocInfo28.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo28.getParameterType("hi!");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection33 = jSDocInfo28.getTypeNodes();
        java.lang.String str34 = jSDocInfo28.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo28.getTypedefType();
        boolean boolean36 = jSDocInfo28.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo28.getType();
        node21.setJSDocInfo(jSDocInfo28);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList39 = jSDocInfo28.getImplementedInterfaces();
        boolean boolean40 = jSDocInfo28.isIdGenerator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertNotNull(nodeCollection33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNotNull(jSTypeExpressionList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test20456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20456");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean6 = jSDocInfo0.hasParameter("Not declared as a constructor");
        java.lang.String str7 = jSDocInfo0.getDescription();
        boolean boolean8 = jSDocInfo0.hasModifies();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
    }

    @Test
    public void test20457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20457");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        int int11 = typePosition9.getEndLine();
        typePosition9.setPositionInformation(8, (int) '4', 65536, 13);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test20458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20458");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = node2.getParent();
        boolean boolean4 = node2.isArrayLit();
        node2.setQuotedString();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node2.getStaticSourceFile();
        boolean boolean7 = node2.isSwitch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(staticSourceFile6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test20459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20459");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isContinue();
        node2.setQuotedString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        com.google.javascript.rhino.Node node9 = node7.getLastSibling();
        node9.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean20 = node14.isDec();
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node22 = node2.srcrefTree(node21);
        java.lang.String str23 = node2.getQualifiedName();
        boolean boolean24 = node2.isArrayLit();
        boolean boolean25 = node2.isSetterDef();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = new com.google.javascript.rhino.JSTypeExpression(node2, "");
        boolean boolean28 = jSTypeExpression27.isVarArgs();
        com.google.javascript.rhino.Node node29 = jSTypeExpression27.getRoot();
        com.google.javascript.rhino.Node node30 = jSTypeExpression27.getRoot();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node33.putProp((int) (short) 1, (java.lang.Object) 1);
        node33.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int42 = node33.getSideEffectFlags();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node48.getIndexOfChild(node49);
        node45.addChildToBack(node48);
        int int52 = node33.getIndexOfChild(node45);
        boolean boolean53 = node45.isString();
        java.lang.String str54 = node45.toString();
        boolean boolean55 = node45.isFromExterns();
        boolean boolean56 = jSTypeExpression27.equals((java.lang.Object) boolean55);
        com.google.javascript.rhino.Node node57 = jSTypeExpression27.getRoot();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression27);
        boolean boolean59 = jSTypeExpression27.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR " + "'", str54, "OR ");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(jSTypeExpression58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test20460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20460");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = node9.getParent();
        boolean boolean11 = node9.isArrayLit();
        boolean boolean12 = node9.isThrow();
        boolean boolean13 = node9.isInstanceOf();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = null;
        int int21 = node19.getIndexOfChild(node20);
        node16.addChildToBack(node19);
        com.google.javascript.rhino.Node node23 = node16.getNext();
        boolean boolean24 = node16.isFalse();
        node9.addChildrenToBack(node16);
        boolean boolean26 = node16.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node16.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node16.getStaticSourceFile();
        boolean boolean29 = node16.isNot();
        jSDocInfo0.setAssociatedNode(node16);
        int int31 = node16.getSideEffectFlags();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("NUMBER 42.0 32");
        boolean boolean34 = node33.isSyntheticBlock();
        node33.setLineno(42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node33.getJSDocInfo();
        java.lang.String str38 = node16.checkTreeEquals(node33);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nSTRING NUMBER 42.0 32 42\n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: STRING NUMBER 42.0 32 42\n" + "'", str38, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nSTRING NUMBER 42.0 32 42\n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: STRING NUMBER 42.0 32 42\n");
    }

    @Test
    public void test20461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20461");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 0, 0, 0);
    }

    @Test
    public void test20462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20462");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean20 = node19.isContinue();
        boolean boolean22 = node19.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(42, node16, node19, 42, (int) (byte) 100);
        boolean boolean26 = node25.isDec();
        com.google.javascript.rhino.Node node27 = node25.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node25.children();
        boolean boolean29 = node25.isInc();
        node25.putIntProp(52, 200736);
        boolean boolean33 = node25.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            node25.setString("((((hi!))))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: THIS 42 [length: 200736] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test20463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20463");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        int int21 = node2.getIndexOfChild(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean25 = node24.hasChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = null;
        int int30 = node28.getIndexOfChild(node29);
        node28.putProp((int) (short) 1, (java.lang.Object) 1);
        node28.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node37 = node24.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean38 = node37.wasEmptyNode();
        com.google.javascript.rhino.Node node39 = node2.useSourceInfoFrom(node37);
        boolean boolean40 = node39.isWhile();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = null;
        int int45 = node43.getIndexOfChild(node44);
        node43.putProp((int) (short) 1, (java.lang.Object) 1);
        node43.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int52 = node43.getSideEffectFlags();
        boolean boolean53 = node43.isParamList();
        int int54 = node43.getLineno();
        boolean boolean55 = node43.hasChildren();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoIfMissingFrom(node43);
        boolean boolean57 = node56.isBreak();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean61 = node60.isContinue();
        boolean boolean63 = node60.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean67 = node66.isContinue();
        node66.setQuotedString();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean72 = node71.hasChildren();
        com.google.javascript.rhino.Node node73 = node71.getLastSibling();
        node73.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = null;
        int int80 = node78.getIndexOfChild(node79);
        node78.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean84 = node78.isDec();
        com.google.javascript.rhino.Node node85 = node73.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node86 = node66.srcrefTree(node85);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile87 = node86.getStaticSourceFile();
        int int89 = staticSourceFile87.getLineOffset(39);
        int int91 = staticSourceFile87.getColumnOfOffset(41);
        node60.setStaticSourceFile(staticSourceFile87);
        node56.setStaticSourceFile(staticSourceFile87);
        int int95 = staticSourceFile87.getLineOfOffset(44);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(staticSourceFile87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-2147483648) + "'", int89 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test20464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20464");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        java.lang.String str94 = typeList91.toString();
        java.util.Spliterator<java.lang.reflect.Type> typeSpliterator95 = typeList91.spliterator();
        java.lang.reflect.Type type97 = typeList91.get((int) (byte) 1);
        boolean boolean98 = typeList91.isEmpty();
        java.util.Iterator<java.lang.reflect.Type> typeItor99 = typeList91.iterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str94, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeSpliterator95);
        org.junit.Assert.assertNotNull(type97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(typeItor99);
    }

    @Test
    public void test20465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20465");
        java.lang.Exception[][] exceptionArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Exception[]> exceptionArrayList1 = com.google.common.collect.ImmutableList.of(exceptionArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20466");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isDebugger();
        boolean boolean6 = node2.isFromExterns();
        node2.setSourceEncodedPosition(35);
        boolean boolean9 = node2.isSetterDef();
        boolean boolean11 = node2.getBooleanProp(51);
        boolean boolean12 = node2.isRegExp();
        node2.putBooleanProp(51, true);
        com.google.javascript.rhino.Node node17 = node2.getAncestor(50);
        int int18 = node2.getLineno();
        boolean boolean19 = node2.isArrayLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test20467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20467");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        int int3 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean4 = jSDocInfo0.hasEnumParameterType();
        jSDocInfo0.addSuppression("((hi!))");
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        jSDocInfo0.setDeprecated(false);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = null;
        int int16 = node14.getIndexOfChild(node15);
        node14.putProp((int) (short) 1, (java.lang.Object) 1);
        node14.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int23 = node14.getSideEffectFlags();
        node14.setSourceEncodedPositionForTree(1);
        boolean boolean26 = node14.isCase();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(48, node14);
        jSDocInfo0.setAssociatedNode(node14);
        boolean boolean29 = node14.isGetterDef();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test20468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20468");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isConstant();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean4 = jSDocInfo0.shouldPreserveTry();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        int int6 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean7 = jSDocInfo0.hasType();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean9 = jSDocInfo0.isHidden();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        boolean boolean11 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test20469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20469");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        node2.setSourceEncodedPositionForTree(1);
        boolean boolean14 = node2.isCase();
        boolean boolean15 = node2.isThrow();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node18.putProp((int) (short) 1, (java.lang.Object) 1);
        node18.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int27 = node18.getSideEffectFlags();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node30.addChildToBack(node33);
        com.google.javascript.rhino.Node node37 = node30.getNext();
        com.google.javascript.rhino.Node node38 = node18.useSourceInfoFromForTree(node30);
        boolean boolean39 = node38.isBreak();
        int int40 = node38.getLength();
        node2.addChildrenToFront(node38);
        node2.setString("");
        boolean boolean45 = node2.getBooleanProp(35);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = null;
        int int51 = node49.getIndexOfChild(node50);
        node49.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean55 = node49.isGetterDef();
        boolean boolean56 = node49.isInc();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(32, node49, 3, 1);
        boolean boolean60 = node2.isEquivalentTo(node59);
        boolean boolean61 = node59.isLocalResultCall();
        boolean boolean62 = node59.isGetProp();
        // The following exception was thrown during execution in test generation
        try {
            node59.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test20470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20470");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.util.ListIterator<java.lang.reflect.Type> typeItor92 = typeList91.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        int int94 = typeList91.size();
        java.lang.String str95 = typeList91.toString();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList91.iterator();
        java.util.Spliterator<java.lang.reflect.Type> typeSpliterator97 = typeList91.spliterator();
        java.lang.String str98 = typeList91.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertNotNull(typeItor92);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 18 + "'", int94 == 18);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str95, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeSpliterator97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str98, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
    }

    @Test
    public void test20471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20471");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean10 = jSDocInfo9.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo9.getParameterNames();
        node2.setJSDocInfo(jSDocInfo9);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo9.getReturnType();
        int int14 = jSDocInfo9.getExtendedInterfacesCount();
        int int15 = jSDocInfo9.getImplementedInterfaceCount();
        int int16 = jSDocInfo9.getImplementedInterfaceCount();
        boolean boolean17 = jSDocInfo9.isExterns();
        java.lang.String str18 = jSDocInfo9.getSourceName();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo9.getSuppressions();
        boolean boolean20 = jSDocInfo9.isJavaDispatch();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test20472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20472");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        java.lang.String str92 = typeList91.toString();
        java.lang.Object[] objArray93 = typeList91.toArray();
        boolean boolean94 = typeList91.isEmpty();
        java.lang.Object[] objArray95 = typeList91.toArray();
        int int96 = typeList91.size();
        java.lang.Object[] objArray97 = typeList91.toArray();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream98 = typeList91.stream();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str92, "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray93), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray95), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray95), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 18 + "'", int96 == 18);
        org.junit.Assert.assertNotNull(objArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray97), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray97), "[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(typeStream98);
    }

    @Test
    public void test20473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20473");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isDebugger();
        java.lang.String str6 = node2.getQualifiedName();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean10 = node9.isContinue();
        boolean boolean12 = node9.getBooleanProp((int) (byte) 100);
        boolean boolean13 = node9.isString();
        boolean boolean14 = node9.isNoSideEffectsCall();
        node2.addChildToFront(node9);
        int int16 = node2.getSourcePosition();
        com.google.javascript.rhino.Node node18 = node2.getChildAtIndex(0);
        boolean boolean19 = node2.isBlock();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        com.google.javascript.rhino.Node node24 = node22.getLastSibling();
        int int25 = node24.getLength();
        boolean boolean26 = node24.isIf();
        node24.setLineno(32);
        boolean boolean29 = node24.isSyntheticBlock();
        node2.addChildrenToBack(node24);
        com.google.javascript.rhino.Node node31 = node2.cloneNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = new com.google.javascript.rhino.JSTypeExpression(node2, "NUMBER 42.0 32");
        boolean boolean34 = jSTypeExpression33.isOptionalArg();
        boolean boolean35 = jSTypeExpression33.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression33);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression36);
        boolean boolean38 = jSTypeExpression36.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression36);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression36);
        org.junit.Assert.assertNotNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression39);
    }

    @Test
    public void test20474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20474");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getParameterNames();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        boolean boolean7 = jSDocInfo0.hasThisType();
        jSDocInfo0.setDeprecated(true);
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection10);
    }

    @Test
    public void test20475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20475");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean5 = node4.hasChildren();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = null;
        int int10 = node8.getIndexOfChild(node9);
        node8.putProp((int) (short) 1, (java.lang.Object) 1);
        node8.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node17 = node4.useSourceInfoIfMissingFromForTree(node8);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean21 = node20.isContinue();
        boolean boolean23 = node20.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(42, node17, node20, 42, (int) (byte) 100);
        boolean boolean27 = node17.isNE();
        boolean boolean28 = node17.hasChildren();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean32 = node31.hasChildren();
        boolean boolean33 = node31.isAssignAdd();
        boolean boolean34 = node31.isDebugger();
        boolean boolean35 = node31.isFromExterns();
        node31.setSourceEncodedPosition(35);
        boolean boolean38 = node31.isTypeOf();
        node17.addChildrenToFront(node31);
        boolean boolean40 = node17.isAdd();
        com.google.javascript.rhino.Node node41 = node17.detachFromParent();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = node44.getParent();
        boolean boolean46 = node44.isArrayLit();
        boolean boolean47 = node44.isThrow();
        boolean boolean48 = node44.isReturn();
        boolean boolean49 = node44.isSetterDef();
        boolean boolean50 = node44.isEmpty();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean54 = node53.hasChildren();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = null;
        int int59 = node57.getIndexOfChild(node58);
        node57.putProp((int) (short) 1, (java.lang.Object) 1);
        node57.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node66 = node53.useSourceInfoIfMissingFromForTree(node57);
        node66.addSuppression("");
        boolean boolean69 = node66.isReturn();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString((int) (short) 1, "hi!", 16, (int) (byte) 0);
        boolean boolean75 = node74.isQuotedString();
        com.google.javascript.rhino.Node node76 = node66.useSourceInfoIfMissingFromForTree(node74);
        boolean boolean77 = node74.isThis();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(39, "((Node tree inequality:\nTree1:\nOR  [slash_v: 2]\n    OR \n\n\nTree2:\nSTRING (hi!)\n\n\nSubtree1: OR  [slash_v: 2]\n    OR \n\n\nSubtree2: STRING (hi!)\n))", (-2147483648), (int) (short) 1);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(12289, node17, node44, node74, node82);
        boolean boolean84 = node44.isBreak();
        boolean boolean85 = node44.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test20476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20476");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>>();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int6 = typePosition5.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int9 = typePosition8.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition1, typePosition3, typePosition5, typePosition7, typePosition8, typePosition10);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int13 = typePosition12.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int15 = typePosition14.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int20 = typePosition19.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList22 = com.google.common.collect.ImmutableList.of(typePosition12, typePosition14, typePosition16, typePosition18, typePosition19, typePosition21);
        com.google.javascript.rhino.SourcePosition[] sourcePositionArray24 = new com.google.javascript.rhino.SourcePosition[2];
        @SuppressWarnings("unchecked")
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[] nodeSourcePositionArray25 = (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>[]) sourcePositionArray24;
        nodeSourcePositionArray25[0] = typePosition7;
        nodeSourcePositionArray25[1] = typePosition21;
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder30 = nodeSourcePositionBuilder0.add(nodeSourcePositionArray25);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int32 = typePosition31.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int34 = typePosition33.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int36 = typePosition35.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition37 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int39 = typePosition38.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList41 = com.google.common.collect.ImmutableList.of(typePosition31, typePosition33, typePosition35, typePosition37, typePosition38, typePosition40);
        int int42 = typePosition33.getPositionOnStartLine();
        com.google.common.collect.ImmutableCollection.Builder<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionBuilder43 = nodeSourcePositionBuilder0.add((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition33);
        int int44 = typePosition33.getStartLine();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(typePositionList22);
        org.junit.Assert.assertNotNull(sourcePositionArray24);
        org.junit.Assert.assertNotNull(nodeSourcePositionArray25);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(typePositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(nodeSourcePositionBuilder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test20477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20477");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean92 = typeList91.isEmpty();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream93 = typeList91.stream();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList94 = typeList91.asList();
        com.google.common.collect.UnmodifiableListIterator<java.lang.reflect.Type> typeItor95 = typeList94.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream96 = typeList94.parallelStream();
        java.util.Iterator<java.lang.reflect.Type> typeItor97 = typeList94.iterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor98 = typeList94.listIterator();
        java.util.stream.Stream<java.lang.reflect.Type> typeStream99 = typeList94.stream();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(typeStream93);
        org.junit.Assert.assertNotNull(typeList94);
        org.junit.Assert.assertNotNull(typeItor95);
        org.junit.Assert.assertNotNull(typeStream96);
        org.junit.Assert.assertNotNull(typeItor97);
        org.junit.Assert.assertNotNull(typeItor98);
        org.junit.Assert.assertNotNull(typeStream99);
    }

    @Test
    public void test20478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20478");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        java.lang.String str5 = jSDocInfo0.toString();
        int int6 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        boolean boolean9 = jSDocInfo0.hasParameterType("java.io.IOException: (hi!)");
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo[][] jSDocInfoArray12 = new com.google.javascript.rhino.JSDocInfo[][] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo[]> jSDocInfoArrayList13 = com.google.common.collect.ImmutableList.of(jSDocInfoArray12);
        com.google.javascript.rhino.JSDocInfo[][] jSDocInfoArray14 = strSet11.toArray(jSDocInfoArray12);
        strSet11.clear();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = null;
        int int20 = node18.getIndexOfChild(node19);
        node18.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean24 = node18.isDec();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = null;
        int int29 = node27.getIndexOfChild(node28);
        node27.putProp((int) (short) 1, (java.lang.Object) 1);
        boolean boolean33 = node27.isDec();
        boolean boolean34 = node18.hasChild(node27);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        node27.setStaticSourceFile(staticSourceFile35);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node27.getJsDocBuilderForNode();
        boolean boolean38 = strSet11.equals((java.lang.Object) node27);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(0, "DELPROP OR ", 38, (int) (byte) -1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean47 = node46.hasChildren();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = null;
        int int52 = node50.getIndexOfChild(node51);
        node50.putProp((int) (short) 1, (java.lang.Object) 1);
        node50.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node59 = node46.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node60 = node59.cloneNode();
        com.google.javascript.rhino.Node node61 = node59.cloneTree();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean65 = node64.isContinue();
        node64.setQuotedString();
        int int67 = node64.getSourceOffset();
        com.google.javascript.rhino.Node node68 = node61.useSourceInfoFrom(node64);
        node43.addChildToFront(node64);
        boolean boolean70 = node43.isObjectLit();
        boolean boolean71 = node43.isReturn();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(42, 43, 45);
        node75.setSourceEncodedPositionForTree(100);
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection79 = jSDocInfo78.getMarkers();
        java.lang.String str80 = jSDocInfo78.getDeprecationReason();
        java.lang.String str81 = jSDocInfo78.getLicense();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo78.getThisType();
        java.lang.String str83 = jSDocInfo78.toString();
        node75.setJSDocInfo(jSDocInfo78);
        node75.detachChildren();
        // The following exception was thrown during execution in test generation
        try {
            node27.addChildBefore(node43, node75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(jSDocInfoArray12);
        org.junit.Assert.assertNotNull(jSDocInfoArrayList13);
        org.junit.Assert.assertNotNull(jSDocInfoArray14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(markerCollection79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "JSDocInfo" + "'", str83, "JSDocInfo");
    }

    @Test
    public void test20479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20479");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation((int) 'a', 35, (int) 'a', 48);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        int int10 = stringPosition8.getPositionOnEndLine();
        stringPosition8.setItem("OR ");
        int int13 = stringPosition8.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int15 = stringPosition14.getStartLine();
        int int16 = stringPosition14.getPositionOnStartLine();
        int int17 = stringPosition14.getPositionOnEndLine();
        stringPosition14.setPositionInformation(4, 50, 45, (int) (byte) 0);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int24 = stringPosition23.getPositionOnStartLine();
        int int25 = stringPosition23.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int27 = stringPosition26.getStartLine();
        int int28 = stringPosition26.getEndLine();
        int int29 = stringPosition26.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition8, stringPosition14, stringPosition23, stringPosition26);
        stringPosition14.setItem("(OR \n)");
        int int33 = stringPosition14.getStartLine();
        java.lang.String str34 = stringPosition14.getItem();
        stringPosition14.setItem("Node tree inequality:\nTree1:\nOR  [empty_block: 1]\n    OR \n\n\nTree2:\nOR  [length: 32]\n\n\nSubtree1: OR  [empty_block: 1]\n    OR \n\n\nSubtree2: OR  [length: 32]\n");
        int int37 = stringPosition14.getPositionOnStartLine();
        int int38 = stringPosition14.getPositionOnEndLine();
        int int39 = stringPosition14.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(OR \n)" + "'", str34, "(OR \n)");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 50 + "'", int37 == 50);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test20480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20480");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean5 = node4.isContinue();
        boolean boolean6 = node4.isStringKey();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        boolean boolean19 = node9.isParamList();
        int int20 = node9.getLineno();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(30, node4, node9, 46, 38);
        boolean boolean24 = node9.isAssignAdd();
        com.google.javascript.rhino.Node node25 = node9.getNext();
        int int26 = node9.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(118884, node9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test20481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20481");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node6.setJSType(jSType19);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node6.getJsDocBuilderForNode();
        boolean boolean22 = node6.isBlock();
        com.google.javascript.rhino.Node node23 = node6.removeChildren();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "hi!", 38, 10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(46, node29);
        com.google.javascript.rhino.Node node31 = node6.srcrefTree(node29);
        boolean boolean32 = node29.isCase();
        node29.setString("INSTANCEOF java.io.IOException 10\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node29.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSDocInfo35);
    }

    @Test
    public void test20482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20482");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("(java.io.IOException)");
    }

    @Test
    public void test20483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20483");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        int int6 = jSDocInfo0.getParameterCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean9 = jSDocInfo0.hasParameter("InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        boolean boolean10 = jSDocInfo0.isDeprecated();
        boolean boolean11 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test20484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20484");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        boolean boolean4 = node2.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo5.getImplementedInterfaces();
        node2.setJSDocInfo(jSDocInfo5);
        java.lang.String str9 = jSDocInfo5.getMeaning();
        com.google.javascript.rhino.Node node10 = jSDocInfo5.getAssociatedNode();
        java.lang.String str11 = jSDocInfo5.getLendsName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test20485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20485");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node14.isNot();
        boolean boolean24 = node14.isCatch();
        boolean boolean25 = node14.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSType jSType26 = node14.getJSType();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean30 = node29.hasChildren();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = null;
        int int35 = node33.getIndexOfChild(node34);
        node33.putProp((int) (short) 1, (java.lang.Object) 1);
        node33.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node42 = node29.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = null;
        node33.setStaticSourceFile(staticSourceFile43);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = node33.getStaticSourceFile();
        com.google.javascript.rhino.Node node46 = node33.getLastSibling();
        boolean boolean47 = node33.isVoid();
        boolean boolean48 = node33.isAssign();
        com.google.javascript.rhino.Node node49 = node14.useSourceInfoFrom(node33);
        com.google.javascript.rhino.Node node50 = node14.removeFirstChild();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable51 = node50.getAncestors();
        boolean boolean52 = node50.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(staticSourceFile45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(ancestorIterable51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test20486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20486");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = null;
        int int7 = node5.getIndexOfChild(node6);
        node2.addChildToBack(node5);
        java.util.Set<java.lang.String> strSet9 = node5.getDirectives();
        boolean boolean10 = node5.isFor();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder11 = node5.new FileLevelJsDocBuilder();
        boolean boolean12 = node5.isVarArgs();
        boolean boolean13 = node5.isCatch();
        boolean boolean14 = node5.isAdd();
        boolean boolean15 = node5.isIn();
        com.google.javascript.rhino.Node node17 = node5.getAncestor((int) (byte) 0);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test20487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20487");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean4 = node3.hasChildren();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFromForTree(node7);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        node7.setStaticSourceFile(staticSourceFile17);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node20 = node7.getLastSibling();
        boolean boolean21 = node7.isVoid();
        boolean boolean22 = node7.isNot();
        boolean boolean23 = node7.isOr();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean27 = node26.hasChildren();
        com.google.javascript.rhino.Node node28 = node26.getLastSibling();
        boolean boolean29 = node28.isStringKey();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        boolean boolean34 = node32.isAssignAdd();
        boolean boolean35 = node32.isQuotedString();
        node32.setCharno(36);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(0, node7, node28, node32);
        boolean boolean39 = node28.isExprResult();
        node28.setOptionalArg(false);
        node28.putBooleanProp(42, false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test20488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20488");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str5 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        boolean boolean7 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        int int9 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test20489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20489");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str4 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = null;
        int int9 = node7.getIndexOfChild(node8);
        node7.putProp((int) (short) 1, (java.lang.Object) 1);
        node7.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int16 = node7.getSideEffectFlags();
        node7.setSourceEncodedPositionForTree(1);
        boolean boolean19 = node7.isCase();
        boolean boolean20 = node7.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node7.getStaticSourceFile();
        jSDocInfo0.setAssociatedNode(node7);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) 48, 12, 5);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(8);
        com.google.javascript.rhino.Node node29 = node26.srcref(node28);
        boolean boolean30 = node26.isCall();
        boolean boolean31 = node7.hasChild(node26);
        com.google.javascript.rhino.jstype.JSType jSType32 = node26.getJSType();
        node26.addSuppression("STRING hi! 100");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSType32);
    }

    @Test
    public void test20490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20490");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node3 = null;
        int int4 = node2.getIndexOfChild(node3);
        node2.putProp((int) (short) 1, (java.lang.Object) 1);
        node2.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int11 = node2.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        com.google.javascript.rhino.Node node21 = node14.getNext();
        com.google.javascript.rhino.Node node22 = node2.useSourceInfoFromForTree(node14);
        boolean boolean23 = node22.isFor();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = null;
        int int31 = node29.getIndexOfChild(node30);
        node26.addChildToBack(node29);
        boolean boolean33 = node29.isName();
        com.google.javascript.rhino.InputId inputId35 = new com.google.javascript.rhino.InputId("[class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        java.lang.String str36 = inputId35.toString();
        node29.setInputId(inputId35);
        node22.setInputId(inputId35);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node22.getJsDocBuilderForNode();
        boolean boolean40 = node22.isDec();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = node22.getExistingIntProp(4095);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 4095");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]" + "'", str36, "InputId: [class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode, class com.google.javascript.rhino.Node$StringNode]");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test20491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20491");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        boolean boolean5 = jSDocInfo0.isDeprecated();
        int int6 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        boolean boolean8 = jSDocInfo0.isExpose();
        jSDocInfo0.addSuppression("InputId: JSDocInfo");
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        boolean boolean13 = jSDocInfo0.isExport();
        boolean boolean15 = jSDocInfo0.hasDescriptionForParameter("OR  [directives: [, Not declared as a constructor, Unknown class name, Not declared as a type name]] [source_file: Not declared as a type name] [length: 50]");
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test20492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20492");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node4 = node2.getParent();
        boolean boolean5 = node2.isGetElem();
        boolean boolean6 = node2.isFromExterns();
        node2.setType(29);
        boolean boolean9 = node2.isAdd();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean14 = node13.hasChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node17.putProp((int) (short) 1, (java.lang.Object) 1);
        node17.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node26 = node13.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean30 = node29.isContinue();
        boolean boolean32 = node29.getBooleanProp((int) (byte) 100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(42, node26, node29, 42, (int) (byte) 100);
        boolean boolean36 = node26.isNE();
        boolean boolean37 = node26.hasChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean41 = node40.hasChildren();
        boolean boolean42 = node40.isAssignAdd();
        boolean boolean43 = node40.isDebugger();
        boolean boolean44 = node40.isFromExterns();
        node40.setSourceEncodedPosition(35);
        boolean boolean47 = node40.isTypeOf();
        node26.addChildrenToFront(node40);
        boolean boolean49 = node26.isAdd();
        com.google.javascript.rhino.Node node50 = node26.detachFromParent();
        boolean boolean51 = node50.isFromExterns();
        boolean boolean52 = node50.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            node2.removeChild(node50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test20493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20493");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection1 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        boolean boolean3 = jSDocInfo0.isDeprecated();
        java.lang.String str4 = jSDocInfo0.getReturnDescription();
        java.lang.String str5 = jSDocInfo0.toString();
        int int6 = jSDocInfo0.getParameterCount();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("hi!");
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        jSDocInfo0.addSuppression("(java.io.IOException: ((hi!)))");
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        boolean boolean13 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertNotNull(markerCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20494");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = null;
        int int8 = node6.getIndexOfChild(node7);
        node6.putProp((int) (short) 1, (java.lang.Object) 1);
        node6.putIntProp((int) (byte) 1, (int) (byte) 10);
        com.google.javascript.rhino.Node node15 = node2.useSourceInfoIfMissingFromForTree(node6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node6.setStaticSourceFile(staticSourceFile16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node6.getStaticSourceFile();
        boolean boolean19 = node6.isCatch();
        boolean boolean20 = node6.isCall();
        com.google.javascript.rhino.Node node22 = node6.getAncestor(30);
        node6.setType((int) ' ');
        node6.setVarArgs(true);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test20495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20495");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int5 = typePosition4.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int8 = typePosition7.getEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition2, typePosition4, typePosition6, typePosition7, typePosition9);
        java.lang.Class<?> wildcardClass11 = typePosition2.getClass();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = null;
        int int19 = node17.getIndexOfChild(node18);
        node14.addChildToBack(node17);
        java.lang.Class<?> wildcardClass21 = node17.getClass();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList22 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass21);
        boolean boolean23 = typeList22.isEmpty();
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor24 = typeList22.iterator();
        java.util.ListIterator<java.lang.reflect.Type> typeItor25 = typeList22.listIterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(typeItor24);
        org.junit.Assert.assertNotNull(typeItor25);
    }

    @Test
    public void test20496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20496");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR \n\n\nTree2:\nOR \n    OR \n\n\nSubtree1: OR \n\n\nSubtree2: OR \n    OR \n");
        node1.setQuotedString();
        com.google.javascript.rhino.Node node3 = node1.cloneNode();
        java.lang.String str4 = node3.getQualifiedName();
        com.google.javascript.rhino.Node node5 = node3.getLastChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test20497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20497");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(15);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesArguments();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test20498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20498");
        com.google.common.collect.ImmutableList<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(genericDeclarationArrayList0);
    }

    @Test
    public void test20499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20499");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) (byte) 10, (int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        int int5 = node3.getSourceOffset();
        boolean boolean6 = node3.isSwitch();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = null;
        int int11 = node9.getIndexOfChild(node10);
        node9.putProp((int) (short) 1, (java.lang.Object) 1);
        node9.putIntProp((int) (byte) 1, (int) (byte) 10);
        int int18 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = null;
        int int26 = node24.getIndexOfChild(node25);
        node21.addChildToBack(node24);
        com.google.javascript.rhino.Node node28 = node21.getNext();
        com.google.javascript.rhino.Node node29 = node9.useSourceInfoFromForTree(node21);
        boolean boolean30 = node21.isNot();
        boolean boolean31 = node21.isCatch();
        int int33 = node21.getIntProp((int) (byte) 0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node35.getJSDocInfo();
        boolean boolean37 = node35.isContinue();
        node21.addChildrenToFront(node35);
        boolean boolean39 = node21.isCase();
        boolean boolean40 = node21.isSwitch();
        boolean boolean41 = node21.isFalse();
        boolean boolean42 = node21.isWhile();
        com.google.javascript.rhino.Node node43 = node3.useSourceInfoIfMissingFromForTree(node21);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node21.siblings();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node47 = node21.getAncestor(11);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeIterable44);
        org.junit.Assert.assertNull(node47);
    }

    @Test
    public void test20500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20500");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.hasChildren();
        java.lang.Class<?> wildcardClass4 = node2.getClass();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean8 = node7.hasChildren();
        java.lang.Class<?> wildcardClass9 = node7.getClass();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean13 = node12.hasChildren();
        java.lang.Class<?> wildcardClass14 = node12.getClass();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean18 = node17.hasChildren();
        java.lang.Class<?> wildcardClass19 = node17.getClass();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.hasChildren();
        java.lang.Class<?> wildcardClass24 = node22.getClass();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean28 = node27.hasChildren();
        java.lang.Class<?> wildcardClass29 = node27.getClass();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean33 = node32.hasChildren();
        java.lang.Class<?> wildcardClass34 = node32.getClass();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.hasChildren();
        java.lang.Class<?> wildcardClass39 = node37.getClass();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean43 = node42.hasChildren();
        java.lang.Class<?> wildcardClass44 = node42.getClass();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean48 = node47.hasChildren();
        java.lang.Class<?> wildcardClass49 = node47.getClass();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean53 = node52.hasChildren();
        java.lang.Class<?> wildcardClass54 = node52.getClass();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean58 = node57.hasChildren();
        java.lang.Class<?> wildcardClass59 = node57.getClass();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean63 = node62.hasChildren();
        java.lang.Class<?> wildcardClass64 = node62.getClass();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean68 = node67.hasChildren();
        java.lang.Class<?> wildcardClass69 = node67.getClass();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.hasChildren();
        java.lang.Class<?> wildcardClass74 = node72.getClass();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean78 = node77.hasChildren();
        java.lang.Class<?> wildcardClass79 = node77.getClass();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean83 = node82.hasChildren();
        java.lang.Class<?> wildcardClass84 = node82.getClass();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean88 = node87.hasChildren();
        java.lang.Class<?> wildcardClass89 = node87.getClass();
        java.lang.reflect.Type[] typeArray90 = new java.lang.reflect.Type[] { wildcardClass64, wildcardClass69, wildcardClass74, wildcardClass79, wildcardClass84, wildcardClass89 };
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList91 = com.google.common.collect.ImmutableList.of((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass59, typeArray90);
        boolean boolean93 = typeList91.contains((java.lang.Object) "Unknown class name");
        com.google.common.collect.UnmodifiableIterator<java.lang.reflect.Type> typeItor94 = typeList91.iterator();
        int int95 = typeList91.size();
        java.util.Iterator<java.lang.reflect.Type> typeItor96 = typeList91.iterator();
        com.google.common.collect.ImmutableList<java.lang.reflect.Type> typeList97 = typeList91.asList();
        java.util.Iterator<java.lang.reflect.Type> typeItor98 = typeList97.iterator();
        java.lang.reflect.Type type99 = typeItor98.next();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(typeItor94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 18 + "'", int95 == 18);
        org.junit.Assert.assertNotNull(typeItor96);
        org.junit.Assert.assertNotNull(typeList97);
        org.junit.Assert.assertNotNull(typeItor98);
        org.junit.Assert.assertNotNull(type99);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest17 {

    public static boolean debug = false;

    @Test
    public void test08501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08501");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.minuteOfHour();
        int int12 = dateTimeField10.getLeapAmount((long) 10);
        long long15 = dateTimeField10.getDifferenceAsLong((long) (short) -1, (long) 100);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale18.getExtension('a');
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet22 = locale18.getUnicodeLocaleKeys();
        java.lang.String str23 = locale17.getDisplayCountry(locale18);
        java.lang.String str24 = dateTimeField10.getAsText(1644572976886L, locale18);
        java.lang.String str26 = dateTimeField10.getAsText(2959321739994L);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u65e5\u672c" + "'", str23, "\u65e5\u672c");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "49" + "'", str24, "49");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "48" + "'", str26, "48");
    }

    @Test
    public void test08502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08502");
        java.util.Locale locale2 = new java.util.Locale("", "UTC");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        calendar3.setMinimalDaysInFirstWeek(39);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = calendar3.getActualMaximum((-224729));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -224729");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_UTC");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644573244983,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=39,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=4,MILLISECOND=984,ZONE_OFFSET=1,DST_OFFSET=0]");
    }

    @Test
    public void test08503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08503");
        long long6 = java.util.Date.UTC(0, 622, 2000, 251, 1908, (-19));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-399618739000L) + "'", long6 == (-399618739000L));
    }

    @Test
    public void test08504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08504");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(75, 82841, 2029, 7981, 35492129, 21, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7981 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08505");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMonthOfYear(5);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate16.minus(readablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readablePeriod21);
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateTime dateTime24 = dateTime22.withEarlierOffsetAtOverlap();
        int int25 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property27 = dateTime26.minuteOfHour();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate30.minus(readablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readablePeriod35);
        org.joda.time.DateMidnight dateMidnight37 = dateTime36.toDateMidnight();
        org.joda.time.DateTime.Property property38 = dateTime36.dayOfMonth();
        boolean boolean39 = dateTime36.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime36.getZone();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone40);
        long long45 = dateTimeZone40.convertLocalToUTC((long) '#', false, 1644192000000L);
        org.joda.time.DateTime dateTime46 = dateTime28.withZone(dateTimeZone40);
        boolean boolean47 = dateTime46.isAfterNow();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-79499965L) + "'", long45 == (-79499965L));
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test08506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08506");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(7);
        int int12 = localDate11.getDayOfYear();
        java.lang.String str13 = localDate11.toString();
        org.joda.time.LocalDate localDate15 = localDate11.withDayOfYear((int) (short) 10);
        org.joda.time.LocalDate localDate17 = localDate15.withCenturyOfEra(625);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.LocalDate.Property property19 = localDate17.dayOfMonth();
        org.joda.time.LocalDate localDate20 = property19.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2029-02-12" + "'", str13, "2029-02-12");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test08507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08507");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        java.lang.String str7 = chronology6.toString();
        org.joda.time.DurationField durationField8 = chronology6.centuries();
        java.lang.String str9 = chronology6.toString();
        org.joda.time.DurationField durationField10 = chronology6.seconds();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test08508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08508");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate10 = localDate5.withFieldAdded(durationFieldType8, (int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate3.withFieldAdded(durationFieldType8, 19);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime22.withMonthOfYear(5);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long32 = dateTimeZone29.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str34 = dateTimeZone29.getNameKey(100L);
        org.joda.time.DateTime dateTime35 = dateTime26.withZoneRetainFields(dateTimeZone29);
        boolean boolean36 = dateTime35.isAfterNow();
        org.joda.time.DateTime dateTime37 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDate.Property property38 = localDate3.era();
        org.joda.time.LocalDate localDate40 = localDate3.minusWeeks((int) (byte) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate44 = localDate42.minus(readablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.plus(readableDuration47);
        org.joda.time.DateTime dateTime51 = dateTime46.withDurationAdded((long) 0, (int) (byte) 10);
        org.joda.time.DateTime dateTime52 = localDate40.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime52.withMillisOfDay(35332195);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMillis(32);
        org.joda.time.DateTime dateTime58 = dateTime54.withMillis(1644572938332L);
        org.joda.time.DateTime.Property property59 = dateTime58.hourOfDay();
        long long60 = dateTime58.getMillis();
        org.joda.time.DateTime dateTime62 = dateTime58.withYearOfEra(92);
        org.joda.time.DateTime.Property property63 = dateTime62.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField64 = property63.getField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-2L) + "'", long32 == (-2L));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1644572938332L + "'", long60 == 1644572938332L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test08509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08509");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(35500184, 25, 13821426);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08510");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.util.Locale locale4 = new java.util.Locale("yearOfEra", "hourOfDay");
        boolean boolean5 = locale4.hasExtensions();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone0, locale4);
        java.lang.String str7 = timeZone0.getID();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+22:05");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT+22:05" + "'", str1, "GMT+22:05");
        org.junit.Assert.assertEquals(locale4.toString(), "yearofera_HOUROFDAY");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644573245251,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=5,MILLISECOND=252,ZONE_OFFSET=1,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT+22:05" + "'", str7, "GMT+22:05");
    }

    @Test
    public void test08511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08511");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setDate(120, 82800001, 946);
        java.util.Calendar.Builder builder10 = builder0.setTimeOfDay((-2), 2922789, 622, 93);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder13 = builder10.setWeekDefinition(35458525, 139);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08512");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((long) 22);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra(622);
        int int14 = localDateTime13.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test08513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08513");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        long long5 = dateTimeZone1.adjustOffset(294538250L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 294538250L + "'", long5 == 294538250L);
    }

    @Test
    public void test08514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08514");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(946, 38, (-2730));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 946 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08515");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfDay(5);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.minus(readablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readablePeriod14);
        org.joda.time.DateTime.Property property16 = dateTime15.year();
        org.joda.time.DurationField durationField17 = property16.getDurationField();
        org.joda.time.DateTime dateTime19 = property16.setCopy(14);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra(19);
        boolean boolean22 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime21.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test08516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08516");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfDay(5);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        int int9 = dateTimeField7.getMinimumValue(0L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate11.withWeekyear(7);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(9);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((int) (byte) 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        boolean boolean29 = strSet22.addAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = locale30.getExtension('a');
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale30.getDisplayScript(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        boolean boolean38 = strSet22.equals((java.lang.Object) locale36);
        java.lang.String str39 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDate19, locale36);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str42 = locale40.getExtension('a');
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet45 = locale40.getExtensionKeys();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale40);
        java.lang.String str47 = locale36.getDisplayCountry(locale40);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Saturday" + "'", str39, "Saturday");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644573245357,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=5,MILLISECOND=358,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test08517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08517");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        int int28 = dateTimeFormatter27.getDefaultYear();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = locale29.getExtension('a');
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale29.getDisplayScript(locale33);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean42 = localTime40.isSupported(durationFieldType41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalTime localTime44 = localTime40.minus(readablePeriod43);
        org.joda.time.LocalTime localTime46 = localTime40.plusSeconds(9);
        org.joda.time.Chronology chronology47 = localTime40.getChronology();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = chronology47.add(readablePeriod48, (-2L), 1);
        long long55 = chronology47.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType37.getField(chronology47);
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.lang.String str60 = locale59.getDisplayVariant();
        java.lang.String str61 = dateTimeField57.getAsShortText(7, locale59);
        java.lang.String str62 = locale33.getDisplayName(locale59);
        java.lang.String str63 = locale33.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter27.withLocale(locale33);
        java.lang.Integer int65 = dateTimeFormatter27.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter27.withDefaultYear(292278993);
        java.lang.Integer int68 = dateTimeFormatter27.getPivotYear();
        org.joda.time.Chronology chronology69 = dateTimeFormatter27.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime71 = dateTimeFormatter27.parseLocalDateTime("1900-01-01T00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-2L) + "'", long51 == (-2L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 20L + "'", long55 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "7" + "'", str61, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str62, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zho" + "'", str63, "zho");
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNull(int68);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test08518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08518");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate9 = localDate1.minusWeeks(99);
        org.joda.time.LocalTime localTime10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate12.minus(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.Chronology chronology17 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long22 = dateTimeZone20.nextTransition((long) 4);
        org.joda.time.Chronology chronology23 = chronology17.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = localDate9.toDateTime(localTime10, dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = localDate9.withMonthOfYear(2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4L + "'", long22 == 4L);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test08519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08519");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        int int9 = localDateTime8.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((-1));
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.era();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusWeeks(82800006);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMonths(55);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test08520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08520");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(154920000, 86399990, (-977));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 154920000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08521");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        java.lang.StringBuffer stringBuffer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(stringBuffer8, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test08522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08522");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.minus(readablePeriod7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.LocalDate localDate13 = dateTime12.toLocalDate();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate15.minus(readablePeriod16);
        org.joda.time.LocalDate localDate19 = localDate15.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate21 = localDate15.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property22 = localDate15.dayOfWeek();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate26 = localDate24.minus(readablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.toDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime32.withMonthOfYear(5);
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long42 = dateTimeZone39.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str44 = dateTimeZone39.getNameKey(100L);
        org.joda.time.DateTime dateTime45 = dateTime36.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateTime dateTime46 = localDate15.toDateTimeAtStartOfDay(dateTimeZone39);
        boolean boolean48 = dateTimeZone39.isStandardOffset((long) 6);
        org.joda.time.DateTime dateTime49 = localDate13.toDateTimeAtStartOfDay(dateTimeZone39);
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now(dateTimeZone39);
        java.lang.String str52 = dateTimeZone39.getShortName(1644572999868L);
        boolean boolean54 = dateTimeZone39.isStandardOffset((long) 41);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(6824995199999L, dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-2L) + "'", long42 == (-2L));
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.001" + "'", str52, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test08523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08523");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((-292275054));
        org.joda.time.DateTime dateTime7 = dateTime3.plus((-25L));
        org.joda.time.DateTime dateTime9 = dateTime3.minusDays((int) (short) 10);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate12.minus(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        org.joda.time.DateTime.Property property19 = dateTime18.year();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = property19.getAsShortText(locale20);
        java.lang.String str22 = locale20.getVariant();
        java.util.Locale.setDefault(category10, locale20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category10);
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime3.toCalendar(locale24);
        java.util.Date date27 = calendar26.getTime();
        calendar26.add(8, 895);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-TW" + "'", str25, "zh-TW");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=2185840500000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=79500000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2039,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=99,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=79500000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Fri Feb 11 01:55:00 GMT+22:05 2022");
    }

    @Test
    public void test08524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08524");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(110332800000L);
        int int2 = localDate1.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate1.withMonthOfYear(1932);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1932 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test08525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08525");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate6 = property4.getLocalDate();
        org.joda.time.LocalDate localDate7 = property4.getLocalDate();
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.lang.String str9 = property4.getAsShortText(locale8);
        org.joda.time.LocalDate localDate10 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "sam." + "'", str9, "sam.");
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test08526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08526");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        int int14 = dateTimeField2.getMinimumValue(0L);
        long long17 = dateTimeField2.getDifferenceAsLong((long) (short) -1, (long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField2.getType();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean24 = localTime22.isSupported(durationFieldType23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime26 = localTime22.minus(readablePeriod25);
        org.joda.time.LocalTime localTime28 = localTime22.plusSeconds(9);
        org.joda.time.Chronology chronology29 = localTime22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = chronology29.add(readablePeriod30, (-2L), 1);
        long long37 = chronology29.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.Chronology chronology38 = chronology29.withUTC();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (-292275054), chronology29);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.lang.String str43 = dateTimeZone41.getShortName((long) 10);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone41);
        org.joda.time.Chronology chronology45 = chronology29.withZone(dateTimeZone41);
        boolean boolean46 = dateTimeFieldType18.isSupported(chronology45);
        org.joda.time.DurationField durationField47 = chronology45.centuries();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology49);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime53 = localTime50.toDateTimeToday(dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        int int56 = dateTimeZone54.getStandardOffset((-2L));
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean61 = localTime59.isSupported(durationFieldType60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalTime localTime63 = localTime59.minus(readablePeriod62);
        org.joda.time.LocalTime localTime65 = localTime59.plusSeconds(9);
        org.joda.time.Chronology chronology66 = localTime59.getChronology();
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        long long70 = chronology66.add(readablePeriod67, (-2L), 1);
        long long74 = chronology66.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTimeZone dateTimeZone75 = chronology66.getZone();
        long long77 = dateTimeZone54.getMillisKeepLocal(dateTimeZone75, (-2L));
        java.util.TimeZone timeZone78 = dateTimeZone54.toTimeZone();
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(dateTimeZone54);
        long long81 = chronology45.set((org.joda.time.ReadablePartial) localTime79, (long) 82800001);
        org.joda.time.DateTimeField dateTimeField82 = chronology45.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField83 = chronology45.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField84 = chronology45.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-2L) + "'", long33 == (-2L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 20L + "'", long37 == 20L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.001" + "'", str43, "+00:00:00.001");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-2L) + "'", long70 == (-2L));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 20L + "'", long74 == 20L);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 35645531L + "'", long81 == 35645531L);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test08527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08527");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 15);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readablePeriod2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        int int6 = localDateTime5.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test08528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08528");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        boolean boolean5 = dateTimeFormatter3.isParser();
        boolean boolean6 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear(30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.parse("eras", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test08529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08529");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        int int14 = dateTimeField2.getMinimumValue(0L);
        long long16 = dateTimeField2.remainder((long) 5);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField2.getType();
        long long20 = dateTimeField2.addWrapField(1644537599999L, 35332195);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = localTime26.isSupported(durationFieldType27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime26.minus(readablePeriod29);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localTime30, (int) (short) -1, locale32);
        java.lang.String str34 = localTime30.toString();
        int int35 = localTime30.size();
        org.joda.time.LocalTime.Property property36 = localTime30.hourOfDay();
        org.joda.time.LocalTime localTime38 = property36.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime39 = property36.withMinimumValue();
        int int40 = localTime39.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = localTime39.getFieldType(0);
        int int43 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.LocalTime.Property property44 = localTime39.millisOfDay();
        org.joda.time.LocalTime localTime46 = localTime39.withMillisOfSecond(772);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644537599194L + "'", long20 == 1644537599194L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22:05:00.000" + "'", str34, "22:05:00.000");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 999 + "'", int43 == 999);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime46);
    }

    @Test
    public void test08530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08530");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean14 = localTime12.isSupported(durationFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime12.minus(readablePeriod15);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localTime16, (int) (short) -1, locale18);
        java.lang.String str20 = localTime16.toString();
        int int21 = localTime16.size();
        org.joda.time.LocalTime.Property property22 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime24 = property22.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime26 = property22.setCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean34 = localTime32.isSupported(durationFieldType33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalTime localTime36 = localTime32.minus(readablePeriod35);
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str39 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localTime36, (int) (short) -1, locale38);
        java.lang.String str40 = localTime36.toString();
        int int41 = localTime36.size();
        int int42 = localTime36.getMillisOfSecond();
        org.joda.time.DateTimeField[] dateTimeFieldArray43 = localTime36.getFields();
        org.joda.time.LocalTime localTime44 = localTime26.withFields((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.Chronology chronology45 = localTime44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.millis();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(22, 5);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        long long54 = dateTimeZone49.convertLocalToUTC(1644572942340L, false, (long) 990);
        int int56 = dateTimeZone49.getOffset(0L);
        org.joda.time.Chronology chronology57 = chronology45.withZone(dateTimeZone49);
        org.joda.time.DurationField durationField58 = chronology57.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(42, (-27409550), 35332195, 48, (int) 'a', 6899, 52, chronology57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1" + "'", str19, "-1");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22:05:00.000" + "'", str20, "22:05:00.000");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-1" + "'", str39, "-1");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "22:05:00.000" + "'", str40, "22:05:00.000");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1644493442340L + "'", long54 == 1644493442340L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 79500000 + "'", int56 == 79500000);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test08531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08531");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Date date5 = localDate2.toDate();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = property14.compareTo((org.joda.time.ReadablePartial) localDate17);
        int int20 = localDate17.getEra();
        org.joda.time.LocalDate.Property property21 = localDate17.dayOfMonth();
        java.util.Date date22 = localDate17.toDate();
        boolean boolean23 = date5.before(date22);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date5);
        java.util.Calendar.Builder builder26 = builder0.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(true);
        java.util.Calendar.Builder builder30 = builder26.setInstant(4L);
        java.util.Calendar calendar31 = builder26.build();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusDays((-292275054));
        org.joda.time.DateTime dateTime41 = dateTime37.plus((-25L));
        org.joda.time.DateTime dateTime43 = dateTime37.minusDays((int) (short) 10);
        java.util.Locale.Category category44 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate48 = localDate46.minus(readablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTimeAtMidnight(dateTimeZone49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readablePeriod51);
        org.joda.time.DateTime.Property property53 = dateTime52.year();
        java.util.Locale locale54 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str55 = property53.getAsShortText(locale54);
        java.lang.String str56 = locale54.getVariant();
        java.util.Locale.setDefault(category44, locale54);
        java.util.Locale locale58 = java.util.Locale.getDefault(category44);
        java.lang.String str59 = locale58.toLanguageTag();
        java.util.Calendar calendar60 = dateTime37.toCalendar(locale58);
        java.lang.String str61 = locale58.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = calendar31.getDisplayName((int) (short) 10, (-2730), locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Feb 12 00:00:00 GMT+22:05 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Sat Feb 12 00:00:00 GMT+22:05 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=4,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=5,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.FORMAT + "'", category44.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022" + "'", str55, "2022");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-TW" + "'", str59, "zh-TW");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1644544500000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=79500000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=43,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=79500000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test08532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08532");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(79500000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withDefaultYear(60);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter8.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter8.getPrinter();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate12.minus(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime20.yearOfCentury();
        org.joda.time.DateTime dateTime24 = property23.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = property23.withMaximumValue();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.plus(readablePeriod28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) localDate27);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate27.minus(readablePeriod31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate36 = localDate34.minus(readablePeriod35);
        org.joda.time.LocalDate localDate38 = localDate34.plusMonths((int) (byte) 0);
        int int39 = localDate38.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property40 = localDate38.weekyear();
        org.joda.time.LocalDate localDate42 = property40.addToCopy((int) (byte) -1);
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.minuteOfHour();
        boolean boolean45 = localDate32.equals((java.lang.Object) chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime25.toMutableDateTime(chronology43);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = dateTimeFormatter8.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime47, "2021-12-30", 2008);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test08533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08533");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withDefaultYear((-2731));
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter27.withPivotYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime36 = dateTimeFormatter27.parseLocalTime("1871-03-01T00:00:00.033");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test08534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08534");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property8 = localDate1.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property8.addToCopy(1970);
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate14 = localDate11.minusDays((-292275054));
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks(0);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        java.util.Locale locale21 = builder20.build();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        java.lang.String str24 = locale21.getDisplayCountry(locale22);
        java.lang.String str25 = locale21.getVariant();
        java.util.Set<java.lang.String> strSet26 = locale21.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.LocalDate.Property property31 = localDate28.dayOfWeek();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.LocalDate localDate33 = property31.getLocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfMonth();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDate localDate41 = localDate39.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTimeAtMidnight(dateTimeZone42);
        org.joda.time.Chronology chronology44 = localDate41.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.monthOfYear();
        long long47 = dateTimeField45.roundFloor(4L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        int int50 = localDate49.getWeekOfWeekyear();
        int int51 = localDate49.getMonthOfYear();
        java.util.Locale locale53 = java.util.Locale.JAPAN;
        java.lang.String str54 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localDate49, 2, locale53);
        java.lang.String str55 = dateTimeField36.getAsText(1644537599989L, locale53);
        java.lang.String str56 = locale21.getDisplayVariant(locale53);
        java.lang.String str57 = locale53.getDisplayLanguage();
        java.lang.String str58 = localDate16.toString("30", locale53);
        org.joda.time.LocalDate.Property property59 = localDate16.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644573245734,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=5,MILLISECOND=735,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u6708" + "'", str54, "\u6708");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "10" + "'", str55, "10");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u65e5\u6587" + "'", str57, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "30" + "'", str58, "30");
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test08535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08535");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ja-JP", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList11, strMap12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList18, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList18, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = locale26.getExtension('a');
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = locale30.getExtension('a');
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale26, locale30 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale locale38 = java.util.Locale.lookup(languageRangeList22, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter(languageRangeList11, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale locale40 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap41);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNotNull(languageRangeList42);
    }

    @Test
    public void test08536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08536");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        java.util.Date date4 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate1.withPeriodAdded(readablePeriod5, (-1));
        org.joda.time.LocalDate localDate9 = localDate1.minusYears(6);
        java.lang.String str10 = localDate1.toString();
        org.joda.time.LocalDate.Property property11 = localDate1.weekyear();
        int int12 = property11.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sat Feb 12 00:00:00 GMT+22:05 2022");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-12" + "'", str10, "2022-02-12");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
    }

    @Test
    public void test08537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08537");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long4 = dateTimeZone1.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate5.minus(readablePeriod6);
        int int8 = localDate5.getDayOfMonth();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate10.minus(readablePeriod11);
        org.joda.time.LocalDate localDate14 = localDate10.plusMonths((int) (byte) 0);
        int int15 = localDate14.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property16 = localDate14.weekyear();
        org.joda.time.Interval interval17 = localDate14.toInterval();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.lang.String str21 = dateTimeZone19.getShortName(0L);
        java.lang.String str22 = dateTimeZone19.toString();
        java.util.TimeZone timeZone23 = dateTimeZone19.toTimeZone();
        org.joda.time.DateMidnight dateMidnight24 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.DateTime dateTime25 = localDate5.toDateTime((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readablePeriod26);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-2L) + "'", long4 == (-2L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.001" + "'", str21, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.001" + "'", str22, "+00:00:00.001");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test08538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08538");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("java.util.GregorianCalendar[time=1644573060480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=DateTimeField[dayOfWeek],offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=51,SECOND=0,MILLISECOND=486,ZONE_OFFSET=6,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.util.GregorianCalendar[time...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08539");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(7);
        int int12 = localDate11.getDayOfYear();
        org.joda.time.LocalDate localDate14 = localDate11.minusDays(6);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate17 = localDate11.plusDays((-2731));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(7, 3, (int) (byte) 10, (int) (short) 0, 17, 17, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.LocalDate.Property property29 = localDate17.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test08540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08540");
        java.util.Locale locale1 = new java.util.Locale("0022-02-12T00:00:00.000+22:05");
        org.junit.Assert.assertEquals(locale1.toString(), "0022-02-12t00:00:00.000+22:05");
    }

    @Test
    public void test08541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08541");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate0.withEra(1908);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1908 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
    }

    @Test
    public void test08542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08542");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(9);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(6);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withPeriodAdded(readablePeriod12, 0);
        java.util.Date date15 = localDateTime14.toDate();
        int int16 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.secondOfMinute();
        int int18 = localDateTime14.getMonthOfYear();
        org.joda.time.DateTime dateTime19 = localDateTime14.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes((int) (byte) 0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sat Jan 10 00:00:33 GMT+22:05 1970");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test08543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08543");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("2022-01-01");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08544");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long4 = dateTimeZone1.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate7 = localDate5.plusWeeks(55);
        org.joda.time.LocalDate localDate9 = localDate5.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate11 = localDate5.plusDays((-2022));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-2L) + "'", long4 == (-2L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test08545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08545");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withWeekOfWeekyear(19);
        int int6 = localDateTime5.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfDay(32772);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readableDuration10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(23);
        org.joda.time.LocalDateTime localDateTime16 = property12.addToCopy(0);
        int int17 = localDateTime16.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test08546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08546");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set(5, (int) 'x', 23);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 1, chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        int int12 = localDateTime10.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfMonth(22);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        boolean boolean18 = calendar1.before((java.lang.Object) property17);
        calendar1.setTimeInMillis((long) 677205);
        boolean boolean22 = calendar1.equals((java.lang.Object) 1644573128170L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=677205,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=11,SECOND=17,MILLISECOND=206,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08547");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strSet9.addAll((java.util.Collection<java.lang.String>) strList14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        boolean boolean26 = strSet19.addAll((java.util.Collection<java.lang.String>) strList24);
        boolean boolean27 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        boolean boolean40 = strSet33.addAll((java.util.Collection<java.lang.String>) strList38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList38);
        boolean boolean42 = strSet19.removeAll((java.util.Collection<java.lang.String>) strList41);
        java.lang.Object[] objArray43 = strSet19.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet19.spliterator();
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strSet19, filteringMode45);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        boolean boolean56 = strSet49.addAll((java.util.Collection<java.lang.String>) strList54);
        java.util.Iterator<java.lang.String> strItor57 = strSet49.iterator();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 1, chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.year();
        int int64 = localDateTime62.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime66 = property65.withMinimumValue();
        int int67 = localDateTime66.getEra();
        boolean boolean68 = strSet49.remove((java.lang.Object) localDateTime66);
        boolean boolean69 = strSet49.isEmpty();
        boolean boolean70 = strSet19.removeAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap74 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList75 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, strMap74);
        org.joda.time.tz.Provider provider76 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone78 = provider76.getZone("2022");
        java.util.Set<java.lang.String> strSet79 = provider76.getAvailableIDs();
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList75, (java.util.Collection<java.lang.String>) strSet79);
        boolean boolean81 = strSet49.retainAll((java.util.Collection<java.lang.String>) strSet79);
        java.util.TimeZone timeZone83 = java.util.TimeZone.getTimeZone("secondOfMinute");
        timeZone83.setRawOffset(92);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = strSet79.contains((java.lang.Object) 92);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[hi!, ]");
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 70 + "'", int64 == 70);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(languageRangeList75);
        org.junit.Assert.assertNotNull(provider76);
        org.junit.Assert.assertNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(timeZone83);
// flaky:         org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
    }

    @Test
    public void test08548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08548");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((-4), 6, 17);
        java.util.Calendar.Builder builder7 = builder4.set(1, 7);
        java.util.Calendar.Builder builder9 = builder7.setLenient(false);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean14 = localTime12.isSupported(durationFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime12.minus(readablePeriod15);
        org.joda.time.LocalTime localTime18 = localTime12.plusSeconds(9);
        org.joda.time.Chronology chronology19 = localTime12.getChronology();
        org.joda.time.Chronology chronology20 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.era();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean26 = localTime24.isSupported(durationFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalTime localTime28 = localTime24.minus(readablePeriod27);
        int[] intArray30 = chronology20.get((org.joda.time.ReadablePartial) localTime24, 1L);
        java.util.Calendar.Builder builder31 = builder9.setFields(intArray30);
        java.util.Calendar calendar32 = builder9.build();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.lang.String str34 = timeZone33.getID();
        int int35 = timeZone33.getRawOffset();
        boolean boolean36 = timeZone33.observesDaylightTime();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone33);
        java.util.Calendar.Builder builder38 = builder9.setTimeZone(timeZone33);
        java.util.Calendar.Builder builder40 = builder9.setLenient(false);
        java.util.Calendar.Builder builder44 = builder40.setWeekDate(35490285, 10, (-327493913));
        java.util.Calendar.Builder builder46 = builder44.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder48 = builder44.setInstant((long) 35457044);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-61929446400001,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=6,WEEK_OF_YEAR=30,WEEK_OF_MONTH=4,DAY_OF_MONTH=17,DAY_OF_YEAR=198,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+22:05");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GMT+22:05" + "'", str34, "GMT+22:05");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644573246060,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=6,MILLISECOND=61,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test08549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08549");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        int int9 = localDateTime8.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((-1));
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        java.util.Locale locale17 = new java.util.Locale("secondOfMinute", "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = property12.setCopy("1970-12-31T00:00:00.032Z", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-12-31T00:00:00.032Z\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals(locale17.toString(), "secondofminute_JAVA.UTIL.GREGORIANCALENDAR[TIME=1644537600000,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=2,MINIMALDAYSINFIRSTWEEK=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08550");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfDay(5);
        int int6 = dateTime3.getYearOfEra();
        int int7 = dateTime3.getCenturyOfEra();
        java.lang.String str8 = dateTime3.toString();
        org.joda.time.DateTime dateTime10 = dateTime3.plusSeconds(6);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime3.getZone();
        long long13 = dateTimeZone11.nextTransition(60000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-12T00:00:00.000+22:05" + "'", str8, "2022-02-12T00:00:00.000+22:05");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 60000L + "'", long13 == 60000L);
    }

    @Test
    public void test08551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08551");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.DateMidnight dateMidnight7 = localDate1.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test08552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08552");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        calendar3.setMinimalDaysInFirstWeek(22);
        calendar3.setMinimalDaysInFirstWeek((int) 'a');
        calendar3.set(4, (-292275054), 59, 53, (-2731), 8);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        java.util.Date date19 = localDate16.toDate();
        date19.setDate(0);
        int int22 = date19.getMonth();
        date19.setDate((int) (byte) -1);
        java.lang.String str25 = date19.toLocaleString();
        calendar3.setTime(date19);
        calendar3.set(0, (int) (short) 0, 32, 37432964, 5, 4);
        int int35 = calendar3.getActualMinimum((int) (short) 1);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        boolean boolean38 = calendar3.isSet((int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=72593957103999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.006,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=97,ERA=1,YEAR=4270,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=5,SECOND=4,MILLISECOND=5,ZONE_OFFSET=6,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Dec 30 00:00:00 GMT+22:05 2021");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e0a\u5348 12:00:00" + "'", str25, "\u4e0a\u5348 12:00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test08553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08553");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((long) 22);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusMillis((int) (byte) 0);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds(32);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((-27409511));
        int int22 = localDateTime21.getDayOfMonth();
        int int23 = localDateTime21.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test08554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08554");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.minus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime4.plusSeconds(9);
        org.joda.time.Chronology chronology11 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.hourOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj1, chronology11);
        org.joda.time.DurationField durationField15 = chronology11.halfdays();
        org.joda.time.DurationField durationField16 = durationFieldType0.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.dayOfMonth();
        int int20 = dateTimeField18.getMinimumValue(2021L);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = localTime26.isSupported(durationFieldType27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime26.minus(readablePeriod29);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localTime30, (int) (short) -1, locale32);
        int int34 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localTime30);
        int int35 = localTime30.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime37 = localTime30.withHourOfDay(340);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 340 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test08555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08555");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale1.getExtension('a');
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = locale1.getDisplayScript(locale5);
        java.lang.String str7 = locale5.getLanguage();
        java.lang.String str8 = locale5.getDisplayScript();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone0, locale5);
        calendar9.set((int) (short) 10, 35332195);
        int int13 = calendar9.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+22:05");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=35332195,HOUR_OF_DAY=9,MINUTE=54,SECOND=6,MILLISECOND=152,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test08556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08556");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((long) 22);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.plusMillis((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfMonth();
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDateTime16.getFields();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
    }

    @Test
    public void test08557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08557");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder6.setExtension('4', "\u4e0a\u5348 09:52:32");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test08558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08558");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTime dateTime9 = dateTime7.withEarlierOffsetAtOverlap();
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property11.getDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate15.plus(readablePeriod16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate24 = localDate19.withFieldAdded(durationFieldType22, (int) (short) 0);
        org.joda.time.LocalDate localDate26 = localDate17.withFieldAdded(durationFieldType22, 19);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate28.minus(readablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readablePeriod33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.toDateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime36.withMonthOfYear(5);
        org.joda.time.DateTime.Property property41 = dateTime40.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long46 = dateTimeZone43.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str48 = dateTimeZone43.getNameKey(100L);
        org.joda.time.DateTime dateTime49 = dateTime40.withZoneRetainFields(dateTimeZone43);
        boolean boolean50 = dateTime49.isAfterNow();
        org.joda.time.DateTime dateTime51 = localDate17.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property52 = dateTime49.weekyear();
        org.joda.time.DateTime dateTime53 = property52.roundCeilingCopy();
        org.joda.time.DateTime dateTime54 = property52.roundCeilingCopy();
        org.joda.time.DateTime dateTime56 = property52.setCopy((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.withPeriodAdded(readablePeriod57, 59);
        boolean boolean60 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getDurationType();
        java.lang.String str63 = durationFieldType62.getName();
        org.joda.time.DateTime dateTime65 = dateTime12.withFieldAdded(durationFieldType62, 19034);
        java.lang.String str66 = durationFieldType62.getName();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644544500000L + "'", long10 == 1644544500000L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-2L) + "'", long46 == (-2L));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "years" + "'", str63, "years");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "years" + "'", str66, "years");
    }

    @Test
    public void test08559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08559");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        boolean boolean7 = property6.isLeap();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate15 = localDate10.withFieldAdded(durationFieldType13, (int) (short) 0);
        org.joda.time.LocalDate.Property property16 = localDate10.year();
        org.joda.time.LocalDate localDate17 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property18 = localDate17.weekOfWeekyear();
        org.joda.time.LocalDate localDate20 = localDate17.withDayOfYear(12);
        org.joda.time.LocalDate.Property property21 = localDate20.yearOfCentury();
        int[] intArray22 = null;
        int int23 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDate20, intArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = localDate20.withDayOfWeek(35568);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35568 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
    }

    @Test
    public void test08560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08560");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.minus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime4.plusSeconds(9);
        org.joda.time.Chronology chronology11 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.hourOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj1, chronology11);
        org.joda.time.DurationField durationField15 = chronology11.halfdays();
        org.joda.time.DurationField durationField16 = durationFieldType0.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField19 = chronology11.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = chronology11.dayOfMonth();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test08561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08561");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale1.getExtension('a');
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet5 = locale1.getUnicodeLocaleKeys();
        java.lang.String str6 = locale0.getDisplayCountry(locale1);
        java.lang.String str7 = locale1.getDisplayCountry();
        java.util.Set<java.lang.String> strSet8 = locale1.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet8.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u53f0\u7063" + "'", str7, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strStream9);
    }

    @Test
    public void test08562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08562");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(9);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(6);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.year();
        int int16 = property15.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy(365);
        int int19 = localDateTime18.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test08563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08563");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(0L);
        int int10 = dateTime9.getMonthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond(6);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test08564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08564");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("1970-12-31T00:00:00.038+00:00:00.006");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-12-31T00:00:00.038+00:00:00.006\" is malformed at \"T00:00:00.038+00:00:00.006\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08565");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.LocalDate localDate9 = property7.addToCopy((int) (byte) -1);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        org.joda.time.LocalDateTime localDateTime21 = property17.addToCopy((int) '4');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.hourOfDay();
        java.lang.String str23 = property22.toString();
        org.joda.time.ReadableInstant readableInstant24 = null;
        int int25 = property22.getDifference(readableInstant24);
        org.joda.time.LocalDateTime localDateTime26 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusHours(1970);
        java.util.Calendar.Builder builder33 = new java.util.Calendar.Builder();
        java.util.Calendar calendar34 = builder33.build();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone36);
        boolean boolean38 = timeZone36.observesDaylightTime();
        int int39 = timeZone36.getRawOffset();
        boolean boolean40 = timeZone36.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone36);
        java.util.Calendar.Builder builder42 = builder33.setTimeZone(timeZone36);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean47 = localTime45.isSupported(durationFieldType46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalTime localTime49 = localTime45.minus(readablePeriod48);
        org.joda.time.LocalTime localTime51 = localTime45.plusSeconds(9);
        org.joda.time.Chronology chronology52 = localTime45.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(chronology52);
        org.joda.time.Chronology chronology54 = localTime53.getChronology();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.millisOfSecond();
        org.joda.time.DurationField durationField57 = dateTimeField56.getRangeDurationField();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology59);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean65 = localTime63.isSupported(durationFieldType64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalTime localTime67 = localTime63.minus(readablePeriod66);
        org.joda.time.LocalTime localTime69 = localTime63.plusSeconds(9);
        org.joda.time.Chronology chronology70 = localTime63.getChronology();
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(chronology70);
        org.joda.time.Chronology chronology72 = localTime71.getChronology();
        int[] intArray73 = localTime71.getValues();
        int int74 = dateTimeField56.getMaximumValue((org.joda.time.ReadablePartial) localTime60, intArray73);
        java.util.Calendar.Builder builder75 = null; // flaky: builder42.setFields(intArray73);
        java.util.Locale locale80 = new java.util.Locale("GMT", "ISOChronology[UTC]", "zh-TW");
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray81 = dateTimeField11.set((org.joda.time.ReadablePartial) localDateTime28, 18000010, intArray73, "", locale80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[hourOfDay]" + "'", str23, "Property[hourOfDay]");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-993) + "'", int25 == (-993));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+22:05\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(intArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[9, 54, 6, 421]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 999 + "'", int74 == 999);
// flaky:         org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals(locale80.toString(), "gmt_ISOCHRONOLOGY[UTC]_zh-TW");
    }

    @Test
    public void test08566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08566");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.Object obj1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.minus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime4.plusSeconds(9);
        org.joda.time.Chronology chronology11 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.hourOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj1, chronology11);
        org.joda.time.DurationField durationField15 = chronology11.halfdays();
        org.joda.time.DurationField durationField16 = durationFieldType0.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        int int24 = dateTimeZone21.getStandardOffset((long) (short) 0);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(0L, dateTimeZone21);
        org.joda.time.Chronology chronology26 = chronology11.withZone(dateTimeZone21);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.LocalTime localTime29 = localTime27.plusMillis(17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime31 = localTime29.withMinuteOfHour(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test08567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08567");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withWeekOfWeekyear(1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusHours(5);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays(82800000);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        int int19 = localDateTime17.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int21 = localDateTime17.get(dateTimeFieldType20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfDay((int) (byte) 10);
        int int27 = localDateTime26.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) ' ');
        int int30 = localDateTime26.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.minusSeconds((int) (byte) -1);
        int int33 = localDateTime32.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str35 = dateTimeFieldType34.getName();
        int int36 = localDateTime32.get(dateTimeFieldType34);
        int int37 = localDateTime17.get(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime17.withMinuteOfHour(35404470);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35404470 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21 + "'", int19 == 21);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 19 + "'", int27 == 19);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "year" + "'", str35, "year");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-224729) + "'", int37 == (-224729));
    }

    @Test
    public void test08568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08568");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 1, chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long10 = dateTimeZone7.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime5, dateTimeZone7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(1644533999999L, dateTimeZone7);
        java.util.TimeZone timeZone15 = dateTimeZone7.toTimeZone();
        int int17 = timeZone15.getOffset((long) 23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = timeZone15.getDisplayName(false, (-19));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: -19");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-2L) + "'", long10 == (-2L));
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test08569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08569");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime5 = localTime2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime8 = property6.addToCopy(59);
        org.joda.time.DateTime dateTime10 = property6.addToCopy((long) 43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = property6.setCopy(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test08570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08570");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate6.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight8 = localDate6.toDateMidnight();
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfWeek();
        org.joda.time.LocalDate localDate11 = localDate6.withYearOfEra(35404470);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.minus(readablePeriod14);
        org.joda.time.LocalDate localDate17 = localDate13.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property20 = localDate13.dayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime30.withMonthOfYear(5);
        org.joda.time.DateTime.Property property35 = dateTime34.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long40 = dateTimeZone37.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str42 = dateTimeZone37.getNameKey(100L);
        org.joda.time.DateTime dateTime43 = dateTime34.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime44 = localDate13.toDateTimeAtStartOfDay(dateTimeZone37);
        int int46 = dateTimeZone37.getStandardOffset((long) 5);
        org.joda.time.DateTime dateTime47 = localDate6.toDateTimeAtMidnight(dateTimeZone37);
        long long50 = dateTimeZone37.convertLocalToUTC((long) 54000001, false);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-2L) + "'", long40 == (-2L));
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 54000000L + "'", long50 == 54000000L);
    }

    @Test
    public void test08571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08571");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("English");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((int) '4');
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfSecond();
        boolean boolean15 = languageRange1.equals((java.lang.Object) dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test08572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08572");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long9 = dateTimeZone6.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withMillisOfDay(5);
        org.joda.time.Chronology chronology13 = localDateTime4.getChronology();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfDay((int) (byte) 10);
        int int19 = localDateTime18.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField21 = localDateTime18.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfCentury((int) (short) 0);
        long long27 = chronology13.set((org.joda.time.ReadablePartial) localDateTime25, (long) 13);
        org.joda.time.DurationField durationField28 = chronology13.years();
        org.joda.time.DateTimeField dateTimeField29 = chronology13.secondOfMinute();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.lang.String str32 = timeZone31.getID();
        java.util.Locale locale35 = new java.util.Locale("yearOfEra", "hourOfDay");
        boolean boolean36 = locale35.hasExtensions();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone31, locale35);
        java.lang.String str38 = dateTimeField29.getAsText(1644572946564L, locale35);
        boolean boolean40 = dateTimeField29.isLeap((long) 32769);
        long long43 = dateTimeField29.add((long) 1969, 13);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-2L) + "'", long9 == (-2L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-2208801599990L) + "'", long27 == (-2208801599990L));
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "GMT" + "'", str32, "GMT");
        org.junit.Assert.assertEquals(locale35.toString(), "yearofera_HOUROFDAY");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644573246591,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=6,MILLISECOND=591,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "6" + "'", str38, "6");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 14969L + "'", long43 == 14969L);
    }

    @Test
    public void test08573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08573");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(0L);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, (int) (byte) 100);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate15.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateMidnight dateMidnight22 = dateTime21.toDateMidnight();
        org.joda.time.DateTime dateTime23 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime21.plus(readablePeriod24);
        org.joda.time.DateTime dateTime27 = dateTime21.withYearOfEra(1900);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfDay((int) (short) 10);
        boolean boolean30 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test08574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08574");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withDurationAdded(readableDuration13, 5);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusHours(2000);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withYearOfCentury((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMonths(35405662);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfMonth(893);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 893 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08575");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, (-2L), 1);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology9.getZone();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(dateTimeZone14);
        org.joda.time.LocalTime localTime17 = localTime15.plusMinutes(40);
        int int18 = localTime17.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = localTime17.withMinuteOfHour(32769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test08576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08576");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths((int) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long23 = dateTimeZone20.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime18, dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int26 = localDateTime18.get(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime18.property(dateTimeFieldType27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime13.property(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime32 = property31.roundFloorCopy();
        int int33 = localDateTime32.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.year();
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.centuryOfEra();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-2L) + "'", long23 == (-2L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test08577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08577");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime7.withCenturyOfEra((int) (byte) 0);
        java.util.Date date12 = dateTime11.toDate();
        int int13 = dateTime11.getSecondOfDay();
        java.util.Date date14 = dateTime11.toDate();
        org.joda.time.DateTime dateTime16 = dateTime11.withYear((int) (byte) -1);
        org.joda.time.DateTime.Property property17 = dateTime16.weekOfWeekyear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        boolean boolean25 = localDate21.isSupported(dateTimeFieldType22);
        int int26 = dateTime16.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) dateTime16);
        int int28 = dateTime27.getMinuteOfHour();
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate33 = localDate31.minus(readablePeriod32);
        org.joda.time.LocalDate localDate35 = localDate31.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate37 = localDate31.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property38 = localDate31.dayOfWeek();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate42 = localDate40.minus(readablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime48.withMonthOfYear(5);
        org.joda.time.DateTime.Property property53 = dateTime52.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long58 = dateTimeZone55.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str60 = dateTimeZone55.getNameKey(100L);
        org.joda.time.DateTime dateTime61 = dateTime52.withZoneRetainFields(dateTimeZone55);
        org.joda.time.DateTime dateTime62 = localDate31.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(obj29, dateTimeZone55);
        java.lang.String str65 = dateTimeZone55.getShortName((long) 100);
        int int67 = dateTimeZone55.getOffsetFromLocal((long) 2022);
        org.joda.time.DateTime dateTime68 = dateTime27.toDateTime(dateTimeZone55);
        org.joda.time.LocalDate localDate69 = org.joda.time.LocalDate.now(dateTimeZone55);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Feb 12 23:59:59 GMT 22");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Feb 12 23:59:59 GMT 22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-2L) + "'", long58 == (-2L));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.001" + "'", str65, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate69);
    }

    @Test
    public void test08578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08578");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        java.lang.String str19 = property18.getAsString();
        java.lang.String str20 = property18.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis(32772);
        org.joda.time.DateTime dateTime30 = dateTime26.withMillis((long) ' ');
        org.joda.time.DateTime dateTime32 = dateTime26.minusMillis(5);
        int int33 = dateTime26.getDayOfMonth();
        int int34 = property18.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime36 = dateTime26.plusMonths(1970);
        boolean boolean37 = dateTime5.equals((java.lang.Object) dateTime26);
        org.joda.time.DateTime dateTime39 = dateTime26.plusMonths(2022);
        org.joda.time.DateTime.Property property40 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate48 = localDate43.withFieldAdded(durationFieldType46, (int) (short) 0);
        java.lang.String str49 = durationFieldType46.getName();
        org.joda.time.DateTime dateTime51 = dateTime41.withFieldAdded(durationFieldType46, (-2730));
        java.lang.String str53 = dateTime51.toString("19");
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime51.getZone();
        org.joda.time.Chronology chronology55 = dateTime51.getChronology();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[year]" + "'", str20, "Property[year]");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "weekyears" + "'", str49, "weekyears");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "19" + "'", str53, "19");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test08579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08579");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime19 = property15.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean21 = localTime19.isSupported(dateTimeFieldType20);
        int int22 = localTime19.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test08580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08580");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.clear();
        calendar1.clear();
        int int11 = calendar1.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = calendar1.getActualMinimum(127);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 127");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test08581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08581");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.monthOfYear();
        long long9 = dateTimeField7.roundFloor(4L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        int int12 = localDate11.getWeekOfWeekyear();
        int int13 = localDate11.getMonthOfYear();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.lang.String str16 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDate11, 2, locale15);
        boolean boolean17 = dateTimeField7.isSupported();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u6708" + "'", str16, "\u6708");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test08582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08582");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale6.getExtension('a');
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale10.getExtension('a');
        java.util.Set<java.lang.String> strSet13 = locale10.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale6, locale10 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.Locale locale18 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap22 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList23 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList23, strMap26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str33 = locale31.getExtension('a');
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleAttributes();
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale35.getExtension('a');
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale31, locale35 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Locale locale43 = java.util.Locale.lookup(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Locale locale44 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap45 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap45);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList48 = java.util.Locale.LanguageRange.parse("seconds");
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strMap52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList53, strMap54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str61 = locale59.getExtension('a');
        java.util.Set<java.lang.String> strSet62 = locale59.getUnicodeLocaleAttributes();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str65 = locale63.getExtension('a');
        java.util.Set<java.lang.String> strSet66 = locale63.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale59, locale63 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter(languageRangeList55, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter(languageRangeList48, (java.util.Collection<java.util.Locale>) localeList68, filteringMode72);
        java.util.Locale locale74 = java.util.Locale.lookup(languageRangeList46, (java.util.Collection<java.util.Locale>) localeList73);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeList23);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNull(locale44);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode72.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNull(locale74);
    }

    @Test
    public void test08583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08583");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime5 = localTime2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long11 = dateTimeZone8.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str13 = dateTimeZone8.getNameKey(100L);
        org.joda.time.DateTime dateTime14 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property15 = dateTime5.era();
        int int16 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime5.withDurationAdded(1L, (int) (short) 100);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType22.getField(chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean29 = localTime27.isSupported(durationFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime31 = localTime27.minus(readablePeriod30);
        java.util.Locale locale33 = java.util.Locale.KOREA;
        java.lang.String str34 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localTime31, (int) (short) -1, locale33);
        int int37 = dateTimeField24.getDifference((long) 7, (long) 11);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField24.getType();
        int int39 = dateTime21.get(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-2L) + "'", long11 == (-2L));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 42 + "'", int16 == 42);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1" + "'", str34, "-1");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-4) + "'", int37 == (-4));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 101 + "'", int39 == 101);
    }

    @Test
    public void test08584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08584");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0);
        long long3 = calendar2.getTimeInMillis();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate5.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMillis(32772);
        org.joda.time.DateTime dateTime13 = dateTime9.withMillis((long) ' ');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate15.plus(readablePeriod16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        boolean boolean20 = dateTimeFieldType18.isSupported(chronology19);
        boolean boolean21 = localDate17.isSupported(dateTimeFieldType18);
        int int22 = dateTime13.get(dateTimeFieldType18);
        java.util.Date date23 = dateTime13.toDate();
        calendar2.setTime(date23);
        boolean boolean26 = calendar2.after((java.lang.Object) "32");
        calendar2.set(41, 93, (int) 'u', (-2022), 1);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.lang.String str34 = timeZone33.getID();
        java.util.Locale locale37 = new java.util.Locale("yearOfEra", "hourOfDay");
        boolean boolean38 = locale37.hasExtensions();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone33, locale37);
        boolean boolean40 = timeZone33.observesDaylightTime();
        calendar2.setTimeZone(timeZone33);
        calendar2.setTimeInMillis(396601L);
        java.lang.Object obj44 = calendar2.clone();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=396601,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=6,SECOND=36,MILLISECOND=601,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1644573246920L + "'", long3 == 1644573246920L);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "GMT" + "'", str34, "GMT");
        org.junit.Assert.assertEquals(locale37.toString(), "yearofera_HOUROFDAY");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644573246920,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=6,MILLISECOND=920,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "java.util.GregorianCalendar[time=396601,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=6,SECOND=36,MILLISECOND=601,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "java.util.GregorianCalendar[time=396601,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=6,SECOND=36,MILLISECOND=601,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "java.util.GregorianCalendar[time=396601,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=6,SECOND=36,MILLISECOND=601,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08585");
        org.joda.time.Chronology chronology4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(35458525, 35434289, 35417304, 35427, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35458525 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08586");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long9 = dateTimeZone6.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withMillisOfDay(5);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.plus(readableDuration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusWeeks(0);
        int int17 = localDateTime14.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMillis(59);
        java.lang.String str20 = localDateTime19.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-2L) + "'", long9 == (-2L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.069" + "'", str20, "1970-01-01T00:00:00.069");
    }

    @Test
    public void test08587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08587");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        long long10 = dateTimeField8.roundHalfCeiling((long) 292278994);
        long long12 = dateTimeField8.roundHalfEven((long) 19033);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08588");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMonthOfYear(5);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long19 = dateTimeZone16.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str21 = dateTimeZone16.getNameKey(100L);
        org.joda.time.DateTime dateTime22 = dateTime13.withZoneRetainFields(dateTimeZone16);
        long long26 = dateTimeZone16.convertLocalToUTC((long) 32, false, (long) (-4));
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(15);
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtMidnight(dateTimeZone29);
        java.util.GregorianCalendar gregorianCalendar31 = dateTime30.toGregorianCalendar();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTimeAtMidnight(dateTimeZone34);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate38 = localDate33.withFieldAdded(durationFieldType36, (int) (short) 0);
        org.joda.time.LocalDate.Property property39 = localDate38.centuryOfEra();
        org.joda.time.LocalDate.Property property40 = localDate38.dayOfMonth();
        org.joda.time.LocalDate localDate41 = property40.roundCeilingCopy();
        org.joda.time.LocalDate localDate43 = property40.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTime dateTime44 = dateTime30.withFields((org.joda.time.ReadablePartial) localDate43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime44.withDayOfWeek((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-2L) + "'", long19 == (-2L));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 31L + "'", long26 == 31L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(gregorianCalendar31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test08589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08589");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setMinimalDaysInFirstWeek((int) 'a');
        java.lang.Object obj4 = null;
        boolean boolean5 = calendar1.after(obj4);
        int int6 = calendar1.getWeekYear();
        boolean boolean7 = calendar1.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(2041, 1907, 35492129);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 35492129");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644573247042,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=97,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=7,MILLISECOND=42,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08590");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(5);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfWeek();
        boolean boolean17 = dateTime5.equals((java.lang.Object) dateTime15);
        org.joda.time.DateTime dateTime19 = dateTime15.plus((long) 22);
        int int20 = dateTime15.getDayOfYear();
        int int21 = dateTime15.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime15.withWeekOfWeekyear(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 42 + "'", int20 == 42);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
    }

    @Test
    public void test08591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08591");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.clear();
        calendar1.clear();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.lang.String str12 = timeZone11.getID();
        int int13 = timeZone11.getRawOffset();
        boolean boolean14 = timeZone11.observesDaylightTime();
        calendar1.setTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = calendar1.before((java.lang.Object) dateTimeZone16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromCalendarFields(calendar1);
        long long19 = calendar1.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = calendar1.getMinimum(58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 58");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GMT" + "'", str12, "GMT");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test08592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08592");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        int int4 = timeZone1.getRawOffset();
        boolean boolean5 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        java.util.Date date13 = localDate10.toDate();
        calendar8.setTime(date13);
        java.util.TimeZone timeZone15 = calendar8.getTimeZone();
        calendar8.clear();
        calendar8.clear();
        calendar8.set((-2731), 2022, 32769, (int) (short) 1, 100, 12);
        int int26 = calendar8.getGreatestMinimum(0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(7);
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        calendar8.setTimeZone(timeZone29);
        java.util.Date date31 = calendar8.getTime();
        boolean boolean32 = timeZone1.inDaylightTime(date31);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-140202677988000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+07:00\",offset=25200000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2474,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=19,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=2,MINUTE=40,SECOND=12,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+07:00");
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertEquals(date31.toString(), "Sat Mar 18 19:40:12 GMT 2474");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08593");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfMonth();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears(15);
        org.joda.time.DateTime.Property property13 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        org.joda.time.DateTime dateTime16 = dateTime14.minus((long) 1932);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test08594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08594");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long11 = dateTimeZone9.nextTransition((long) 4);
        org.joda.time.Chronology chronology12 = chronology6.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = chronology6.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate15.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime(chronology24);
        int int26 = dateTime23.getDayOfWeek();
        boolean boolean28 = dateTime23.isEqual((long) 0);
        org.joda.time.DateTime dateTime30 = dateTime23.withMillisOfSecond(23);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime23.getZone();
        org.joda.time.Chronology chronology32 = chronology6.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(chronology32);
        org.joda.time.LocalDate localDate36 = localDate34.plusYears(366);
        int int37 = localDate34.size();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
    }

    @Test
    public void test08595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08595");
        java.util.Date date3 = new java.util.Date((-1), 54903000, 35458525);
        java.lang.Object obj4 = date3.clone();
        org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 00:00:00 GMT 4674231");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "Tue Feb 22 00:00:00 GMT 4674231");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "Tue Feb 22 00:00:00 GMT 4674231");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "Tue Feb 22 00:00:00 GMT 4674231");
    }

    @Test
    public void test08596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08596");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0);
        long long3 = calendar2.getTimeInMillis();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.lang.String str5 = timeZone4.getID();
        int int6 = timeZone4.getRawOffset();
        calendar2.setTimeZone(timeZone4);
        calendar2.setTimeInMillis((long) 32);
        calendar2.clear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar2);
        int int13 = localDateTime12.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusDays(59);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusWeeks(0);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=32,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1644573247241L + "'", long3 == 1644573247241L);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test08597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08597");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strSet2.addAll((java.util.Collection<java.lang.String>) strList7);
        java.util.Iterator<java.lang.String> strItor10 = strSet2.iterator();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        int int17 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMinimumValue();
        int int20 = localDateTime19.getEra();
        boolean boolean21 = strSet2.remove((java.lang.Object) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.era();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readablePeriod25);
        int int27 = localDateTime24.getCenturyOfEra();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 70 + "'", int17 == 70);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test08598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08598");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear((int) '4');
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime11.withPeriodAdded(readablePeriod16, 35373897);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra(625);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime18.minus(readablePeriod21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate26 = localDate24.minus(readablePeriod25);
        org.joda.time.LocalDate localDate28 = localDate24.plusMonths((int) (byte) 0);
        int int29 = localDate28.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property30 = localDate28.weekyear();
        org.joda.time.LocalDate localDate32 = property30.addToCopy((int) (byte) -1);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime22.toMutableDateTime(chronology33);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test08599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08599");
        java.util.Date date1 = new java.util.Date((long) (-292275054));
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.fromDateFields(date1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate5 = localDate2.withPeriodAdded(readablePeriod3, 43);
        org.junit.Assert.assertEquals(date1.toString(), "Sun Dec 28 14:48:44 GMT 1969");
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test08600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08600");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean9 = localTime7.isSupported(durationFieldType8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.minus(readablePeriod10);
        org.joda.time.LocalTime localTime13 = localTime7.plusSeconds(9);
        org.joda.time.Chronology chronology14 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfHour();
        boolean boolean16 = dateTimeField15.isSupported();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clear();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale locale20 = builder19.build();
        int int21 = dateTimeField15.getMaximumShortTextLength(locale20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone4, locale20);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("-4");
        calendar22.setTimeZone(timeZone24);
        timeZone24.setID("\u4e0a\u5348 09:50:50");
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644573247336,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u4e0a\u5348 09:50:50\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=7,MILLISECOND=336,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test08601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08601");
        java.util.Date date5 = new java.util.Date(130, 779, (int) '#', 86399990, (int) (short) 0);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Jun 23 14:00:00 GMT 11951");
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test08602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08602");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1644572938332L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 1, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean13 = localDateTime11.isSupported(dateTimeFieldType12);
        int int14 = dateTime1.get(dateTimeFieldType12);
        org.joda.time.DateTime.Property property15 = dateTime1.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        org.joda.time.DateTime dateTime18 = property15.withMaximumValue();
        org.joda.time.Interval interval19 = property15.toInterval();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test08603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08603");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("days", "11 Feb 2022 23:59:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: days [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test08604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08604");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        int int8 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusWeeks(19);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minus(readablePeriod13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plus(readableDuration15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType17.getField(chronology18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean24 = localTime22.isSupported(durationFieldType23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime26 = localTime22.minus(readablePeriod25);
        java.util.Locale locale28 = java.util.Locale.KOREA;
        java.lang.String str29 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) localTime26, (int) (short) -1, locale28);
        java.lang.String str30 = localTime26.toString();
        int int31 = localTime26.size();
        org.joda.time.LocalTime.Property property32 = localTime26.hourOfDay();
        org.joda.time.LocalTime localTime34 = property32.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime35 = property32.roundCeilingCopy();
        org.joda.time.LocalTime localTime36 = property32.getLocalTime();
        org.joda.time.LocalTime localTime38 = property32.addWrapFieldToCopy(23);
        org.joda.time.LocalTime localTime39 = property32.getLocalTime();
        org.joda.time.LocalTime localTime41 = localTime39.plusHours((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = localDateTime16.isEqual((org.joda.time.ReadablePartial) localTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1" + "'", str29, "-1");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "00:00:00.001" + "'", str30, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
    }

    @Test
    public void test08605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08605");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withWeekOfWeekyear(1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusHours(5);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        java.util.Locale locale19 = new java.util.Locale("zho", "2022-02-11T09:49:09.337Z", "772");
        java.lang.String str20 = property14.getAsShortText(locale19);
        java.lang.String str21 = locale19.getDisplayScript();
        java.util.Locale locale22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = locale19.getDisplayName(locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals(locale19.toString(), "zho_2022-02-11T09:49:09.337Z_772");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Jan" + "'", str20, "Jan");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08606");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType7.getField(chronology8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean14 = localTime12.isSupported(durationFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime12.minus(readablePeriod15);
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localTime16, (int) (short) -1, locale18);
        java.lang.String str20 = localTime16.toString();
        int int21 = localTime16.size();
        org.joda.time.LocalTime.Property property22 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime24 = property22.addNoWrapToCopy((int) (short) 1);
        java.util.Locale locale26 = java.util.Locale.US;
        org.joda.time.LocalTime localTime27 = property22.setCopy("7", locale26);
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet28);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        boolean boolean39 = strSet32.addAll((java.util.Collection<java.lang.String>) strList37);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        boolean boolean49 = strSet42.addAll((java.util.Collection<java.lang.String>) strList47);
        boolean boolean50 = strSet32.removeAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        boolean boolean63 = strSet56.addAll((java.util.Collection<java.lang.String>) strList61);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList61);
        boolean boolean65 = strSet42.removeAll((java.util.Collection<java.lang.String>) strList64);
        java.lang.Object[] objArray66 = strSet42.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator67 = strSet42.spliterator();
        boolean boolean68 = strSet28.retainAll((java.util.Collection<java.lang.String>) strSet42);
        strSet28.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1" + "'", str19, "-1");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00:00:00.001" + "'", str20, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[hi!, ]");
        org.junit.Assert.assertNotNull(strSpliterator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test08607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08607");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((-4), 6, 17);
        java.util.Calendar.Builder builder7 = builder4.set(1, 7);
        java.util.Calendar.Builder builder9 = builder7.setLenient(false);
        java.util.Calendar.Builder builder14 = builder7.setTimeOfDay(53, 35332195, 2008, 31);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.lang.String str16 = timeZone15.getID();
        java.time.ZoneId zoneId17 = timeZone15.toZoneId();
        int int19 = timeZone15.getOffset((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.time.ZoneId zoneId21 = timeZone15.toZoneId();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone(zoneId21);
        java.util.Calendar.Builder builder23 = builder7.setTimeZone(timeZone22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder26 = builder7.set(83100000, 35427);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GMT" + "'", str16, "GMT");
        org.junit.Assert.assertNotNull(zoneId17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(zoneId21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08608");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property8 = localDate1.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property8.addToCopy(1970);
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property13 = localDate11.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = property13.withMinimumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test08609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08609");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean8 = localTime6.isSupported(durationFieldType7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime10 = localTime6.minus(readablePeriod9);
        org.joda.time.LocalTime localTime12 = localTime6.plusSeconds(9);
        org.joda.time.Chronology chronology13 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfMinute();
        org.joda.time.Chronology chronology17 = chronology13.withUTC();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(2100, 92, (-1), 292278992, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test08610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08610");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean13 = localTime11.isSupported(durationFieldType12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime11.minus(readablePeriod14);
        org.joda.time.LocalTime localTime17 = localTime11.plusSeconds(9);
        org.joda.time.Chronology chronology18 = localTime11.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(chronology18);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfCentury();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = chronology20.millisOfDay();
        org.joda.time.DurationField durationField27 = chronology20.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter7.withChronology(chronology20);
        org.joda.time.Chronology chronology29 = dateTimeFormatter28.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withDefaultYear((-2731));
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeFormatter28.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.parse("era", dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
    }

    @Test
    public void test08611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08611");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.clear();
        calendar1.setTimeInMillis((long) (-292275054));
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        java.util.Date date16 = localDate13.toDate();
        date16.setDate(0);
        int int19 = date16.getMonth();
        date16.setDate((int) (byte) -1);
        date16.setSeconds(20);
        int int24 = date16.getTimezoneOffset();
        calendar1.setTime(date16);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.minus(readablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.minus(readablePeriod32);
        org.joda.time.DateTime.Property property34 = dateTime33.year();
        java.lang.String str35 = property34.getAsString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        int int38 = localDate37.getWeekOfWeekyear();
        int int39 = property34.compareTo((org.joda.time.ReadablePartial) localDate37);
        int int40 = localDate37.getEra();
        org.joda.time.LocalDate.Property property41 = localDate37.dayOfMonth();
        java.util.Date date42 = localDate37.toDate();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTimeAtMidnight(dateTimeZone45);
        java.util.Date date47 = localDate44.toDate();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate51 = localDate49.minus(readablePeriod50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.minus(readablePeriod54);
        org.joda.time.DateTime.Property property56 = dateTime55.year();
        java.lang.String str57 = property56.getAsString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        int int60 = localDate59.getWeekOfWeekyear();
        int int61 = property56.compareTo((org.joda.time.ReadablePartial) localDate59);
        int int62 = localDate59.getEra();
        org.joda.time.LocalDate.Property property63 = localDate59.dayOfMonth();
        java.util.Date date64 = localDate59.toDate();
        boolean boolean65 = date47.before(date64);
        boolean boolean66 = date42.after(date64);
        calendar1.setTime(date42);
        boolean boolean68 = calendar1.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int70 = calendar1.getMinimum(6899);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6899");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Dec 30 00:00:20 GMT 2021");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022" + "'", str57, "2022");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test08612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08612");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(677205, 2007, 130, 1969, (int) (short) 0, 60, 35545318);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08613");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear((int) '4');
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        java.lang.String str15 = dateTime11.toString();
        org.joda.time.DateTime dateTime17 = dateTime11.plusYears((int) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime17.minusHours(43);
        org.joda.time.DateTime.Property property20 = dateTime17.minuteOfHour();
        int int21 = dateTime17.getMinuteOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-10T23:59:59.990+00:00:00.001" + "'", str15, "2022-02-10T23:59:59.990+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1439 + "'", int21 == 1439);
    }

    @Test
    public void test08614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08614");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, (-2L), 1);
        org.joda.time.DateTimeZone dateTimeZone14 = chronology9.getZone();
        java.lang.String str16 = dateTimeZone14.getName(1644572942340L);
        long long18 = dateTimeZone14.nextTransition((long) (-1));
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test08615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08615");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime10 = dateTime5.plusMonths(32772);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = property11.addToCopy(1644573014873L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644573014873 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08616");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        java.util.Date date4 = localDate1.toDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDate1.toString(dateTimeFormatter5);
        org.joda.time.LocalDate.Property property7 = localDate1.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.roundHalfFloorCopy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 1, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withPeriodAdded(readablePeriod16, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withWeekOfWeekyear(1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusHours(5);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusDays(82800000);
        org.joda.time.Chronology chronology27 = localDateTime26.getChronology();
        int int28 = localDateTime26.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int30 = localDateTime26.get(dateTimeFieldType29);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = localDate8.get(dateTimeFieldType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11" + "'", str6, "2022-02-11");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 21 + "'", int28 == 21);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test08617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08617");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        int int11 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusSeconds(22);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property16 = localDateTime6.minuteOfHour();
        org.joda.time.DurationField durationField17 = property16.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNull(durationField17);
    }

    @Test
    public void test08618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08618");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withWeekOfWeekyear(19);
        int int6 = localDateTime5.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfDay(32772);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readableDuration10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(23);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.year();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime18 = property16.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test08619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08619");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        calendar3.setWeekDate(0, 11, 7);
        int int9 = calendar3.getActualMinimum(0);
        java.lang.String str10 = calendar3.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-62161135552189,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.006,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=73,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=7,MILLISECOND=817,ZONE_OFFSET=6,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.util.GregorianCalendar[time=-62161135552189,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.006,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=73,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=7,MILLISECOND=817,ZONE_OFFSET=6,DST_OFFSET=0]" + "'", str10, "java.util.GregorianCalendar[time=-62161135552189,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.006,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=73,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=7,MILLISECOND=817,ZONE_OFFSET=6,DST_OFFSET=0]");
    }

    @Test
    public void test08620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08620");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.lang.String str7 = locale3.getVariant();
        java.util.Set<java.lang.String> strSet8 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale3.getISO3Language();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573247830,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=7,MILLISECOND=830,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test08621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08621");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 1644573121742L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644573121742E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08622");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(365);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 86399990);
        org.joda.time.Chronology chronology9 = dateTimeFormatter6.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTimeFormatter6.parseDateTime("20 Apr 1343 12:05:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
    }

    @Test
    public void test08623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08623");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-9223314484975527616L));
        org.joda.time.LocalTime localTime2 = localDateTime1.toLocalTime();
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test08624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08624");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        java.util.Date date4 = localDate1.toDate();
        long long5 = date4.getTime();
        date4.setTime((long) 7);
        date4.setMinutes(1970);
        java.time.Instant instant10 = date4.toInstant();
        int int11 = date4.getMonth();
        long long12 = date4.getTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Fri Jan 02 08:50:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644537600000L + "'", long5 == 1644537600000L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 118200007L + "'", long12 == 118200007L);
    }

    @Test
    public void test08625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08625");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime21 = localTime19.minusMillis(35332195);
        org.joda.time.LocalTime.Property property22 = localTime19.hourOfDay();
        java.lang.String str23 = property22.toString();
        org.joda.time.LocalTime localTime24 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property25 = localTime24.secondOfMinute();
        org.joda.time.LocalTime localTime26 = property25.roundCeilingCopy();
        org.joda.time.LocalTime localTime27 = property25.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[hourOfDay]" + "'", str23, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test08626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08626");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withWeekOfWeekyear(1);
        org.joda.time.Chronology chronology12 = localDateTime6.getChronology();
        int int13 = localDateTime6.getYearOfEra();
        int int14 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.plusMillis(0);
        int int17 = localDateTime6.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusHours(999);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.seconds();
        boolean boolean21 = localDateTime6.isSupported(durationFieldType20);
        java.lang.String str22 = durationFieldType20.getName();
        java.lang.String str23 = durationFieldType20.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "seconds" + "'", str22, "seconds");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "seconds" + "'", str23, "seconds");
    }

    @Test
    public void test08627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08627");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.setCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = localTime25.isSupported(durationFieldType26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalTime localTime29 = localTime25.minus(readablePeriod28);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localTime29, (int) (short) -1, locale31);
        java.lang.String str33 = localTime29.toString();
        int int34 = localTime29.size();
        int int35 = localTime29.getMillisOfSecond();
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = localTime29.getFields();
        org.joda.time.LocalTime localTime37 = localTime19.withFields((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime39 = localTime37.withFields((org.joda.time.ReadablePartial) localTime38);
        int int40 = localTime38.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalTime.Property property42 = localTime38.property(dateTimeFieldType41);
        org.joda.time.LocalTime localTime43 = property42.withMinimumValue();
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("1439");
        org.joda.time.LocalTime localTime47 = property42.setCopy("2", locale46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean54 = localTime52.isSupported(durationFieldType53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalTime localTime56 = localTime52.minus(readablePeriod55);
        org.joda.time.LocalTime localTime58 = localTime52.plusSeconds(9);
        org.joda.time.Chronology chronology59 = localTime52.getChronology();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime(chronology59);
        org.joda.time.Chronology chronology61 = localTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.yearOfCentury();
        org.joda.time.LocalTime localTime63 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology61);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology66);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean69 = localTime67.isSupported(durationFieldType68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalTime localTime71 = localTime67.minus(readablePeriod70);
        org.joda.time.LocalTime localTime73 = localTime67.plusSeconds(9);
        org.joda.time.Chronology chronology74 = localTime67.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.minuteOfHour();
        boolean boolean76 = dateTimeField75.isSupported();
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder78 = builder77.clear();
        java.util.Locale.Builder builder79 = builder78.clearExtensions();
        java.util.Locale locale80 = builder79.build();
        int int81 = dateTimeField75.getMaximumShortTextLength(locale80);
        java.lang.String str82 = localTime63.toString("\u5354\u8abf\u4e16\u754c\u6642\u9593", locale80);
        java.lang.String str83 = locale80.getScript();
        java.lang.String str84 = locale80.getDisplayName();
        java.lang.String str85 = locale80.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime86 = property42.setCopy("", locale80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "00:00:00.001" + "'", str33, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35647989 + "'", int40 == 35647989);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u5354\u8abf\u4e16\u754c\u6642\u9593" + "'", str82, "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test08628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08628");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        java.lang.String str9 = property8.getAsString();
        java.lang.String str10 = property8.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate12.minus(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(32772);
        org.joda.time.DateTime dateTime20 = dateTime16.withMillis((long) ' ');
        org.joda.time.DateTime dateTime22 = dateTime16.minusMillis(5);
        int int23 = dateTime16.getDayOfMonth();
        int int24 = property8.getDifference((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime26 = dateTime16.plusMonths(1970);
        org.joda.time.DateTime dateTime27 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime29 = dateTime16.withMillisOfDay(59);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) dateTime16);
        org.joda.time.DateTime.Property property31 = dateTime16.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime16.plus(readablePeriod32);
        org.joda.time.DateTime dateTime35 = dateTime33.withCenturyOfEra(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[year]" + "'", str10, "Property[year]");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test08629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08629");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate10.minus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtMidnight(dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime14.plusMonths(32772);
        int int20 = property7.getDifference((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime19.minusMinutes(11);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2730) + "'", int20 == (-2730));
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test08630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08630");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateTime dateTime11 = property8.setCopy(14);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra(19);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfDay(5);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfWeek();
        org.joda.time.DateTime dateTime22 = dateTime19.plusDays(42);
        boolean boolean23 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime19.getZone();
        java.lang.String str25 = dateTimeZone24.toString();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getRangeDurationType();
        org.joda.time.LocalDate localDate30 = localDate26.withFieldAdded(durationFieldType28, 365);
        org.joda.time.Interval interval31 = localDate30.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.001" + "'", str25, "+00:00:00.001");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(interval31);
    }

    @Test
    public void test08631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08631");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(22, 169, 1092, 3954, 46, 61, 1908);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3954 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08632");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.addCopy(0);
        org.joda.time.LocalTime localTime20 = property15.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean28 = localTime26.isSupported(durationFieldType27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime26.minus(readablePeriod29);
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = dateTimeField23.getAsShortText((org.joda.time.ReadablePartial) localTime30, (int) (short) -1, locale32);
        int int35 = dateTimeField23.getMinimumValue(0L);
        long long38 = dateTimeField23.getDifferenceAsLong((long) (short) -1, (long) (byte) 0);
        int int39 = dateTimeField23.getMaximumValue();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology42);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalTime localTime45 = localTime43.plus(readablePeriod44);
        java.lang.String str46 = localTime45.toString();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = localTime45.toString("1970", locale48);
        java.lang.String str50 = dateTimeField23.getAsText((int) (byte) 1, locale48);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now();
        int int52 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localTime51);
        java.lang.String str53 = dateTimeField23.getName();
        org.joda.time.tz.NameProvider nameProvider55 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("");
        java.lang.String str60 = nameProvider55.getName(locale57, "secondOfMinute", "");
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology63);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean66 = localTime64.isSupported(durationFieldType65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalTime localTime68 = localTime64.minus(readablePeriod67);
        org.joda.time.LocalTime localTime70 = localTime64.plusSeconds(9);
        org.joda.time.Chronology chronology71 = localTime64.getChronology();
        org.joda.time.ReadablePeriod readablePeriod72 = null;
        long long75 = chronology71.add(readablePeriod72, (-2L), 1);
        long long79 = chronology71.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType61.getField(chronology71);
        java.util.Locale locale83 = java.util.Locale.KOREA;
        java.lang.String str84 = locale83.getDisplayVariant();
        java.lang.String str85 = dateTimeField81.getAsShortText(7, locale83);
        java.lang.String str88 = nameProvider55.getShortName(locale83, "1970-01-01T00:00:32.010", "yearOfEra");
        java.lang.String str89 = dateTimeField23.getAsShortText((-4), locale83);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = dateTimeField23.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime92 = localTime20.withField(dateTimeFieldType90, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1" + "'", str33, "-1");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 999 + "'", int39 == 999);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "00:00:00.001" + "'", str46, "00:00:00.001");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970" + "'", str49, "1970");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 999 + "'", int52 == 999);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "millisOfSecond" + "'", str53, "millisOfSecond");
        org.junit.Assert.assertNotNull(nameProvider55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-2L) + "'", long75 == (-2L));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 20L + "'", long79 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "7" + "'", str85, "7");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "-4" + "'", str89, "-4");
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
    }

    @Test
    public void test08633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08633");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        int int8 = localDateTime4.getSecondOfMinute();
        int int9 = localDateTime4.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withWeekOfWeekyear(54675054);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54675054 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test08634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08634");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths((int) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long23 = dateTimeZone20.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime18, dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int26 = localDateTime18.get(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType27.getField(chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime18.property(dateTimeFieldType27);
        org.joda.time.LocalDateTime.Property property31 = localDateTime13.property(dateTimeFieldType27);
        org.joda.time.LocalDateTime localDateTime32 = property31.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMonths(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.millisOfDay();
        java.lang.String str37 = property36.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-2L) + "'", long23 == (-2L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[millisOfDay]" + "'", str37, "Property[millisOfDay]");
    }

    @Test
    public void test08635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08635");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfMonth(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMonthOfYear(7);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMonthOfYear(3);
        int int15 = localDateTime14.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withSecondOfMinute((-1878));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1878 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08636");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.centuryOfEra();
        int int15 = localDateTime11.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14400010 + "'", int15 == 14400010);
    }

    @Test
    public void test08637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08637");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withDefaultYear((-2731));
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeFormatter27.getZone();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeFormatter27.getZone();
        long long34 = dateTimeZone32.previousTransition((-3482730L));
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3482730L) + "'", long34 == (-3482730L));
    }

    @Test
    public void test08638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08638");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDate11.getFieldTypes();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.year();
        int int19 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.yearOfCentury();
        int int21 = property20.getMinimumValue();
        org.joda.time.DurationField durationField22 = property20.getDurationField();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime24 = property20.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = localDate11.compareTo((org.joda.time.ReadablePartial) localDateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 70 + "'", int19 == 70);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test08639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08639");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate4 = localDate1.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate6.minus(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.DateTime.Property property11 = dateTime10.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.plus(readableDuration12);
        org.joda.time.DateMidnight dateMidnight14 = dateTime10.toDateMidnight();
        int int15 = dateTime10.getDayOfMonth();
        org.joda.time.DateTime dateTime16 = localDate1.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate1.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test08640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08640");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate2.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property9 = localDate2.dayOfWeek();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime19.withMonthOfYear(5);
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long29 = dateTimeZone26.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str31 = dateTimeZone26.getNameKey(100L);
        org.joda.time.DateTime dateTime32 = dateTime23.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime33 = localDate2.toDateTimeAtStartOfDay(dateTimeZone26);
        int int35 = dateTimeZone26.getStandardOffset((long) 5);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 22, dateTimeZone26);
        long long40 = dateTimeZone26.convertLocalToUTC(1644572983311L, false, (long) (-2022));
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone26);
        java.lang.String str42 = dateTimeZone26.toString();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-2L) + "'", long29 == (-2L));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644572983310L + "'", long40 == 1644572983310L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.001" + "'", str42, "+00:00:00.001");
    }

    @Test
    public void test08641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08641");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone6);
        boolean boolean8 = timeZone3.hasSameRules(timeZone6);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone3);
        boolean boolean10 = calendar9.isWeekDateSupported();
        calendar9.setLenient(true);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644573248333,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=8,MILLISECOND=333,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644573248333,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=8,MILLISECOND=333,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test08642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08642");
        java.util.Date date3 = new java.util.Date(24, (int) (short) 10, (-709));
        int int4 = date3.getMinutes();
        org.junit.Assert.assertEquals(date3.toString(), "Wed Nov 22 00:00:00 GMT 1922");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test08643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08643");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(16, (int) ' ');
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test08644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08644");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        int int7 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate9 = localDate1.minusYears(11);
        org.joda.time.LocalDate.Property property10 = localDate1.year();
        org.joda.time.LocalDate.Property property11 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate12.minus(readablePeriod13);
        int int15 = localDate14.getDayOfYear();
        org.joda.time.LocalDate localDate17 = localDate14.withYear(82800000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField19 = localDate17.getField(30);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 30");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 42 + "'", int15 == 42);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test08645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08645");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.lang.String str3 = dateTimeZone1.getShortName((long) 10);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = org.joda.time.DateTime.now(dateTimeZone1);
        long long7 = dateTimeZone1.previousTransition(1644573016129L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.001" + "'", str3, "+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644573016129L + "'", long7 == 1644573016129L);
    }

    @Test
    public void test08646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08646");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strSet2.addAll((java.util.Collection<java.lang.String>) strList7);
        java.util.Iterator<java.lang.String> strItor10 = strSet2.iterator();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 1, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        int int17 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMinimumValue();
        int int20 = localDateTime19.getEra();
        boolean boolean21 = strSet2.remove((java.lang.Object) localDateTime19);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.era();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime24 = property22.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField25 = property22.getField();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 70 + "'", int17 == 70);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test08647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08647");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Date date5 = localDate2.toDate();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = property14.compareTo((org.joda.time.ReadablePartial) localDate17);
        int int20 = localDate17.getEra();
        org.joda.time.LocalDate.Property property21 = localDate17.dayOfMonth();
        java.util.Date date22 = localDate17.toDate();
        boolean boolean23 = date5.before(date22);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date5);
        java.util.Calendar.Builder builder26 = builder0.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(true);
        java.util.Calendar.Builder builder30 = builder26.setInstant(4L);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        java.util.Date date35 = localDate32.toDate();
        long long36 = date35.getTime();
        java.lang.String str37 = date35.toGMTString();
        date35.setYear(2022);
        date35.setSeconds(3);
        date35.setMonth(42);
        date35.setHours((int) (short) 10);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) date35);
        java.util.Calendar.Builder builder47 = builder30.setInstant(date35);
        java.util.Calendar.Builder builder49 = builder30.setLenient(true);
        java.util.Calendar calendar50 = builder49.build();
        // The following exception was thrown during execution in test generation
        try {
            calendar50.clear(893);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 893");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jul 11 10:00:03 GMT 3925");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1644537600000L + "'", long36 == 1644537600000L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "11 Feb 2022 00:00:00 GMT" + "'", str37, "11 Feb 2022 00:00:00 GMT");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=61710372003000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3925,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=192,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=3,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08648");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime7.withCenturyOfEra((int) (byte) 0);
        java.util.Date date12 = dateTime11.toDate();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate15.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMillis(32772);
        org.joda.time.DateTime dateTime23 = dateTime19.withMillis((long) ' ');
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime27 = dateTime23.withDurationAdded((long) (short) 100, 35332195);
        org.joda.time.DateTime dateTime29 = dateTime27.plusWeeks(32);
        int int30 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property31 = dateTime13.millisOfSecond();
        org.joda.time.DateTime dateTime32 = property31.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime34 = property31.addWrapFieldToCopy(32772);
        java.lang.String str35 = property31.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Feb 12 23:59:59 GMT 22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Property[millisOfSecond]" + "'", str35, "Property[millisOfSecond]");
    }

    @Test
    public void test08649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08649");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1053584997991L);
    }

    @Test
    public void test08650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08650");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, (-2L), 1);
        long long17 = chronology9.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DurationField durationField19 = chronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.dayOfWeek();
        int int23 = dateTimeField20.getDifference(43L, (long) 292273162);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 20L + "'", long17 == 20L);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
    }

    @Test
    public void test08651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08651");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.lang.String str5 = nameProvider0.getName(locale2, "secondOfMinute", "");
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale6.getExtension('a');
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str11 = locale6.getDisplayScript(locale10);
        java.util.Locale locale12 = java.util.Locale.ENGLISH;
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean19 = localTime17.isSupported(durationFieldType18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.minus(readablePeriod20);
        org.joda.time.LocalTime localTime23 = localTime17.plusSeconds(9);
        org.joda.time.Chronology chronology24 = localTime17.getChronology();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = chronology24.add(readablePeriod25, (-2L), 1);
        long long32 = chronology24.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType14.getField(chronology24);
        java.util.Locale locale36 = java.util.Locale.KOREA;
        java.lang.String str37 = locale36.getDisplayVariant();
        java.lang.String str38 = dateTimeField34.getAsShortText(7, locale36);
        java.lang.String str39 = locale10.getDisplayName(locale36);
        java.lang.String str42 = nameProvider0.getShortName(locale10, "2022-02-11T09:49:09.337Z", "German (Germany)");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale46 = new java.util.Locale("yearOfEra", "hourOfDay");
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String str48 = locale46.getDisplayCountry();
        java.lang.String str51 = nameProvider0.getShortName(locale46, "52", "\u671d\u9c9c\u6587\u97e9\u56fd)");
        java.util.Locale locale55 = new java.util.Locale("\u5354\u8abf\u4e16\u754c\u6642\u9593", "2022-02-11", "2022-05-10T23:59:59.990Z");
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.lang.String str59 = nameProvider0.getName(locale55, "130", "1 Jan 1970 00:00:02 GMT");
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType60.getField(chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology64);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean67 = localTime65.isSupported(durationFieldType66);
        org.joda.time.ReadablePeriod readablePeriod68 = null;
        org.joda.time.LocalTime localTime69 = localTime65.minus(readablePeriod68);
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.lang.String str72 = dateTimeField62.getAsShortText((org.joda.time.ReadablePartial) localTime69, (int) (short) -1, locale71);
        int int74 = dateTimeField62.getMinimumValue(0L);
        org.joda.time.DurationField durationField75 = dateTimeField62.getLeapDurationField();
        java.util.Locale locale76 = null;
        int int77 = dateTimeField62.getMaximumTextLength(locale76);
        long long79 = dateTimeField62.roundHalfCeiling((-25L));
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("zh_TW");
        java.lang.String str83 = locale82.getVariant();
        java.util.Set<java.lang.Character> charSet84 = locale82.getExtensionKeys();
        java.lang.String str85 = dateTimeField62.getAsText(0L, locale82);
        java.lang.String str88 = nameProvider0.getName(locale82, "30.06.24352334 11:03:00", "1");
        java.util.Set<java.lang.String> strSet89 = locale82.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-2L) + "'", long28 == (-2L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 20L + "'", long32 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "7" + "'", str38, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str39, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals(locale46.toString(), "yearofera_HOUROFDAY");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "HOUROFDAY" + "'", str48, "HOUROFDAY");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals(locale55.toString(), "\u5354\u8abf\u4e16\u754c\u6642\u9593_2022-02-11_2022-05-10T23:59:59.990Z");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1" + "'", str72, "-1");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(durationField75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-25L) + "'", long79 == (-25L));
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(charSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "1" + "'", str85, "1");
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test08652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08652");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        calendar3.set(53, 2, 59);
        java.util.Date date13 = new java.util.Date((int) (short) -1, 0, 0, 7, (-292275054));
        int int14 = date13.getDay();
        calendar3.setTime(date13);
        calendar3.setLenient(true);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1, chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        org.joda.time.LocalDateTime localDateTime26 = property25.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        org.joda.time.LocalDateTime localDateTime29 = property25.addToCopy((int) '4');
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField31.getMinimumValue(readablePartial32);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str37 = locale35.getExtension('a');
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale35.getDisplayScript(locale39);
        java.lang.String str41 = locale39.getLanguage();
        java.lang.String str42 = locale39.getDisplayScript();
        java.lang.String str43 = dateTimeField31.getAsShortText((int) (short) 1, locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap44 = calendar3.getDisplayNames(123, 35647844, locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-19776052440000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.006,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1343,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=110,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=6,SECOND=0,MILLISECOND=6,ZONE_OFFSET=6,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date13.toString(), "Sun Apr 20 12:06:00 GMT 1343");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
    }

    @Test
    public void test08653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08653");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Date date5 = localDate2.toDate();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = property14.compareTo((org.joda.time.ReadablePartial) localDate17);
        int int20 = localDate17.getEra();
        org.joda.time.LocalDate.Property property21 = localDate17.dayOfMonth();
        java.util.Date date22 = localDate17.toDate();
        boolean boolean23 = date5.before(date22);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date5);
        java.util.Calendar.Builder builder26 = builder0.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(true);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = locale29.getExtension('a');
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder33 = builder26.setLocale(locale29);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate38 = localDate36.minus(readablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        org.joda.time.DateTime.Property property43 = dateTime42.year();
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str45 = property43.getAsShortText(locale44);
        java.lang.String str46 = locale44.getVariant();
        java.util.Locale.setDefault(category34, locale44);
        java.util.Locale locale48 = java.util.Locale.getDefault(category34);
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.util.Calendar.Builder builder50 = builder33.setLocale(locale48);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.lang.String str52 = timeZone51.getID();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone51);
        long long54 = calendar53.getTimeInMillis();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate58 = localDate56.minus(readablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMillis(32772);
        org.joda.time.DateTime dateTime64 = dateTime60.withMillis((long) ' ');
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate68 = localDate66.plus(readablePeriod67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology70 = null;
        boolean boolean71 = dateTimeFieldType69.isSupported(chronology70);
        boolean boolean72 = localDate68.isSupported(dateTimeFieldType69);
        int int73 = dateTime64.get(dateTimeFieldType69);
        java.util.Date date74 = dateTime64.toDate();
        calendar53.setTime(date74);
        java.util.TimeZone timeZone77 = java.util.TimeZone.getTimeZone("UTC");
        calendar53.setTimeZone(timeZone77);
        java.util.Calendar.Builder builder79 = builder33.setTimeZone(timeZone77);
        int int80 = timeZone77.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "GMT" + "'", str52, "GMT");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=32,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1644573248537L + "'", long54 == 1644573248537L);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 19 + "'", int73 == 19);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test08654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08654");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfHalfday();
        java.lang.String str12 = dateTimeField11.getName();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean17 = localTime15.isSupported(durationFieldType16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalTime localTime19 = localTime15.minus(readablePeriod18);
        org.joda.time.LocalTime localTime21 = localTime15.plusSeconds(9);
        org.joda.time.Chronology chronology22 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology22.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) str12, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hourOfHalfday\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hourOfHalfday" + "'", str12, "hourOfHalfday");
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test08655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08655");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Date date5 = localDate2.toDate();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = property14.compareTo((org.joda.time.ReadablePartial) localDate17);
        int int20 = localDate17.getEra();
        org.joda.time.LocalDate.Property property21 = localDate17.dayOfMonth();
        java.util.Date date22 = localDate17.toDate();
        boolean boolean23 = date5.before(date22);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date5);
        java.util.Calendar.Builder builder26 = builder0.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(true);
        java.util.Calendar.Builder builder30 = builder26.setLenient(true);
        java.util.Calendar.Builder builder34 = builder26.setWeekDate(101, 2024, (int) (byte) 0);
        java.util.Calendar.Builder builder38 = builder26.setWeekDate(99, 12, 292269054);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType39.getField(chronology40);
        boolean boolean42 = dateTimeField41.isLenient();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate46 = localDate44.minus(readablePeriod45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        org.joda.time.DateTime.Property property51 = dateTime50.year();
        java.lang.String str52 = property51.getAsString();
        java.lang.String str53 = property51.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDate localDate57 = localDate55.minus(readablePeriod56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTimeAtMidnight(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMillis(32772);
        org.joda.time.DateTime dateTime63 = dateTime59.withMillis((long) ' ');
        org.joda.time.DateTime dateTime65 = dateTime59.minusMillis(5);
        int int66 = dateTime59.getDayOfMonth();
        int int67 = property51.getDifference((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime69 = property51.addToCopy((int) (short) 0);
        java.util.Locale locale70 = java.util.Locale.US;
        int int71 = property51.getMaximumShortTextLength(locale70);
        int int72 = dateTimeField41.getMaximumShortTextLength(locale70);
        java.lang.String str73 = locale70.getDisplayVariant();
        java.util.Calendar.Builder builder74 = builder26.setLocale(locale70);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHours(7);
        java.util.TimeZone timeZone77 = dateTimeZone76.toTimeZone();
        java.util.Calendar.Builder builder78 = builder26.setTimeZone(timeZone77);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder80 = builder26.setCalendarType("292278993-08-31T23:54:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 292278993-08-31T23:54:00.010");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022" + "'", str52, "2022");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Property[year]" + "'", str53, "Property[year]");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 11 + "'", int66 == 11);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 9 + "'", int71 == 9);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+07:00");
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test08656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08656");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.minus(readablePeriod3);
        java.lang.String str5 = localTime4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = localTime4.getField(2041);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2041");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.001" + "'", str5, "00:00:00.001");
    }

    @Test
    public void test08657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08657");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str2 = locale0.getExtension('a');
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str5 = locale0.getDisplayScript(locale4);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.lang.String str7 = locale4.getDisplayVariant(locale6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean13 = localTime11.isSupported(durationFieldType12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime11.minus(readablePeriod14);
        org.joda.time.LocalTime localTime17 = localTime11.plusSeconds(9);
        org.joda.time.Chronology chronology18 = localTime11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology18.add(readablePeriod19, (-2L), 1);
        long long26 = chronology18.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType8.getField(chronology18);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale30.getDisplayVariant();
        java.lang.String str32 = dateTimeField28.getAsShortText(7, locale30);
        java.lang.String str33 = locale4.getDisplayName(locale30);
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str36 = locale34.getExtension('a');
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str39 = locale34.getDisplayScript(locale38);
        java.lang.String str40 = locale38.getLanguage();
        java.lang.String str41 = locale4.getDisplayLanguage(locale38);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale4);
        long long43 = calendar42.getTimeInMillis();
        java.util.TimeZone timeZone44 = calendar42.getTimeZone();
        int int45 = calendar42.getFirstDayOfWeek();
        java.util.TimeZone timeZone46 = calendar42.getTimeZone();
        int int48 = calendar42.getActualMinimum(0);
        int int49 = calendar42.getWeekYear();
        boolean boolean50 = calendar42.isLenient();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-2L) + "'", long22 == (-2L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 20L + "'", long26 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "7" + "'", str32, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str33, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh" + "'", str40, "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587" + "'", str41, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644573248629,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=8,MILLISECOND=629,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644573248629L + "'", long43 == 1644573248629L);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test08658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08658");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfMonth();
        boolean boolean10 = dateTime7.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime7.toMutableDateTimeISO();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readablePeriod18);
        org.joda.time.DateTime.Property property20 = dateTime19.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology22 = null;
        boolean boolean23 = dateTimeFieldType21.isSupported(chronology22);
        int int24 = dateTime19.get(dateTimeFieldType21);
        boolean boolean25 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.minus(readablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.lang.String str33 = timeZone32.getID();
        java.time.ZoneId zoneId34 = timeZone32.toZoneId();
        boolean boolean35 = dateTime31.equals((java.lang.Object) timeZone32);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((java.lang.Object) dateTime31);
        int int37 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) dateTime31);
        java.lang.String str38 = dateTime31.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "GMT" + "'", str33, "GMT");
        org.junit.Assert.assertNotNull(zoneId34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11T00:00:00.000+00:00:00.001" + "'", str38, "2022-02-11T00:00:00.000+00:00:00.001");
    }

    @Test
    public void test08659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08659");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withDefaultYear((-2731));
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter27.withOffsetParsed();
        boolean boolean34 = dateTimeFormatter27.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter27.withPivotYear(33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 32772);
        java.io.Writer writer39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate43 = localDate41.minus(readablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime47 = dateTime45.minus(readablePeriod46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime47.withCenturyOfEra((int) (byte) 0);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = null;
        java.lang.String str54 = dateTime51.toString(dateTimeFormatter53);
        org.joda.time.DateTime dateTime56 = dateTime51.plusYears(70);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter38.printTo(writer39, (org.joda.time.ReadableInstant) dateTime51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0022-02-11T00:00:00.000+00:00:00.001" + "'", str54, "0022-02-11T00:00:00.000+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test08660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08660");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(7);
        int int12 = localDate11.getDayOfYear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.LocalDate localDate25 = dateTime24.toLocalDate();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.minus(readablePeriod28);
        org.joda.time.LocalDate localDate31 = localDate27.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate27.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property34 = localDate27.dayOfWeek();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate38 = localDate36.minus(readablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.minus(readablePeriod41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime44.withMonthOfYear(5);
        org.joda.time.DateTime.Property property49 = dateTime48.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long54 = dateTimeZone51.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str56 = dateTimeZone51.getNameKey(100L);
        org.joda.time.DateTime dateTime57 = dateTime48.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime58 = localDate27.toDateTimeAtStartOfDay(dateTimeZone51);
        boolean boolean60 = dateTimeZone51.isStandardOffset((long) 6);
        org.joda.time.DateTime dateTime61 = localDate25.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.LocalDate localDate62 = org.joda.time.LocalDate.now(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(43, 2);
        long long68 = dateTimeZone65.convertLocalToUTC((long) 35410054, false);
        long long70 = dateTimeZone51.getMillisKeepLocal(dateTimeZone65, (-568080000000L));
        org.joda.time.DateTime dateTime71 = localDate11.toDateTimeAtStartOfDay(dateTimeZone65);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 42 + "'", int12 == 42);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-2L) + "'", long54 == (-2L));
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-119509946L) + "'", long68 == (-119509946L));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-568234919999L) + "'", long70 == (-568234919999L));
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test08661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08661");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime5 = localTime2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long11 = dateTimeZone8.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str13 = dateTimeZone8.getNameKey(100L);
        org.joda.time.DateTime dateTime14 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property15 = dateTime5.era();
        int int16 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime5.withDurationAdded(1L, (int) (short) 100);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekOfWeekyear(52);
        org.joda.time.DateTime.Property property23 = dateTime22.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = property23.compareTo(readablePartial24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-2L) + "'", long11 == (-2L));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 42 + "'", int16 == 42);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test08662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08662");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hourOfDay" + "'", str1, "hourOfDay");
    }

    @Test
    public void test08663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08663");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((java.lang.Object) 32L);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours(19034);
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test08664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08664");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Date date5 = localDate2.toDate();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = property14.compareTo((org.joda.time.ReadablePartial) localDate17);
        int int20 = localDate17.getEra();
        org.joda.time.LocalDate.Property property21 = localDate17.dayOfMonth();
        java.util.Date date22 = localDate17.toDate();
        boolean boolean23 = date5.before(date22);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date5);
        java.util.Calendar calendar25 = builder0.build();
        int int26 = calendar25.getMinimalDaysInFirstWeek();
        calendar25.set((-19), 1902, (-1878));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-19,MONTH=1902,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=-1878,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test08665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08665");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.plus(readablePeriod3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.lang.String str6 = timeZone5.getID();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        boolean boolean8 = localTime4.equals((java.lang.Object) calendar7);
        int[] intArray9 = localTime4.getValues();
        org.joda.time.LocalTime.Property property10 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime12 = property10.setCopy((int) (short) 0);
        org.joda.time.LocalTime localTime14 = property10.addCopy((long) 59);
        org.joda.time.LocalTime localTime15 = property10.withMinimumValue();
        org.joda.time.LocalTime localTime16 = property10.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = localTime16.getFieldType(26);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644573248842,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=8,MILLISECOND=842,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test08666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08666");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfDay(32772);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 779);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = localDateTime11.isSupported(dateTimeFieldType12);
        int int14 = localDateTime11.size();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test08667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08667");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.clear();
        calendar1.clear();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.lang.String str12 = timeZone11.getID();
        int int13 = timeZone11.getRawOffset();
        boolean boolean14 = timeZone11.observesDaylightTime();
        calendar1.setTimeZone(timeZone11);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = calendar1.getMaximum(43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 43");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GMT" + "'", str12, "GMT");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08668");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withWeekOfWeekyear(1);
        org.joda.time.Chronology chronology12 = localDateTime6.getChronology();
        int int13 = localDateTime6.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime6.centuryOfEra();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
    }

    @Test
    public void test08669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08669");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime5.toDateMidnight();
        boolean boolean11 = dateTime5.isEqual((-62161135844826L));
        org.joda.time.DateTime.Property property12 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime5.minusSeconds(622);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test08670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08670");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0);
        long long3 = calendar2.getTimeInMillis();
        java.lang.String str4 = calendar2.getCalendarType();
        int int5 = calendar2.getFirstDayOfWeek();
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        boolean boolean17 = strSet10.addAll((java.util.Collection<java.lang.String>) strList15);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str20 = locale18.getExtension('a');
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str23 = locale18.getDisplayScript(locale22);
        java.util.Locale locale24 = java.util.Locale.ENGLISH;
        java.lang.String str25 = locale22.getDisplayVariant(locale24);
        boolean boolean26 = strSet10.equals((java.lang.Object) locale24);
        java.util.Locale locale27 = null;
        java.lang.String str28 = locale24.getDisplayVariant(locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = calendar2.getDisplayName(964, 893, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573248947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=8,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1644573248947L + "'", long3 == 1644573248947L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test08671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08671");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.LocalDate localDate9 = property7.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate10 = property7.getLocalDate();
        org.joda.time.LocalDate localDate11 = property7.getLocalDate();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.minus(readablePeriod14);
        org.joda.time.LocalDate localDate17 = localDate13.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate19 = localDate13.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property20 = localDate13.dayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.minus(readablePeriod27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime30.withMonthOfYear(5);
        org.joda.time.DateTime.Property property35 = dateTime34.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long40 = dateTimeZone37.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str42 = dateTimeZone37.getNameKey(100L);
        org.joda.time.DateTime dateTime43 = dateTime34.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime44 = localDate13.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone37);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate49 = localDate47.minus(readablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.DateTime.Property property52 = dateTime51.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime51.plus(readableDuration53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate58 = localDate56.minus(readablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTimeAtMidnight(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMillis(32772);
        org.joda.time.DateTime dateTime64 = dateTime60.withMillis((long) ' ');
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(chronology65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDate localDate68 = localDate66.plus(readablePeriod67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology70 = null;
        boolean boolean71 = dateTimeFieldType69.isSupported(chronology70);
        boolean boolean72 = localDate68.isSupported(dateTimeFieldType69);
        int int73 = dateTime64.get(dateTimeFieldType69);
        int int74 = dateTime51.get(dateTimeFieldType69);
        org.joda.time.LocalDate.Property property75 = localDate45.property(dateTimeFieldType69);
        int int76 = localDate11.indexOf(dateTimeFieldType69);
        java.lang.String str77 = dateTimeFieldType69.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-2L) + "'", long40 == (-2L));
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 19 + "'", int73 == 19);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20 + "'", int74 == 20);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "centuryOfEra" + "'", str77, "centuryOfEra");
    }

    @Test
    public void test08672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08672");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.Chronology chronology7 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 7, chronology7);
        int int11 = dateTime10.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
    }

    @Test
    public void test08673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08673");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        int int9 = calendar1.getMinimum((int) (short) 1);
        calendar1.setLenient(true);
        calendar1.set(35332195, (int) (short) 1, 0);
        java.lang.Object obj16 = calendar1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35332195,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35332195,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35332195,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=35332195,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08674");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str2 = locale0.getExtension('a');
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str6 = locale5.getDisplayScript();
        java.lang.String str7 = locale5.getDisplayName();
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        boolean boolean18 = strSet11.addAll((java.util.Collection<java.lang.String>) strList16);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        boolean boolean28 = strSet21.addAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean29 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet21);
        boolean boolean30 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet21);
        boolean boolean31 = strSet8.isEmpty();
        boolean boolean32 = strSet4.addAll((java.util.Collection<java.lang.String>) strSet8);
        strSet4.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese (China)" + "'", str7, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test08675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08675");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((-4), 6, 17);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = property14.getAsShortText(locale15);
        java.lang.String str17 = locale15.getVariant();
        java.util.Locale.setDefault(category5, locale15);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category5, locale19);
        java.util.Calendar.Builder builder21 = builder4.setLocale(locale19);
        java.util.Calendar.Builder builder25 = builder21.setDate((int) 'u', 32010, 23);
        java.util.Calendar.Builder builder29 = builder25.setTimeOfDay(32400010, 1900, 0);
        java.util.Calendar.Builder builder33 = builder25.setTimeOfDay(43200040, 364, 35530724);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        java.util.Date date38 = localDate35.toDate();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate42 = localDate40.minus(readablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.minus(readablePeriod45);
        org.joda.time.DateTime.Property property47 = dateTime46.year();
        java.lang.String str48 = property47.getAsString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology49);
        int int51 = localDate50.getWeekOfWeekyear();
        int int52 = property47.compareTo((org.joda.time.ReadablePartial) localDate50);
        int int53 = localDate50.getEra();
        org.joda.time.LocalDate.Property property54 = localDate50.dayOfMonth();
        java.util.Date date55 = localDate50.toDate();
        boolean boolean56 = date38.before(date55);
        date38.setTime(100L);
        date38.setTime(2021L);
        date38.setYear((int) (byte) 0);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = localDate64.toDateTimeAtMidnight(dateTimeZone65);
        java.util.Date date67 = localDate64.toDate();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(chronology68);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate71 = localDate69.minus(readablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = localDate71.toDateTimeAtMidnight(dateTimeZone72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.minus(readablePeriod74);
        org.joda.time.DateTime.Property property76 = dateTime75.year();
        java.lang.String str77 = property76.getAsString();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate(chronology78);
        int int80 = localDate79.getWeekOfWeekyear();
        int int81 = property76.compareTo((org.joda.time.ReadablePartial) localDate79);
        int int82 = localDate79.getEra();
        org.joda.time.LocalDate.Property property83 = localDate79.dayOfMonth();
        java.util.Date date84 = localDate79.toDate();
        boolean boolean85 = date67.before(date84);
        int int86 = date67.getYear();
        int int87 = date67.getTimezoneOffset();
        date67.setSeconds(2024);
        boolean boolean90 = date38.before(date67);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder91 = builder33.setInstant(date67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date38);
        org.junit.Assert.assertEquals(date38.toString(), "Mon Jan 01 00:00:02 GMT 1900");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(date55);
        org.junit.Assert.assertEquals(date55.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Fri Feb 11 00:33:44 GMT 2022");
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022" + "'", str77, "2022");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 122 + "'", int86 == 122);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test08676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08676");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.LocalDate localDate9 = property7.addToCopy((int) (byte) -1);
        int int10 = property7.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test08677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08677");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.secondOfMinute();
        java.lang.String str11 = localDateTime4.toString();
        int int12 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.minusMonths(989);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.010" + "'", str11, "1970-01-01T00:00:00.010");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08678");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(117L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test08679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08679");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean5 = localTime3.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime3.minus(readablePeriod6);
        org.joda.time.LocalTime localTime9 = localTime3.plusSeconds(9);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj0, chronology10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean20 = localTime18.isSupported(durationFieldType19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime22 = localTime18.minus(readablePeriod21);
        org.joda.time.LocalTime localTime24 = localTime18.plusSeconds(9);
        org.joda.time.Chronology chronology25 = localTime18.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(chronology25);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        org.joda.time.DurationField durationField30 = durationFieldType15.getField(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime13.withChronology(chronology27);
        org.joda.time.DateTime.Property property32 = dateTime31.millisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.minusDays(35332195);
        org.joda.time.DateTime.Property property35 = dateTime31.era();
        org.joda.time.DateTime dateTime37 = dateTime31.plusMillis(35458525);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test08680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08680");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        int int9 = localDateTime8.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((-1));
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        int int13 = localDateTime11.getYear();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withDurationAdded(readableDuration14, 16);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1899 + "'", int13 == 1899);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08681");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getYearOfCentury();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekOfWeekyear(4);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate5.minus(readablePeriod6);
        org.joda.time.LocalDate localDate9 = localDate5.plusMonths((int) (byte) 0);
        int int10 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property11 = localDate9.weekyear();
        org.joda.time.LocalDate localDate13 = property11.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate14 = property11.getLocalDate();
        int int15 = property11.getMaximumValueOverall();
        org.joda.time.LocalDate localDate16 = property11.roundCeilingCopy();
        int int17 = localDate3.compareTo((org.joda.time.ReadablePartial) localDate16);
        org.joda.time.LocalDate localDate19 = localDate3.minusYears((int) (byte) -1);
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfWeek();
        java.lang.String str21 = property20.getName();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "dayOfWeek" + "'", str21, "dayOfWeek");
    }

    @Test
    public void test08682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08682");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long11 = dateTimeZone9.nextTransition((long) 4);
        org.joda.time.Chronology chronology12 = chronology6.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = chronology6.secondOfMinute();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("");
        java.lang.String str17 = dateTimeField13.getAsText((int) '4', locale16);
        java.lang.String str18 = locale16.getDisplayCountry();
        java.lang.String str19 = locale16.getISO3Language();
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.getDisplayScript();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "52" + "'", str17, "52");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08683");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(43200040, (-1), (-2730), (-224729), (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -224729 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08684");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.withMinimumValue();
        org.joda.time.LocalDate localDate11 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = localDate11.plusMonths(32772);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test08685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08685");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 23);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = property2.setCopy(292278910);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278910 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test08686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08686");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour(12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusHours(30);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1, chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.year();
        int int22 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfMonth(22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMonthOfYear(7);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusHours(1970);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.plusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property35 = localDateTime24.property(dateTimeFieldType34);
        int int36 = localDateTime11.get(dateTimeFieldType34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime11.minus(readablePeriod37);
        int int39 = localDateTime38.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withDayOfWeek(292269054);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292269054 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
    }

    @Test
    public void test08687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08687");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.lang.String str10 = dateTimeZone8.getShortName(0L);
        java.lang.String str11 = dateTimeZone8.toString();
        java.util.TimeZone timeZone12 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate6.minus(readablePeriod14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType16.getField(chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean23 = localTime21.isSupported(durationFieldType22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime21.minus(readablePeriod24);
        java.util.Locale locale27 = java.util.Locale.KOREA;
        java.lang.String str28 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localTime25, (int) (short) -1, locale27);
        java.lang.String str29 = localTime25.toString();
        int int30 = localTime25.size();
        org.joda.time.LocalTime.Property property31 = localTime25.hourOfDay();
        org.joda.time.LocalTime localTime33 = property31.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime35 = property31.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime37 = property31.addCopy(32010);
        org.joda.time.LocalTime localTime38 = property31.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime41 = localTime38.withPeriodAdded(readablePeriod39, 15);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = localDate6.compareTo((org.joda.time.ReadablePartial) localTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.001" + "'", str10, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.001" + "'", str11, "+00:00:00.001");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1" + "'", str28, "-1");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "00:00:00.001" + "'", str29, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime41);
    }

    @Test
    public void test08688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08688");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime7.withCenturyOfEra((int) (byte) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.plus(readablePeriod14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate22 = localDate17.withFieldAdded(durationFieldType20, (int) (short) 0);
        org.joda.time.LocalDate localDate24 = localDate15.withFieldAdded(durationFieldType20, 19);
        org.joda.time.DateTime dateTime26 = dateTime11.withFieldAdded(durationFieldType20, 10);
        org.joda.time.DateTime dateTime28 = dateTime11.minus((-58285699200000L));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test08689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08689");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        java.lang.String str19 = property18.getAsString();
        java.lang.String str20 = property18.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis(32772);
        org.joda.time.DateTime dateTime30 = dateTime26.withMillis((long) ' ');
        org.joda.time.DateTime dateTime32 = dateTime26.minusMillis(5);
        int int33 = dateTime26.getDayOfMonth();
        int int34 = property18.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime36 = dateTime26.plusMonths(1970);
        boolean boolean37 = dateTime5.equals((java.lang.Object) dateTime26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime5.withTime(31, 42, 3954, (-327493913));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[year]" + "'", str20, "Property[year]");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test08690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08690");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        java.lang.String str9 = property8.getAsString();
        java.lang.String str10 = property8.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate12.minus(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(32772);
        org.joda.time.DateTime dateTime20 = dateTime16.withMillis((long) ' ');
        org.joda.time.DateTime dateTime22 = dateTime16.minusMillis(5);
        int int23 = dateTime16.getDayOfMonth();
        int int24 = property8.getDifference((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime26 = property8.addToCopy((int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate28.minus(readablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readablePeriod33);
        org.joda.time.DateMidnight dateMidnight35 = dateTime34.toDateMidnight();
        org.joda.time.DateTime.Property property36 = dateTime34.dayOfMonth();
        boolean boolean37 = dateTime34.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime34.getZone();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime26.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime26.withWeekOfWeekyear(19);
        org.joda.time.DateTime.Property property43 = dateTime42.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[year]" + "'", str10, "Property[year]");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test08691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08691");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime19 = property15.getLocalTime();
        org.joda.time.LocalTime localTime20 = property15.roundFloorCopy();
        org.joda.time.LocalTime localTime22 = property15.addCopy(1644573000186L);
        org.joda.time.LocalTime localTime23 = property15.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) property15, chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test08692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08692");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        int int7 = localDate6.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
    }

    @Test
    public void test08693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08693");
        java.util.Locale locale2 = new java.util.Locale("", "UTC");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) calendar3);
        java.lang.String str6 = calendar3.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "_UTC");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644573249504,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=9,MILLISECOND=504,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.util.GregorianCalendar[time=1644573249504,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=9,MILLISECOND=504,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str6, "java.util.GregorianCalendar[time=1644573249504,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=9,MILLISECOND=504,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08694");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.addCopy(0);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime22 = localTime19.withFieldAdded(durationFieldType20, 35417304);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test08695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08695");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((int) '4');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        java.lang.String str11 = property10.toString();
        org.joda.time.ReadableInstant readableInstant12 = null;
        int int13 = property10.getDifference(readableInstant12);
        org.joda.time.LocalDateTime localDateTime14 = property10.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek((int) (byte) 1);
        int int17 = localDateTime16.getWeekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDurationAdded(readableDuration18, 32777);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[hourOfDay]" + "'", str11, "Property[hourOfDay]");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-993) + "'", int13 == (-993));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test08696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08696");
        java.util.Date date6 = new java.util.Date(292278994, 39, 16, 9, (-1878), 32);
        java.time.Instant instant7 = date6.toInstant();
        int int8 = date6.getSeconds();
        org.junit.Assert.assertEquals(date6.toString(), "Mon Jul 17 11:16:40 GMT 292267152");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 40 + "'", int8 == 40);
    }

    @Test
    public void test08697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08697");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        boolean boolean8 = dateTimeFormatter2.isParser();
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtMidnight(dateTimeZone13);
        java.util.Date date15 = localDate12.toDate();
        calendar10.setTime(date15);
        java.util.TimeZone timeZone17 = calendar10.getTimeZone();
        calendar10.clear();
        calendar10.clear();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.lang.String str21 = timeZone20.getID();
        int int22 = timeZone20.getRawOffset();
        boolean boolean23 = timeZone20.observesDaylightTime();
        calendar10.setTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = calendar10.before((java.lang.Object) dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDate localDate31 = localDate29.minus(readablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.Chronology chronology34 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long39 = dateTimeZone37.nextTransition((long) 4);
        org.joda.time.Chronology chronology40 = chronology34.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField41 = chronology34.secondOfMinute();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.lang.String str45 = dateTimeField41.getAsText((int) '4', locale44);
        java.lang.String str46 = locale44.getDisplayCountry();
        java.lang.String str47 = locale44.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withLocale(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 99);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime52 = dateTimeFormatter2.parseLocalTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GMT" + "'", str21, "GMT");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4L + "'", long39 == 4L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "52" + "'", str45, "52");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
    }

    @Test
    public void test08698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08698");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.clear();
        calendar1.clear();
        calendar1.set((-2731), 2022, 32769, (int) (short) 1, 100, 12);
        int int19 = calendar1.getActualMaximum(3);
        java.util.TimeZone timeZone20 = calendar1.getTimeZone();
        calendar1.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long27 = dateTimeZone24.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.LocalDate localDate30 = localDate28.plusWeeks(55);
        org.joda.time.LocalDate localDate32 = localDate28.plusYears(39);
        org.joda.time.LocalDate localDate34 = localDate28.minusMonths(60);
        java.util.Date date35 = localDate28.toDate();
        calendar1.setTime(date35);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.fromDateFields(date35);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-2L) + "'", long27 == (-2L));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test08699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08699");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean5 = localTime3.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime3.minus(readablePeriod6);
        org.joda.time.LocalTime localTime9 = localTime3.plusSeconds(9);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj0, chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.hourOfDay();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test08700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08700");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        java.lang.String str19 = property18.getAsString();
        java.lang.String str20 = property18.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis(32772);
        org.joda.time.DateTime dateTime30 = dateTime26.withMillis((long) ' ');
        org.joda.time.DateTime dateTime32 = dateTime26.minusMillis(5);
        int int33 = dateTime26.getDayOfMonth();
        int int34 = property18.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime36 = dateTime26.plusMonths(1970);
        boolean boolean37 = dateTime5.equals((java.lang.Object) dateTime26);
        org.joda.time.DateTime dateTime39 = dateTime26.plusMonths(2022);
        org.joda.time.DateTime.Property property40 = dateTime26.hourOfDay();
        long long41 = dateTime26.getMillis();
        int int42 = dateTime26.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[year]" + "'", str20, "Property[year]");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644537599999L + "'", long41 == 1644537599999L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
    }

    @Test
    public void test08701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08701");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.DateTime.Property property10 = dateTime5.secondOfDay();
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(999);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis((long) 2);
        boolean boolean17 = dateTime15.isBefore((long) 17);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.minus(readablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readablePeriod24);
        org.joda.time.DateTime.Property property26 = dateTime25.year();
        java.lang.String str27 = property26.getAsString();
        java.lang.String str28 = property26.toString();
        org.joda.time.DateTime dateTime30 = property26.addWrapFieldToCopy(4);
        org.joda.time.DateTime dateTime31 = property26.roundCeilingCopy();
        org.joda.time.YearMonthDay yearMonthDay32 = dateTime31.toYearMonthDay();
        boolean boolean33 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime35 = dateTime15.plusYears(893);
        org.joda.time.DateTime dateTime37 = dateTime15.plusSeconds((int) (byte) 0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[year]" + "'", str28, "Property[year]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test08702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08702");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        java.lang.String str9 = calendar1.getCalendarType();
        calendar1.set((int) (byte) 0, 0);
        int int14 = calendar1.getGreatestMinimum(9);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.lang.String str16 = timeZone15.getID();
        int int17 = timeZone15.getRawOffset();
        boolean boolean18 = timeZone15.observesDaylightTime();
        calendar1.setTimeZone(timeZone15);
        java.util.TimeZone.setDefault(timeZone15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GMT" + "'", str16, "GMT");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08703");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("23");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone5);
    }

    @Test
    public void test08704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08704");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusHours(15);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths((int) (byte) 0);
        int int11 = localDateTime8.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 1, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfDay((int) (byte) 10);
        int int17 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(9);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withSecondOfMinute(6);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfCentury(8);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfMonth(20);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime27);
        java.lang.String str29 = localDateTime27.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1908-01-20T00:00:06.010" + "'", str29, "1908-01-20T00:00:06.010");
    }

    @Test
    public void test08705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08705");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths((int) (byte) 0);
        int int14 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08706");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(9);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(6);
        int int12 = localDateTime11.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusMinutes(1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withDurationAdded(readableDuration15, 6);
        org.joda.time.Chronology chronology18 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.plusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMinutes(22);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.year();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test08707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08707");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(79500000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withDefaultYear(60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        int int10 = dateTimeFormatter8.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 946);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = dateTimeFormatter12.parseLocalDateTime("2001-02-13T00:00:00.005+60:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 60 + "'", int10 == 60);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test08708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08708");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateTime dateTime11 = property8.setCopy(14);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra(19);
        int int14 = dateTime13.getHourOfDay();
        boolean boolean16 = dateTime13.isEqual((long) 327);
        org.joda.time.DateTime dateTime18 = dateTime13.minusMonths(169);
        org.joda.time.Chronology chronology19 = dateTime13.getChronology();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test08709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08709");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.LocalTime localTime11 = localTime2.minusMinutes(19);
        org.joda.time.LocalTime.Property property12 = localTime2.secondOfMinute();
        org.joda.time.Chronology chronology13 = localTime2.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField16.getType();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test08710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08710");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property7.getLocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.plusWeeks((int) (byte) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDate12.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate12.withDayOfMonth(78789766);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 78789766 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test08711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08711");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str5 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644573249978,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=9,MILLISECOND=978,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Greenwich Mean Time" + "'", str5, "Greenwich Mean Time");
    }

    @Test
    public void test08712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08712");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(79500000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withDefaultYear(60);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter8.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter8.getPrinter();
        org.joda.time.Chronology chronology11 = dateTimeFormatter8.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = dateTimeFormatter8.parseLocalDateTime("29 Dec 2021 23:59:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNull(chronology11);
    }

    @Test
    public void test08713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08713");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setMinimalDaysInFirstWeek((int) 'a');
        calendar1.roll(999, 0);
        int int8 = calendar1.getMinimum(2);
        boolean boolean9 = calendar1.isLenient();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644573249993,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=97,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=9,MILLISECOND=993,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test08714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08714");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime10 = dateTime7.withField(dateTimeFieldType8, 4);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime13 = property11.addToCopy((long) (short) 0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08715");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay((int) (byte) 10);
        int int10 = localDateTime9.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField12 = localDateTime9.getField((int) (short) 0);
        org.joda.time.Chronology chronology13 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(2956560, (int) (short) -1, 14400001, 0, 7, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08716");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.DateTime dateTime11 = dateTime9.withWeekOfWeekyear(53);
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime11.withDayOfWeek(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08717");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.clear();
        calendar1.clear();
        calendar1.setTimeInMillis((long) (byte) 0);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.lang.String str14 = timeZone13.getID();
        int int16 = timeZone13.getOffset((-2104009200000L));
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        java.util.Date date23 = localDate20.toDate();
        calendar18.setTime(date23);
        java.util.TimeZone timeZone25 = calendar18.getTimeZone();
        boolean boolean26 = timeZone13.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.lang.String str28 = timeZone27.getID();
        java.time.ZoneId zoneId29 = timeZone27.toZoneId();
        boolean boolean30 = timeZone25.hasSameRules(timeZone27);
        calendar1.setTimeZone(timeZone25);
        calendar1.clear();
        java.time.Instant instant33 = calendar1.toInstant();
        java.util.Date date34 = java.util.Date.from(instant33);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GMT" + "'", str14, "GMT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GMT" + "'", str28, "GMT");
        org.junit.Assert.assertNotNull(zoneId29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test08718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08718");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime19 = property15.getLocalTime();
        org.joda.time.LocalTime localTime21 = localTime19.minusSeconds(86399);
        int int22 = localTime19.getMinuteOfHour();
        org.joda.time.LocalTime.Property property23 = localTime19.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test08719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08719");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, (-2L), 1);
        long long17 = chronology9.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.Chronology chronology18 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyearOfCentury();
        long long22 = dateTimeField19.set(0L, "52");
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime29 = localTime26.toDateTimeToday(dateTimeZone28);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long35 = dateTimeZone32.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str37 = dateTimeZone32.getNameKey(100L);
        org.joda.time.DateTime dateTime38 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.DateTime.Property property39 = dateTime29.era();
        int int40 = dateTime29.getDayOfYear();
        org.joda.time.DateTime dateTime43 = dateTime29.withDurationAdded(1L, (int) (short) 100);
        org.joda.time.DateTime.Property property44 = dateTime43.weekOfWeekyear();
        org.joda.time.DateTime dateTime45 = property44.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        java.util.Locale locale50 = new java.util.Locale("7", "1970-01-01T00:00:00.010");
        java.lang.String str51 = dateTime45.toString("\u5354\u5b9a\u4e16\u754c\u6642", locale50);
        java.util.Set<java.lang.Character> charSet52 = locale50.getExtensionKeys();
        java.lang.String str53 = dateTimeField19.getAsText(32400010, locale50);
        java.util.Locale locale56 = new java.util.Locale("", "+15:00");
        java.lang.String str57 = locale50.getDisplayCountry(locale56);
        boolean boolean58 = locale50.hasExtensions();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 20L + "'", long17 == 20L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-568080000000L) + "'", long22 == (-568080000000L));
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-2L) + "'", long35 == (-2L));
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 42 + "'", int40 == 42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertEquals(locale50.toString(), "7_1970-01-01T00:00:00.010");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u5354\u5b9a\u4e16\u754c\u6642" + "'", str51, "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(charSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "32400010" + "'", str53, "32400010");
        org.junit.Assert.assertEquals(locale56.toString(), "_+15:00");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T00:00:00.010" + "'", str57, "1970-01-01T00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08720");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean5 = localTime3.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime3.minus(readablePeriod6);
        org.joda.time.LocalTime localTime9 = localTime3.plusSeconds(9);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime20 = dateTime18.withMillisOfSecond(50);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test08721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08721");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(9);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(6);
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds(1969);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMillis(0);
        int int19 = localDateTime16.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test08722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08722");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((java.lang.Object) localDate1);
        org.joda.time.LocalDate localDate6 = localDate1.plusMonths(772);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate8.minus(readablePeriod9);
        org.joda.time.LocalDate localDate12 = localDate10.plusYears((int) '4');
        int int13 = localDate12.getDayOfMonth();
        boolean boolean14 = localDate6.equals((java.lang.Object) localDate12);
        int int15 = localDate6.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
    }

    @Test
    public void test08723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08723");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateTime dateTime11 = property8.setCopy(14);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime14 = dateTime11.withSecondOfMinute(5);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        java.util.Date date17 = localDate16.toDate();
        date17.setTime(77388911999989L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Tue May 10 23:59:59 GMT 4422");
    }

    @Test
    public void test08724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08724");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime7.withCenturyOfEra((int) (byte) 0);
        java.util.Date date12 = dateTime11.toDate();
        int int13 = dateTime11.getSecondOfDay();
        java.util.Date date14 = dateTime11.toDate();
        org.joda.time.DateTime dateTime16 = dateTime11.withYear((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.plus(readablePeriod17);
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate21.minus(readablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readablePeriod26);
        org.joda.time.DateTime.Property property28 = dateTime27.year();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str30 = property28.getAsShortText(locale29);
        java.lang.String str31 = locale29.getVariant();
        java.util.Locale.setDefault(category19, locale29);
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category19, locale33);
        java.util.Calendar calendar35 = dateTime16.toCalendar(locale33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate39 = localDate37.minus(readablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.minus(readablePeriod42);
        org.joda.time.DateTime.Property property44 = dateTime43.year();
        java.lang.String str45 = property44.getAsString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        int int48 = localDate47.getWeekOfWeekyear();
        int int49 = property44.compareTo((org.joda.time.ReadablePartial) localDate47);
        int int50 = localDate47.getEra();
        org.joda.time.LocalDate localDate52 = localDate47.plusWeeks(2000);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate56 = localDate54.minus(readablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTimeAtMidnight(dateTimeZone57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMillis(32772);
        org.joda.time.DateTime dateTime62 = dateTime58.withMillis((long) ' ');
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalDate localDate66 = localDate64.plus(readablePeriod65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology68 = null;
        boolean boolean69 = dateTimeFieldType67.isSupported(chronology68);
        boolean boolean70 = localDate66.isSupported(dateTimeFieldType67);
        int int71 = dateTime62.get(dateTimeFieldType67);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(chronology72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDate localDate75 = localDate73.minus(readablePeriod74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = localDate75.toDateTimeAtMidnight(dateTimeZone76);
        org.joda.time.Chronology chronology78 = localDate75.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long83 = dateTimeZone81.nextTransition((long) 4);
        org.joda.time.Chronology chronology84 = chronology78.withZone(dateTimeZone81);
        org.joda.time.DurationField durationField85 = chronology84.millis();
        boolean boolean86 = dateTimeFieldType67.isSupported(chronology84);
        boolean boolean87 = localDate52.isSupported(dateTimeFieldType67);
        int int88 = dateTime16.get(dateTimeFieldType67);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.MutableDateTime mutableDateTime90 = dateTime16.toMutableDateTime(dateTimeZone89);
        org.joda.time.DateTime.Property property91 = dateTime16.yearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Feb 12 23:59:59 GMT 22");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Feb 12 23:59:59 GMT 22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-62195212800001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=44,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 19 + "'", int71 == 19);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 4L + "'", long83 == 4L);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime90);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test08725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08725");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean11 = localTime9.isSupported(durationFieldType10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime9.minus(readablePeriod12);
        java.util.Locale locale15 = java.util.Locale.KOREA;
        java.lang.String str16 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localTime13, (int) (short) -1, locale15);
        java.lang.String str17 = localTime13.toString();
        int int18 = localTime13.size();
        org.joda.time.LocalTime.Property property19 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime23 = property19.setCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean31 = localTime29.isSupported(durationFieldType30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalTime localTime33 = localTime29.minus(readablePeriod32);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localTime33, (int) (short) -1, locale35);
        java.lang.String str37 = localTime33.toString();
        int int38 = localTime33.size();
        int int39 = localTime33.getMillisOfSecond();
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = localTime33.getFields();
        org.joda.time.LocalTime localTime41 = localTime23.withFields((org.joda.time.ReadablePartial) localTime33);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.millis();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(22, 5);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone46);
        long long51 = dateTimeZone46.convertLocalToUTC(1644572942340L, false, (long) 990);
        int int53 = dateTimeZone46.getOffset(0L);
        org.joda.time.Chronology chronology54 = chronology42.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DurationField durationField56 = chronology54.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(1900, (-420), (int) '#', 35458525, chronology54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1" + "'", str16, "-1");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "00:00:00.001" + "'", str17, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "00:00:00.001" + "'", str37, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1644493442340L + "'", long51 == 1644493442340L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 79500000 + "'", int53 == 79500000);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test08726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08726");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean5 = localTime3.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime3.minus(readablePeriod6);
        org.joda.time.LocalTime localTime9 = localTime3.plusSeconds(9);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj0, chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology10.getZone();
        java.lang.String str17 = dateTimeZone15.getShortName(1644573077601L);
        java.lang.String str19 = dateTimeZone15.getShortName(1644573188227L);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test08727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08727");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.addCopy(0);
        org.joda.time.LocalTime localTime21 = localTime19.withMillisOfDay((int) ' ');
        org.joda.time.LocalTime localTime23 = localTime19.minusHours(772);
        java.lang.Object obj24 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean29 = localTime27.isSupported(durationFieldType28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime31 = localTime27.minus(readablePeriod30);
        org.joda.time.LocalTime localTime33 = localTime27.plusSeconds(9);
        org.joda.time.Chronology chronology34 = localTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(obj24, chronology34);
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTime();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.days();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean44 = localTime42.isSupported(durationFieldType43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalTime localTime46 = localTime42.minus(readablePeriod45);
        org.joda.time.LocalTime localTime48 = localTime42.plusSeconds(9);
        org.joda.time.Chronology chronology49 = localTime42.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(chronology49);
        org.joda.time.Chronology chronology51 = localTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfDay();
        org.joda.time.DurationField durationField54 = durationFieldType39.getField(chronology51);
        org.joda.time.DateTime dateTime55 = dateTime37.withChronology(chronology51);
        org.joda.time.DateTime.Property property56 = dateTime55.millisOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.withHourOfDay(3);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.plus(readablePeriod59);
        org.joda.time.DateTime.Property property61 = dateTime58.hourOfDay();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology63);
        org.joda.time.LocalTime localTime66 = localTime64.withMinuteOfHour(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int68 = localTime66.get(dateTimeFieldType67);
        org.joda.time.DateTime.Property property69 = dateTime58.property(dateTimeFieldType67);
        int int70 = localTime19.indexOf(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test08728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08728");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate1.withWeekyear(7);
        org.joda.time.LocalDate localDate7 = localDate1.minusMonths(9);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate7.plus(readablePeriod11);
        java.util.Date date13 = localDate12.toDate();
        int int14 = date13.getTimezoneOffset();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue May 11 00:00:00 GMT 2021");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08729");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withDefaultYear((-2731));
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter27.withPivotYear(0);
        java.lang.Integer int35 = dateTimeFormatter27.getPivotYear();
        java.lang.StringBuffer stringBuffer36 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(stringBuffer36, 1644573223241L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNull(int35);
    }

    @Test
    public void test08730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08730");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime5 = localTime2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long11 = dateTimeZone8.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str13 = dateTimeZone8.getNameKey(100L);
        org.joda.time.DateTime dateTime14 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property15 = dateTime5.era();
        long long16 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime5.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime5.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronolgy();
        boolean boolean29 = dateTimeFormatter27.isParser();
        org.joda.time.Chronology chronology30 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology34);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean37 = localTime35.isSupported(durationFieldType36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalTime localTime39 = localTime35.minus(readablePeriod38);
        org.joda.time.LocalTime localTime41 = localTime35.plusSeconds(9);
        org.joda.time.Chronology chronology42 = localTime35.getChronology();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(chronology42);
        org.joda.time.Chronology chronology44 = localTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.millisOfDay();
        org.joda.time.DurationField durationField51 = chronology44.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter31.withChronology(chronology44);
        org.joda.time.Chronology chronology53 = dateTimeFormatter52.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter52.withDefaultYear((-2731));
        org.joda.time.DateTimeZone dateTimeZone56 = dateTimeFormatter52.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter52.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter57.withPivotYear((java.lang.Integer) 292278910);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withDefaultYear(35410054);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = dateTime23.toString(dateTimeFormatter59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-2L) + "'", long11 == (-2L));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644537600000L + "'", long16 == 1644537600000L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNull(chronology28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
    }

    @Test
    public void test08731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08731");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.minus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime4.plusSeconds(9);
        org.joda.time.Chronology chronology11 = localTime4.getChronology();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology11.add(readablePeriod12, (-2L), 1);
        long long19 = chronology11.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType1.getField(chronology11);
        org.joda.time.DurationField durationField22 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField23 = chronology11.yearOfEra();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology11);
        org.joda.time.DurationField durationField25 = chronology11.years();
        org.joda.time.DurationField durationField26 = chronology11.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-2L) + "'", long15 == (-2L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 20L + "'", long19 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test08732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08732");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((int) '4');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        java.lang.String str11 = property10.toString();
        java.lang.String str12 = property10.getAsString();
        org.joda.time.LocalDateTime localDateTime14 = property10.addWrapFieldToCopy(366);
        int int15 = localDateTime14.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMonths(2022);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusHours(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMinutes(42);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[hourOfDay]" + "'", str11, "Property[hourOfDay]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08733");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.era();
        org.joda.time.LocalDateTime localDateTime9 = property7.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = property7.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long17 = dateTimeZone14.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) 1, dateTimeZone14);
        java.lang.String str20 = dateTimeZone14.getName((long) '#');
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(1644572932963L, dateTimeZone14);
        long long23 = dateTimeZone14.nextTransition(1644572994973L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime10, dateTimeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond((-19));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2L) + "'", long17 == (-2L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.001" + "'", str20, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644572994973L + "'", long23 == 1644572994973L);
    }

    @Test
    public void test08734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08734");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.lang.String str5 = timeZone4.getID();
        java.time.ZoneId zoneId6 = timeZone4.toZoneId();
        int int8 = timeZone4.getOffset((long) (short) -1);
        boolean boolean9 = timeZone3.hasSameRules(timeZone4);
        java.lang.String str10 = timeZone3.getID();
        int int12 = timeZone3.getOffset(1644572485432L);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT" + "'", str10, "GMT");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test08735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08735");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime5 = localTime2.toDateTimeToday(dateTimeZone4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean10 = localTime8.isSupported(durationFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime8.minus(readablePeriod11);
        org.joda.time.LocalTime localTime14 = localTime8.plusSeconds(9);
        org.joda.time.Chronology chronology15 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime5.toDateTime(chronology15);
        org.joda.time.LocalTime localTime18 = dateTime5.toLocalTime();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test08736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08736");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        int int11 = localDateTime10.getDayOfYear();
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime();
        int int13 = dateTime12.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test08737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08737");
        java.util.Locale locale2 = new java.util.Locale("yearOfEra", "hourOfDay");
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale2.getLanguage();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale5);
        java.lang.String str8 = locale5.getDisplayLanguage();
        java.util.Locale.setDefault(locale5);
        java.lang.String str10 = locale2.getDisplayName(locale5);
        java.lang.String str11 = locale5.getDisplayName();
        org.junit.Assert.assertEquals(locale2.toString(), "yearofera_HOUROFDAY");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearofera" + "'", str4, "yearofera");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644573250406,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=10,MILLISECOND=406,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str8, "\u65e5\u672c\u8a9e");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yearofera (HOUROFDAY)" + "'", str10, "yearofera (HOUROFDAY)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u65e5\u672c\u8a9e" + "'", str11, "\u65e5\u672c\u8a9e");
    }

    @Test
    public void test08738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08738");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("999");
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime5 = dateTime3.minusMonths((-1878));
        org.joda.time.DateTime dateTime7 = dateTime3.plusYears(35446689);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.minus(readableDuration8);
        boolean boolean10 = dateTime7.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test08739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08739");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime5 = localTime2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long11 = dateTimeZone8.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str13 = dateTimeZone8.getNameKey(100L);
        org.joda.time.DateTime dateTime14 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property15 = dateTime5.era();
        long long16 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime5.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime5.withPeriodAdded(readablePeriod18, (int) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(30);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-2L) + "'", long11 == (-2L));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644537600000L + "'", long16 == 1644537600000L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test08740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08740");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strSet2.addAll((java.util.Collection<java.lang.String>) strList7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        boolean boolean19 = strSet12.addAll((java.util.Collection<java.lang.String>) strList17);
        boolean boolean20 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet12);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        boolean boolean33 = strSet26.addAll((java.util.Collection<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList31);
        boolean boolean35 = strSet12.removeAll((java.util.Collection<java.lang.String>) strList34);
        java.lang.Object[] objArray36 = strSet12.toArray();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet12.stream();
        boolean boolean39 = strSet12.add("00:00:00.001");
        strSet12.clear();
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap44 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, strMap44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList45, strMap46);
        boolean boolean48 = strSet12.remove((java.lang.Object) strMap46);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[hi!, ]");
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test08741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08741");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        java.util.Date date4 = localDate1.toDate();
        long long5 = date4.getTime();
        date4.setTime((long) 7);
        java.time.Instant instant8 = date4.toInstant();
        date4.setTime((-456825L));
        date4.setMinutes(30);
        int int13 = date4.getDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Wed Dec 31 23:30:23 GMT 1969");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644537600000L + "'", long5 == 1644537600000L);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test08742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08742");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-10T23:59:59.990Z");
        org.joda.time.DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test08743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08743");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = localDate8.withDayOfYear(12);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays((-292275054));
        org.joda.time.DateTime dateTime19 = dateTime15.plus((-25L));
        org.joda.time.DateTime dateTime21 = dateTime15.withMillisOfDay(2022);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(5);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        java.util.Date date28 = localDate25.toDate();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate31 = localDate25.withPeriodAdded(readablePeriod29, (-1));
        org.joda.time.LocalDate localDate33 = localDate25.minusYears(6);
        org.joda.time.DateTime dateTime34 = dateTime23.withFields((org.joda.time.ReadablePartial) localDate33);
        int int35 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalDate localDate37 = localDate11.withYear(28);
        org.joda.time.LocalDate.Property property38 = localDate11.dayOfYear();
        org.joda.time.LocalDate.Property property39 = localDate11.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test08744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08744");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate4.minus(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readablePeriod9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime10.withCenturyOfEra((int) (byte) 0);
        java.util.Date date15 = dateTime14.toDate();
        boolean boolean16 = calendar2.after((java.lang.Object) date15);
        calendar2.clear();
        int int19 = calendar2.getActualMinimum((int) (byte) 10);
        int int20 = calendar2.getWeekYear();
        calendar2.setFirstDayOfWeek(48);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=48,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
        org.junit.Assert.assertEquals(date15.toString(), "Thu Feb 12 23:59:59 GMT 22");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
    }

    @Test
    public void test08745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08745");
        java.util.Date date6 = new java.util.Date(2100, 1, 327, 32400010, (int) 'a', 0);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Feb 24 11:37:00 GMT 7697");
    }

    @Test
    public void test08746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08746");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.LocalDate localDate9 = property7.addToCopy((int) (byte) -1);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology10.getZone();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test08747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08747");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str9 = locale7.getExtension('a');
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str13 = locale11.getExtension('a');
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale7, locale11 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList24, strMap27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str34 = locale32.getExtension('a');
        java.util.Set<java.lang.String> strSet35 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str38 = locale36.getExtension('a');
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale32, locale36 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale locale44 = java.util.Locale.lookup(languageRangeList28, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap51 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList52 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strMap51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap53 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList52, strMap53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList52, strMap55);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap57 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList58 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList56, strMap57);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, strMap62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList63, strMap64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap66 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList67 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList63, strMap66);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str73 = locale71.getExtension('a');
        java.util.Set<java.lang.String> strSet74 = locale71.getUnicodeLocaleAttributes();
        java.util.Locale locale75 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str77 = locale75.getExtension('a');
        java.util.Set<java.lang.String> strSet78 = locale75.getUnicodeLocaleAttributes();
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale71, locale75 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale locale83 = java.util.Locale.lookup(languageRangeList67, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter(languageRangeList56, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale locale85 = java.util.Locale.lookup(languageRangeList47, (java.util.Collection<java.util.Locale>) localeList84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale86 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertNull(locale44);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(languageRangeList52);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertNotNull(languageRangeList58);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(languageRangeList67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNull(locale85);
    }

    @Test
    public void test08748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08748");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(292278993);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test08749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08749");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str2 = locale0.getExtension('a');
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray4 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray5 = strSet3.toArray(genericDeclarationArray4);
        strSet3.clear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.Chronology chronology18 = chronology17.withUTC();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(1644537599999L, chronology18);
        org.joda.time.DurationField durationField20 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfDay();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = locale23.getISO3Language();
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.lang.String str26 = dateTimeField21.getAsText(769651478715139000L, locale23);
        boolean boolean27 = strSet3.contains((java.lang.Object) 769651478715139000L);
        strSet3.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArray5);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "75139000" + "'", str26, "75139000");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test08750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08750");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setInstant((long) (-1));
        java.util.Calendar calendar4 = builder0.build();
        calendar4.set(28, (int) (byte) 1, 32769, 1900, (int) (byte) -1);
        int int11 = calendar4.getWeekYear();
        calendar4.setLenient(true);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-58443105600001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=118,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=6,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 118 + "'", int11 == 118);
    }

    @Test
    public void test08751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08751");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 1, chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long10 = dateTimeZone7.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime5, dateTimeZone7);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(0L, dateTimeZone7);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-2L) + "'", long10 == (-2L));
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test08752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08752");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = dateTime7.get(dateTimeFieldType8);
        int int10 = dateTime7.getDayOfMonth();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder14.clear();
        java.util.Locale.Builder builder18 = builder14.setLanguage("");
        java.util.Locale.Builder builder21 = builder18.setExtension('x', "");
        boolean boolean22 = dateTime7.equals((java.lang.Object) 'x');
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime7.getZone();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime7.plus(readableDuration24);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test08753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08753");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long9 = dateTimeZone6.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4, dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int12 = localDateTime4.get(dateTimeFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType13.getField(chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime4.property(dateTimeFieldType13);
        java.lang.String str17 = dateTimeFieldType13.getName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-2L) + "'", long9 == (-2L));
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "millisOfSecond" + "'", str17, "millisOfSecond");
    }

    @Test
    public void test08754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08754");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate10 = property7.getLocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate14 = localDate12.withYear((int) 'u');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate16.plus(readablePeriod17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate25 = localDate20.withFieldAdded(durationFieldType23, (int) (short) 0);
        org.joda.time.LocalDate localDate27 = localDate18.withFieldAdded(durationFieldType23, 19);
        java.lang.String str28 = durationFieldType23.getName();
        boolean boolean29 = localDate14.isSupported(durationFieldType23);
        org.joda.time.LocalDate localDate31 = localDate14.minusMonths(97);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyears" + "'", str28, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test08755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08755");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("32770");
        org.joda.time.DateTime dateTime3 = dateTime1.plusHours(14);
        org.joda.time.DateTime dateTime5 = dateTime3.withYearOfCentury(39);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.minus(readablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMillis(32772);
        org.joda.time.DateTime dateTime27 = dateTime23.withMillis((long) ' ');
        org.joda.time.DateTime.Property property28 = dateTime23.secondOfDay();
        boolean boolean29 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime31 = dateTime23.withYear((int) (short) 0);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) dateTime23);
        int int33 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate37 = localDate35.minus(readablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.plus(readableDuration41);
        org.joda.time.DateMidnight dateMidnight43 = dateTime39.toDateMidnight();
        org.joda.time.DateTime dateTime45 = dateTime39.minusMinutes(12);
        org.joda.time.DateTime.Property property46 = dateTime39.secondOfMinute();
        org.joda.time.DateTime dateTime47 = property46.withMaximumValue();
        boolean boolean48 = dateTime3.isAfter((org.joda.time.ReadableInstant) dateTime47);
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = locale50.getVariant();
        boolean boolean52 = locale50.hasExtensions();
        java.util.Set<java.lang.Character> charSet53 = locale50.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = dateTime3.toString("Chinese (China)", locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(charSet53);
    }

    @Test
    public void test08756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08756");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long4 = dateTimeZone1.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, 1646092800000L);
        int int12 = dateTimeZone1.getStandardOffset((long) 35434289);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-2L) + "'", long4 == (-2L));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1646092800000L + "'", long10 == 1646092800000L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test08757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08757");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate10 = localDate5.withFieldAdded(durationFieldType8, (int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate3.withFieldAdded(durationFieldType8, 19);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime22.withMonthOfYear(5);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long32 = dateTimeZone29.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str34 = dateTimeZone29.getNameKey(100L);
        org.joda.time.DateTime dateTime35 = dateTime26.withZoneRetainFields(dateTimeZone29);
        boolean boolean36 = dateTime35.isAfterNow();
        org.joda.time.DateTime dateTime37 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property38 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime39 = property38.roundCeilingCopy();
        org.joda.time.DateTime dateTime40 = property38.roundCeilingCopy();
        org.joda.time.DateTime dateTime42 = property38.setCopy((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime42.toMutableDateTimeISO();
        org.joda.time.Chronology chronology44 = dateTime42.getChronology();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-2L) + "'", long32 == (-2L));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test08758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08758");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        int int4 = timeZone0.getOffset((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone6);
        int int9 = localTime8.getSecondOfMinute();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test08759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08759");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setExtension('a', "");
        java.util.Locale.Builder builder9 = builder2.setRegion("");
        java.util.Locale locale10 = builder9.build();
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.util.Locale.Builder builder13 = builder9.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("12:00:00.575");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 12:00:00.575 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd" + "'", str12, "\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08760");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withDefaultYear((-2731));
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter27.withOffsetParsed();
        boolean boolean34 = dateTimeFormatter27.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter27.withPivotYear(33);
        boolean boolean37 = dateTimeFormatter36.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter36.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter36.withZoneUTC();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(dateTimePrinter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
    }

    @Test
    public void test08761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08761");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(35417304, 5599608, (-2731));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35417304 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08762");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withYearOfCentury(2);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.minus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withSecondOfMinute((int) '#');
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.era();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weeks();
        boolean boolean19 = localDateTime14.isSupported(durationFieldType18);
        int int20 = localDateTime14.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test08763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08763");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        int int14 = dateTimeField2.getMinimumValue(0L);
        long long17 = dateTimeField2.getDifferenceAsLong((long) (short) -1, (long) (byte) 0);
        int int18 = dateTimeField2.getMaximumValue();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime24 = localTime22.plus(readablePeriod23);
        java.lang.String str25 = localTime24.toString();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = localTime24.toString("1970", locale27);
        java.lang.String str29 = dateTimeField2.getAsText((int) (byte) 1, locale27);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now();
        int int31 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.DateTime dateTime32 = localTime30.toDateTimeToday();
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        long long34 = dateTime32.getMillis();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.minus(readablePeriod35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMinutes(397);
        org.joda.time.DateTime.Property property39 = dateTime38.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 999 + "'", int18 == 999);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "00:00:00.000" + "'", str25, "00:00:00.000");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970" + "'", str28, "1970");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644573251102L + "'", long34 == 1644573251102L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test08764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08764");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 86399);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfCentury((int) ' ');
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.lang.String str5 = timeZone4.getID();
        int int7 = timeZone4.getOffset((-2104009200000L));
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        java.util.Date date14 = localDate11.toDate();
        calendar9.setTime(date14);
        java.util.TimeZone timeZone16 = calendar9.getTimeZone();
        boolean boolean17 = timeZone4.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.lang.String str19 = timeZone18.getID();
        java.time.ZoneId zoneId20 = timeZone18.toZoneId();
        boolean boolean21 = timeZone16.hasSameRules(timeZone18);
        boolean boolean22 = localDate3.equals((java.lang.Object) timeZone18);
        java.time.ZoneId zoneId23 = timeZone18.toZoneId();
        java.lang.String str24 = timeZone18.getID();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT" + "'", str19, "GMT");
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GMT" + "'", str24, "GMT");
    }

    @Test
    public void test08765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08765");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfDay(5);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate8.minus(readablePeriod9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight(dateTimeZone11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.minus(readablePeriod13);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.joda.time.DateTime dateTime18 = property15.setCopy(14);
        boolean boolean19 = property6.equals((java.lang.Object) 14);
        java.util.Locale locale22 = new java.util.Locale("yearOfEra", "hourOfDay");
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getLanguage();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category25, locale26);
        java.lang.String str28 = locale22.getDisplayLanguage(locale26);
        java.lang.String str30 = locale22.getExtension('a');
        java.lang.String str31 = property6.getAsShortText(locale22);
        org.joda.time.DateTime dateTime32 = property6.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withPeriodAdded(readablePeriod33, 75);
        java.lang.Class<?> wildcardClass36 = dateTime35.getClass();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals(locale22.toString(), "yearofera_HOUROFDAY");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yearofera" + "'", str24, "yearofera");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "yearofera" + "'", str28, "yearofera");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Fri" + "'", str31, "Fri");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test08766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08766");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(22010, 0, 5599608);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08767");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int9 = localDateTime4.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withMillisOfDay(5);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.minusMinutes(35404470);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08768");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 100);
        int int11 = localDateTime6.getValue(3);
        int int12 = localDateTime6.getDayOfWeek();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.withDurationAdded(readableDuration13, (-2731));
        int int16 = localDateTime6.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime6.withDayOfWeek(2041);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2041 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test08769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08769");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.Chronology chronology8 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withDayOfMonth((int) (short) 1);
        int int11 = localDateTime4.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plus(readableDuration12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfSecond(38014620);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38014620 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 70 + "'", int11 == 70);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test08770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08770");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long9 = dateTimeZone6.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4, dateTimeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths(6);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusHours(35584);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-2L) + "'", long9 == (-2L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08771");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfDay(5);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        int int9 = dateTimeField7.getMinimumValue(0L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate11.withWeekyear(7);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(9);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((int) (byte) 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        boolean boolean29 = strSet22.addAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = locale30.getExtension('a');
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale30.getDisplayScript(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        boolean boolean38 = strSet22.equals((java.lang.Object) locale36);
        java.lang.String str39 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDate19, locale36);
        int int40 = localDate19.getEra();
        org.joda.time.LocalDate localDate42 = localDate19.withCenturyOfEra(60);
        java.util.Locale.Category category44 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale45 = java.util.Locale.getDefault(category44);
        java.lang.String str46 = localDate42.toString("01:00:00.000", locale45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean51 = localTime49.isSupported(durationFieldType50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalTime localTime53 = localTime49.minus(readablePeriod52);
        org.joda.time.LocalTime localTime55 = localTime49.plusSeconds(9);
        org.joda.time.Chronology chronology56 = localTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.minuteOfHour();
        int int59 = dateTimeField57.getLeapAmount((long) 10);
        long long62 = dateTimeField57.getDifferenceAsLong((long) 23, 2021L);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = dateTimeField57.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int64 = localDate42.get(dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Friday" + "'", str39, "Friday");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.FORMAT + "'", category44.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "01:00:00.000" + "'", str46, "01:00:00.000");
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
    }

    @Test
    public void test08772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08772");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate10 = localDate5.withFieldAdded(durationFieldType8, (int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate3.withFieldAdded(durationFieldType8, 19);
        org.joda.time.LocalDate localDate14 = localDate12.withYear((int) (short) 10);
        org.joda.time.LocalDate localDate16 = localDate14.plusWeeks((-2731));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate20 = localDate18.minus(readablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime26.withMonthOfYear(5);
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long36 = dateTimeZone33.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str38 = dateTimeZone33.getNameKey(100L);
        org.joda.time.DateTime dateTime39 = dateTime30.withZoneRetainFields(dateTimeZone33);
        org.joda.time.Chronology chronology40 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime41 = localDate14.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime43 = dateTime41.withMillisOfDay(32769);
        long long44 = dateTime41.getMillis();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-2L) + "'", long36 == (-2L));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-61848230400011L) + "'", long44 == (-61848230400011L));
    }

    @Test
    public void test08773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08773");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        int int28 = dateTimeFormatter27.getDefaultYear();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = locale29.getExtension('a');
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale29.getDisplayScript(locale33);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean42 = localTime40.isSupported(durationFieldType41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalTime localTime44 = localTime40.minus(readablePeriod43);
        org.joda.time.LocalTime localTime46 = localTime40.plusSeconds(9);
        org.joda.time.Chronology chronology47 = localTime40.getChronology();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        long long51 = chronology47.add(readablePeriod48, (-2L), 1);
        long long55 = chronology47.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType37.getField(chronology47);
        java.util.Locale locale59 = java.util.Locale.KOREA;
        java.lang.String str60 = locale59.getDisplayVariant();
        java.lang.String str61 = dateTimeField57.getAsShortText(7, locale59);
        java.lang.String str62 = locale33.getDisplayName(locale59);
        java.lang.String str63 = locale33.getISO3Language();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter27.withLocale(locale33);
        java.lang.Integer int65 = dateTimeFormatter27.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter27.withDefaultYear(292278993);
        java.lang.StringBuffer stringBuffer68 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) 1, chronology70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.year();
        int int75 = localDateTime73.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withMillisOfDay(32772);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusDays(28);
        int int80 = localDateTime79.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter67.printTo(stringBuffer68, (org.joda.time.ReadablePartial) localDateTime79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2000 + "'", int28 == 2000);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-2L) + "'", long51 == (-2L));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 20L + "'", long55 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "7" + "'", str61, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str62, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zho" + "'", str63, "zho");
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 70 + "'", int75 == 70);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1969 + "'", int80 == 1969);
    }

    @Test
    public void test08774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08774");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology4 = dateTimeFormatter3.getChronolgy();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime14 = localTime11.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str19 = locale17.getExtension('a');
        java.util.Set<java.lang.String> strSet20 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str21 = dateTimeZone15.getShortName((long) ' ', locale17);
        long long24 = dateTimeZone15.adjustOffset((long) (byte) 10, false);
        boolean boolean25 = dateTimeZone15.isFixed();
        long long29 = dateTimeZone15.convertLocalToUTC((long) 32, true, (long) 70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter8.withZone(dateTimeZone15);
        boolean boolean31 = dateTimeFormatter30.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.parse("32770-01-01T14:00:00.000+00:00:00.001", dateTimeFormatter30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.001" + "'", str21, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 31L + "'", long29 == 31L);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test08775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08775");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime21 = property15.addWrapFieldToCopy((-292275054));
        org.joda.time.LocalTime localTime23 = property15.addCopy(7);
        org.joda.time.LocalTime localTime25 = localTime23.plusMillis(999);
        org.joda.time.LocalTime localTime27 = localTime25.plusHours((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = localTime27.withSecondOfMinute(35506970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35506970 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test08776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08776");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str3 = locale1.getExtension('a');
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet5 = locale1.getUnicodeLocaleKeys();
        java.lang.String str6 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale7 = locale1.stripExtensions();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = calendar8.isSet(35546524);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65e5\u672c" + "'", str6, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644573251405,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=405,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08777");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        int int2 = timeZone0.getRawOffset();
        boolean boolean3 = timeZone0.observesDaylightTime();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone0);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.Chronology chronology18 = chronology17.withUTC();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType7.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        boolean boolean32 = strSet25.addAll((java.util.Collection<java.lang.String>) strList30);
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str35 = locale33.getExtension('a');
        java.util.Set<java.lang.String> strSet36 = locale33.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str38 = locale33.getDisplayScript(locale37);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        boolean boolean41 = strSet25.equals((java.lang.Object) locale39);
        java.lang.String str42 = dateTimeField21.getAsShortText(9, locale39);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone0, locale39);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = calendar43.getActualMinimum(57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 57");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644573251435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573251435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644573251435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9" + "'", str42, "9");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644573251435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08778");
        java.util.Date date6 = new java.util.Date(15, 12, (int) (byte) 10, (int) (byte) 1, 2, (int) (short) 0);
        int int7 = date6.getDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths(6);
        int int18 = localDateTime15.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMillis(292278993);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 1, chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfDay((int) (byte) 10);
        int int26 = localDateTime25.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime25);
        java.util.Date date28 = localDateTime27.toDate();
        boolean boolean29 = date6.after(date28);
        date6.setMinutes(340);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Jan 10 06:40:00 GMT 1916");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08779");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((-4), 6, 17);
        java.util.Locale.Category category5 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = property14.getAsShortText(locale15);
        java.lang.String str17 = locale15.getVariant();
        java.util.Locale.setDefault(category5, locale15);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category5, locale19);
        java.util.Calendar.Builder builder21 = builder4.setLocale(locale19);
        java.util.Calendar.Builder builder25 = builder21.setDate((int) 'u', 32010, 23);
        java.util.Calendar.Builder builder29 = builder25.setTimeOfDay(32400010, 1900, 0);
        java.util.Calendar.Builder builder33 = builder25.setTimeOfDay(43200040, 364, 35530724);
        java.util.Calendar.Builder builder38 = builder33.setTimeOfDay((-2473), 17999990, 677205, 19034);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.FORMAT + "'", category5.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022" + "'", str16, "2022");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test08780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08780");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.minus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime4.plusSeconds(9);
        org.joda.time.Chronology chronology11 = localTime4.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfHalfday();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay(1644572968568L, chronology13);
        org.joda.time.LocalTime localTime21 = localTime19.withMillisOfDay(35410123);
        int int22 = localTime19.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = localTime19.getValue(625);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 625");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35368568 + "'", int22 == 35368568);
    }

    @Test
    public void test08781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08781");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        java.util.Date date4 = localDate1.toDate();
        long long5 = date4.getTime();
        java.lang.String str6 = date4.toGMTString();
        date4.setYear(2022);
        int int9 = date4.getTimezoneOffset();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date4);
        date4.setSeconds((-27409550));
        date4.setDate(35546524);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Fri Apr 15 18:14:10 GMT 101244");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644537600000L + "'", long5 == 1644537600000L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "11 Feb 2022 00:00:00 GMT" + "'", str6, "11 Feb 2022 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test08782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08782");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 1, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        int int14 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(1644572994973L, chronology17);
        org.joda.time.DurationField durationField19 = chronology17.centuries();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(20, 292278993, 43, 3, 92, (-2), 30, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 92 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test08783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08783");
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean13 = localTime11.isSupported(durationFieldType12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime11.minus(readablePeriod14);
        org.joda.time.LocalTime localTime17 = localTime11.plusSeconds(9);
        org.joda.time.Chronology chronology18 = localTime11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology18.add(readablePeriod19, (-2L), 1);
        long long26 = chronology18.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType8.getField(chronology18);
        org.joda.time.DurationField durationField29 = chronology18.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology18.yearOfEra();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology18);
        org.joda.time.DateTimeField dateTimeField32 = chronology18.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(37432964, 240, 20, 340, 29, 1970, 0, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 340 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-2L) + "'", long22 == (-2L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 20L + "'", long26 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test08784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, (-2L), 1);
        long long17 = chronology9.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField19.add((long) 3954, 2959321739994L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 2959321739994");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 20L + "'", long17 == 20L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test08785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08785");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setMinimalDaysInFirstWeek((int) 'a');
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        java.lang.Object obj5 = calendar1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644573251575,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=97,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=575,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "java.util.GregorianCalendar[time=1644573251575,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=97,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=575,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "java.util.GregorianCalendar[time=1644573251575,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=97,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=575,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "java.util.GregorianCalendar[time=1644573251575,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=97,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=575,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08786");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        org.joda.time.LocalTime localTime14 = localTime9.withSecondOfMinute(1);
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08787");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime5 = localTime2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long11 = dateTimeZone8.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str13 = dateTimeZone8.getNameKey(100L);
        org.joda.time.DateTime dateTime14 = dateTime5.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property15 = dateTime5.era();
        int int16 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime5.withDurationAdded(1L, (int) (short) 100);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = property20.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean31 = localTime29.isSupported(durationFieldType30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalTime localTime33 = localTime29.minus(readablePeriod32);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localTime33, (int) (short) -1, locale35);
        int int38 = dateTimeField26.getMinimumValue(0L);
        long long41 = dateTimeField26.getDifferenceAsLong((long) (short) -1, (long) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType43.getField(chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean50 = localTime48.isSupported(durationFieldType49);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalTime localTime52 = localTime48.minus(readablePeriod51);
        java.util.Locale locale54 = java.util.Locale.KOREA;
        java.lang.String str55 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localTime52, (int) (short) -1, locale54);
        java.lang.String str56 = dateTimeField26.getAsShortText((long) (short) -1, locale54);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = dateTimeField26.getAsText(32770, locale58);
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str63 = locale61.getExtension('a');
        java.util.Set<java.lang.String> strSet64 = locale61.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.lang.String str66 = locale60.getDisplayCountry(locale61);
        int int67 = dateTimeField26.getMaximumShortTextLength(locale61);
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category69, locale70);
        java.lang.String str72 = locale70.getDisplayScript();
        java.lang.String str73 = dateTimeField26.getAsShortText((int) (short) 100, locale70);
        java.lang.String str74 = locale70.getLanguage();
        java.lang.String str75 = dateTimeZone22.getShortName(47L, locale70);
        long long77 = dateTimeZone22.nextTransition(1644573247480L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-2L) + "'", long11 == (-2L));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 42 + "'", int16 == 42);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1" + "'", str55, "-1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "32770" + "'", str59, "32770");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u65e5\u672c" + "'", str66, "\u65e5\u672c");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "100" + "'", str73, "100");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ja" + "'", str74, "ja");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.001" + "'", str75, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1644573247480L + "'", long77 == 1644573247480L);
    }

    @Test
    public void test08788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08788");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.LocalDate localDate9 = property7.addToCopy((int) (byte) -1);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.lang.String str12 = timeZone11.getID();
        int int14 = timeZone11.getOffset((-2104009200000L));
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        java.util.Date date21 = localDate18.toDate();
        calendar16.setTime(date21);
        java.util.TimeZone timeZone23 = calendar16.getTimeZone();
        boolean boolean24 = timeZone11.hasSameRules(timeZone23);
        boolean boolean25 = timeZone23.observesDaylightTime();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = locale26.getExtension('a');
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone23, locale26);
        java.lang.String str31 = localDate9.toString("7", locale26);
        org.joda.time.LocalDate localDate33 = localDate9.minusYears(20);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate37 = localDate35.minus(readablePeriod36);
        org.joda.time.LocalDate localDate39 = localDate35.plusMonths((int) (byte) 0);
        int int40 = localDate39.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property41 = localDate39.weekyear();
        org.joda.time.LocalDate localDate43 = property41.addToCopy((int) (byte) -1);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology44.getZone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDate localDate49 = localDate47.minus(readablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate49.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMillis(32772);
        org.joda.time.DateTime dateTime55 = dateTime51.withMillis((long) ' ');
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTimeAtMidnight(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime59.withMillisOfDay(5);
        org.joda.time.DateTime.Property property62 = dateTime61.dayOfWeek();
        boolean boolean63 = dateTime51.equals((java.lang.Object) dateTime61);
        int int64 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime51);
        long long67 = dateTimeZone45.convertLocalToUTC((-25L), true);
        org.joda.time.Interval interval68 = localDate9.toInterval(dateTimeZone45);
        int int69 = localDate9.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GMT" + "'", str12, "GMT");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644573251653,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=653,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "7" + "'", str31, "7");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-25L) + "'", long67 == (-25L));
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
    }

    @Test
    public void test08789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08789");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long12 = dateTimeZone9.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight14 = localDate5.toDateMidnight(dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate5.withPeriodAdded(readablePeriod15, 32769);
        org.joda.time.LocalDate.Property property18 = localDate17.centuryOfEra();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        java.lang.String str20 = property18.getAsString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-2L) + "'", long12 == (-2L));
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "20" + "'", str20, "20");
    }

    @Test
    public void test08790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08790");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMonthOfYear(5);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long19 = dateTimeZone16.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str21 = dateTimeZone16.getNameKey(100L);
        org.joda.time.DateTime dateTime22 = dateTime13.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime13.getZone();
        org.joda.time.DateTime dateTime25 = dateTime13.withDayOfWeek(3);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale.Builder builder28 = builder27.clearExtensions();
        java.util.Locale locale29 = builder28.build();
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        java.lang.String str32 = locale29.getDisplayCountry(locale30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDate localDate36 = localDate34.minus(readablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTimeAtMidnight(dateTimeZone37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readablePeriod39);
        org.joda.time.DateTime.Property property41 = dateTime40.year();
        org.joda.time.DurationField durationField42 = property41.getDurationField();
        org.joda.time.DateTime dateTime44 = property41.setCopy(14);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra(19);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTimeAtMidnight(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.withMillisOfDay(5);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfWeek();
        org.joda.time.DateTime dateTime55 = dateTime52.plusDays(42);
        boolean boolean56 = dateTime46.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime52.getZone();
        java.util.Locale locale58 = java.util.Locale.JAPAN;
        java.util.Calendar calendar59 = dateTime52.toCalendar(locale58);
        java.lang.String str60 = locale30.getDisplayScript(locale58);
        java.lang.String str61 = locale58.getDisplayCountry();
        java.util.Calendar calendar62 = dateTime25.toCalendar(locale58);
        int int63 = calendar62.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-2L) + "'", long19 == (-2L));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644573251691,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=691,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1644537600004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=5,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u65e5\u672c" + "'", str61, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1652313599989,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=4,WEEK_OF_YEAR=20,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=131,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=990,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test08791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08791");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((-292275054));
        org.joda.time.DateTime dateTime7 = dateTime3.plus((-25L));
        org.joda.time.DateTime dateTime9 = dateTime3.minusDays((int) (short) 10);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate12.minus(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        org.joda.time.DateTime.Property property19 = dateTime18.year();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str21 = property19.getAsShortText(locale20);
        java.lang.String str22 = locale20.getVariant();
        java.util.Locale.setDefault(category10, locale20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category10);
        java.lang.String str25 = locale24.toLanguageTag();
        java.util.Calendar calendar26 = dateTime3.toCalendar(locale24);
        calendar26.setTimeInMillis(423986351L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate30.minus(readablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readablePeriod35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.era();
        int int38 = dateTime36.get(dateTimeFieldType37);
        boolean boolean39 = calendar26.after((java.lang.Object) dateTimeFieldType37);
        calendar26.setLenient(true);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022" + "'", str21, "2022");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-TW" + "'", str25, "zh-TW");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=423986351,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=5,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=46,SECOND=26,MILLISECOND=352,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test08792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08792");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        java.lang.String str9 = calendar1.getCalendarType();
        calendar1.set((int) (byte) 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(139, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
    }

    @Test
    public void test08793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08793");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate9 = property7.setCopy("32770");
        org.joda.time.LocalDate localDate10 = property7.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate10.plus(readablePeriod11);
        org.joda.time.LocalDate localDate14 = localDate12.withMonthOfYear((int) (byte) 10);
        org.joda.time.LocalDate.Property property15 = localDate12.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = property15.setCopy("Property[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[yearOfEra]\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test08794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08794");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean5 = localTime3.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime3.minus(readablePeriod6);
        org.joda.time.LocalTime localTime9 = localTime3.plusSeconds(9);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.Chronology chronology11 = chronology10.withUTC();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType0.getField(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        boolean boolean25 = strSet18.addAll((java.util.Collection<java.lang.String>) strList23);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = locale26.getExtension('a');
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str31 = locale26.getDisplayScript(locale30);
        java.util.Locale locale32 = java.util.Locale.ENGLISH;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        boolean boolean34 = strSet18.equals((java.lang.Object) locale32);
        java.lang.String str35 = dateTimeField14.getAsShortText(9, locale32);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = locale37.getExtension('a');
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str42 = locale37.getDisplayScript(locale41);
        java.util.Locale locale43 = java.util.Locale.ENGLISH;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology46);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime50 = localTime47.toDateTimeToday(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime50.getZone();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str55 = locale53.getExtension('a');
        java.util.Set<java.lang.String> strSet56 = locale53.getUnicodeLocaleAttributes();
        java.lang.String str57 = dateTimeZone51.getShortName((long) ' ', locale53);
        java.lang.String str58 = locale41.getDisplayCountry(locale53);
        java.lang.String str59 = dateTimeField14.getAsText(1640822400000L, locale41);
        boolean boolean60 = dateTimeField14.isLenient();
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder61.clear();
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale locale64 = builder63.build();
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale65);
        java.lang.String str67 = locale64.getDisplayCountry(locale65);
        java.util.Locale.setDefault(locale65);
        java.util.Set<java.lang.String> strSet69 = locale65.getUnicodeLocaleKeys();
        int int70 = dateTimeField14.getMaximumShortTextLength(locale65);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "9" + "'", str35, "9");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.001" + "'", str57, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e2d\u570b" + "'", str58, "\u4e2d\u570b");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "30" + "'", str59, "30");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644573251839,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=839,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test08795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08795");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTime dateTime10 = dateTime7.plusDays(2022);
        org.joda.time.DateTime dateTime12 = dateTime7.withWeekyear(12);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime12.minusMonths(2008);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.plus(readablePeriod16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime12.withDate((int) (byte) 0, 35498804, 2027);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35498804 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test08796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08796");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate1.withWeekyear(7);
        org.joda.time.LocalDate localDate7 = localDate1.minusMonths(9);
        int int8 = localDate7.getMonthOfYear();
        int int9 = localDate7.getEra();
        org.joda.time.LocalDate localDate11 = localDate7.withWeekOfWeekyear(24);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.lang.String str19 = locale16.getDisplayCountry(locale17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(5);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        int int29 = dateTimeField27.getMinimumValue(0L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtMidnight(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate31.withWeekyear(7);
        org.joda.time.LocalDate localDate37 = localDate35.withWeekOfWeekyear(9);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((int) (byte) 0);
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        boolean boolean49 = strSet42.addAll((java.util.Collection<java.lang.String>) strList47);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str52 = locale50.getExtension('a');
        java.util.Set<java.lang.String> strSet53 = locale50.getUnicodeLocaleAttributes();
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str55 = locale50.getDisplayScript(locale54);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = locale54.getDisplayVariant(locale56);
        boolean boolean58 = strSet42.equals((java.lang.Object) locale56);
        java.lang.String str59 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDate39, locale56);
        java.lang.String str60 = locale16.getDisplayVariant(locale56);
        java.lang.String str61 = locale56.getDisplayCountry();
        java.lang.String str62 = localDate7.toString("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)", locale56);
        java.lang.Object obj63 = locale56.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644573251877,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=11,MILLISECOND=877,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Friday" + "'", str59, "Friday");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str62, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "en");
    }

    @Test
    public void test08797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08797");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        java.util.Date date4 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate1.withPeriodAdded(readablePeriod5, (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int9 = localDate1.getValue(70);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 70");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test08798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08798");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.lang.String str4 = dateTimeZone2.getShortName(0L);
        java.lang.String str6 = dateTimeZone2.getShortName((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 1970, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.hourOfDay();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("gregory");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = property8.setCopy("2021/12/30 0:00:00", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2021/12/30 0:00:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.001" + "'", str4, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.001" + "'", str6, "+00:00:00.001");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "gregory");
    }

    @Test
    public void test08799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08799");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((long) 22);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(7);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        int int14 = localDateTime11.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
    }

    @Test
    public void test08800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08800");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        int int10 = localDateTime8.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusHours(19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime8.toString(dateTimeFormatter13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.withCenturyOfEra(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime8.withMinuteOfHour(130);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 130 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1900-01-01T00:00:00.010" + "'", str14, "1900-01-01T00:00:00.010");
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        java.lang.String str14 = dateTimeField12.getAsText((-25L));
        java.lang.String str15 = dateTimeField12.toString();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "69" + "'", str14, "69");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str15, "DateTimeField[yearOfCentury]");
    }

    @Test
    public void test08802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08802");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(1970);
        int int14 = dateTime9.getSecondOfDay();
        boolean boolean15 = dateTime9.isBeforeNow();
        org.joda.time.DateTime.Property property16 = dateTime9.millisOfDay();
        int int17 = dateTime9.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86399 + "'", int14 == 86399);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 86399990 + "'", int17 == 86399990);
    }

    @Test
    public void test08803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08803");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-10T23:59:59.990+00:00:00.001", (double) (-62161135844826L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-6.2161135844826E13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08804");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        boolean boolean11 = strSet4.addAll((java.util.Collection<java.lang.String>) strList9);
        java.lang.String[] strArray13 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        boolean boolean21 = strSet14.addAll((java.util.Collection<java.lang.String>) strList19);
        boolean boolean22 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet14);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        boolean boolean35 = strSet28.addAll((java.util.Collection<java.lang.String>) strList33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList33);
        boolean boolean37 = strSet14.removeAll((java.util.Collection<java.lang.String>) strList36);
        boolean boolean38 = strSet1.addAll((java.util.Collection<java.lang.String>) strList36);
        boolean boolean39 = strSet1.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet1.spliterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSpliterator40);
    }

    @Test
    public void test08805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08805");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str2 = locale0.getExtension('a');
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        boolean boolean13 = strSet6.addAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Iterator<java.lang.String> strItor14 = strSet6.iterator();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.year();
        int int21 = localDateTime19.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        int int24 = localDateTime23.getEra();
        boolean boolean25 = strSet6.remove((java.lang.Object) localDateTime23);
        boolean boolean26 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale27.getExtension('a');
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleAttributes();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        boolean boolean40 = strSet33.addAll((java.util.Collection<java.lang.String>) strList38);
        java.util.Iterator<java.lang.String> strItor41 = strSet33.iterator();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) 1, chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.year();
        int int48 = localDateTime46.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMinimumValue();
        int int51 = localDateTime50.getEra();
        boolean boolean52 = strSet33.remove((java.lang.Object) localDateTime50);
        boolean boolean53 = strSet30.removeAll((java.util.Collection<java.lang.String>) strSet33);
        boolean boolean54 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet30);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = strSet30.add("1970-05-07T00:00:32.772");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 70 + "'", int21 == 70);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 70 + "'", int48 == 70);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test08806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08806");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        java.lang.String str19 = property18.getAsString();
        java.lang.String str20 = property18.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis(32772);
        org.joda.time.DateTime dateTime30 = dateTime26.withMillis((long) ' ');
        org.joda.time.DateTime dateTime32 = dateTime26.minusMillis(5);
        int int33 = dateTime26.getDayOfMonth();
        int int34 = property18.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime36 = dateTime26.plusMonths(1970);
        boolean boolean37 = dateTime5.equals((java.lang.Object) dateTime26);
        org.joda.time.DateTime dateTime39 = dateTime26.plusMonths(2022);
        org.joda.time.DateTime.Property property40 = dateTime26.hourOfDay();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate48 = localDate43.withFieldAdded(durationFieldType46, (int) (short) 0);
        java.lang.String str49 = durationFieldType46.getName();
        org.joda.time.DateTime dateTime51 = dateTime41.withFieldAdded(durationFieldType46, (-2730));
        java.lang.String str53 = dateTime51.toString("19");
        int int54 = dateTime51.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[year]" + "'", str20, "Property[year]");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "weekyears" + "'", str49, "weekyears");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "19" + "'", str53, "19");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 709 + "'", int54 == 709);
    }

    @Test
    public void test08807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08807");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.minus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime4.plusSeconds(9);
        org.joda.time.Chronology chronology11 = localTime4.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType1.getField(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.eras();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology12.getDateTimeMillis(32010, 44, 35410123, 964, 2101244400, 78789766, (-977));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 964 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test08808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08808");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.LocalDate localDate9 = property7.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate10 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long15 = dateTimeZone12.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str17 = dateTimeZone12.getNameKey(100L);
        int int19 = dateTimeZone12.getStandardOffset((long) 'a');
        org.joda.time.DateMidnight dateMidnight20 = localDate10.toDateMidnight(dateTimeZone12);
        java.lang.String str22 = localDate10.toString("49");
        org.joda.time.LocalDate localDate24 = localDate10.withYear(70);
        org.joda.time.Interval interval25 = localDate24.toInterval();
        int int26 = localDate24.getEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-2L) + "'", long15 == (-2L));
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "49" + "'", str22, "49");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test08809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08809");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withPeriodAdded(readablePeriod7, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withWeekOfWeekyear(1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusHours(5);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMillisOfDay(308);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours(7);
        java.util.Locale locale24 = new java.util.Locale("", "UTC");
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        boolean boolean26 = dateTimeZone21.equals((java.lang.Object) locale24);
        java.lang.String str27 = localDateTime15.toString("33", locale24);
        boolean boolean28 = locale24.hasExtensions();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals(locale24.toString(), "_UTC");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644573252202,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=12,MILLISECOND=202,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "33" + "'", str27, "33");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08810");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate localDate8 = localDate1.withYearOfEra(772);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.lang.String str10 = timeZone9.getID();
        java.time.ZoneId zoneId11 = timeZone9.toZoneId();
        int int13 = timeZone9.getOffset((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.Object obj15 = timeZone9.clone();
        boolean boolean16 = localDate1.equals((java.lang.Object) timeZone9);
        org.joda.time.LocalDate localDate18 = localDate1.withWeekOfWeekyear(11);
        org.joda.time.LocalDate.Property property19 = localDate1.weekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT" + "'", str10, "GMT");
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test08811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08811");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withDefaultYear((-2731));
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter27.withPivotYear(0);
        java.lang.Integer int35 = dateTimeFormatter27.getPivotYear();
        java.lang.Integer int36 = dateTimeFormatter27.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = dateTimeFormatter27.print((-125941651219034L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNull(int35);
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test08812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08812");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(1970);
        int int14 = dateTime9.getWeekOfWeekyear();
        int int15 = dateTime9.getYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test08813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08813");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate1.withWeekyear(7);
        org.joda.time.LocalDate localDate7 = localDate1.minusMonths(9);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtStartOfDay(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate7.plus(readablePeriod11);
        java.util.Date date13 = localDate12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long18 = dateTimeZone15.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone15);
        int int21 = dateTimeZone15.getOffset((long) 'a');
        long long23 = dateTimeZone15.convertUTCToLocal((-62161135848685L));
        long long26 = dateTimeZone15.convertLocalToUTC(1644573010815L, true);
        org.joda.time.DateTime dateTime27 = localDate12.toDateTimeAtStartOfDay(dateTimeZone15);
        int int28 = dateTime27.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue May 11 00:00:00 GMT 2021");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-2L) + "'", long18 == (-2L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-62161135848684L) + "'", long23 == (-62161135848684L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644573010814L + "'", long26 == 1644573010814L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test08814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08814");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate2.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property9 = localDate2.dayOfWeek();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime19.withMonthOfYear(5);
        org.joda.time.DateTime.Property property24 = dateTime23.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long29 = dateTimeZone26.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str31 = dateTimeZone26.getNameKey(100L);
        org.joda.time.DateTime dateTime32 = dateTime23.withZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime33 = localDate2.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(obj0, dateTimeZone26);
        org.joda.time.LocalDate.Property property35 = localDate34.weekOfWeekyear();
        int int36 = localDate34.getDayOfWeek();
        int int37 = localDate34.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-2L) + "'", long29 == (-2L));
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
    }

    @Test
    public void test08815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08815");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setExtension('x', "CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setUnicodeLocaleKeyword("3", "1970-12-31T00:00:00.038+00:00:00.006");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 3 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test08816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08816");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.clear();
        calendar1.setTimeInMillis((long) (-292275054));
        // The following exception was thrown during execution in test generation
        try {
            calendar1.clear(2099);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2099");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-292275054,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=48,SECOND=44,MILLISECOND=946,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
    }

    @Test
    public void test08817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08817");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 15);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readablePeriod2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMonths(32770);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(32770);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(895);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = localDateTime10.getFieldType(3222);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 3222");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
    }

    @Test
    public void test08818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08818");
        java.util.Date date6 = new java.util.Date(32772, 30, (int) ' ', 70, (int) (byte) 0, 79200000);
        int int7 = date6.getYear();
        int int8 = date6.getDate();
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 05 14:00:00 GMT 34677");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32777 + "'", int7 == 32777);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test08819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08819");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("DateTimeField[millisOfSecond]");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        int int3 = calendar2.getWeekYear();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar2);
        java.lang.Object obj5 = calendar2.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644573252426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=12,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "java.util.GregorianCalendar[time=1644573252426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=12,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "java.util.GregorianCalendar[time=1644573252426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=12,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "java.util.GregorianCalendar[time=1644573252426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=12,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08820");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.LocalDate localDate12 = dateTime11.toLocalDate();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.LocalDate localDate18 = localDate14.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property21 = localDate14.dayOfWeek();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate25 = localDate23.minus(readablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readablePeriod28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime31.withMonthOfYear(5);
        org.joda.time.DateTime.Property property36 = dateTime35.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long41 = dateTimeZone38.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str43 = dateTimeZone38.getNameKey(100L);
        org.joda.time.DateTime dateTime44 = dateTime35.withZoneRetainFields(dateTimeZone38);
        org.joda.time.DateTime dateTime45 = localDate14.toDateTimeAtStartOfDay(dateTimeZone38);
        boolean boolean47 = dateTimeZone38.isStandardOffset((long) 6);
        org.joda.time.DateTime dateTime48 = localDate12.toDateTimeAtStartOfDay(dateTimeZone38);
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        int int50 = dateTime48.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-2L) + "'", long41 == (-2L));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
    }

    @Test
    public void test08821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08821");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long8 = dateTimeZone5.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone5);
        int int11 = dateTimeZone5.getOffset((long) 'a');
        long long13 = dateTimeZone5.convertUTCToLocal((-62161135848685L));
        java.util.TimeZone timeZone14 = dateTimeZone5.toTimeZone();
        java.util.TimeZone timeZone15 = dateTimeZone5.toTimeZone();
        boolean boolean16 = timeZone1.hasSameRules(timeZone15);
        java.lang.String str19 = timeZone15.getDisplayName(true, 0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-2L) + "'", long8 == (-2L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-62161135848684L) + "'", long13 == (-62161135848684L));
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "GMT+00:00" + "'", str19, "GMT+00:00");
    }

    @Test
    public void test08822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08822");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.clear();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.lang.String str11 = timeZone10.getID();
        int int13 = timeZone10.getOffset((-2104009200000L));
        calendar1.setTimeZone(timeZone10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        java.util.Date date19 = localDate16.toDate();
        date19.setDate(0);
        int int22 = date19.getMonth();
        date19.setDate((int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        java.util.Date date29 = localDate26.toDate();
        date29.setDate(0);
        date29.setMinutes((-1));
        int int34 = date29.getHours();
        boolean boolean35 = date19.after(date29);
        date19.setDate(240);
        date19.setDate((int) (byte) 1);
        calendar1.setTime(date19);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTimeAtMidnight(dateTimeZone43);
        java.util.Date date45 = localDate42.toDate();
        date45.setDate(0);
        int int48 = date45.getMonth();
        date45.setDate((int) (byte) -1);
        date45.setSeconds(20);
        int int53 = date45.getMonth();
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.fromDateFields(date45);
        boolean boolean55 = date19.after(date45);
        int int56 = date19.getHours();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1640995200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GMT" + "'", str11, "GMT");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Sat Jan 01 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Sun Jan 30 23:59:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 23 + "'", int34 == 23);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Dec 30 00:00:20 GMT 2021");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 11 + "'", int53 == 11);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test08823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08823");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set(5, (int) 'x', 23);
        int int7 = calendar1.getActualMinimum((int) (byte) 10);
        calendar1.clear();
        calendar1.setLenient(false);
        calendar1.setTimeInMillis(1644573055304L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644573055304,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=50,SECOND=55,MILLISECOND=304,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test08824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08824");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        java.lang.Object obj8 = null;
        boolean boolean9 = dateTime7.equals(obj8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusWeeks(35545318);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test08825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08825");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(79500000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withDefaultYear(60);
        org.joda.time.DateTimeZone dateTimeZone9 = dateTimeFormatter4.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter4.withDefaultYear(1908);
        java.lang.Appendable appendable12 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay((int) (byte) 10);
        int int18 = localDateTime17.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField20 = localDateTime17.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusHours((int) '4');
        int int23 = localDateTime17.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.withPeriodAdded(readablePeriod24, 2099);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(appendable12, (org.joda.time.ReadablePartial) localDateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test08826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08826");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long9 = dateTimeZone6.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withMillisOfDay(5);
        org.joda.time.Chronology chronology13 = localDateTime4.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        long long17 = dateTimeField15.roundFloor(1644572965432L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-2L) + "'", long9 == (-2L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572965432L + "'", long17 == 1644572965432L);
    }

    @Test
    public void test08827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08827");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology11 = null;
        boolean boolean12 = dateTimeFieldType10.isSupported(chronology11);
        org.joda.time.Chronology chronology13 = null;
        boolean boolean14 = dateTimeFieldType10.isSupported(chronology13);
        org.joda.time.DateTime.Property property15 = dateTime9.property(dateTimeFieldType10);
        org.joda.time.DateTime dateTime17 = dateTime9.plusHours(0);
        org.joda.time.DateTime dateTime19 = dateTime9.plusWeeks(1286);
        int int20 = dateTime9.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test08828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08828");
        java.util.Locale locale2 = new java.util.Locale("", "UTC");
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromCalendarFields(calendar3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) calendar3);
        calendar3.setFirstDayOfWeek(20);
        // The following exception was thrown during execution in test generation
        try {
            calendar3.roll(27600090, 35410054);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_UTC");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1644573252709,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=20,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=12,MILLISECOND=709,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test08829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08829");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.lang.String str5 = timeZone4.getID();
        java.time.ZoneId zoneId6 = timeZone4.toZoneId();
        int int8 = timeZone4.getOffset((long) (short) -1);
        boolean boolean9 = timeZone3.hasSameRules(timeZone4);
        timeZone3.setRawOffset(4);
        timeZone3.setRawOffset(1439);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test08830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08830");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate1.withWeekyear(7);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekOfWeekyear(9);
        org.joda.time.Chronology chronology8 = localDate5.getChronology();
        int int9 = localDate5.getDayOfYear();
        org.joda.time.LocalDate localDate11 = localDate5.withWeekyear(11);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfWeek();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test08831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08831");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMonthOfYear(5);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long19 = dateTimeZone16.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str21 = dateTimeZone16.getNameKey(100L);
        org.joda.time.DateTime dateTime22 = dateTime13.withZoneRetainFields(dateTimeZone16);
        long long26 = dateTimeZone16.convertLocalToUTC((long) 32, false, (long) (-4));
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours(15);
        org.joda.time.DateTime dateTime30 = localDate27.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate34 = localDate32.minus(readablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.lang.String str38 = timeZone37.getID();
        java.time.ZoneId zoneId39 = timeZone37.toZoneId();
        boolean boolean40 = dateTime36.equals((java.lang.Object) timeZone37);
        java.util.Date date47 = new java.util.Date(32, (int) (short) 0, 4, 15, 15, 3);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromDateFields(date47);
        boolean boolean49 = dateTime36.equals((java.lang.Object) date47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean51 = dateTime36.isSupported(dateTimeFieldType50);
        int int52 = dateTime30.get(dateTimeFieldType50);
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType50.getRangeDurationType();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-2L) + "'", long19 == (-2L));
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 31L + "'", long26 == 31L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "GMT" + "'", str38, "GMT");
        org.junit.Assert.assertNotNull(zoneId39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals(date47.toString(), "Mon Jan 04 15:15:03 GMT 1932");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType53);
    }

    @Test
    public void test08832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08832");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate10 = localDate5.withFieldAdded(durationFieldType8, (int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate3.withFieldAdded(durationFieldType8, 19);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime22.withMonthOfYear(5);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long32 = dateTimeZone29.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str34 = dateTimeZone29.getNameKey(100L);
        org.joda.time.DateTime dateTime35 = dateTime26.withZoneRetainFields(dateTimeZone29);
        boolean boolean36 = dateTime35.isAfterNow();
        org.joda.time.DateTime dateTime37 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property38 = dateTime35.weekyear();
        org.joda.time.DateTime dateTime39 = property38.roundCeilingCopy();
        org.joda.time.DateTime dateTime40 = property38.roundCeilingCopy();
        org.joda.time.DateTime dateTime42 = property38.setCopy((int) (short) 0);
        int int43 = dateTime42.getSecondOfMinute();
        boolean boolean45 = dateTime42.isEqual(24L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-2L) + "'", long32 == (-2L));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 59 + "'", int43 == 59);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test08833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08833");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        boolean boolean13 = strSet6.addAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = locale14.getExtension('a');
        java.util.Set<java.lang.String> strSet17 = locale14.getUnicodeLocaleAttributes();
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale14.getDisplayScript(locale18);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.lang.String str21 = locale18.getDisplayVariant(locale20);
        boolean boolean22 = strSet6.equals((java.lang.Object) locale20);
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.String[] strArray29 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        boolean boolean32 = strSet25.addAll((java.util.Collection<java.lang.String>) strList30);
        java.util.Iterator<java.lang.String> strItor33 = strSet25.iterator();
        boolean boolean35 = strSet25.equals((java.lang.Object) 1644572932963L);
        boolean boolean36 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet25);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate40 = localDate38.plus(readablePeriod39);
        org.joda.time.LocalDate.Property property41 = localDate40.yearOfEra();
        boolean boolean42 = strSet25.remove((java.lang.Object) property41);
        org.joda.time.LocalDate localDate43 = property41.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate48 = localDate46.minus(readablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTimeAtMidnight(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMillis(32772);
        org.joda.time.DateTime dateTime54 = dateTime50.withMillis((long) ' ');
        org.joda.time.DateTime.Property property55 = dateTime50.secondOfDay();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalDate localDate60 = localDate58.minus(readablePeriod59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = localDate60.toDateTimeAtMidnight(dateTimeZone61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.minus(readablePeriod63);
        org.joda.time.DateTime.Property property65 = dateTime64.year();
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str67 = property65.getAsShortText(locale66);
        java.lang.String str68 = locale66.getVariant();
        org.joda.time.DateTime dateTime69 = property55.setCopy("32770", locale66);
        java.util.Set<java.lang.Character> charSet70 = locale66.getExtensionKeys();
        java.lang.String str71 = locale66.getVariant();
        java.lang.String str72 = localDate43.toString("625", locale66);
        java.util.Locale.setDefault(category0, locale66);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022" + "'", str67, "2022");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "625" + "'", str72, "625");
    }

    @Test
    public void test08834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08834");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.Chronology chronology28 = dateTimeFormatter27.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean33 = localTime31.isSupported(durationFieldType32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalTime localTime35 = localTime31.minus(readablePeriod34);
        org.joda.time.LocalTime localTime37 = localTime31.plusSeconds(9);
        org.joda.time.Chronology chronology38 = localTime31.getChronology();
        org.joda.time.Chronology chronology39 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.era();
        org.joda.time.Chronology chronology41 = chronology39.withUTC();
        org.joda.time.DurationField durationField42 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter27.withChronology(chronology39);
        java.lang.Integer int45 = dateTimeFormatter44.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter44.withDefaultYear(2922789);
        java.lang.Appendable appendable48 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone51);
        calendar52.setWeekDate(0, 11, 7);
        long long57 = calendar52.getTimeInMillis();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.minutes();
        java.lang.Object obj59 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean64 = localTime62.isSupported(durationFieldType63);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.LocalTime localTime66 = localTime62.minus(readablePeriod65);
        org.joda.time.LocalTime localTime68 = localTime62.plusSeconds(9);
        org.joda.time.Chronology chronology69 = localTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.hourOfDay();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(obj59, chronology69);
        org.joda.time.DurationField durationField73 = chronology69.halfdays();
        org.joda.time.DurationField durationField74 = durationFieldType58.getField(chronology69);
        org.joda.time.DateTimeField dateTimeField75 = chronology69.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology69.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone80 = dateTimeZone79.toTimeZone();
        int int82 = dateTimeZone79.getStandardOffset((long) (short) 0);
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime(0L, dateTimeZone79);
        org.joda.time.Chronology chronology84 = chronology69.withZone(dateTimeZone79);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((java.lang.Object) long57, chronology84);
        org.joda.time.DateTime dateTime86 = dateTime85.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime87 = dateTime86.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter47.printTo(appendable48, (org.joda.time.ReadableInstant) dateTime87);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(int45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-62161135547157,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.006,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=73,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=12,MILLISECOND=849,ZONE_OFFSET=6,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-62161135547157L) + "'", long57 == (-62161135547157L));
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test08835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08835");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((-4), 6, 17);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate6.minus(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.Chronology chronology11 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long16 = dateTimeZone14.nextTransition((long) 4);
        org.joda.time.Chronology chronology17 = chronology11.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.secondOfMinute();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("");
        java.lang.String str22 = dateTimeField18.getAsText((int) '4', locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.util.Calendar.Builder builder24 = builder0.setLocale(locale23);
        java.util.Calendar.Builder builder28 = builder24.setDate(999, 0, 82800000);
        java.util.Calendar calendar29 = builder28.build();
        boolean boolean30 = calendar29.isLenient();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4L + "'", long16 == 4L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52" + "'", str22, "52");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=7123278585600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=227697,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=260,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test08836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08836");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withWeekOfWeekyear(19);
        int int6 = localDateTime5.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfDay(32772);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plus(readableDuration10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(23);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.year();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYearOfCentury((int) '4');
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMinutes((int) ' ');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withMillisOfDay(25);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime14.withTime(0, 22, 0, 18);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusDays(31437066);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test08837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08837");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfMonth(22);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMonthOfYear(7);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusDays((-27409550));
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withCenturyOfEra(32);
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test08838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08838");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Date date5 = localDate2.toDate();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = property14.compareTo((org.joda.time.ReadablePartial) localDate17);
        int int20 = localDate17.getEra();
        org.joda.time.LocalDate.Property property21 = localDate17.dayOfMonth();
        java.util.Date date22 = localDate17.toDate();
        boolean boolean23 = date5.before(date22);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date5);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale locale28 = builder27.build();
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        java.lang.String str31 = locale28.getDisplayCountry(locale29);
        java.lang.String str32 = locale28.getVariant();
        java.util.Set<java.lang.String> strSet33 = locale28.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.LocalDate.Property property38 = localDate35.dayOfWeek();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.LocalDate localDate40 = property38.getLocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfMonth();
        org.joda.time.LocalDate localDate42 = property41.getLocalDate();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate48 = localDate46.minus(readablePeriod47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTimeAtMidnight(dateTimeZone49);
        org.joda.time.Chronology chronology51 = localDate48.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.monthOfYear();
        long long54 = dateTimeField52.roundFloor(4L);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology55);
        int int57 = localDate56.getWeekOfWeekyear();
        int int58 = localDate56.getMonthOfYear();
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.lang.String str61 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) localDate56, 2, locale60);
        java.lang.String str62 = dateTimeField43.getAsText(1644537599989L, locale60);
        java.lang.String str63 = locale28.getDisplayVariant(locale60);
        java.lang.String str64 = locale60.getDisplayLanguage();
        java.util.Calendar.Builder builder65 = builder0.setLocale(locale60);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder69 = builder65.setTimeOfDay(101, 38, 14400001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644573253040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=13,MILLISECOND=40,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u6708" + "'", str61, "\u6708");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "10" + "'", str62, "10");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u6587" + "'", str64, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test08839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08839");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfYear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        int int14 = dateTime13.getYearOfCentury();
        int int15 = dateTime13.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test08840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08840");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean5 = timeZone3.observesDaylightTime();
        int int6 = timeZone3.getRawOffset();
        boolean boolean7 = timeZone3.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone3);
        java.util.Calendar.Builder builder9 = builder0.setTimeZone(timeZone3);
        java.util.Calendar.Builder builder13 = builder0.setWeekDate((int) (byte) 0, 86399, 79500000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder15 = builder13.setInstant(1644573128170L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08841");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        java.util.Date date4 = localDate1.toDate();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate1.withPeriodAdded(readablePeriod5, (-1));
        org.joda.time.LocalDate localDate9 = localDate1.withYear(28);
        org.joda.time.Chronology chronology10 = localDate1.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test08842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08842");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1644573136387L, chronology1);
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test08843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08843");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getVariant();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale0.getDisplayVariant(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test08844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08844");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour(2);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours(23);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.minus(readablePeriod7);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test08845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08845");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DurationField durationField13 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfYear();
        java.lang.String str15 = chronology9.toString();
        org.joda.time.DurationField durationField16 = chronology9.weekyears();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test08846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08846");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(3254032200000L);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfDay();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test08847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08847");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        java.lang.String str9 = calendar1.getCalendarType();
        calendar1.set((int) (byte) 0, 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate19 = localDate14.withFieldAdded(durationFieldType17, (int) (short) 0);
        org.joda.time.LocalDate.Property property20 = localDate14.year();
        boolean boolean21 = calendar1.after((java.lang.Object) property20);
        long long22 = calendar1.getTimeInMillis();
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        calendar1.setTimeInMillis(1640822419994L);
        calendar1.set(575, 118, 46, 13821426, 118, 3);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.add((-1878), 169);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=575,MONTH=118,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=46,DAY_OF_YEAR=364,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=13821426,MINUTE=118,SECOND=3,MILLISECOND=994,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-125941737600000L) + "'", long22 == (-125941737600000L));
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
    }

    @Test
    public void test08848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08848");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate3.plusYears((int) '4');
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder8.build();
        java.util.Locale.Builder builder11 = builder8.setLanguage("");
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale locale16 = builder14.build();
        java.util.Locale.Builder builder17 = builder11.setLocale(locale16);
        boolean boolean18 = localDate3.equals((java.lang.Object) builder11);
        java.util.Locale.Builder builder19 = builder11.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.removeUnicodeLocaleAttribute("12:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 12:00:00.000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08849");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = property15.setCopy("java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1,DST_OFFSET=0]\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test08850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08850");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = dateTimeFieldType4.isSupported(chronology5);
        boolean boolean7 = localDate3.isSupported(dateTimeFieldType4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.minus(readablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMillis(32772);
        org.joda.time.DateTime dateTime17 = dateTime13.withMillis((long) ' ');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        boolean boolean25 = localDate21.isSupported(dateTimeFieldType22);
        int int26 = dateTime17.get(dateTimeFieldType22);
        boolean boolean27 = localDate3.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        boolean boolean32 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate localDate34 = localDate29.minusMonths(32770);
        org.joda.time.LocalTime localTime35 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long41 = dateTimeZone38.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str43 = dateTimeZone38.getNameKey(100L);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 10, dateTimeZone38);
        org.joda.time.DateTime dateTime45 = localDate34.toDateTime(localTime35, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight46 = dateTime45.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-2L) + "'", long41 == (-2L));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test08851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08851");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean5 = localTime3.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime3.minus(readablePeriod6);
        org.joda.time.LocalTime localTime9 = localTime3.plusSeconds(9);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology10);
        boolean boolean15 = durationFieldType0.isSupported(chronology10);
        java.lang.String str16 = durationFieldType0.toString();
        java.lang.String str17 = durationFieldType0.getName();
        java.lang.String str18 = durationFieldType0.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "eras" + "'", str16, "eras");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eras" + "'", str17, "eras");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eras" + "'", str18, "eras");
    }

    @Test
    public void test08852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08852");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusDays((-292275054));
        org.joda.time.DateTime dateTime7 = dateTime3.plus((-25L));
        org.joda.time.DateTime dateTime9 = dateTime3.withMillisOfDay(2022);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(5);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        java.util.Date date16 = localDate13.toDate();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate19 = localDate13.withPeriodAdded(readablePeriod17, (-1));
        org.joda.time.LocalDate localDate21 = localDate13.minusYears(6);
        org.joda.time.DateTime dateTime22 = dateTime11.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate26 = localDate24.minus(readablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight(dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.plus(readableDuration29);
        org.joda.time.DateTime dateTime33 = dateTime28.withDurationAdded((long) 0, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate37 = localDate35.minus(readablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readablePeriod40);
        org.joda.time.DateTime.Property property42 = dateTime41.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology44 = null;
        boolean boolean45 = dateTimeFieldType43.isSupported(chronology44);
        int int46 = dateTime41.get(dateTimeFieldType43);
        boolean boolean47 = dateTime28.isSupported(dateTimeFieldType43);
        boolean boolean48 = dateTime11.isSupported(dateTimeFieldType43);
        int int49 = dateTime11.getMonthOfYear();
        org.joda.time.DateTime dateTime51 = dateTime11.minus((-18930L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = dateTime11.withDayOfWeek(3044773);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3044773 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test08853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08853");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        boolean boolean6 = dateTimeFormatter5.isParser();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter5.getZone();
        long long9 = dateTimeZone7.previousTransition(35409602L);
        int int11 = dateTimeZone7.getOffsetFromLocal((long) 35550);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35409602L + "'", long9 == 35409602L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test08854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08854");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setExtension('a', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setExtension('#', "secondOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08855");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        java.util.Date date4 = localDate1.toDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate6.minus(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readablePeriod11);
        org.joda.time.DateTime.Property property13 = dateTime12.year();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        int int17 = localDate16.getWeekOfWeekyear();
        int int18 = property13.compareTo((org.joda.time.ReadablePartial) localDate16);
        int int19 = localDate16.getEra();
        org.joda.time.LocalDate.Property property20 = localDate16.dayOfMonth();
        java.util.Date date21 = localDate16.toDate();
        boolean boolean22 = date4.before(date21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromDateFields(date4);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfWeek();
        org.joda.time.LocalDate localDate25 = property24.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = property24.setCopy(3954);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3954 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test08856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08856");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        int int12 = dateTime9.getDayOfWeek();
        boolean boolean14 = dateTime9.isEqual((long) 0);
        org.joda.time.DateTime dateTime16 = dateTime9.withMillisOfSecond(23);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTime dateTime19 = dateTime16.minusMonths(32769);
        boolean boolean21 = dateTime16.isAfter((long) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime16.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = dateTime16.withDayOfWeek(8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test08857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08857");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale.Builder builder7 = builder3.setLanguage("");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.lang.String str9 = timeZone8.getID();
        int int10 = timeZone8.getRawOffset();
        boolean boolean11 = timeZone8.observesDaylightTime();
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str14 = locale12.getExtension('a');
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = locale12.getDisplayScript(locale16);
        java.lang.String str18 = locale12.getScript();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        boolean boolean28 = strSet21.addAll((java.util.Collection<java.lang.String>) strList26);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str31 = locale29.getExtension('a');
        java.util.Set<java.lang.String> strSet32 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str34 = locale29.getDisplayScript(locale33);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        boolean boolean37 = strSet21.equals((java.lang.Object) locale35);
        java.lang.String str38 = locale12.getDisplayVariant(locale35);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone8, locale35);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str42 = locale40.getExtension('a');
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleAttributes();
        java.util.Locale locale44 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str45 = locale40.getDisplayScript(locale44);
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean53 = localTime51.isSupported(durationFieldType52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalTime localTime55 = localTime51.minus(readablePeriod54);
        org.joda.time.LocalTime localTime57 = localTime51.plusSeconds(9);
        org.joda.time.Chronology chronology58 = localTime51.getChronology();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        long long62 = chronology58.add(readablePeriod59, (-2L), 1);
        long long66 = chronology58.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType48.getField(chronology58);
        java.util.Locale locale70 = java.util.Locale.KOREA;
        java.lang.String str71 = locale70.getDisplayVariant();
        java.lang.String str72 = dateTimeField68.getAsShortText(7, locale70);
        java.lang.String str73 = locale44.getDisplayName(locale70);
        java.lang.String str74 = locale35.getDisplayLanguage(locale70);
        java.util.Locale.Builder builder75 = builder7.setLocale(locale70);
        java.util.Locale locale76 = builder7.build();
        java.util.Locale.Builder builder77 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder79 = builder77.setLanguageTag("30 Dec 2021 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 30 Dec 2021 00:00:00 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644573253453,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=13,MILLISECOND=453,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-2L) + "'", long62 == (-2L));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 20L + "'", long66 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "7" + "'", str72, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str73, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\uc601\uc5b4" + "'", str74, "\uc601\uc5b4");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test08858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08858");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((int) '4');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        java.lang.String str11 = property10.toString();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        org.joda.time.LocalDateTime localDateTime13 = property10.roundFloorCopy();
        int int14 = localDateTime13.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[hourOfDay]" + "'", str11, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08859");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.plus(readablePeriod12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        boolean boolean17 = localDate13.isSupported(dateTimeFieldType14);
        int int18 = dateTime9.get(dateTimeFieldType14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate22 = localDate20.minus(readablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long30 = dateTimeZone28.nextTransition((long) 4);
        org.joda.time.Chronology chronology31 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField32 = chronology31.millis();
        boolean boolean33 = dateTimeFieldType14.isSupported(chronology31);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.withZoneRetainFields(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 4L + "'", long30 == 4L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test08860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08860");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfYear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        int int14 = dateTime11.getWeekOfWeekyear();
        org.joda.time.Chronology chronology15 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime11.withMillisOfSecond(9);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test08861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08861");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime7.withCenturyOfEra((int) (byte) 0);
        java.util.Date date12 = dateTime11.toDate();
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate15.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMillis(32772);
        org.joda.time.DateTime dateTime23 = dateTime19.withMillis((long) ' ');
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime27 = dateTime23.withDurationAdded((long) (short) 100, 35332195);
        org.joda.time.DateTime dateTime29 = dateTime27.plusWeeks(32);
        int int30 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime27);
        int int31 = dateTime27.getMinuteOfDay();
        int int32 = dateTime27.getCenturyOfEra();
        int int33 = dateTime27.getEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDate localDate37 = localDate35.minus(readablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.plus(readableDuration41);
        org.joda.time.DateMidnight dateMidnight43 = dateTime39.toDateMidnight();
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str47 = locale45.getExtension('a');
        java.util.Set<java.lang.String> strSet48 = locale45.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet49 = locale45.getUnicodeLocaleKeys();
        java.lang.String str50 = dateMidnight43.toString("20", locale45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTimeAtMidnight(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusDays((-292275054));
        org.joda.time.DateTime dateTime58 = dateTime54.plus((-25L));
        org.joda.time.DateTime dateTime60 = dateTime54.withMillisOfDay(2022);
        org.joda.time.DateTime dateTime62 = dateTime60.plusDays(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property64 = dateTime62.property(dateTimeFieldType63);
        boolean boolean65 = dateMidnight43.isSupported(dateTimeFieldType63);
        int int66 = dateTime27.get(dateTimeFieldType63);
        org.joda.time.DateTime dateTime68 = dateTime27.minusWeeks(1438);
        int int69 = dateTime68.getMinuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.DateTime dateTime72 = dateTime68.withPeriodAdded(readablePeriod70, 131);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Feb 12 23:59:59 GMT 22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1286 + "'", int31 == 1286);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "20" + "'", str50, "20");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1286 + "'", int66 == 1286);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1286 + "'", int69 == 1286);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test08862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08862");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        int int8 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusWeeks(19);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withYear((-1));
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusMonths(120);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-0001-01-01T00:00:00.010" + "'", str13, "-0001-01-01T00:00:00.010");
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test08863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08863");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minus(readableDuration11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(35500184);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371985593600010 + 21470511283200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08864");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.DurationField durationField7 = property6.getRangeDurationField();
        java.lang.String str8 = property6.getName();
        org.joda.time.DateTime dateTime9 = property6.withMaximumValue();
        org.joda.time.DateTime dateTime10 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime11 = property6.getDateTime();
        org.joda.time.DateTime dateTime12 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondOfMinute" + "'", str8, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test08865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08865");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(6);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime11.toDateTime(readableInstant13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusDays(50);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08866");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.withMinimumValue();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property15.getAsShortText(locale19);
        int int21 = property15.getLeapAmount();
        org.joda.time.LocalTime localTime22 = property15.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = localTime22.withMillisOfDay((-4));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test08867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08867");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.minus(readablePeriod7);
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        java.lang.String str10 = property9.getAsString();
        java.lang.String str11 = property9.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMillis(32772);
        org.joda.time.DateTime dateTime21 = dateTime17.withMillis((long) ' ');
        org.joda.time.DateTime dateTime23 = dateTime17.minusMillis(5);
        int int24 = dateTime17.getDayOfMonth();
        int int25 = property9.getDifference((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime27 = property9.addToCopy((int) (short) 0);
        org.joda.time.DateTime dateTime28 = property9.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 14, dateTimeZone29);
        int int31 = dateTime30.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime30.withWeekOfWeekyear(92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 92 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[year]" + "'", str11, "Property[year]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test08868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08868");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("Italy");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08869");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.Chronology chronology10 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.era();
        long long13 = dateTimeField11.remainder(1095330814L);
        int int15 = dateTimeField11.getMinimumValue(1644573158044L);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 62136692130814L + "'", long13 == 62136692130814L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08870");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Collection<java.lang.String> strCollection7 = null;
        java.lang.String str8 = java.util.Locale.lookupTag(languageRangeList6, strCollection7);
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        boolean boolean18 = strSet11.addAll((java.util.Collection<java.lang.String>) strList16);
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        boolean boolean28 = strSet21.addAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean29 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        boolean boolean42 = strSet35.addAll((java.util.Collection<java.lang.String>) strList40);
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList40);
        boolean boolean44 = strSet21.removeAll((java.util.Collection<java.lang.String>) strList43);
        java.util.Iterator<java.lang.String> strItor45 = strSet21.iterator();
        java.lang.String str46 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strSet21);
        org.joda.time.base.AbstractInterval[] abstractIntervalArray47 = new org.joda.time.base.AbstractInterval[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.base.AbstractInterval[] abstractIntervalArray48 = strSet21.toArray(abstractIntervalArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strItor45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(abstractIntervalArray47);
    }

    @Test
    public void test08871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08871");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(6);
        int int10 = localDateTime7.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMillis(292278993);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 1, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay((int) (byte) 10);
        int int18 = localDateTime17.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds(1907);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08872");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("1969-12-29T00:00:00.000+00:00:00.001");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test08873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08873");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime13 = localTime10.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime13.getZone();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = locale16.getExtension('a');
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str20 = dateTimeZone14.getShortName((long) ' ', locale16);
        long long23 = dateTimeZone14.adjustOffset((long) (byte) 10, false);
        boolean boolean24 = dateTimeZone14.isFixed();
        long long28 = dateTimeZone14.convertLocalToUTC((long) 32, true, (long) 70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter7.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        java.lang.Appendable appendable31 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean36 = localTime34.isSupported(durationFieldType35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalTime localTime38 = localTime34.minus(readablePeriod37);
        org.joda.time.LocalTime localTime40 = localTime34.plusSeconds(9);
        org.joda.time.Chronology chronology41 = localTime34.getChronology();
        org.joda.time.Chronology chronology42 = chronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.joda.time.Chronology chronology44 = chronology42.withUTC();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(chronology44);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter29.printTo(appendable31, (org.joda.time.ReadablePartial) localTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.001" + "'", str20, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 10L + "'", long23 == 10L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 31L + "'", long28 == 31L);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test08874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08874");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfMonth();
        boolean boolean10 = dateTime7.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime7.getZone();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        long long16 = dateTimeZone11.convertLocalToUTC((long) '#', false, 1644192000000L);
        long long20 = dateTimeZone11.convertLocalToUTC(10886432772L, false, (-125941737600001L));
        int int22 = dateTimeZone11.getStandardOffset(6296400000000122L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 34L + "'", long16 == 34L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 10886432771L + "'", long20 == 10886432771L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test08875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08875");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.Chronology chronology8 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withDayOfMonth((int) (short) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusSeconds((int) (short) -1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.year();
        int int21 = localDateTime19.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfCentury();
        int int23 = localDateTime19.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.minusWeeks(19);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = property26.setCopy((int) 'u');
        int int29 = localDateTime28.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.era();
        int int31 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime14.plusMinutes(364);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean39 = localTime37.isSupported(durationFieldType38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalTime localTime41 = localTime37.minus(readablePeriod40);
        org.joda.time.LocalTime localTime43 = localTime37.plusSeconds(9);
        org.joda.time.Chronology chronology44 = localTime37.getChronology();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(chronology44);
        org.joda.time.Chronology chronology46 = localTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology46);
        org.joda.time.DurationField durationField49 = chronology46.eras();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long54 = dateTimeZone51.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str56 = dateTimeZone51.getNameKey(100L);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(dateTimeZone51);
        java.lang.String str58 = dateTimeZone51.toString();
        int int60 = dateTimeZone51.getOffset((long) (short) 10);
        org.joda.time.Chronology chronology61 = chronology46.withZone(dateTimeZone51);
        long long65 = chronology46.add((long) 70, (long) 30, 0);
        org.joda.time.DateTimeField dateTimeField66 = chronology46.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = chronology46.secondOfMinute();
        org.joda.time.Chronology chronology68 = chronology46.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((java.lang.Object) localDateTime14, chronology46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 70 + "'", int21 == 70);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-2L) + "'", long54 == (-2L));
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.001" + "'", str58, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 70L + "'", long65 == 70L);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology68);
    }

    @Test
    public void test08876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08876");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour(12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withMillisOfSecond(35373897);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35373897 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test08877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08877");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime6 = localTime3.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long12 = dateTimeZone9.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str14 = dateTimeZone9.getNameKey(100L);
        org.joda.time.DateTime dateTime15 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((-19649634818000L), dateTimeZone9);
        org.joda.time.LocalTime localTime18 = localTime16.minusMillis(292278994);
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime21 = property19.withMaximumValue();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate25 = localDate23.minus(readablePeriod24);
        org.joda.time.LocalDate localDate27 = localDate23.plusMonths((int) (byte) 0);
        int int28 = localDate27.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property29 = localDate27.weekyear();
        org.joda.time.Chronology chronology30 = localDate27.getChronology();
        int int31 = localDate27.getYearOfEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(chronology32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate35 = localDate33.minus(readablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.Chronology chronology38 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.monthOfYear();
        long long41 = dateTimeField39.roundFloor(4L);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField39.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField39.getType();
        boolean boolean44 = localDate27.isSupported(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType43.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime47 = localTime21.withField(dateTimeFieldType43, 18000010);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-2L) + "'", long12 == (-2L));
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test08878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08878");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.plus(readablePeriod2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology5 = null;
        boolean boolean6 = dateTimeFieldType4.isSupported(chronology5);
        boolean boolean7 = localDate3.isSupported(dateTimeFieldType4);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.minus(readablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMillis(32772);
        org.joda.time.DateTime dateTime17 = dateTime13.withMillis((long) ' ');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology23 = null;
        boolean boolean24 = dateTimeFieldType22.isSupported(chronology23);
        boolean boolean25 = localDate21.isSupported(dateTimeFieldType22);
        int int26 = dateTime17.get(dateTimeFieldType22);
        boolean boolean27 = localDate3.isSupported(dateTimeFieldType22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        boolean boolean32 = localDate3.isEqual((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.LocalDate localDate34 = localDate29.minusMonths(32770);
        org.joda.time.LocalTime localTime35 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long41 = dateTimeZone38.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str43 = dateTimeZone38.getNameKey(100L);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 10, dateTimeZone38);
        org.joda.time.DateTime dateTime45 = localDate34.toDateTime(localTime35, dateTimeZone38);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder47.clear();
        java.util.Locale locale49 = builder47.build();
        java.util.Locale.Builder builder50 = builder47.clearExtensions();
        java.util.Locale.Builder builder51 = builder50.clearExtensions();
        java.util.Locale locale52 = builder50.build();
        java.lang.String str53 = dateTimeZone38.getName(0L, locale52);
        java.lang.String str55 = dateTimeZone38.getName(13821425L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-2L) + "'", long41 == (-2L));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.001" + "'", str53, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.001" + "'", str55, "+00:00:00.001");
    }

    @Test
    public void test08879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08879");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.minus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime4.plusSeconds(9);
        org.joda.time.Chronology chronology11 = localTime4.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfCentury();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfHalfday();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay(1644572968568L, chronology13);
        org.joda.time.DurationField durationField20 = chronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = chronology13.era();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) 1, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.year();
        org.joda.time.LocalDateTime localDateTime28 = property27.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = property27.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime31 = property27.addToCopy((long) 22);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusDays(35506970);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.parse("999");
        org.joda.time.DateTime dateTime40 = dateTime38.minusWeeks((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime38.getZone();
        org.joda.time.Chronology chronology42 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.dayOfMonth();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 100);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalTime localTime48 = localTime46.minus(readablePeriod47);
        org.joda.time.LocalTime localTime50 = localTime46.withMillisOfSecond(40);
        java.util.Calendar.Builder builder51 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder55 = builder51.setDate((-4), 6, 17);
        java.util.Calendar.Builder builder58 = builder55.set(1, 7);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology60);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean63 = localTime61.isSupported(durationFieldType62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalTime localTime65 = localTime61.minus(readablePeriod64);
        org.joda.time.LocalTime localTime67 = localTime61.plusSeconds(9);
        org.joda.time.Chronology chronology68 = localTime61.getChronology();
        org.joda.time.Chronology chronology69 = chronology68.withUTC();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.era();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology72);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean75 = localTime73.isSupported(durationFieldType74);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalTime localTime77 = localTime73.minus(readablePeriod76);
        int[] intArray79 = chronology69.get((org.joda.time.ReadablePartial) localTime73, 1L);
        java.util.Calendar.Builder builder80 = builder55.setFields(intArray79);
        int int81 = dateTimeField44.getMinimumValue((org.joda.time.ReadablePartial) localTime50, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray83 = dateTimeField21.set((org.joda.time.ReadablePartial) localDateTime35, 35332195, intArray79, 132);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 132 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test08880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08880");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        calendar3.set(53, 2, 59);
        java.util.Date date13 = new java.util.Date((int) (short) -1, 0, 0, 7, (-292275054));
        int int14 = date13.getDay();
        calendar3.setTime(date13);
        int int16 = date13.getDay();
        int int17 = date13.getDate();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTimeAtMidnight(dateTimeZone20);
        java.util.Date date22 = localDate19.toDate();
        date22.setDate(0);
        int int25 = date22.getMonth();
        date22.setDate((int) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        java.util.Date date32 = localDate29.toDate();
        date32.setDate(0);
        date32.setMinutes((-1));
        int int37 = date32.getHours();
        boolean boolean38 = date22.after(date32);
        date22.setDate(240);
        boolean boolean41 = date13.before(date22);
        date13.setYear(2021);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=-19776052440000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.006,offset=6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1343,MONTH=3,WEEK_OF_YEAR=17,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=110,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=6,SECOND=0,MILLISECOND=6,ZONE_OFFSET=6,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date13.toString(), "Wed Apr 20 12:06:00 GMT 3921");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Sun Aug 28 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Sun Jan 30 23:59:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test08881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08881");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay(100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour(12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusHours(30);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1, chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.year();
        int int22 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfMonth(22);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMonthOfYear(7);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusHours(1970);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.plusDays((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.LocalDateTime.Property property35 = localDateTime24.property(dateTimeFieldType34);
        int int36 = localDateTime11.get(dateTimeFieldType34);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime11.minus(readablePeriod37);
        int int39 = localDateTime38.getSecondOfMinute();
        int int40 = localDateTime38.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withYearOfEra(32769);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test08882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08882");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime21 = localTime19.minusMillis(35332195);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = localTime25.isSupported(durationFieldType26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalTime localTime29 = localTime25.minus(readablePeriod28);
        org.joda.time.LocalTime localTime31 = localTime25.plusSeconds(9);
        org.joda.time.Chronology chronology32 = localTime25.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(chronology32);
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfCentury();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = localTime36.getFieldType(1);
        org.joda.time.LocalTime localTime40 = localTime19.withField(dateTimeFieldType38, 43);
        org.joda.time.LocalTime.Property property41 = localTime19.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test08883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08883");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime.Property property16 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime17 = property16.withMinimumValue();
        org.joda.time.LocalTime localTime19 = property16.addCopy(12);
        int int20 = property16.getLeapAmount();
        java.lang.String str21 = property16.getAsText();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
    }

    @Test
    public void test08884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08884");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setLanguageTag("\u4e0a\u5348 09:51:02");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022/2/11 ?? 09:51:02 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
    }

    @Test
    public void test08885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08885");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((-4), 6, 17);
        java.util.Calendar.Builder builder7 = builder4.set(1, 7);
        java.util.Calendar.Builder builder9 = builder7.setLenient(false);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean14 = localTime12.isSupported(durationFieldType13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime12.minus(readablePeriod15);
        org.joda.time.LocalTime localTime18 = localTime12.plusSeconds(9);
        org.joda.time.Chronology chronology19 = localTime12.getChronology();
        org.joda.time.Chronology chronology20 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.era();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean26 = localTime24.isSupported(durationFieldType25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalTime localTime28 = localTime24.minus(readablePeriod27);
        int[] intArray30 = chronology20.get((org.joda.time.ReadablePartial) localTime24, 1L);
        java.util.Calendar.Builder builder31 = builder9.setFields(intArray30);
        java.util.Calendar calendar32 = builder9.build();
        java.util.Calendar.Builder builder36 = builder9.setWeekDate(240, (-993), (-709));
        java.util.Calendar.Builder builder37 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder41 = builder37.setDate((-4), 6, 17);
        java.util.Calendar.Builder builder44 = builder41.set(1, 7);
        java.util.Calendar.Builder builder46 = builder44.setLenient(false);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean51 = localTime49.isSupported(durationFieldType50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalTime localTime53 = localTime49.minus(readablePeriod52);
        org.joda.time.LocalTime localTime55 = localTime49.plusSeconds(9);
        org.joda.time.Chronology chronology56 = localTime49.getChronology();
        org.joda.time.Chronology chronology57 = chronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.era();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology60);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean63 = localTime61.isSupported(durationFieldType62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalTime localTime65 = localTime61.minus(readablePeriod64);
        int[] intArray67 = chronology57.get((org.joda.time.ReadablePartial) localTime61, 1L);
        java.util.Calendar.Builder builder68 = builder46.setFields(intArray67);
        java.util.Calendar.Builder builder72 = builder46.setWeekDate(60, 17, (int) (short) 100);
        java.util.Calendar.Builder builder77 = builder72.setTimeOfDay(827, 0, 39600001, 35500184);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology79);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalTime localTime82 = localTime80.plus(readablePeriod81);
        org.joda.time.LocalTime localTime84 = localTime80.withMillisOfDay(8);
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.LocalTime localTime87 = localTime80.withPeriodAdded(readablePeriod85, 7);
        int[] intArray88 = localTime87.getValues();
        java.util.Calendar.Builder builder89 = builder77.setFields(intArray88);
        java.util.Calendar.Builder builder90 = builder9.setFields(intArray88);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-61929446400000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=6,WEEK_OF_YEAR=30,WEEK_OF_MONTH=4,DAY_OF_MONTH=17,DAY_OF_YEAR=198,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime84);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test08886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08886");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology9.add(readablePeriod10, (-2L), 1);
        long long17 = chronology9.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology9.getZone();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.LocalTime localTime21 = localTime19.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime23 = localTime21.withHourOfDay(15);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType24.getField(chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean31 = localTime29.isSupported(durationFieldType30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalTime localTime33 = localTime29.minus(readablePeriod32);
        java.util.Locale locale35 = java.util.Locale.KOREA;
        java.lang.String str36 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localTime33, (int) (short) -1, locale35);
        java.lang.String str37 = localTime33.toString();
        int int38 = localTime33.size();
        org.joda.time.LocalTime.Property property39 = localTime33.hourOfDay();
        org.joda.time.LocalTime.Property property40 = localTime33.millisOfDay();
        org.joda.time.LocalTime localTime41 = property40.withMinimumValue();
        org.joda.time.LocalTime localTime43 = property40.addCopy(12);
        org.joda.time.LocalTime localTime45 = localTime43.withSecondOfMinute(39);
        org.joda.time.LocalTime localTime47 = localTime45.plusMillis(0);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        boolean boolean49 = localTime47.isSupported(durationFieldType48);
        boolean boolean50 = localTime23.isSupported(durationFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 20L + "'", long17 == 20L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-1" + "'", str36, "-1");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "00:00:00.001" + "'", str37, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test08887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08887");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.Interval interval7 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = property6.addToCopy(0L);
        org.joda.time.DateTime.Property property10 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear(25);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test08888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08888");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withMonthOfYear(9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusMinutes(6);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusHours(55);
        org.joda.time.LocalDateTime.Property property19 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withMillisOfSecond(3954);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3954 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test08889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08889");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime21 = property15.addWrapFieldToCopy((-292275054));
        org.joda.time.LocalTime localTime23 = property15.setCopy("0");
        org.joda.time.DateTimeField dateTimeField24 = property15.getField();
        org.joda.time.DateTimeField dateTimeField25 = property15.getField();
        org.joda.time.LocalTime localTime27 = property15.addWrapFieldToCopy(990);
        java.lang.String str28 = property15.getAsText();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
    }

    @Test
    public void test08890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08890");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.withMinimumValue();
        int int19 = localTime18.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = localTime18.getFieldType(0);
        java.lang.String str22 = localTime18.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = localTime25.isSupported(durationFieldType26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalTime localTime29 = localTime25.minus(readablePeriod28);
        org.joda.time.LocalTime localTime31 = localTime25.plusSeconds(9);
        org.joda.time.Chronology chronology32 = localTime25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = chronology32.add(readablePeriod33, (-2L), 1);
        long long40 = chronology32.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTimeZone dateTimeZone41 = chronology32.getZone();
        long long43 = dateTimeZone41.convertUTCToLocal((long) 19);
        org.joda.time.DateTime dateTime44 = localTime18.toDateTimeToday(dateTimeZone41);
        org.joda.time.LocalTime localTime46 = localTime18.plusHours(508);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "00:00:00.001" + "'", str22, "00:00:00.001");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-2L) + "'", long36 == (-2L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 20L + "'", long40 == 20L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 19L + "'", long43 == 19L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime46);
    }

    @Test
    public void test08891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08891");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u4e0a\u5348 09:52:32", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022/2/11??09:52:32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08892");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property8 = localDate1.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property8.addToCopy(1970);
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property13 = localDate11.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08893");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTime dateTime9 = dateTime7.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime7.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        int int12 = dateTime7.get(dateTimeFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType11.getDurationType();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T00:00:00.000+00:00:00.001" + "'", str10, "2022-02-11T00:00:00.000+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 24 + "'", int12 == 24);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test08894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08894");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean6 = localTime4.isSupported(durationFieldType5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime4.minus(readablePeriod7);
        org.joda.time.LocalTime localTime10 = localTime4.plusSeconds(9);
        org.joda.time.Chronology chronology11 = localTime4.getChronology();
        org.joda.time.Chronology chronology12 = chronology11.withUTC();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType1.getField(chronology12);
        org.joda.time.DurationField durationField15 = chronology12.eras();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(20L, chronology12);
        long long20 = chronology12.add(220924798122L, (-2208801599991L), 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 220924798122L + "'", long20 == 220924798122L);
    }

    @Test
    public void test08895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08895");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Date date5 = localDate2.toDate();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = property14.compareTo((org.joda.time.ReadablePartial) localDate17);
        int int20 = localDate17.getEra();
        org.joda.time.LocalDate.Property property21 = localDate17.dayOfMonth();
        java.util.Date date22 = localDate17.toDate();
        boolean boolean23 = date5.before(date22);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date5);
        java.util.Calendar.Builder builder26 = builder0.setInstant((long) 500);
        java.util.Calendar calendar27 = builder26.build();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=500,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=500,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test08896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08896");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime10 = dateTime7.withDayOfMonth(3);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((-4));
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMillis(32772);
        org.joda.time.DateTime dateTime22 = dateTime18.withMillis((long) ' ');
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime22.withDurationAdded((long) (short) 100, 35332195);
        org.joda.time.DateTime dateTime28 = dateTime26.plusWeeks(32);
        boolean boolean29 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime28.withDayOfMonth(38014620);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38014620 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08897");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusDays(1970);
        int int14 = dateTime9.getSecondOfDay();
        int int15 = dateTime9.getMillisOfDay();
        java.util.Set<java.lang.String> strSet16 = java.util.Calendar.getAvailableCalendarTypes();
        boolean boolean17 = dateTime9.equals((java.lang.Object) strSet16);
        // The following exception was thrown during execution in test generation
        try {
            strSet16.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86399 + "'", int14 == 86399);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 86399990 + "'", int15 == 86399990);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test08898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08898");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtMidnight(dateTimeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.lang.String str8 = timeZone7.getID();
        java.time.ZoneId zoneId9 = timeZone7.toZoneId();
        boolean boolean10 = dateTime6.equals((java.lang.Object) timeZone7);
        java.util.Date date17 = new java.util.Date(32, (int) (short) 0, 4, 15, 15, 3);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        boolean boolean19 = dateTime6.equals((java.lang.Object) date17);
        org.joda.time.LocalDate localDate20 = dateTime6.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(2275724944232L, chronology21);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT" + "'", str8, "GMT");
        org.junit.Assert.assertNotNull(zoneId9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Jan 04 15:15:03 GMT 1932");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test08899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08899");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.lang.String str5 = timeZone4.getID();
        java.time.ZoneId zoneId6 = timeZone4.toZoneId();
        int int8 = timeZone4.getOffset((long) (short) -1);
        boolean boolean9 = timeZone3.hasSameRules(timeZone4);
        java.lang.String str10 = timeZone3.getID();
        boolean boolean11 = timeZone3.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "GMT" + "'", str10, "GMT");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test08900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08900");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.LocalDate localDate9 = property7.addToCopy((int) (byte) -1);
        int int10 = property7.getMinimumValueOverall();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.lang.String str17 = nameProvider12.getName(locale14, "secondOfMinute", "");
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean23 = localTime21.isSupported(durationFieldType22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime21.minus(readablePeriod24);
        org.joda.time.LocalTime localTime27 = localTime21.plusSeconds(9);
        org.joda.time.Chronology chronology28 = localTime21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology28.add(readablePeriod29, (-2L), 1);
        long long36 = chronology28.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType18.getField(chronology28);
        java.util.Locale locale40 = java.util.Locale.KOREA;
        java.lang.String str41 = locale40.getDisplayVariant();
        java.lang.String str42 = dateTimeField38.getAsShortText(7, locale40);
        java.lang.String str45 = nameProvider12.getShortName(locale40, "1970-01-01T00:00:32.010", "yearOfEra");
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean53 = localTime51.isSupported(durationFieldType52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalTime localTime55 = localTime51.minus(readablePeriod54);
        java.util.Locale locale57 = java.util.Locale.KOREA;
        java.lang.String str58 = dateTimeField48.getAsShortText((org.joda.time.ReadablePartial) localTime55, (int) (short) -1, locale57);
        int int60 = dateTimeField48.getMinimumValue(0L);
        long long63 = dateTimeField48.getDifferenceAsLong((long) (short) -1, (long) (byte) 0);
        int int64 = dateTimeField48.getMaximumValue();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology67);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        org.joda.time.LocalTime localTime70 = localTime68.plus(readablePeriod69);
        java.lang.String str71 = localTime70.toString();
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str74 = localTime70.toString("1970", locale73);
        java.lang.String str75 = dateTimeField48.getAsText((int) (byte) 1, locale73);
        java.lang.String str76 = locale40.getDisplayCountry(locale73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate77 = property7.setCopy("", locale40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-2L) + "'", long32 == (-2L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 20L + "'", long36 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "7" + "'", str42, "7");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-1" + "'", str58, "-1");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 999 + "'", int64 == 999);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "00:00:00.001" + "'", str71, "00:00:00.001");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970" + "'", str74, "1970");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "S\374dkorea" + "'", str76, "S\374dkorea");
    }

    @Test
    public void test08901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08901");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.addCopy(0);
        org.joda.time.DateTimeField dateTimeField20 = property15.getField();
        int int21 = property15.getMinimumValue();
        org.joda.time.LocalTime localTime23 = property15.addWrapFieldToCopy(308);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(1644572946310L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDate25.getFieldType(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = localTime23.withField(dateTimeFieldType27, 35492129);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
    }

    @Test
    public void test08902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08902");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        java.lang.String str9 = calendar1.getCalendarType();
        calendar1.set((int) (byte) 0, 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate19 = localDate14.withFieldAdded(durationFieldType17, (int) (short) 0);
        org.joda.time.LocalDate.Property property20 = localDate14.year();
        boolean boolean21 = calendar1.after((java.lang.Object) property20);
        long long22 = calendar1.getTimeInMillis();
        java.util.TimeZone timeZone23 = calendar1.getTimeZone();
        int int24 = calendar1.getWeeksInWeekYear();
        calendar1.setMinimalDaysInFirstWeek(35410054);
        calendar1.clear();
        boolean boolean28 = calendar1.isLenient();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=35410054,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-125941737600000L) + "'", long22 == (-125941737600000L));
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test08903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08903");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        java.lang.String str19 = property18.getAsString();
        java.lang.String str20 = property18.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMillis(32772);
        org.joda.time.DateTime dateTime30 = dateTime26.withMillis((long) ' ');
        org.joda.time.DateTime dateTime32 = dateTime26.minusMillis(5);
        int int33 = dateTime26.getDayOfMonth();
        int int34 = property18.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime36 = dateTime26.plusMonths(1970);
        boolean boolean37 = dateTime5.equals((java.lang.Object) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime26.getZone();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDate localDate44 = localDate42.minus(readablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.minus(readablePeriod47);
        org.joda.time.DateMidnight dateMidnight49 = dateTime48.toDateMidnight();
        org.joda.time.DateTime dateTime50 = dateTime48.withEarlierOffsetAtOverlap();
        long long51 = dateTime50.getMillis();
        org.joda.time.DateTime dateTime53 = dateTime50.withDayOfMonth(2);
        org.joda.time.DateTime dateTime55 = dateTime50.withCenturyOfEra(59);
        org.joda.time.DateTime dateTime57 = dateTime50.withMillis((long) 23);
        boolean boolean58 = dateTime40.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[year]" + "'", str20, "Property[year]");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 11 + "'", int33 == 11);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1644537599999L + "'", long51 == 1644537599999L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
    }

    @Test
    public void test08904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08904");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime21 = localTime19.minusMillis(35332195);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = localTime21.get(dateTimeFieldType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
    }

    @Test
    public void test08905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08905");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long4 = dateTimeZone1.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) 'a');
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long14 = dateTimeZone11.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone11);
        int int17 = dateTimeZone11.getOffset((long) 'a');
        int int19 = dateTimeZone11.getStandardOffset((long) (-4));
        long long21 = dateTimeZone11.convertUTCToLocal((long) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime9.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime24 = dateTime9.withYearOfEra(1092);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-2L) + "'", long4 == (-2L));
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-2L) + "'", long14 == (-2L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test08906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08906");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateMidnight dateMidnight9 = dateTime5.toDateMidnight();
        org.joda.time.DateTime dateTime11 = dateTime5.plusHours((int) (short) -1);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime11.withMillis(110332799994L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test08907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08907");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime20 = property15.addCopy(86399);
        org.joda.time.DateTimeField dateTimeField21 = property15.getField();
        org.joda.time.LocalTime localTime22 = property15.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime24 = property15.addCopy((long) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test08908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08908");
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronolgy();
        boolean boolean10 = dateTimeFormatter8.isParser();
        org.joda.time.Chronology chronology11 = dateTimeFormatter8.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeFormatter12.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(308, 35490285, 35468, 989, 3, (int) '4', dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 989 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
    }

    @Test
    public void test08909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08909");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTime dateTime10 = dateTime7.plusDays(2022);
        org.joda.time.DateTime dateTime12 = dateTime7.withWeekyear(12);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime12.minusSeconds(52);
        org.joda.time.DateTime dateTime17 = dateTime12.plusMonths(14);
        org.joda.time.DateTime dateTime18 = dateTime12.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime12.toYearMonthDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate22.minus(readablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTimeAtMidnight(dateTimeZone25);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long32 = dateTimeZone30.nextTransition((long) 4);
        org.joda.time.Chronology chronology33 = chronology27.withZone(dateTimeZone30);
        long long35 = dateTimeZone30.convertUTCToLocal((-1L));
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 0, dateTimeZone30);
        org.joda.time.DateTime dateTime38 = dateTime36.minusHours((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime36.plus(readablePeriod39);
        boolean boolean41 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime36);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 4L + "'", long32 == 4L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test08910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08910");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale locale6 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder2.setRegion("Thursday");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Thursday [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test08911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08911");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate1.withWeekyear(7);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekOfWeekyear(9);
        org.joda.time.Chronology chronology8 = localDate5.getChronology();
        org.joda.time.LocalDate.Property property9 = localDate5.weekOfWeekyear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.weekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMinutes((-1));
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.plus(readableDuration25);
        org.joda.time.DateTime.Property property27 = dateTime21.secondOfMinute();
        long long28 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        java.lang.Class<?> wildcardClass29 = property9.getClass();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-105137L) + "'", long28 == (-105137L));
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test08912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08912");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property8 = localDate1.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate10.minus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtMidnight(dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime18.withMonthOfYear(5);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long28 = dateTimeZone25.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str30 = dateTimeZone25.getNameKey(100L);
        org.joda.time.DateTime dateTime31 = dateTime22.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime32 = localDate1.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.LocalDate localDate34 = localDate1.withYearOfEra(42);
        org.joda.time.LocalDate.Property property35 = localDate34.era();
        org.joda.time.LocalDate localDate36 = property35.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate37 = property35.roundHalfEvenCopy();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDate localDate43 = localDate41.minus(readablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.Chronology chronology46 = localDate43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long51 = dateTimeZone49.nextTransition((long) 4);
        org.joda.time.Chronology chronology52 = chronology46.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField53 = chronology46.secondOfMinute();
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("");
        java.lang.String str57 = dateTimeField53.getAsText((int) '4', locale56);
        java.util.Locale locale58 = locale56.stripExtensions();
        java.util.Locale locale59 = locale58.stripExtensions();
        java.lang.String str62 = nameProvider39.getName(locale58, "\u82f1\u8a9e", "halfdayOfDay");
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str66 = nameProvider39.getShortName(locale63, "32770", "hourOfDay");
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("Fri");
        java.lang.String str71 = nameProvider39.getShortName(locale68, "February", "19");
        java.lang.String str72 = locale68.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate73 = property35.setCopy("DE", locale68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DE\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-2L) + "'", long28 == (-2L));
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 4L + "'", long51 == 4L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "52" + "'", str57, "52");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fri");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test08913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08913");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMillis(32772);
        org.joda.time.DateTime dateTime9 = dateTime5.withMillis((long) ' ');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.plus(readablePeriod12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType14.isSupported(chronology15);
        boolean boolean17 = localDate13.isSupported(dateTimeFieldType14);
        int int18 = dateTime9.get(dateTimeFieldType14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate22 = localDate20.minus(readablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long30 = dateTimeZone28.nextTransition((long) 4);
        org.joda.time.Chronology chronology31 = chronology25.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField32 = chronology31.millis();
        boolean boolean33 = dateTimeFieldType14.isSupported(chronology31);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.hourOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 4L + "'", long30 == 4L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test08914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08914");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.lang.String str7 = timeZone6.getID();
        java.time.ZoneId zoneId8 = timeZone6.toZoneId();
        boolean boolean9 = dateTime5.equals((java.lang.Object) timeZone6);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) dateTime5);
        org.joda.time.DateTime dateTime12 = dateTime5.withDayOfYear(10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readablePeriod19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime22.withMonthOfYear(5);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long32 = dateTimeZone29.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str34 = dateTimeZone29.getNameKey(100L);
        org.joda.time.DateTime dateTime35 = dateTime26.withZoneRetainFields(dateTimeZone29);
        boolean boolean36 = dateTime35.isAfterNow();
        org.joda.time.DateTime dateTime38 = dateTime35.plusMonths(8);
        int int39 = dateTime38.getHourOfDay();
        int int40 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime38.minus(readableDuration41);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-2L) + "'", long32 == (-2L));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 23 + "'", int39 == 23);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test08915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08915");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguageTag("Property[dayOfYear]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Property[dayOfYear] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08916");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        java.lang.String str9 = calendar1.getCalendarType();
        calendar1.set((int) (byte) 0, 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate19 = localDate14.withFieldAdded(durationFieldType17, (int) (short) 0);
        org.joda.time.LocalDate.Property property20 = localDate14.year();
        boolean boolean21 = calendar1.after((java.lang.Object) property20);
        long long22 = calendar1.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = calendar1.getMaximum(35498804);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35498804");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-125941737600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-125941737600000L) + "'", long22 == (-125941737600000L));
    }

    @Test
    public void test08917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08917");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.plus(readableDuration7);
        org.joda.time.DateTime dateTime9 = dateTime5.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test08918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08918");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale0);
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtMidnight(dateTimeZone5);
        java.util.Date date7 = localDate4.toDate();
        date7.setDate(0);
        int int10 = date7.getMonth();
        date7.setDate((int) (byte) -1);
        java.lang.String str13 = date7.toLocaleString();
        calendar2.setTime(date7);
        java.util.TimeZone timeZone15 = calendar2.getTimeZone();
        java.lang.String str16 = timeZone15.getID();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1640822400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2021,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Dec 30 00:00:00 GMT 2021");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2021/12/30 0:00:00" + "'", str13, "2021/12/30 0:00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GMT" + "'", str16, "GMT");
    }

    @Test
    public void test08919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08919");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((-4), 6, 17);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate6.minus(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.Chronology chronology11 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long16 = dateTimeZone14.nextTransition((long) 4);
        org.joda.time.Chronology chronology17 = chronology11.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.secondOfMinute();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("");
        java.lang.String str22 = dateTimeField18.getAsText((int) '4', locale21);
        java.util.Locale locale23 = locale21.stripExtensions();
        java.util.Calendar.Builder builder24 = builder0.setLocale(locale23);
        java.util.Calendar.Builder builder28 = builder24.setDate(999, 0, 82800000);
        java.util.Calendar.Builder builder32 = builder28.setDate(0, 240, 23);
        java.util.Calendar calendar33 = builder32.build();
        java.util.Calendar calendar34 = builder32.build();
        java.lang.Object obj35 = null;
        boolean boolean36 = calendar34.before(obj35);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4L + "'", long16 == 4L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "52" + "'", str22, "52");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-61534339200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=20,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=23,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-61534339200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=20,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=23,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test08920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08920");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.lang.String str7 = timeZone6.getID();
        java.time.ZoneId zoneId8 = timeZone6.toZoneId();
        boolean boolean9 = dateTime5.equals((java.lang.Object) timeZone6);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) dateTime5);
        org.joda.time.DateTime.Property property11 = dateTime5.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime5.plusWeeks(32400010);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08921");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setExtension('x', "CA");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08922");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.lang.String str7 = timeZone6.getID();
        java.time.ZoneId zoneId8 = timeZone6.toZoneId();
        boolean boolean9 = dateTime5.equals((java.lang.Object) timeZone6);
        java.util.Date date16 = new java.util.Date(32, (int) (short) 0, 4, 15, 15, 3);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.fromDateFields(date16);
        boolean boolean18 = dateTime5.equals((java.lang.Object) date16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean20 = dateTime5.isSupported(dateTimeFieldType19);
        int int21 = dateTime5.getDayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime5.minusWeeks(9);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis(35373897);
        org.joda.time.DateTime dateTime26 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime23.weekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT" + "'", str7, "GMT");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(date16.toString(), "Mon Jan 04 15:15:03 GMT 1932");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test08923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08923");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime9.withMonthOfYear(5);
        org.joda.time.DateTime.Property property14 = dateTime9.minuteOfDay();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.DateTime dateTime17 = property14.setCopy(100);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfWeek();
        java.util.Date date19 = dateTime17.toDate();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDate localDate23 = localDate21.minus(readablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readablePeriod26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTime.Property property30 = dateTime27.dayOfYear();
        boolean boolean31 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime27);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime27.toGregorianCalendar();
        int int33 = gregorianCalendar32.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1439" + "'", str15, "1439");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Feb 10 01:40:59 GMT 2022");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test08924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08924");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long11 = dateTimeZone9.nextTransition((long) 4);
        org.joda.time.Chronology chronology12 = chronology6.withZone(dateTimeZone9);
        org.joda.time.DurationField durationField13 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08925");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate5.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtMidnight(dateTimeZone8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.minus(readablePeriod10);
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        java.lang.String str13 = property12.getAsString();
        java.lang.String str14 = property12.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate16.minus(readablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMillis(32772);
        org.joda.time.DateTime dateTime24 = dateTime20.withMillis((long) ' ');
        org.joda.time.DateTime dateTime26 = dateTime20.minusMillis(5);
        int int27 = dateTime20.getDayOfMonth();
        int int28 = property12.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime30 = property12.addToCopy((int) (short) 0);
        java.util.Locale locale31 = java.util.Locale.US;
        int int32 = property12.getMaximumShortTextLength(locale31);
        java.lang.String str33 = dateTimeZone1.getName(1644572942340L, locale31);
        java.lang.String str34 = locale31.getDisplayScript();
        java.lang.String str35 = locale31.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[year]" + "'", str14, "Property[year]");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 11 + "'", int27 == 11);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.006" + "'", str33, "+00:00:00.006");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eng" + "'", str35, "eng");
    }

    @Test
    public void test08926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08926");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Date date5 = localDate2.toDate();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = property14.compareTo((org.joda.time.ReadablePartial) localDate17);
        int int20 = localDate17.getEra();
        org.joda.time.LocalDate.Property property21 = localDate17.dayOfMonth();
        java.util.Date date22 = localDate17.toDate();
        boolean boolean23 = date5.before(date22);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date5);
        java.util.Calendar.Builder builder26 = builder0.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(true);
        java.util.Calendar.Builder builder30 = builder26.setInstant(1L);
        java.util.Calendar.Builder builder32 = builder30.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder34 = builder32.setCalendarType("\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: ??????????");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test08927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08927");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((int) '4');
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.monthOfYear();
        long long15 = chronology10.add(120L, (long) (byte) 100, 3);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.yearOfCentury();
        long long19 = dateTimeField17.roundCeiling(1644573006830L);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 420L + "'", long15 == 420L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1672531200000L + "'", long19 == 1672531200000L);
    }

    @Test
    public void test08928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08928");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((int) '4');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        java.lang.String str11 = property10.toString();
        java.lang.String str12 = property10.getAsString();
        org.joda.time.LocalDateTime localDateTime14 = property10.addWrapFieldToCopy(366);
        int int15 = localDateTime14.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMonths(2022);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.minusWeeks((int) (byte) 100);
        int int20 = localDateTime19.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[hourOfDay]" + "'", str11, "Property[hourOfDay]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test08929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08929");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withWeekOfWeekyear(19);
        int int6 = localDateTime5.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withMillisOfDay(32772);
        int int9 = localDateTime8.getSecondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withPeriodAdded(readablePeriod10, 12);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfEra(2099);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32 + "'", int9 == 32);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08930");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean5 = localTime3.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime3.minus(readablePeriod6);
        org.joda.time.LocalTime localTime9 = localTime3.plusSeconds(9);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology10.add(readablePeriod11, (-2L), 1);
        long long18 = chronology10.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField21 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField22 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField23 = chronology10.millisOfSecond();
        org.joda.time.DurationField durationField24 = chronology10.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField27 = chronology10.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-2L) + "'", long14 == (-2L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 20L + "'", long18 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test08931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08931");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(chronology2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        java.util.Date date6 = localDate3.toDate();
        calendar1.setTime(date6);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.clear();
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        calendar1.setTimeInMillis(1644572946564L);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        java.util.Date date18 = localDate15.toDate();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate22 = localDate20.minus(readablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.minus(readablePeriod25);
        org.joda.time.DateTime.Property property27 = dateTime26.year();
        java.lang.String str28 = property27.getAsString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        int int31 = localDate30.getWeekOfWeekyear();
        int int32 = property27.compareTo((org.joda.time.ReadablePartial) localDate30);
        int int33 = localDate30.getEra();
        org.joda.time.LocalDate.Property property34 = localDate30.dayOfMonth();
        java.util.Date date35 = localDate30.toDate();
        boolean boolean36 = date18.before(date35);
        java.util.Calendar.Builder builder37 = builder13.setInstant(date18);
        int int38 = date18.getSeconds();
        calendar1.setTime(date18);
        int int40 = calendar1.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = calendar1.getGreatestMinimum(2100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test08932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08932");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.DateTime dateTime10 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime11 = property8.withMinimumValue();
        java.lang.String str12 = property8.toString();
        org.joda.time.DateTime dateTime14 = property8.addToCopy(54000001);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withWeekOfWeekyear((-27409550));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27409550 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[year]" + "'", str12, "Property[year]");
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test08933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08933");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.setLanguage("");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.Chronology chronology12 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.monthOfYear();
        long long15 = dateTimeField13.roundFloor(4L);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = localDate17.getMonthOfYear();
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.lang.String str22 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDate17, 2, locale21);
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTimeAtMidnight(dateTimeZone26);
        java.util.Date date28 = localDate25.toDate();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(chronology29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate32 = localDate30.minus(readablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtMidnight(dateTimeZone33);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readablePeriod35);
        org.joda.time.DateTime.Property property37 = dateTime36.year();
        java.lang.String str38 = property37.getAsString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology39);
        int int41 = localDate40.getWeekOfWeekyear();
        int int42 = property37.compareTo((org.joda.time.ReadablePartial) localDate40);
        int int43 = localDate40.getEra();
        org.joda.time.LocalDate.Property property44 = localDate40.dayOfMonth();
        java.util.Date date45 = localDate40.toDate();
        boolean boolean46 = date28.before(date45);
        java.util.Calendar.Builder builder47 = builder23.setInstant(date28);
        java.util.Calendar.Builder builder49 = builder23.setLenient(true);
        java.util.Calendar.Builder builder51 = builder49.setLenient(true);
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str54 = locale52.getExtension('a');
        java.util.Set<java.lang.String> strSet55 = locale52.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder56 = builder49.setLocale(locale52);
        java.util.Locale.Category category57 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDate localDate61 = localDate59.minus(readablePeriod60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate61.toDateTimeAtMidnight(dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readablePeriod64);
        org.joda.time.DateTime.Property property66 = dateTime65.year();
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str68 = property66.getAsShortText(locale67);
        java.lang.String str69 = locale67.getVariant();
        java.util.Locale.setDefault(category57, locale67);
        java.util.Locale locale71 = java.util.Locale.getDefault(category57);
        java.lang.String str72 = locale71.getDisplayLanguage();
        java.util.Calendar.Builder builder73 = builder56.setLocale(locale71);
        java.util.Locale locale74 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str75 = locale71.getDisplayVariant(locale74);
        java.lang.String str76 = locale21.getDisplayName(locale74);
        java.util.Locale.Builder builder77 = builder2.setLocale(locale21);
        java.util.Locale locale79 = new java.util.Locale("yearOfEra");
        java.util.Set<java.lang.String> strSet80 = locale79.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder81 = builder77.setLocale(locale79);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: yearofera [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u6708" + "'", str22, "\u6708");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(date45);
        org.junit.Assert.assertEquals(date45.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + category57 + "' != '" + java.util.Locale.Category.FORMAT + "'", category57.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022" + "'", str68, "2022");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u4e2d\u56fd\u8a9e" + "'", str72, "\u4e2d\u56fd\u8a9e");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u65e5\u6587\u65e5\u672c)" + "'", str76, "\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertEquals(locale79.toString(), "yearofera");
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test08934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08934");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property8 = localDate1.dayOfWeek();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate10.minus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtMidnight(dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readablePeriod15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime18.withMonthOfYear(5);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long28 = dateTimeZone25.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str30 = dateTimeZone25.getNameKey(100L);
        org.joda.time.DateTime dateTime31 = dateTime22.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime32 = localDate1.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.LocalDate.Property property33 = localDate1.year();
        org.joda.time.LocalDate localDate34 = property33.roundCeilingCopy();
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clear();
        java.util.Locale locale38 = builder36.build();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale39.getDisplayVariant();
        java.util.Locale.Builder builder41 = builder36.setLocale(locale39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = property33.setCopy("de", locale39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"de\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-2L) + "'", long28 == (-2L));
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test08935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08935");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime20 = property15.addCopy(86399);
        org.joda.time.LocalTime localTime21 = property15.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime23 = property15.addCopy(79200000);
        org.joda.time.LocalTime localTime25 = property15.addCopy((long) 79500000);
        org.joda.time.DateTime dateTime26 = localTime25.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test08936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08936");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime10 = dateTime5.withDurationAdded((long) 0, (int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate12.minus(readablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTimeAtMidnight(dateTimeZone15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        org.joda.time.DateTime.Property property19 = dateTime18.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology21 = null;
        boolean boolean22 = dateTimeFieldType20.isSupported(chronology21);
        int int23 = dateTime18.get(dateTimeFieldType20);
        boolean boolean24 = dateTime5.isSupported(dateTimeFieldType20);
        org.joda.time.DateTime.Property property25 = dateTime5.dayOfWeek();
        org.joda.time.LocalDate localDate26 = dateTime5.toLocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.yearOfEra();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight();
        int int29 = localDate26.getYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
    }

    @Test
    public void test08937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08937");
        java.util.Date date6 = new java.util.Date(79500, (int) (short) 100, (-4), 2956560, 93, 340);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Aug 07 01:38:40 GMT 81745");
    }

    @Test
    public void test08938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08938");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-2), 35545318, 84, 3044773, 340, 2041);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3044773 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08939");
        java.util.Date date1 = new java.util.Date(1644573214644L);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:53:34 GMT 2022");
    }

    @Test
    public void test08940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08940");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        int int12 = dateTime9.getDayOfWeek();
        boolean boolean14 = dateTime9.isEqual((long) 0);
        org.joda.time.DateTime dateTime16 = dateTime9.withMillisOfSecond(23);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.plus(readablePeriod20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate28 = localDate23.withFieldAdded(durationFieldType26, (int) (short) 0);
        org.joda.time.LocalDate localDate30 = localDate21.withFieldAdded(durationFieldType26, 19);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDate localDate34 = localDate32.minus(readablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime36.minus(readablePeriod37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime40.withMonthOfYear(5);
        org.joda.time.DateTime.Property property45 = dateTime44.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long50 = dateTimeZone47.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str52 = dateTimeZone47.getNameKey(100L);
        org.joda.time.DateTime dateTime53 = dateTime44.withZoneRetainFields(dateTimeZone47);
        boolean boolean54 = dateTime53.isAfterNow();
        org.joda.time.DateTime dateTime55 = localDate21.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDate localDate59 = localDate57.minus(readablePeriod58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTimeAtMidnight(dateTimeZone60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.minus(readablePeriod62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateTime65.toDateTime(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime67.withWeekOfWeekyear((int) '4');
        boolean boolean70 = dateTime53.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime71 = dateTime67.withEarlierOffsetAtOverlap();
        boolean boolean72 = dateTime16.isBefore((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property73 = dateTime67.millisOfSecond();
        org.joda.time.DateTime dateTime75 = dateTime67.withMillisOfSecond((int) ' ');
        boolean boolean77 = dateTime67.isAfter((-62161135557217L));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-2L) + "'", long50 == (-2L));
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test08941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08941");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DurationField durationField6 = durationFieldType3.getField(chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology17.add(readablePeriod18, (-2L), 1);
        long long25 = chronology17.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType7.getField(chronology17);
        org.joda.time.DurationField durationField28 = chronology17.minutes();
        org.joda.time.DateTimeField dateTimeField29 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology17.yearOfEra();
        boolean boolean33 = durationFieldType3.isSupported(chronology17);
        java.lang.String str34 = durationFieldType3.getName();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-2L) + "'", long21 == (-2L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 20L + "'", long25 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyears" + "'", str34, "weekyears");
    }

    @Test
    public void test08942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08942");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime10.plusSeconds(9);
        org.joda.time.Chronology chronology17 = localTime10.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.millisOfDay();
        org.joda.time.DurationField durationField26 = chronology19.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter6.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter6.withZoneUTC();
        boolean boolean29 = dateTimeFormatter28.isPrinter();
        java.lang.StringBuffer stringBuffer30 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter28.printTo(stringBuffer30, (long) 19034);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test08943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08943");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime.Property property8 = dateTime7.year();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        int int12 = localDate11.getWeekOfWeekyear();
        int int13 = property8.compareTo((org.joda.time.ReadablePartial) localDate11);
        int int14 = localDate11.getEra();
        org.joda.time.LocalDate.Property property15 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDate localDate18 = localDate11.minus(readablePeriod17);
        org.joda.time.LocalDate localDate20 = localDate18.plusMonths(1900);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test08944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08944");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(9);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(6);
        int int12 = localDateTime11.getYearOfCentury();
        int int13 = localDateTime11.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 70 + "'", int13 == 70);
    }

    @Test
    public void test08945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08945");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.minus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMillis(32772);
        org.joda.time.DateTime dateTime21 = dateTime17.withMillis((long) ' ');
        org.joda.time.DateTime.Property property22 = dateTime17.secondOfDay();
        boolean boolean23 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime25 = dateTime17.withYear((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded(readableDuration26, 21);
        org.joda.time.DateTime.Property property29 = dateTime28.secondOfDay();
        org.joda.time.DateTime.Property property30 = dateTime28.centuryOfEra();
        org.joda.time.DateTime dateTime32 = dateTime28.plusDays((-420));
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test08946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08946");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekOfWeekyear((int) '4');
        org.joda.time.Chronology chronology14 = dateTime11.getChronology();
        org.joda.time.DateTime.Property property15 = dateTime11.era();
        org.joda.time.DateTime.Property property16 = dateTime11.dayOfWeek();
        int int17 = property16.get();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("zh_TW");
        java.lang.String str22 = locale21.getVariant();
        java.util.Set<java.lang.Character> charSet23 = locale21.getExtensionKeys();
        java.lang.String str24 = locale19.getDisplayLanguage(locale21);
        java.lang.String str25 = property16.getAsShortText(locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = locale21.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Thu" + "'", str25, "Thu");
    }

    @Test
    public void test08947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08947");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfDay();
        org.joda.time.DurationField durationField12 = chronology9.months();
        long long16 = chronology9.add(1644573084898L, (long) 864000000, 19);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.millisOfDay();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1660989084898L + "'", long16 == 1660989084898L);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test08948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08948");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        int int2 = localDate1.getWeekOfWeekyear();
        int int3 = localDate1.getMonthOfYear();
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(35434289);
        java.lang.Object obj9 = null;
        boolean boolean10 = localDate8.equals(obj9);
        org.joda.time.DateMidnight dateMidnight11 = localDate8.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate8.withEra(709);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 709 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test08949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08949");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        java.util.Date date4 = localDate1.toDate();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate6.minus(readablePeriod7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readablePeriod11);
        org.joda.time.DateTime.Property property13 = dateTime12.year();
        java.lang.String str14 = property13.getAsString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(chronology15);
        int int17 = localDate16.getWeekOfWeekyear();
        int int18 = property13.compareTo((org.joda.time.ReadablePartial) localDate16);
        int int19 = localDate16.getEra();
        org.joda.time.LocalDate.Property property20 = localDate16.dayOfMonth();
        java.util.Date date21 = localDate16.toDate();
        boolean boolean22 = date4.before(date21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromDateFields(date4);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfWeek();
        org.joda.time.LocalDate localDate25 = property24.roundHalfFloorCopy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate29 = localDate27.minus(readablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.plus(readableDuration33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology35);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDate localDate38 = localDate36.minus(readablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMillis(32772);
        org.joda.time.DateTime dateTime44 = dateTime40.withMillis((long) ' ');
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalDate localDate48 = localDate46.plus(readablePeriod47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.Chronology chronology50 = null;
        boolean boolean51 = dateTimeFieldType49.isSupported(chronology50);
        boolean boolean52 = localDate48.isSupported(dateTimeFieldType49);
        int int53 = dateTime44.get(dateTimeFieldType49);
        int int54 = dateTime31.get(dateTimeFieldType49);
        int int55 = localDate25.get(dateTimeFieldType49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate57 = localDate25.withWeekOfWeekyear(7981);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7981 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 19 + "'", int53 == 19);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20 + "'", int54 == 20);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20 + "'", int55 == 20);
    }

    @Test
    public void test08950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08950");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTime dateTime9 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime7.secondOfDay();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        int int12 = property10.getMinimumValue();
        org.joda.time.DurationField durationField13 = property10.getDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test08951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08951");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays(9);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(6);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury(8);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.year();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = property20.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths(6);
        int int25 = localDateTime22.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMillis(292278993);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minus(readableDuration28);
        int int30 = property14.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDurationAdded(readableDuration31, 9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime33.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withYear(70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test08952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08952");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strSet2.addAll((java.util.Collection<java.lang.String>) strList7);
        java.util.Iterator<java.lang.String> strItor10 = strSet2.iterator();
        boolean boolean12 = strSet2.equals((java.lang.Object) 1644572932963L);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((java.lang.Object) 1644572932963L);
        org.joda.time.LocalTime localTime15 = localTime13.plusMinutes((int) '#');
        org.joda.time.LocalTime.Property property16 = localTime15.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = property16.addNoWrapToCopy(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test08953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08953");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime19 = property15.getLocalTime();
        org.joda.time.DateTimeField dateTimeField20 = property15.getField();
        int int21 = property15.getMinimumValueOverall();
        org.joda.time.LocalTime localTime22 = property15.withMaximumValue();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 1, chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfDay((int) (byte) 10);
        int int28 = localDateTime27.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField30 = localDateTime27.getField((int) (short) 0);
        org.joda.time.Chronology chronology31 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withDayOfMonth((int) (short) 1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfWeek();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = localTime22.isEqual((org.joda.time.ReadablePartial) localDateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test08954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08954");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        int int12 = dateTime9.getDayOfWeek();
        boolean boolean14 = dateTime9.isEqual((long) 0);
        org.joda.time.DateTime dateTime16 = dateTime9.withMillisOfSecond(23);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTime dateTime19 = dateTime16.minusMonths(32769);
        boolean boolean21 = dateTime16.isAfter((long) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test08955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08955");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plus(readablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withYearOfCentury(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property14 = localDateTime6.property(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime15 = property14.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test08956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08956");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        int int6 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate5.weekyear();
        org.joda.time.LocalDate localDate9 = property7.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate10 = property7.getLocalDate();
        int int11 = property7.getMaximumValueOverall();
        org.joda.time.LocalDate localDate12 = property7.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property7.getFieldType();
        org.joda.time.LocalDate localDate14 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test08957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08957");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTimeField dateTimeField4 = dateTimeFieldType2.getField(chronology3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean9 = localTime7.isSupported(durationFieldType8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.minus(readablePeriod10);
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str14 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localTime11, (int) (short) -1, locale13);
        java.lang.String str15 = localTime11.toString();
        int int16 = localTime11.size();
        org.joda.time.LocalTime.Property property17 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime19 = property17.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime21 = property17.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime23 = property17.addWrapFieldToCopy((-292275054));
        org.joda.time.LocalTime localTime25 = property17.setCopy(23);
        int int26 = localTime25.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean32 = localTime30.isSupported(durationFieldType31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalTime localTime34 = localTime30.minus(readablePeriod33);
        org.joda.time.LocalTime localTime36 = localTime30.plusSeconds(9);
        org.joda.time.Chronology chronology37 = localTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfDay();
        boolean boolean40 = dateTimeFieldType27.isSupported(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.hours();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.clockhourOfDay();
        boolean boolean43 = localTime25.equals((java.lang.Object) chronology37);
        org.joda.time.DateTimeField dateTimeField44 = chronology37.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField46 = chronology37.months();
        org.joda.time.DateTimeField dateTimeField47 = chronology37.halfdayOfDay();
        org.joda.time.DurationField durationField48 = durationFieldType1.getField(chronology37);
        org.joda.time.DurationField durationField49 = chronology37.years();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1" + "'", str14, "-1");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "00:00:00.001" + "'", str15, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 82800001 + "'", int26 == 82800001);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test08958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08958");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMonths(22);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.secondOfMinute();
        int int8 = property7.get();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundCeilingCopy();
        java.lang.String str11 = property7.getAsShortText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
    }

    @Test
    public void test08959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08959");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.hourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology11.add(2938526L, 1332399624793239000L, 35455672);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1332399624793239000 * 35455672");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test08960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08960");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate10.minus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtMidnight(dateTimeZone13);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.plus(readableDuration16);
        org.joda.time.DateTime dateTime19 = dateTime14.plusMonths(32772);
        int int20 = property7.getDifference((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime19.withMillis(36L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-2730) + "'", int20 == (-2730));
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test08961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08961");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((int) '4');
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(13);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean17 = localTime15.isSupported(durationFieldType16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalTime localTime19 = localTime15.minus(readablePeriod18);
        org.joda.time.LocalTime localTime21 = localTime15.plusSeconds(9);
        org.joda.time.Chronology chronology22 = localTime15.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(chronology22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str25 = durationFieldType24.getName();
        org.joda.time.LocalTime localTime27 = localTime23.withFieldAdded(durationFieldType24, (int) (byte) 100);
        org.joda.time.LocalTime localTime29 = localTime27.minusMinutes(86399);
        org.joda.time.LocalTime localTime31 = localTime27.plusHours(292273162);
        java.lang.String str32 = localTime31.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "seconds" + "'", str25, "seconds");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "19:55:55.798" + "'", str32, "19:55:55.798");
    }

    @Test
    public void test08962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08962");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate7 = property4.addWrapFieldToCopy(70);
        org.joda.time.LocalDate localDate9 = property4.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weeks();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test08963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08963");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean8 = localTime6.isSupported(durationFieldType7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime10 = localTime6.minus(readablePeriod9);
        org.joda.time.LocalTime localTime12 = localTime6.plusSeconds(9);
        org.joda.time.Chronology chronology13 = localTime6.getChronology();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology13.add(readablePeriod14, (-2L), 1);
        long long21 = chronology13.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType3.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField24 = chronology13.dayOfYear();
        org.joda.time.DurationField durationField25 = chronology13.eras();
        org.joda.time.DateTimeField dateTimeField26 = chronology13.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(35368568, 779, 32770, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 779 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2L) + "'", long17 == (-2L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 20L + "'", long21 == 20L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test08964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08964");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfMonth();
        boolean boolean10 = dateTime7.isEqualNow();
        java.lang.String str11 = dateTime7.toString();
        int int12 = dateTime7.getYear();
        org.joda.time.DateTime dateTime13 = dateTime7.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime13.withDayOfMonth(18000010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 18000010 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T00:00:00.000+00:00:00.001" + "'", str11, "2022-02-11T00:00:00.000+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test08965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08965");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Date date5 = localDate2.toDate();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readablePeriod12);
        org.joda.time.DateTime.Property property14 = dateTime13.year();
        java.lang.String str15 = property14.getAsString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        int int18 = localDate17.getWeekOfWeekyear();
        int int19 = property14.compareTo((org.joda.time.ReadablePartial) localDate17);
        int int20 = localDate17.getEra();
        org.joda.time.LocalDate.Property property21 = localDate17.dayOfMonth();
        java.util.Date date22 = localDate17.toDate();
        boolean boolean23 = date5.before(date22);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date5);
        java.util.Calendar.Builder builder26 = builder0.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(true);
        java.util.Calendar.Builder builder30 = builder26.setInstant(1L);
        java.util.Calendar.Builder builder32 = builder30.setLenient(false);
        java.util.Calendar calendar33 = builder30.build();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.fromCalendarFields(calendar33);
        calendar33.setLenient(true);
        calendar33.setLenient(false);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test08966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08966");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long11 = dateTimeZone9.nextTransition((long) 4);
        org.joda.time.Chronology chronology12 = chronology6.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField13 = chronology6.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate15.minus(readablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime(chronology24);
        int int26 = dateTime23.getDayOfWeek();
        boolean boolean28 = dateTime23.isEqual((long) 0);
        org.joda.time.DateTime dateTime30 = dateTime23.withMillisOfSecond(23);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime23.getZone();
        org.joda.time.Chronology chronology32 = chronology6.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology32.millisOfDay();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(chronology32);
        org.joda.time.Chronology chronology35 = chronology32.withUTC();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        long long39 = chronology32.add(readablePeriod36, 1644573117033L, 292278994);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1644573117033L + "'", long39 == 1644573117033L);
    }

    @Test
    public void test08967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08967");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setExtension('4', "1970-01-01T00:00:32.010");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08968");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("PROPERTY[HOUROFDAY]", (double) 1644573158067L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644573158067E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08969");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.minus(readablePeriod7);
        org.joda.time.DateTime.Property property9 = dateTime8.year();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.lang.String str12 = locale10.getVariant();
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category0, locale14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(chronology16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDate localDate19 = localDate17.minus(readablePeriod18);
        org.joda.time.LocalDate localDate21 = localDate17.plusMonths((int) (byte) 0);
        int int22 = localDate21.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property23 = localDate21.weekyear();
        org.joda.time.LocalDate localDate25 = property23.addToCopy((int) (byte) -1);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.lang.String str28 = timeZone27.getID();
        int int30 = timeZone27.getOffset((-2104009200000L));
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight(dateTimeZone35);
        java.util.Date date37 = localDate34.toDate();
        calendar32.setTime(date37);
        java.util.TimeZone timeZone39 = calendar32.getTimeZone();
        boolean boolean40 = timeZone27.hasSameRules(timeZone39);
        boolean boolean41 = timeZone39.observesDaylightTime();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str44 = locale42.getExtension('a');
        java.util.Set<java.lang.String> strSet45 = locale42.getUnicodeLocaleAttributes();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone39, locale42);
        java.lang.String str47 = localDate25.toString("7", locale42);
        java.lang.String str48 = locale42.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale42);
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str53 = locale51.getExtension('a');
        java.util.Set<java.lang.String> strSet54 = locale51.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet55 = locale51.getUnicodeLocaleKeys();
        java.lang.String str56 = locale50.getDisplayCountry(locale51);
        java.util.Locale.setDefault(category0, locale50);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.LocalDate localDate61 = localDate59.minus(readablePeriod60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = localDate61.toDateTimeAtMidnight(dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readablePeriod64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = dateTime67.toDateTime(chronology68);
        int int70 = dateTime67.getDayOfWeek();
        boolean boolean72 = dateTime67.isEqual((long) 0);
        org.joda.time.DateTime dateTime74 = dateTime67.withMillisOfSecond(23);
        org.joda.time.DateTime.Property property75 = dateTime74.millisOfSecond();
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("");
        java.lang.String str78 = locale77.toLanguageTag();
        java.lang.String str79 = property75.getAsText(locale77);
        java.lang.String str80 = locale50.getDisplayLanguage(locale77);
        java.util.Locale locale83 = new java.util.Locale("1970-01-01T00:00:32.010", "1908-01-10T00:00:06.010");
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleAttributes();
        java.lang.String str85 = locale50.getDisplayScript(locale83);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022" + "'", str11, "2022");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "GMT" + "'", str28, "GMT");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644537600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Fri Feb 11 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644573255963,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=15,MILLISECOND=963,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "7" + "'", str47, "7");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u65e5\u672c" + "'", str56, "\u65e5\u672c");
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "und" + "'", str78, "und");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "23" + "'", str79, "23");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Japanese" + "'", str80, "Japanese");
        org.junit.Assert.assertEquals(locale83.toString(), "1970-01-01t00:00:32.010_1908-01-10T00:00:06.010");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test08970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08970");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("\u4e0a\u5348 09:49:25");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022/2/11 ?? 09:49:25\" is malformed at \"/2/11 ?? 09:49:25\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08971");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.setCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = localTime25.isSupported(durationFieldType26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalTime localTime29 = localTime25.minus(readablePeriod28);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localTime29, (int) (short) -1, locale31);
        java.lang.String str33 = localTime29.toString();
        int int34 = localTime29.size();
        int int35 = localTime29.getMillisOfSecond();
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = localTime29.getFields();
        org.joda.time.LocalTime localTime37 = localTime19.withFields((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.era();
        java.lang.String str41 = dateTimeField39.getAsText(1644573010814L);
        int int42 = dateTimeField39.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "00:00:00.001" + "'", str33, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u897f\u66a6" + "'", str41, "\u897f\u66a6");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test08972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08972");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        int int6 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfCentury();
        int int8 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusWeeks(19);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = property11.setCopy((int) 'u');
        int int14 = localDateTime13.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.era();
        int int16 = localDateTime13.size();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test08973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08973");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = property12.addToCopy((int) (short) -1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        int int17 = localDateTime15.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
    }

    @Test
    public void test08974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08974");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfDay((int) (byte) 10);
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField7 = localDateTime4.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType(28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 28");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test08975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08975");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalTime localTime4 = localTime2.plus(readablePeriod3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean6 = localTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.years();
        boolean boolean8 = localTime4.isSupported(durationFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean13 = localTime11.isSupported(durationFieldType12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime11.minus(readablePeriod14);
        org.joda.time.LocalTime localTime17 = localTime11.plusSeconds(9);
        org.joda.time.Chronology chronology18 = localTime11.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(chronology18);
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        boolean boolean21 = durationFieldType7.isSupported(chronology20);
        long long25 = chronology20.add(3577776886L, 1644573117033L, 827);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1360065545563177L + "'", long25 == 1360065545563177L);
    }

    @Test
    public void test08976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08976");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strSet2.addAll((java.util.Collection<java.lang.String>) strList7);
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        boolean boolean19 = strSet12.addAll((java.util.Collection<java.lang.String>) strList17);
        boolean boolean20 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet12);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        boolean boolean33 = strSet26.addAll((java.util.Collection<java.lang.String>) strList31);
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList31);
        boolean boolean35 = strSet12.removeAll((java.util.Collection<java.lang.String>) strList34);
        java.lang.Object[] objArray36 = strSet12.toArray();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet12.stream();
        java.util.stream.Stream<java.lang.String> strStream38 = strSet12.parallelStream();
        java.lang.Object obj39 = null;
        boolean boolean40 = strSet12.remove(obj39);
        boolean boolean41 = strSet12.isEmpty();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[hi!, ]");
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test08977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08977");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime7 = localTime4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long13 = dateTimeZone10.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str15 = dateTimeZone10.getNameKey(100L);
        org.joda.time.DateTime dateTime16 = dateTime7.toDateTime(dateTimeZone10);
        int int17 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays(22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = dateTime19.toString("1 Jan 1970 00:00:02 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2L) + "'", long13 == (-2L));
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test08978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08978");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.setCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = localTime25.isSupported(durationFieldType26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalTime localTime29 = localTime25.minus(readablePeriod28);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localTime29, (int) (short) -1, locale31);
        java.lang.String str33 = localTime29.toString();
        int int34 = localTime29.size();
        int int35 = localTime29.getMillisOfSecond();
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = localTime29.getFields();
        org.joda.time.LocalTime localTime37 = localTime19.withFields((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.millis();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(22, 5);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone42);
        long long47 = dateTimeZone42.convertLocalToUTC(1644572942340L, false, (long) 990);
        int int49 = dateTimeZone42.getOffset(0L);
        org.joda.time.Chronology chronology50 = chronology38.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField51 = chronology50.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.weekyear();
        boolean boolean54 = dateTimeField52.isLeap(1644573026119L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "00:00:00.001" + "'", str33, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1644493442340L + "'", long47 == 1644493442340L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 79500000 + "'", int49 == 79500000);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08979");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = property15.setCopy(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType20.getField(chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean27 = localTime25.isSupported(durationFieldType26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalTime localTime29 = localTime25.minus(readablePeriod28);
        java.util.Locale locale31 = java.util.Locale.KOREA;
        java.lang.String str32 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localTime29, (int) (short) -1, locale31);
        java.lang.String str33 = localTime29.toString();
        int int34 = localTime29.size();
        int int35 = localTime29.getMillisOfSecond();
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = localTime29.getFields();
        org.joda.time.LocalTime localTime37 = localTime19.withFields((org.joda.time.ReadablePartial) localTime29);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime39 = localTime37.withFields((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.LocalTime localTime41 = localTime37.plusSeconds(40);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "-1" + "'", str32, "-1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "00:00:00.001" + "'", str33, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
    }

    @Test
    public void test08980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08980");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("\uc911\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"????????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08981");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        org.joda.time.LocalTime localTime11 = localTime5.plusSeconds(9);
        org.joda.time.Chronology chronology12 = localTime5.getChronology();
        org.joda.time.Chronology chronology13 = chronology12.withUTC();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        long long21 = chronology15.add((-61692070122155L), 1644572993855L, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(35455672, 22, (-2473), chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-61692070122155L) + "'", long21 == (-61692070122155L));
    }

    @Test
    public void test08982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08982");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 1, chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long10 = dateTimeZone7.convertLocalToUTC((long) (short) -1, false);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime5, dateTimeZone7);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(0L, dateTimeZone7);
        org.joda.time.DateTime dateTime15 = dateTime12.withDurationAdded(1644572958879L, 0);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfDay();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-2L) + "'", long10 == (-2L));
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test08983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08983");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = dateTime7.get(dateTimeFieldType8);
        int int10 = dateTime7.getDayOfMonth();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder14.build();
        java.util.Locale.Builder builder16 = builder14.clear();
        java.util.Locale.Builder builder18 = builder14.setLanguage("");
        java.util.Locale.Builder builder21 = builder18.setExtension('x', "");
        boolean boolean22 = dateTime7.equals((java.lang.Object) 'x');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime7.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime24.withYear(622);
        org.joda.time.DateTime dateTime28 = dateTime24.withWeekyear(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 11 + "'", int10 == 11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test08984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08984");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(35469884, 346, 14400010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35469884 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08985");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime6.minus(readablePeriod7);
        org.joda.time.LocalTime.Property property9 = localTime6.secondOfMinute();
        org.joda.time.LocalTime localTime10 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test08986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08986");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        int int14 = dateTimeField2.getMinimumValue(0L);
        long long17 = dateTimeField2.getDifferenceAsLong((long) (short) -1, (long) (byte) 0);
        int int18 = dateTimeField2.getMaximumValue();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime24 = localTime22.plus(readablePeriod23);
        java.lang.String str25 = localTime24.toString();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = localTime24.toString("1970", locale27);
        java.lang.String str29 = dateTimeField2.getAsText((int) (byte) 1, locale27);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now();
        int int31 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.DateTime dateTime32 = localTime30.toDateTimeToday();
        org.joda.time.DateTime dateTime33 = dateTime32.withEarlierOffsetAtOverlap();
        long long34 = dateTime32.getMillis();
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.DateTime dateTime36 = dateTime32.minus(readablePeriod35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMinutes(397);
        boolean boolean39 = dateTime36.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 999 + "'", int18 == 999);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "00:00:00.001" + "'", str25, "00:00:00.001");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970" + "'", str28, "1970");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644573256407L + "'", long34 == 1644573256407L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test08987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08987");
        java.lang.Object obj7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate9.minus(readablePeriod10);
        org.joda.time.LocalDate localDate13 = localDate9.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate15 = localDate9.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property16 = localDate9.dayOfWeek();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate20 = localDate18.minus(readablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime26.withMonthOfYear(5);
        org.joda.time.DateTime.Property property31 = dateTime30.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long36 = dateTimeZone33.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str38 = dateTimeZone33.getNameKey(100L);
        org.joda.time.DateTime dateTime39 = dateTime30.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime40 = localDate9.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(obj7, dateTimeZone33);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.withMillisOfDay(5);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        int int52 = dateTimeField50.getMinimumValue(0L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTimeAtMidnight(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = localDate54.withWeekyear(7);
        org.joda.time.LocalDate localDate60 = localDate58.withWeekOfWeekyear(9);
        org.joda.time.LocalDate localDate62 = localDate60.minusWeeks((int) (byte) 0);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        boolean boolean72 = strSet65.addAll((java.util.Collection<java.lang.String>) strList70);
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str75 = locale73.getExtension('a');
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleAttributes();
        java.util.Locale locale77 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str78 = locale73.getDisplayScript(locale77);
        java.util.Locale locale79 = java.util.Locale.ENGLISH;
        java.lang.String str80 = locale77.getDisplayVariant(locale79);
        boolean boolean81 = strSet65.equals((java.lang.Object) locale79);
        java.lang.String str82 = dateTimeField50.getAsText((org.joda.time.ReadablePartial) localDate62, locale79);
        java.lang.String str83 = dateTimeZone33.getName((long) '4', locale79);
        java.lang.String str84 = dateTimeZone33.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(120, 622, 14400010, 19034, 292278994, 4, 946, dateTimeZone33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19034 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-2L) + "'", long36 == (-2L));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Friday" + "'", str82, "Friday");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00:00.001" + "'", str83, "+00:00:00.001");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00:00.001" + "'", str84, "+00:00:00.001");
    }

    @Test
    public void test08988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08988");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withMillisOfDay(5);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        int int9 = dateTimeField7.getMinimumValue(0L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate11.withWeekyear(7);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekOfWeekyear(9);
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks((int) (byte) 0);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        boolean boolean29 = strSet22.addAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str32 = locale30.getExtension('a');
        java.util.Set<java.lang.String> strSet33 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str35 = locale30.getDisplayScript(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        boolean boolean38 = strSet22.equals((java.lang.Object) locale36);
        java.lang.String str39 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDate19, locale36);
        int int40 = localDate19.getEra();
        org.joda.time.LocalDate localDate42 = localDate19.withCenturyOfEra(60);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate46 = localDate44.minus(readablePeriod45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.minus(readablePeriod49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMillis((int) (byte) 10);
        org.joda.time.DateTime dateTime54 = dateTime50.withCenturyOfEra((int) (byte) 0);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(chronology55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate58 = localDate56.plus(readablePeriod57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = localDate60.toDateTimeAtMidnight(dateTimeZone61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate65 = localDate60.withFieldAdded(durationFieldType63, (int) (short) 0);
        org.joda.time.LocalDate localDate67 = localDate58.withFieldAdded(durationFieldType63, 19);
        org.joda.time.DateTime dateTime69 = dateTime54.withFieldAdded(durationFieldType63, 10);
        org.joda.time.LocalDate localDate71 = localDate19.withFieldAdded(durationFieldType63, 35373897);
        org.joda.time.DateMidnight dateMidnight72 = localDate19.toDateMidnight();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate(chronology73);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDate localDate76 = localDate74.minus(readablePeriod75);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = localDate76.toDateTimeAtMidnight(dateTimeZone77);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.DateTime dateTime80 = dateTime78.minus(readablePeriod79);
        org.joda.time.DateMidnight dateMidnight81 = dateTime80.toDateMidnight();
        org.joda.time.DateTime.Property property82 = dateTime80.dayOfMonth();
        boolean boolean83 = dateTime80.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime84 = dateTime80.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod85 = null;
        org.joda.time.DateTime dateTime87 = dateTime80.withPeriodAdded(readablePeriod85, 292278993);
        org.joda.time.DateTime dateTime89 = dateTime80.minusWeeks(35410123);
        org.joda.time.DateTime dateTime92 = dateTime80.withDurationAdded(47L, 35361437);
        org.joda.time.DateTime dateTime94 = dateTime92.minusYears(1899);
        boolean boolean95 = dateMidnight72.isBefore((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.DateTime dateTime97 = dateTime94.plusSeconds(3044773);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Friday" + "'", str39, "Friday");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test08989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08989");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1900");
        timeZone1.setRawOffset((int) (short) 1);
        boolean boolean4 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test08990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08990");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        int int14 = dateTimeField2.getMinimumValue(0L);
        long long17 = dateTimeField2.getDifferenceAsLong((long) (short) -1, (long) (byte) 0);
        int int18 = dateTimeField2.getMaximumValue();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime24 = localTime22.plus(readablePeriod23);
        java.lang.String str25 = localTime24.toString();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = localTime24.toString("1970", locale27);
        java.lang.String str29 = dateTimeField2.getAsText((int) (byte) 1, locale27);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now();
        int int31 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localTime30);
        java.lang.String str32 = dateTimeField2.getName();
        java.lang.String str33 = dateTimeField2.toString();
        java.lang.String str35 = dateTimeField2.getAsShortText(1644573135595L);
        long long38 = dateTimeField2.add((long) 54000001, 1644572977539L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 999 + "'", int18 == 999);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "00:00:00.001" + "'", str25, "00:00:00.001");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970" + "'", str28, "1970");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 999 + "'", int31 == 999);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfSecond" + "'", str32, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str33, "DateTimeField[millisOfSecond]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "596" + "'", str35, "596");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1644626977540L + "'", long38 == 1644626977540L);
    }

    @Test
    public void test08991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08991");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.minus(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight11 = dateTime7.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test08992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08992");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.time.ZoneId zoneId2 = timeZone0.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        timeZone3.setID("zh");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        boolean boolean15 = strSet8.addAll((java.util.Collection<java.lang.String>) strList13);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = locale16.getExtension('a');
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale16.getDisplayScript(locale20);
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        boolean boolean24 = strSet8.equals((java.lang.Object) locale22);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleKeys();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long31 = dateTimeZone28.convertLocalToUTC((long) (short) -1, false);
        java.lang.String str33 = dateTimeZone28.getNameKey(100L);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 10, dateTimeZone28);
        org.joda.time.LocalDate.Property property35 = localDate34.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate39 = localDate37.minus(readablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMillis(32772);
        org.joda.time.DateTime dateTime45 = dateTime41.withMillis((long) ' ');
        org.joda.time.DateTime.Property property46 = dateTime41.secondOfDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate51 = localDate49.minus(readablePeriod50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTimeAtMidnight(dateTimeZone52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.minus(readablePeriod54);
        org.joda.time.DateTime.Property property56 = dateTime55.year();
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = property56.getAsShortText(locale57);
        java.lang.String str59 = locale57.getVariant();
        org.joda.time.DateTime dateTime60 = property46.setCopy("32770", locale57);
        java.lang.String str61 = property35.getAsText(locale57);
        java.lang.String str63 = locale57.getExtension('x');
        java.lang.String str64 = locale22.getDisplayCountry(locale57);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone3, locale57);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.lang.String str67 = timeZone66.getID();
        int int68 = timeZone66.getRawOffset();
        boolean boolean69 = timeZone66.observesDaylightTime();
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone66);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone66);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone66);
        int int73 = timeZone66.getRawOffset();
        timeZone66.setRawOffset(13);
        java.time.ZoneId zoneId76 = timeZone66.toZoneId();
        calendar65.setTimeZone(timeZone66);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-2L) + "'", long31 == (-2L));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022" + "'", str58, "2022");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1644573256601,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=16,MILLISECOND=601,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "GMT" + "'", str67, "GMT");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1644573256602,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=16,MILLISECOND=602,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1644573256602,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=16,MILLISECOND=602,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1644573256602,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=13,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=16,MILLISECOND=602,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(zoneId76);
    }

    @Test
    public void test08993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08993");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(9);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.secondOfDay();
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test08994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08994");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 86399);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(2000);
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(43);
        org.joda.time.LocalDate.Property property6 = localDate5.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property6.setCopy(31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate8.withDayOfWeek(25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test08995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08995");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        java.lang.String str6 = locale3.getDisplayCountry(locale4);
        java.util.Locale.setDefault(locale4);
        java.util.Set<java.lang.String> strSet8 = locale4.getUnicodeLocaleKeys();
        boolean boolean9 = strSet8.isEmpty();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644573256745,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=54,SECOND=16,MILLISECOND=745,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test08996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08996");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean5 = localTime3.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime3.minus(readablePeriod6);
        org.joda.time.LocalTime localTime9 = localTime3.plusSeconds(9);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology10.add(readablePeriod11, (-2L), 1);
        long long18 = chronology10.add((long) (byte) 0, (long) 10, 2);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology10);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 9, chronology10);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.LocalTime localTime23 = localTime20.withHourOfDay(6);
        org.joda.time.LocalTime localTime25 = localTime20.minusMillis(4);
        org.joda.time.LocalTime localTime27 = localTime20.plusMinutes(79200000);
        org.joda.time.Chronology chronology28 = localTime20.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 1, chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfDay((int) (byte) 10);
        int int34 = localDateTime33.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField36 = localDateTime33.getField((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.minusDays(23);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusYears(292269054);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean46 = localTime44.isSupported(durationFieldType45);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        org.joda.time.LocalTime localTime48 = localTime44.minus(readablePeriod47);
        org.joda.time.LocalTime localTime50 = localTime44.plusSeconds(9);
        org.joda.time.Chronology chronology51 = localTime44.getChronology();
        org.joda.time.Chronology chronology52 = chronology51.withUTC();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(1644537599999L, chronology52);
        org.joda.time.DurationField durationField54 = chronology52.minutes();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.millisOfDay();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) 100);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalTime localTime59 = localTime57.minus(readablePeriod58);
        int int60 = localTime59.getMillisOfSecond();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean65 = localTime63.isSupported(durationFieldType64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalTime localTime67 = localTime63.minus(readablePeriod66);
        org.joda.time.LocalTime localTime69 = localTime63.plusSeconds(9);
        org.joda.time.Chronology chronology70 = localTime63.getChronology();
        org.joda.time.Chronology chronology71 = chronology70.withUTC();
        org.joda.time.DurationField durationField72 = chronology70.halfdays();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(6);
        java.util.TimeZone timeZone75 = dateTimeZone74.toTimeZone();
        java.lang.String str76 = dateTimeZone74.getID();
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime(dateTimeZone74);
        int[] intArray79 = chronology70.get((org.joda.time.ReadablePartial) localTime77, 2938526L);
        chronology52.validate((org.joda.time.ReadablePartial) localTime59, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            chronology28.validate((org.joda.time.ReadablePartial) localDateTime40, intArray79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-2L) + "'", long14 == (-2L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 20L + "'", long18 == 20L);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19 + "'", int34 == 19);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 101 + "'", int60 == 101);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.006" + "'", str76, "+00:00:00.006");
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 48, 58, 526]");
    }

    @Test
    public void test08997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08997");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDate localDate3 = localDate1.minus(readablePeriod2);
        org.joda.time.LocalDate localDate5 = localDate1.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withWeekyear((int) (short) -1);
        org.joda.time.LocalDate.Property property8 = localDate1.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property8.addToCopy(1970);
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate14 = localDate11.minusDays((-292275054));
        org.joda.time.LocalDate.Property property15 = localDate11.year();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
    }

    @Test
    public void test08998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08998");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean7 = localTime5.isSupported(durationFieldType6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.minus(readablePeriod8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = dateTimeField2.getAsShortText((org.joda.time.ReadablePartial) localTime9, (int) (short) -1, locale11);
        java.lang.String str13 = localTime9.toString();
        int int14 = localTime9.size();
        org.joda.time.LocalTime.Property property15 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime17 = property15.addNoWrapToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = property15.withMinimumValue();
        org.joda.time.LocalTime localTime20 = property15.addWrapFieldToCopy(8);
        org.joda.time.LocalTime localTime21 = property15.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime22 = property15.getLocalTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1" + "'", str12, "-1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:00:00.001" + "'", str13, "00:00:00.001");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test08999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08999");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate1.toDateTimeAtMidnight(dateTimeZone2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate6 = localDate1.withFieldAdded(durationFieldType4, (int) (short) 0);
        org.joda.time.LocalDate.Property property7 = localDate1.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate12 = localDate10.plusYears(2022);
        int[] intArray13 = localDate10.getValues();
        org.joda.time.LocalDate localDate15 = localDate10.plusMonths(35373897);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(500);
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtStartOfDay(dateTimeZone17);
        org.joda.time.LocalDate localDate19 = dateTime18.toLocalDate();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 1, 1]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test09000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test09000");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) 0L, chronology2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean5 = localTime3.isSupported(durationFieldType4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime7 = localTime3.minus(readablePeriod6);
        org.joda.time.LocalTime localTime9 = localTime3.plusSeconds(9);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) '#', chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(40, 51);
        org.joda.time.Chronology chronology21 = chronology12.withZone(dateTimeZone20);
        long long25 = chronology21.add((long) 292275892, (-62161135848684L), 19033);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1183112898315726680L) + "'", long25 == (-1183112898315726680L));
    }
}

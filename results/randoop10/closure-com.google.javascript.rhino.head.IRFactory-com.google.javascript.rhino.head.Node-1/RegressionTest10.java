import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.Node node7 = scriptNode3.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        java.lang.String str13 = scriptNode9.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.Object obj18 = scriptNode9.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        java.lang.String str22 = scriptNode9.toStringTree(scriptNode19);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        int int31 = scriptNode27.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode33.getFunctions();
        scriptNode33.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode27.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scope38);
        scriptNode33.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node42 = iRFactory25.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons43, errorReporter44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node62 = iRFactory45.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        scriptNode33.setTop(scriptNode53);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode33, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = scriptNode33.getTop();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) scriptNode66);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor68 = node67.iterator();
        int int69 = node67.getType();
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(scriptNode66);
        org.junit.Assert.assertNotNull(nodeItor68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot7, (com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        com.google.javascript.rhino.head.Node node16 = astRoot7.getLastSibling();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = astRoot7.iterator();
        com.google.javascript.rhino.head.Node node19 = astRoot7.setType((-643276093));
        com.google.javascript.rhino.head.ast.AstRoot astRoot20 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = astRoot20.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        boolean boolean33 = comment32.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        java.lang.String str40 = comment38.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray41 = new com.google.javascript.rhino.head.ast.Comment[] { comment26, comment32, comment38 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet42 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet42, commentArray41);
        astRoot20.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet42);
        boolean boolean45 = astRoot20.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray46 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList47 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList47, symbolArray46);
        astRoot20.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList47);
        java.lang.String str51 = astRoot20.toSource((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = astRoot20.getTop();
        java.lang.String str53 = astRoot7.toStringTree(scriptNode52);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = astRoot7.getExistingIntProp(505992549);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "                                                                                                                                                                                                        " + "'", str40, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(symbolArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(scriptNode52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-748307395));
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor13 = astRoot11.iterator();
        scriptNode8.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        astRoot11.visitComments(nodeVisitor15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        com.google.javascript.rhino.head.Node node20 = scriptNode17.getFirstChild();
        astRoot11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode17);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList26 = scriptNode24.getFunctions();
        scriptNode24.setPosition((int) (byte) 10);
        int int29 = scriptNode24.getEncodedSourceEnd();
        int int30 = scriptNode24.getLineno();
        int int31 = scriptNode1.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(functionNodeList26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor8 = scriptNode1.iterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet10 = astRoot9.getComments();
        com.google.javascript.rhino.head.ast.Comment comment11 = astRoot9.getJsDocNode();
        scriptNode1.setTop((com.google.javascript.rhino.head.ast.ScriptNode) astRoot9);
        com.google.javascript.rhino.head.Node node13 = scriptNode1.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope14 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) scriptNode1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.ScriptNode");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertNull(commentSet10);
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator4 = positionComparator2.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator3);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getBaseLineno();
        java.lang.String str7 = astRoot5.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = astRoot8.new NodeIterator();
        int int10 = positionComparator3.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot5, (com.google.javascript.rhino.head.ast.AstNode) astRoot8);
        java.lang.String str12 = astRoot5.makeIndent(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        int int17 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = scriptNode14.getLastSibling();
        java.lang.String str20 = scriptNode14.toSource((int) (short) -1);
        astRoot5.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode14);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot5);
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        com.google.javascript.rhino.head.Token.CommentType commentType28 = comment27.getCommentType();
        java.lang.String str30 = comment27.toSource(21);
        java.lang.String str31 = comment27.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        comment27.setCommentType(commentType32);
        astRoot5.addComment(comment27);
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor42 = comment39.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType43 = null;
        comment39.setCommentType(commentType43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSourceEnd(18);
        java.lang.String str63 = scriptNode53.toSource((-476424842));
        comment39.putProp(1152923454, (java.lang.Object) str63);
        java.lang.String str65 = comment39.getValue();
        astRoot5.addComment(comment39);
        astRoot5.checkParentLinks();
        org.junit.Assert.assertNotNull(astNodeComparator4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str7, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                " + "'", str12, "                                ");
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n}\n" + "'", str20, "{\n}\n");
        org.junit.Assert.assertNull(commentType28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                                          " + "'", str30, "                                          ");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(nodeItor42);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{\n}\n" + "'", str63, "{\n}\n");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        compilerEnvirons6.setStrictMode(true);
        compilerEnvirons6.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.getWarnTrailingComma();
        compilerEnvirons12.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet17 = compilerEnvirons12.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter18 = compilerEnvirons12.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory19 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6, errorReporter18);
        com.google.javascript.rhino.head.IRFactory iRFactory20 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        boolean boolean23 = compilerEnvirons21.isIdeMode();
        boolean boolean24 = compilerEnvirons21.getWarnTrailingComma();
        compilerEnvirons21.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons21.setAllowSharpComments(true);
        boolean boolean29 = compilerEnvirons21.isRecordingLocalJsDocComments();
        compilerEnvirons21.setAllowMemberExprAsFunctionName(true);
        boolean boolean32 = compilerEnvirons21.reportWarningAsError();
        com.google.javascript.rhino.head.Parser parser33 = new com.google.javascript.rhino.head.Parser(compilerEnvirons21);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons34 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean35 = compilerEnvirons34.isReservedKeywordAsIdentifier();
        boolean boolean36 = compilerEnvirons34.isIdeMode();
        boolean boolean37 = compilerEnvirons34.getWarnTrailingComma();
        compilerEnvirons34.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons40 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean41 = compilerEnvirons40.isReservedKeywordAsIdentifier();
        int int42 = compilerEnvirons40.getLanguageVersion();
        int int43 = compilerEnvirons40.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons44 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean45 = compilerEnvirons44.isReservedKeywordAsIdentifier();
        compilerEnvirons44.setStrictMode(true);
        compilerEnvirons44.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons50 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean51 = compilerEnvirons50.isReservedKeywordAsIdentifier();
        boolean boolean52 = compilerEnvirons50.getWarnTrailingComma();
        compilerEnvirons50.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet55 = compilerEnvirons50.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter56 = compilerEnvirons50.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory57 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons44, errorReporter56);
        com.google.javascript.rhino.head.IRFactory iRFactory58 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons40, errorReporter56);
        com.google.javascript.rhino.head.IRFactory iRFactory59 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons34, errorReporter56);
        com.google.javascript.rhino.head.IRFactory iRFactory60 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter56);
        com.google.javascript.rhino.head.Parser parser61 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter56);
        java.lang.Class<?> wildcardClass62 = compilerEnvirons0.getClass();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(errorReporter18);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 170 + "'", int42 == 170);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 170 + "'", int43 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(errorReporter56);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setIdeMode(true);
        boolean boolean5 = compilerEnvirons0.reportWarningAsError();
        com.google.javascript.rhino.head.Parser parser6 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet2 = astRoot1.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol4 = astRoot1.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot((int) '4');
        astRoot1.setCompilerData((java.lang.Object) astRoot6);
        java.lang.String str8 = astRoot6.debugPrint();
        int int9 = astRoot6.getFunctionCount();
        astRoot6.setInStrictMode(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode13.getFunctions();
        scriptNode13.setPosition((int) (byte) 10);
        int int18 = scriptNode13.getEncodedSourceEnd();
        scriptNode13.setEncodedSourceStart(7);
        java.lang.String str21 = scriptNode13.debugPrint();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(875237497, (com.google.javascript.rhino.head.Node) astRoot6, (com.google.javascript.rhino.head.Node) scriptNode13);
        scriptNode13.setEndLineno((int) (byte) 1);
        boolean boolean25 = scriptNode13.hasChildren();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator26 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator27 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator28 = positionComparator26.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator27);
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int30 = astRoot29.getBaseLineno();
        java.lang.String str31 = astRoot29.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        int int34 = positionComparator27.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot29, (com.google.javascript.rhino.head.ast.AstNode) astRoot32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator36 = scriptNode35.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = scriptNode35.new NodeIterator();
        astRoot32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor39 = null;
        astRoot32.visitComments(nodeVisitor39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot42 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator43 = astRoot42.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        boolean boolean49 = comment48.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        boolean boolean55 = comment54.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        java.lang.String str62 = comment60.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray63 = new com.google.javascript.rhino.head.ast.Comment[] { comment48, comment54, comment60 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet64 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet64, commentArray63);
        astRoot42.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet64);
        com.google.javascript.rhino.head.Token.CommentType commentType69 = null;
        com.google.javascript.rhino.head.ast.Comment comment71 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType69, "");
        boolean boolean72 = comment71.hasSideEffects();
        int int73 = comment71.getLineno();
        com.google.javascript.rhino.head.Node node75 = comment71.setType(18);
        boolean boolean76 = comment71.hasSideEffects();
        astRoot42.addComment(comment71);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(14, (com.google.javascript.rhino.head.Node) comment71, (-1));
        com.google.javascript.rhino.head.ast.AstRoot astRoot80 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet81 = astRoot80.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol83 = astRoot80.getSymbol("                                                                                                                                                                                                        ");
        node79.addChildToFront((com.google.javascript.rhino.head.Node) astRoot80);
        com.google.javascript.rhino.head.ast.Scope scope87 = new com.google.javascript.rhino.head.ast.Scope(136, 538062289);
        astRoot80.addChildToFront((com.google.javascript.rhino.head.Node) scope87);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap89 = astRoot80.getSymbolTable();
        int int90 = astRoot80.getRegexpCount();
        astRoot32.target = astRoot80;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode13.setJumpStatement((com.google.javascript.rhino.head.ast.Jump) astRoot32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet2);
        org.junit.Assert.assertNull(symbol4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "52\tSCRIPT 52 1\n" + "'", str8, "52\tSCRIPT 52 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9\t  SCRIPT 10 1\n" + "'", str21, "9\t  SCRIPT 10 1\n");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(astNodeComparator28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str31, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "                                                                                                                                                                                                        " + "'", str62, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(commentSet81);
        org.junit.Assert.assertNull(symbol83);
        org.junit.Assert.assertNull(strMap89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = scriptNode2.new NodeIterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode10.getChildScopes();
        int int13 = scriptNode10.getBaseLineno();
        com.google.javascript.rhino.head.Node node14 = scriptNode10.getLastSibling();
        scriptNode10.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList20 = scriptNode18.getFunctions();
        scriptNode18.setPosition((int) (byte) 10);
        java.lang.String str23 = scriptNode10.toStringTree(scriptNode18);
        int int24 = scriptNode10.getBaseLineno();
        com.google.javascript.rhino.head.Node node26 = scriptNode10.setType((int) (byte) -1);
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(9, (com.google.javascript.rhino.head.Node) scriptNode2, node26);
        scriptNode2.setEncodedSourceStart(100);
        boolean boolean30 = scriptNode2.hasSideEffects();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(functionNodeList20);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = scriptNode0.new NodeIterator();
        java.lang.String str3 = scriptNode0.getNextTempName();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = scriptNode0.iterator();
        int int5 = scriptNode0.getRegexpCount();
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "$0" + "'", str3, "$0");
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = scriptNode2.new NodeIterator();
        int int9 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = scriptNode2.getParentScope();
        scriptNode2.removeProp(65536);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        int int17 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = scriptNode14.getLastSibling();
        int int19 = scriptNode14.getEndLineno();
        scriptNode14.setBaseLineno(4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = astRoot22.getComments();
        int int24 = astRoot22.getEndLineno();
        com.google.javascript.rhino.head.Node node26 = astRoot22.setType((int) (short) 10);
        astRoot22.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator34 = scriptNode33.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        java.lang.String str42 = comment39.getValue();
        scriptNode33.setParent((com.google.javascript.rhino.head.ast.AstNode) comment39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        java.lang.String str64 = comment62.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray65 = new com.google.javascript.rhino.head.ast.Comment[] { comment50, comment56, comment62 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet66 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet66, commentArray65);
        astRoot44.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet66);
        boolean boolean69 = astRoot44.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray70 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList71 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList71, symbolArray70);
        astRoot44.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList71);
        com.google.javascript.rhino.head.Node node74 = astRoot44.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot44, (com.google.javascript.rhino.head.ast.Scope) scriptNode76);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) comment39, (com.google.javascript.rhino.head.Node) scriptNode76);
        astRoot22.addComment(comment39);
        scriptNode14.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot22);
        com.google.javascript.rhino.head.Token.CommentType commentType84 = null;
        com.google.javascript.rhino.head.ast.Comment comment86 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType84, "");
        com.google.javascript.rhino.head.Token.CommentType commentType87 = comment86.getCommentType();
        java.lang.String str89 = comment86.toSource(21);
        java.lang.String str90 = comment86.getValue();
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(15, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) astRoot22, (com.google.javascript.rhino.head.Node) comment86, 6);
        boolean boolean93 = astRoot22.hasChildren();
        int int94 = astRoot22.depth();
        astRoot22.setSourceName(">>>");
        int int97 = astRoot22.getLineno();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(scope10);
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(commentSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "                                                                                                                                                                                                        " + "'", str64, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(symbolArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(commentType87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "                                          " + "'", str89, "                                          ");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator3 = positionComparator1.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int5 = astRoot4.getBaseLineno();
        java.lang.String str6 = astRoot4.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        int int9 = positionComparator2.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot4, (com.google.javascript.rhino.head.ast.AstNode) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = scriptNode10.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = scriptNode10.new NodeIterator();
        astRoot7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor14 = null;
        astRoot7.visitComments(nodeVisitor14);
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = astRoot17.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        boolean boolean30 = comment29.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        java.lang.String str37 = comment35.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray38 = new com.google.javascript.rhino.head.ast.Comment[] { comment23, comment29, comment35 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet39 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet39, commentArray38);
        astRoot17.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet39);
        boolean boolean42 = astRoot17.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray43 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList44 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList44, symbolArray43);
        astRoot17.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList44);
        int int47 = astRoot17.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot48 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = astRoot48.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        boolean boolean55 = comment54.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        boolean boolean61 = comment60.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        java.lang.String str68 = comment66.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray69 = new com.google.javascript.rhino.head.ast.Comment[] { comment54, comment60, comment66 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet70 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet70, commentArray69);
        astRoot48.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet70);
        boolean boolean73 = astRoot48.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray74 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList75 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList75, symbolArray74);
        astRoot48.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList75);
        com.google.javascript.rhino.head.Node node78 = astRoot48.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot48, (com.google.javascript.rhino.head.ast.Scope) scriptNode80);
        com.google.javascript.rhino.head.ast.AstRoot astRoot83 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator84 = astRoot83.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor85 = astRoot83.iterator();
        astRoot83.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) astRoot17, (com.google.javascript.rhino.head.Node) astRoot48, (com.google.javascript.rhino.head.Node) astRoot83, (int) (byte) 0);
        astRoot48.setEncodedSource("                                ");
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) astRoot7, (com.google.javascript.rhino.head.Node) astRoot48);
        int int93 = astRoot48.getLength();
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray94 = astRoot48.getParamAndVarConst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str6, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "                                                                                                                                                                                                        " + "'", str37, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(symbolArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "                                                                                                                                                                                                        " + "'", str68, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(symbolArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(nodeItor85);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        java.lang.String str9 = astRoot6.debugPrint();
        com.google.javascript.rhino.head.ast.AstNode astNode10 = astRoot6.getParent();
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet12 = astRoot11.getComments();
        java.lang.String str13 = astRoot11.getSourceName();
        boolean boolean14 = astRoot11.hasChildren();
        com.google.javascript.rhino.head.Node node15 = astRoot11.getLastSibling();
        com.google.javascript.rhino.head.Node node16 = null;
        astRoot6.addChildBefore((com.google.javascript.rhino.head.Node) astRoot11, node16);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = astRoot11.getChildScopes();
        com.google.javascript.rhino.head.Node node19 = null;
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode21.getChildScopes();
        int int24 = scriptNode21.getBaseLineno();
        com.google.javascript.rhino.head.Node node25 = scriptNode21.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        java.lang.String str31 = scriptNode27.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode21.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode27, (com.google.javascript.rhino.head.Node) scriptNode33);
        java.lang.Object obj36 = scriptNode27.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str39 = scriptNode37.toSource((int) '4');
        java.lang.String str40 = scriptNode27.toStringTree(scriptNode37);
        com.google.javascript.rhino.head.Node node41 = scriptNode37.target;
        java.lang.String str43 = scriptNode37.toSource(10);
        scriptNode37.clearParentScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot45 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = astRoot45.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType49 = null;
        com.google.javascript.rhino.head.ast.Comment comment51 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType49, "");
        boolean boolean52 = comment51.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType55 = null;
        com.google.javascript.rhino.head.ast.Comment comment57 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType55, "");
        boolean boolean58 = comment57.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType61 = null;
        com.google.javascript.rhino.head.ast.Comment comment63 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType61, "");
        java.lang.String str65 = comment63.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray66 = new com.google.javascript.rhino.head.ast.Comment[] { comment51, comment57, comment63 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet67 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet67, commentArray66);
        astRoot45.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet67);
        boolean boolean70 = astRoot45.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode71 = astRoot45.getParent();
        java.lang.String str72 = astRoot45.debugPrint();
        int int73 = astRoot45.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet74 = astRoot45.getComments();
        astRoot45.checkParentLinks();
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot45);
        // The following exception was thrown during execution in test generation
        try {
            astRoot11.replaceChildAfter(node19, (com.google.javascript.rhino.head.Node) astRoot45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str9, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode10);
        org.junit.Assert.assertNull(commentSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str39, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "                    {\n                    }\n" + "'", str43, "                    {\n                    }\n");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "                                                                                                                                                                                                        " + "'", str65, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(astNode71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str72, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(commentSet74);
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.Node node7 = scriptNode3.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        java.lang.String str13 = scriptNode9.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.Object obj18 = scriptNode9.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        java.lang.String str22 = scriptNode9.toStringTree(scriptNode19);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        int int31 = scriptNode27.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode33.getFunctions();
        scriptNode33.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode27.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scope38);
        scriptNode33.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node42 = iRFactory25.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons43, errorReporter44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node62 = iRFactory45.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        scriptNode33.setTop(scriptNode53);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode33, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = scriptNode33.getTop();
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) scriptNode66);
        int int68 = scriptNode66.getType();
        com.google.javascript.rhino.head.ast.Scope scope69 = scriptNode66.getEnclosingScope();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope70 = com.google.javascript.rhino.head.ast.Scope.splitScope(scope69);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.ScriptNode");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(scriptNode66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 136 + "'", int68 == 136);
        org.junit.Assert.assertNotNull(scope69);
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = com.google.javascript.rhino.head.ast.AstNode.operatorToString((-1721493936));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid operator: -1721493936");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) ' ', (int) (short) 10);
        java.lang.String str3 = scope2.getJsDoc();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str7 = scriptNode5.toSource((int) '4');
        com.google.javascript.rhino.head.Node node8 = scriptNode5.getFirstChild();
        java.lang.Object obj10 = scriptNode5.getProp(18);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        scriptNode12.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList22 = scriptNode20.getFunctions();
        scriptNode20.setPosition((int) (byte) 10);
        java.lang.String str25 = scriptNode12.toStringTree(scriptNode20);
        int int26 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet29 = astRoot28.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol31 = astRoot28.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType34, "hi!");
        astRoot28.addChildrenToFront((com.google.javascript.rhino.head.Node) comment36);
        boolean boolean38 = astRoot28.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList42 = scriptNode40.getChildScopes();
        int int43 = scriptNode40.getBaseLineno();
        int int44 = scriptNode40.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList45 = scriptNode40.getSymbols();
        int int46 = scriptNode40.getPosition();
        com.google.javascript.rhino.head.ast.AstRoot astRoot47 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator48 = astRoot47.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = null;
        com.google.javascript.rhino.head.ast.Comment comment53 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType51, "");
        boolean boolean54 = comment53.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType57 = null;
        com.google.javascript.rhino.head.ast.Comment comment59 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType57, "");
        boolean boolean60 = comment59.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType63 = null;
        com.google.javascript.rhino.head.ast.Comment comment65 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType63, "");
        java.lang.String str67 = comment65.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray68 = new com.google.javascript.rhino.head.ast.Comment[] { comment53, comment59, comment65 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet69 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet69, commentArray68);
        astRoot47.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet69);
        boolean boolean72 = astRoot47.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray73 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList74 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList74, symbolArray73);
        astRoot47.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList74);
        com.google.javascript.rhino.head.Node node77 = astRoot47.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode79);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot47, (com.google.javascript.rhino.head.ast.Scope) scriptNode79);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node(19, (com.google.javascript.rhino.head.Node) astRoot28, (com.google.javascript.rhino.head.Node) scriptNode40, (com.google.javascript.rhino.head.Node) astRoot47, (int) (byte) 1);
        scriptNode12.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot47);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode5, (com.google.javascript.rhino.head.ast.Scope) astRoot47);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode86 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode86.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode87);
        scriptNode87.setEncodedSourceEnd(11);
        scriptNode87.setSourceName("-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        com.google.javascript.rhino.head.Node node94 = new com.google.javascript.rhino.head.Node(20, (com.google.javascript.rhino.head.Node) scriptNode5, (com.google.javascript.rhino.head.Node) scriptNode87, 13);
        scope2.addChildrenToBack(node94);
        scope2.setBounds(577653725, (-1034592013));
        com.google.javascript.rhino.head.Node node99 = scope2.getLastChild();
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str7, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(functionNodeList22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(commentSet29);
        org.junit.Assert.assertNull(symbol31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(scopeList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(symbolList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "                                                                                                                                                                                                        " + "'", str67, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(symbolArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node99);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons16 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean17 = compilerEnvirons16.isReservedKeywordAsIdentifier();
        boolean boolean18 = compilerEnvirons16.isIdeMode();
        compilerEnvirons16.setRecordingLocalJsDocComments(false);
        boolean boolean21 = compilerEnvirons16.isGenerateDebugInfo();
        compilerEnvirons16.setRecordingLocalJsDocComments(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        boolean boolean26 = compilerEnvirons24.getWarnTrailingComma();
        boolean boolean27 = compilerEnvirons24.isRecordingComments();
        boolean boolean28 = compilerEnvirons24.getWarnTrailingComma();
        boolean boolean29 = compilerEnvirons24.isRecordingLocalJsDocComments();
        boolean boolean30 = compilerEnvirons24.isIdeMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray37 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        compilerEnvirons31.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons24.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons16.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons0.setAllowSharpComments(true);
        com.google.javascript.rhino.head.IRFactory iRFactory46 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        compilerEnvirons0.setRecoverFromErrors(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(871114474);
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        int int8 = comment6.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = comment6.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        int int15 = scriptNode11.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList19 = scriptNode17.getFunctions();
        scriptNode17.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode11.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode17, (com.google.javascript.rhino.head.Node) scope22);
        scriptNode17.setEncodedSourceEnd(18);
        comment6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        scriptNode28.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap34 = scriptNode33.getSymbolTable();
        scriptNode28.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode33);
        com.google.javascript.rhino.head.ast.Scope scope36 = scriptNode28.getParentScope();
        boolean boolean37 = scriptNode28.hasChildren();
        com.google.javascript.rhino.head.ast.AstRoot astRoot39 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet40 = astRoot39.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol42 = astRoot39.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType45, "hi!");
        astRoot39.addChildrenToFront((com.google.javascript.rhino.head.Node) comment47);
        boolean boolean49 = astRoot39.hasSideEffects();
        boolean boolean50 = astRoot39.isInStrictMode();
        boolean boolean51 = astRoot39.isInStrictMode();
        scriptNode28.putProp((int) '#', (java.lang.Object) astRoot39);
        scriptNode17.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode28);
        com.google.javascript.rhino.head.ast.AstRoot astRoot54 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = astRoot54.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        boolean boolean61 = comment60.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        boolean boolean67 = comment66.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType70 = null;
        com.google.javascript.rhino.head.ast.Comment comment72 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType70, "");
        java.lang.String str74 = comment72.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray75 = new com.google.javascript.rhino.head.ast.Comment[] { comment60, comment66, comment72 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet76 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet76, commentArray75);
        astRoot54.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet76);
        boolean boolean79 = astRoot54.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray80 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList81 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList81, symbolArray80);
        astRoot54.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList81);
        int int84 = astRoot54.getEncodedSourceStart();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode28, (com.google.javascript.rhino.head.Node) astRoot54);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode88 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.Scope scope90 = scriptNode88.getDefiningScope("                                          ");
        int int91 = scriptNode88.getRegexpCount();
        int int92 = scriptNode88.getBaseLineno();
        int int93 = scriptNode88.getLength();
        scriptNode28.putProp((-568490075), (java.lang.Object) scriptNode88);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node95 = scriptNode28.getFinally();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(commentType9);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(functionNodeList19);
        org.junit.Assert.assertNull(strMap34);
        org.junit.Assert.assertNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(commentSet40);
        org.junit.Assert.assertNull(symbol42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "                                                                                                                                                                                                        " + "'", str74, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(symbolArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNull(scope90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = node1.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node3 = nodeIterator2.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        scriptNode1.clearParentScope();
        java.lang.String str5 = scriptNode1.getSourceName();
        com.google.javascript.rhino.head.Node node7 = com.google.javascript.rhino.head.Node.newNumber((double) 100L);
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment(842975161, 26, commentType10, "                                                                hi!");
        node7.setJsDocNode(comment12);
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType16, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        comment18.setCommentType(commentType19);
        int int23 = comment18.getIntProp((int) (byte) 10, 0);
        comment18.setPosition(161);
        java.lang.String str27 = comment18.toSource((-325419474));
        scriptNode1.addChildAfter(node7, (com.google.javascript.rhino.head.Node) comment18);
        comment18.setBounds(26, 136);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        com.google.javascript.rhino.head.Node node21 = scriptNode17.target;
        java.lang.String str23 = scriptNode17.toSource(10);
        scriptNode17.clearParentScope();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList25 = scriptNode17.getStatements();
        scriptNode17.putIntProp(0, (int) (short) -1);
        com.google.javascript.rhino.head.ast.Symbol symbol30 = scriptNode17.getSymbol("                ");
        int int31 = scriptNode17.getParamCount();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                    {\n                    }\n" + "'", str23, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(astNodeList25);
        org.junit.Assert.assertNull(symbol30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setXmlAvailable(true);
        com.google.javascript.rhino.head.IRFactory iRFactory8 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        boolean boolean9 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isStrictMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor2 = astRoot0.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode9.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet13 = astRoot12.getComments();
        int int14 = astRoot12.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        astRoot12.visitComments(nodeVisitor15);
        com.google.javascript.rhino.head.Node node17 = astRoot12.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet18 = astRoot12.getComments();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) astRoot12);
        int int20 = scriptNode9.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory23 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList27 = scriptNode25.getFunctions();
        scriptNode25.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node30 = iRFactory23.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.lang.String str31 = scriptNode25.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        int int36 = scriptNode33.getBaseLineno();
        com.google.javascript.rhino.head.Node node37 = scriptNode33.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode38.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList41 = scriptNode39.getChildScopes();
        java.lang.String str43 = scriptNode39.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode33.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.lang.Object obj48 = scriptNode39.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str51 = scriptNode49.toSource((int) '4');
        java.lang.String str52 = scriptNode39.toStringTree(scriptNode49);
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode39);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList55 = scriptNode9.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray57 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList58 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList58, symbolArray57);
        scriptNode56.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList58);
        com.google.javascript.rhino.head.ast.AstRoot astRoot61 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int62 = astRoot61.getParamCount();
        int int63 = astRoot61.getRegexpCount();
        scriptNode56.addChildToBack((com.google.javascript.rhino.head.Node) astRoot61);
        scriptNode9.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot61);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode9);
        scriptNode9.putIntProp((-1492185149), 605628279);
        int int70 = scriptNode9.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = scriptNode9.getParamOrVarName(41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 41");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(commentSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(commentSet18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(functionNodeList27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(scopeList41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str51, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(scopeList55);
        org.junit.Assert.assertNotNull(symbolArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        java.lang.String str31 = comment29.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray32 = new com.google.javascript.rhino.head.ast.Comment[] { comment17, comment23, comment29 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet33, commentArray32);
        astRoot11.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet33);
        boolean boolean36 = astRoot11.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = astRoot11.getParent();
        astRoot11.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scope10, (com.google.javascript.rhino.head.Node) astRoot11, 6);
        astRoot11.setLineno((int) '#');
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        com.google.javascript.rhino.head.Token.CommentType commentType49 = comment48.getCommentType();
        int int50 = comment48.depth();
        astRoot11.addComment(comment48);
        com.google.javascript.rhino.head.Node node53 = comment48.setType(136);
        comment48.setBounds(0, 136);
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(astNode37);
        org.junit.Assert.assertNull(commentType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap48 = scriptNode32.getSymbolTable();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = scriptNode32.new NodeIterator();
        scriptNode32.setEndLineno(764472231);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strMap48);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator3.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int7 = astRoot6.getBaseLineno();
        java.lang.String str8 = astRoot6.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        int int11 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot6, (com.google.javascript.rhino.head.ast.AstNode) astRoot9);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator12 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor20 = comment17.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        comment17.setCommentType(commentType21);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator23 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator24 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator25 = positionComparator23.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator24);
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int27 = astRoot26.getBaseLineno();
        java.lang.String str28 = astRoot26.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = astRoot29.new NodeIterator();
        int int31 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot26, (com.google.javascript.rhino.head.ast.AstNode) astRoot29);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.putIntProp((int) (short) 1, 1);
        java.lang.String str36 = scriptNode32.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator38 = scope37.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        scope37.setTop(scriptNode40);
        scope37.setLineno((int) (short) -1);
        int int45 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode32, (com.google.javascript.rhino.head.ast.AstNode) scope37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str62 = scriptNode32.toStringTree(scriptNode53);
        int int63 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) comment17, (com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator64 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator65 = positionComparator4.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator64);
        com.google.javascript.rhino.head.ast.AstRoot astRoot66 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet67 = astRoot66.getComments();
        java.lang.String str68 = astRoot66.getSourceName();
        boolean boolean69 = astRoot66.hasChildren();
        int int70 = astRoot66.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList74 = scriptNode72.getChildScopes();
        int int75 = scriptNode72.getBaseLineno();
        int int76 = scriptNode72.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode77.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode78);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList80 = scriptNode78.getFunctions();
        scriptNode78.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope83 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode72.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode78, (com.google.javascript.rhino.head.Node) scope83);
        int int85 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot66, (com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        scriptNode72.putIntProp((-306271829), 18);
        java.lang.String str89 = scriptNode72.getEncodedSource();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str8, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(astNodeComparator25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str28, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(astNodeComparator65);
        org.junit.Assert.assertNull(commentSet67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(scopeList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(functionNodeList80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor13 = astRoot11.iterator();
        scriptNode8.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        astRoot11.visitComments(nodeVisitor15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        com.google.javascript.rhino.head.Node node20 = scriptNode17.getFirstChild();
        astRoot11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode17);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        com.google.javascript.rhino.head.Node node28 = scriptNode24.getLastSibling();
        int int29 = scriptNode24.getEndLineno();
        scriptNode24.setBaseLineno(4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = astRoot32.getComments();
        int int34 = astRoot32.getEndLineno();
        com.google.javascript.rhino.head.Node node36 = astRoot32.setType((int) (short) 10);
        astRoot32.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator44 = scriptNode43.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        java.lang.String str51 = comment49.toSource(100);
        java.lang.String str52 = comment49.getValue();
        scriptNode43.setParent((com.google.javascript.rhino.head.ast.AstNode) comment49);
        com.google.javascript.rhino.head.ast.AstRoot astRoot54 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = astRoot54.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        boolean boolean61 = comment60.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        boolean boolean67 = comment66.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType70 = null;
        com.google.javascript.rhino.head.ast.Comment comment72 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType70, "");
        java.lang.String str74 = comment72.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray75 = new com.google.javascript.rhino.head.ast.Comment[] { comment60, comment66, comment72 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet76 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet76, commentArray75);
        astRoot54.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet76);
        boolean boolean79 = astRoot54.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray80 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList81 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList81, symbolArray80);
        astRoot54.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList81);
        com.google.javascript.rhino.head.Node node84 = astRoot54.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode86 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode85.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode86);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot54, (com.google.javascript.rhino.head.ast.Scope) scriptNode86);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode42, (com.google.javascript.rhino.head.Node) comment49, (com.google.javascript.rhino.head.Node) scriptNode86);
        astRoot32.addComment(comment49);
        scriptNode24.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot32);
        boolean boolean92 = scriptNode24.hasChildren();
        astRoot11.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode24);
        com.google.javascript.rhino.head.Node node94 = scriptNode24.target;
        scriptNode24.clearParentScope();
        scriptNode24.setEncodedSourceStart((-1728226312));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray98 = scriptNode24.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(commentSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                                                                                                                        " + "'", str51, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "                                                                                                                                                                                                        " + "'", str74, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(symbolArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNull(node94);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        int int8 = compilerEnvirons6.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        boolean boolean11 = compilerEnvirons9.isIdeMode();
        compilerEnvirons9.setRecordingLocalJsDocComments(false);
        boolean boolean14 = compilerEnvirons9.isGenerateDebugInfo();
        compilerEnvirons9.setRecordingLocalJsDocComments(true);
        boolean boolean17 = compilerEnvirons9.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        boolean boolean20 = compilerEnvirons18.getWarnTrailingComma();
        boolean boolean21 = compilerEnvirons18.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = compilerEnvirons18.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser23 = new com.google.javascript.rhino.head.Parser(compilerEnvirons9, errorReporter22);
        compilerEnvirons6.setErrorReporter(errorReporter22);
        compilerEnvirons0.setErrorReporter(errorReporter22);
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        boolean boolean28 = compilerEnvirons0.isIdeMode();
        int int29 = compilerEnvirons0.getOptimizationLevel();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 170 + "'", int8 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(errorReporter22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator1 = positionComparator0.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator4 = positionComparator2.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator3);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        int int10 = scriptNode7.getBaseLineno();
        com.google.javascript.rhino.head.Node node11 = scriptNode7.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        java.lang.String str17 = scriptNode13.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode7.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode13, (com.google.javascript.rhino.head.Node) scriptNode19);
        int int21 = scriptNode13.getType();
        java.lang.String str22 = scriptNode13.getSourceName();
        java.lang.String str23 = scriptNode13.toSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList31 = scriptNode26.getSymbols();
        int int32 = scriptNode26.getPosition();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(538062289, (com.google.javascript.rhino.head.Node) scriptNode26);
        int int34 = positionComparator0.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode13, (com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump35 = scriptNode13.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator1);
        org.junit.Assert.assertNotNull(astNodeComparator4);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 136 + "'", int21 == 136);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n}\n" + "'", str23, "{\n}\n");
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(symbolList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray4 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList5 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList5, symbolArray4);
        scriptNode3.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList5);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList5);
        scriptNode0.setSourceName("ScriptNode");
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(19);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = scope15.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        scope15.setTop(scriptNode18);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor21 = scope15.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        int int28 = comment26.getLineno();
        com.google.javascript.rhino.head.Node node30 = comment26.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        boolean boolean36 = comment35.hasSideEffects();
        int int37 = comment35.getLineno();
        com.google.javascript.rhino.head.Node node39 = comment35.setType(18);
        comment35.removeChildren();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope15, (com.google.javascript.rhino.head.Node) comment26, (com.google.javascript.rhino.head.Node) comment35, 15);
        boolean boolean43 = scope15.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray45 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList46 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList46, symbolArray45);
        scriptNode44.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList46);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj52 = scriptNode51.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        int int56 = scriptNode53.getEndLineno();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode51, (com.google.javascript.rhino.head.Node) scriptNode53);
        scriptNode44.setCompilerData((java.lang.Object) scriptNode51);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(12, node13, (com.google.javascript.rhino.head.Node) scope15, (com.google.javascript.rhino.head.Node) scriptNode51, 1617059566);
        int int61 = scriptNode51.getLineno();
        int int62 = scriptNode0.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = scriptNode51.getRegexpFlags(53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
        org.junit.Assert.assertNotNull(nodeItor21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(symbolArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node19 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        int int20 = scriptNode10.getRegexpCount();
        scriptNode10.setBaseLineno(21);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory26 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList30 = scriptNode28.getFunctions();
        scriptNode28.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node33 = iRFactory26.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.lang.String str34 = scriptNode28.getSourceName();
        int int35 = scriptNode28.getRegexpCount();
        java.lang.Object obj36 = scriptNode28.getCompilerData();
        java.lang.String str37 = scriptNode28.getSourceName();
        scriptNode28.setLineno((-1492185149));
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(209601021, (com.google.javascript.rhino.head.Node) scriptNode28);
        scriptNode10.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode28);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node42 = scriptNode10.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(functionNodeList30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.putIntProp((int) (short) 1, 1);
        java.lang.String str13 = scriptNode9.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator15 = scope14.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        scope14.setTop(scriptNode17);
        scope14.setLineno((int) (short) -1);
        int int22 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode9, (com.google.javascript.rhino.head.ast.AstNode) scope14);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        int int28 = scriptNode24.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode30.getFunctions();
        scriptNode30.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope35 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode24.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) scope35);
        scriptNode30.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str39 = scriptNode9.toStringTree(scriptNode30);
        scriptNode9.clearParentScope();
        int int41 = scriptNode9.depth();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode42.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode43);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList45 = scriptNode43.getFunctions();
        scriptNode43.setPosition((int) (byte) 10);
        int int48 = scriptNode43.getEncodedSourceEnd();
        int int49 = scriptNode43.getLineno();
        scriptNode43.setEncodedSourceEnd((-476424842));
        scriptNode9.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode43);
        int int53 = scriptNode9.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode55.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope58 = scriptNode55.getEnclosingScope();
        java.lang.String str59 = scriptNode55.getEncodedSource();
        java.lang.String str60 = scriptNode55.getJsDoc();
        boolean[] booleanArray61 = scriptNode55.getParamAndVarConst();
        java.lang.String str62 = scriptNode55.toSource();
        scriptNode9.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode55);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor64 = scriptNode9.iterator();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(functionNodeList45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(scope58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "{\n}\n" + "'", str62, "{\n}\n");
        org.junit.Assert.assertNotNull(nodeItor64);
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(1278095946, "                                                ");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = comment4.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        comment4.setCommentType(commentType6);
        java.lang.Object obj9 = comment4.getProp(0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int11 = astRoot10.getBaseLineno();
        int int12 = astRoot10.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        int int17 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = scriptNode14.getLastSibling();
        scriptNode14.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode21.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList24 = scriptNode22.getFunctions();
        scriptNode22.setPosition((int) (byte) 10);
        java.lang.String str27 = scriptNode14.toStringTree(scriptNode22);
        int int28 = scriptNode14.getBaseLineno();
        astRoot10.target = scriptNode14;
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        int int36 = comment34.getLineno();
        com.google.javascript.rhino.head.Node node38 = comment34.setType(18);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor39 = node38.iterator();
        int int40 = node38.getLineno();
        scriptNode14.addChildToFront(node38);
        com.google.javascript.rhino.head.ast.Comment comment42 = node38.getJsDocNode();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        boolean boolean48 = comment47.hasSideEffects();
        int int49 = comment47.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope50 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator51 = scope50.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        scope50.setTop(scriptNode53);
        comment47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        comment4.addChildAfter(node38, (com.google.javascript.rhino.head.Node) scriptNode53);
        int int60 = scriptNode53.getIntProp(1936891202, (int) (byte) 100);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((-476424842));
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor63 = node62.iterator();
        scriptNode53.addChildToFront(node62);
        // The following exception was thrown during execution in test generation
        try {
            node62.setString("                                                                hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(functionNodeList24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeItor39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(comment42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator51);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertNotNull(nodeItor63);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot7, (com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList16 = scriptNode12.getSymbols();
        scriptNode12.setSourceName("                                          ");
        int int19 = scriptNode12.getLineno();
        int int20 = scriptNode12.getBaseLineno();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(symbolList16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-60212263));
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(9);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = scriptNode1.addFunction(functionNode2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot6.visitComments(nodeVisitor13);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList15 = astRoot6.getStatements();
        java.lang.String str17 = astRoot6.makeIndent(0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot18 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = astRoot18.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        boolean boolean25 = comment24.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType28, "");
        boolean boolean31 = comment30.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        java.lang.String str38 = comment36.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray39 = new com.google.javascript.rhino.head.ast.Comment[] { comment24, comment30, comment36 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet40 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet40, commentArray39);
        astRoot18.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet40);
        boolean boolean43 = astRoot18.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode44 = astRoot18.getParent();
        java.lang.String str45 = astRoot18.debugPrint();
        int int46 = astRoot18.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = astRoot18.getComments();
        astRoot18.checkParentLinks();
        astRoot18.setEndLineno(842975161);
        com.google.javascript.rhino.head.Token.CommentType commentType53 = null;
        com.google.javascript.rhino.head.ast.Comment comment55 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType53, "");
        java.lang.String str57 = comment55.toSource(100);
        java.lang.String str58 = comment55.getValue();
        boolean boolean59 = comment55.hasSideEffects();
        java.lang.String str60 = comment55.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType61 = comment55.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType62 = null;
        comment55.setCommentType(commentType62);
        astRoot18.addComment(comment55);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = astRoot6.getIndexForNameNode((com.google.javascript.rhino.head.Node) astRoot18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(astNodeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "                                                                                                                                                                                                        " + "'", str38, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(astNode44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str45, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(commentSet47);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "                                                                                                                                                                                                        " + "'", str57, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(commentType61);
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap7 = scriptNode6.getSymbolTable();
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode6);
        com.google.javascript.rhino.head.ast.Scope scope9 = scriptNode1.getParentScope();
        boolean boolean10 = scriptNode1.hasChildren();
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet13 = astRoot12.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol15 = astRoot12.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType18, "hi!");
        astRoot12.addChildrenToFront((com.google.javascript.rhino.head.Node) comment20);
        boolean boolean22 = astRoot12.hasSideEffects();
        boolean boolean23 = astRoot12.isInStrictMode();
        boolean boolean24 = astRoot12.isInStrictMode();
        scriptNode1.putProp((int) '#', (java.lang.Object) astRoot12);
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str27 = astRoot26.getJsDoc();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet28 = astRoot26.getComments();
        java.lang.String str29 = astRoot26.debugPrint();
        astRoot12.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot26);
        com.google.javascript.rhino.head.ast.AstRoot astRoot31 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator32 = astRoot31.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        boolean boolean44 = comment43.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        java.lang.String str51 = comment49.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray52 = new com.google.javascript.rhino.head.ast.Comment[] { comment37, comment43, comment49 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet53 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet53, commentArray52);
        astRoot31.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet53);
        boolean boolean56 = astRoot31.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray57 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList58 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList58, symbolArray57);
        astRoot31.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList58);
        com.google.javascript.rhino.head.Node node61 = astRoot31.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot31, (com.google.javascript.rhino.head.ast.Scope) scriptNode63);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode66.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode67);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList69 = scriptNode67.getChildScopes();
        int int70 = scriptNode67.getBaseLineno();
        com.google.javascript.rhino.head.Node node71 = scriptNode67.getLastSibling();
        scriptNode67.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode74.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode75);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList77 = scriptNode75.getFunctions();
        scriptNode75.setPosition((int) (byte) 10);
        java.lang.String str80 = scriptNode67.toStringTree(scriptNode75);
        int int81 = scriptNode67.getBaseLineno();
        com.google.javascript.rhino.head.Node node83 = scriptNode67.setType((int) (byte) -1);
        java.lang.String str84 = astRoot31.toStringTree(scriptNode67);
        scriptNode67.clearParentScope();
        scriptNode67.setEncodedSourceBounds(10, (int) (byte) 10);
        int int89 = scriptNode67.getBaseLineno();
        java.lang.String str90 = scriptNode67.toSource();
        // The following exception was thrown during execution in test generation
        try {
            astRoot12.removeChild((com.google.javascript.rhino.head.Node) scriptNode67);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(commentSet13);
        org.junit.Assert.assertNull(symbol15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(commentSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str29, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                                                                                                                        " + "'", str51, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(symbolArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNull(scopeList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(functionNodeList77);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "{\n}\n" + "'", str90, "{\n}\n");
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean8 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean12 = compilerEnvirons11.isReservedKeywordAsIdentifier();
        boolean boolean13 = compilerEnvirons11.getWarnTrailingComma();
        compilerEnvirons11.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet16 = compilerEnvirons11.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter17 = compilerEnvirons11.getErrorReporter();
        java.lang.String[] strArray23 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        compilerEnvirons11.setActivationNames((java.util.Set<java.lang.String>) strSet24);
        boolean boolean27 = compilerEnvirons11.isGenerateDebugInfo();
        boolean boolean28 = compilerEnvirons11.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons29 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean30 = compilerEnvirons29.isReservedKeywordAsIdentifier();
        int int31 = compilerEnvirons29.getLanguageVersion();
        int int32 = compilerEnvirons29.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons33 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean34 = compilerEnvirons33.isReservedKeywordAsIdentifier();
        compilerEnvirons33.setStrictMode(true);
        compilerEnvirons33.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons39 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean40 = compilerEnvirons39.isReservedKeywordAsIdentifier();
        boolean boolean41 = compilerEnvirons39.getWarnTrailingComma();
        compilerEnvirons39.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet44 = compilerEnvirons39.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter45 = compilerEnvirons39.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory46 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons33, errorReporter45);
        com.google.javascript.rhino.head.IRFactory iRFactory47 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons29, errorReporter45);
        com.google.javascript.rhino.head.IRFactory iRFactory48 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons11, errorReporter45);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons49 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray55 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        compilerEnvirons49.setActivationNames((java.util.Set<java.lang.String>) strSet56);
        boolean boolean59 = compilerEnvirons49.isGenerateDebugInfo();
        compilerEnvirons49.setOptimizationLevel((int) (short) 1);
        compilerEnvirons49.setAllowSharpComments(true);
        boolean boolean64 = compilerEnvirons49.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter65 = compilerEnvirons49.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser66 = new com.google.javascript.rhino.head.Parser(compilerEnvirons11, errorReporter65);
        com.google.javascript.rhino.head.IRFactory iRFactory67 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter65);
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(errorReporter17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 170 + "'", int31 == 170);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 170 + "'", int32 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(errorReporter45);
        org.junit.Assert.assertNotNull(compilerEnvirons49);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(errorReporter65);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope6 = astRoot0.getEnclosingScope();
        astRoot0.setEncodedSourceStart(23);
        astRoot0.setLineno((-1116244898));
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator11 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator12 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator13 = positionComparator11.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator12);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int15 = astRoot14.getBaseLineno();
        java.lang.String str16 = astRoot14.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = astRoot17.new NodeIterator();
        int int19 = positionComparator12.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot14, (com.google.javascript.rhino.head.ast.AstNode) astRoot17);
        java.lang.String str21 = astRoot14.makeIndent(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList25 = scriptNode23.getChildScopes();
        int int26 = scriptNode23.getBaseLineno();
        com.google.javascript.rhino.head.Node node27 = scriptNode23.getLastSibling();
        java.lang.String str29 = scriptNode23.toSource((int) (short) -1);
        astRoot14.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode23);
        com.google.javascript.rhino.head.ast.Scope scope31 = scriptNode23.getEnclosingScope();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons32 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory34 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons32, errorReporter33);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        int int40 = scriptNode36.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList44 = scriptNode42.getFunctions();
        scriptNode42.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope47 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode36.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode42, (com.google.javascript.rhino.head.Node) scope47);
        scriptNode42.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node51 = iRFactory34.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        int int52 = scriptNode42.getRegexpCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot53 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator54 = astRoot53.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType57 = null;
        com.google.javascript.rhino.head.ast.Comment comment59 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType57, "");
        boolean boolean60 = comment59.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType63 = null;
        com.google.javascript.rhino.head.ast.Comment comment65 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType63, "");
        boolean boolean66 = comment65.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType69 = null;
        com.google.javascript.rhino.head.ast.Comment comment71 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType69, "");
        java.lang.String str73 = comment71.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray74 = new com.google.javascript.rhino.head.ast.Comment[] { comment59, comment65, comment71 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet75 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet75, commentArray74);
        astRoot53.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet75);
        boolean boolean78 = astRoot53.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode79 = astRoot53.getParent();
        astRoot53.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.ast.AstNode astNode82 = astRoot53.getParent();
        java.lang.String str83 = scriptNode42.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot53);
        com.google.javascript.rhino.head.ast.Scope scope84 = null;
        scriptNode42.setParentScope(scope84);
        scope31.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode42);
        java.lang.String str87 = scriptNode42.getSourceName();
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.setLoop((com.google.javascript.rhino.head.ast.Jump) scriptNode42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(scope6);
        org.junit.Assert.assertNotNull(astNodeComparator13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str16, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                " + "'", str21, "                                ");
        org.junit.Assert.assertNull(scopeList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n}\n" + "'", str29, "{\n}\n");
        org.junit.Assert.assertNotNull(scope31);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(functionNodeList44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "                                                                                                                                                                                                        " + "'", str73, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(astNode79);
        org.junit.Assert.assertNull(astNode82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean1 = astRoot0.hasSideEffects();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap2 = null;
        astRoot0.setSymbolTable(strMap2);
        boolean boolean4 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        int int10 = scriptNode6.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList14 = scriptNode12.getFunctions();
        scriptNode12.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope17 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scope17);
        scriptNode12.setEncodedSource("-1\tSCRIPT -1 1\n");
        scriptNode12.setBaseLineno(12);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        scriptNode12.setRelative(20);
        int int26 = scriptNode12.getEndLineno();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(functionNodeList14);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode24.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = astRoot27.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor29 = astRoot27.iterator();
        scriptNode24.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot27);
        java.lang.String str31 = scriptNode24.toString();
        scriptNode17.setCompilerData((java.lang.Object) scriptNode24);
        com.google.javascript.rhino.head.ast.Comment comment33 = scriptNode24.getJsDocNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList37 = scriptNode35.getChildScopes();
        int int38 = scriptNode35.getBaseLineno();
        com.google.javascript.rhino.head.Node node39 = scriptNode35.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode41.getChildScopes();
        java.lang.String str45 = scriptNode41.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode35.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode41, (com.google.javascript.rhino.head.Node) scriptNode47);
        java.lang.Object obj50 = scriptNode41.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode24, (com.google.javascript.rhino.head.ast.Scope) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode41.getChildScopes();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(nodeItor29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "136" + "'", str31, "136");
        org.junit.Assert.assertNull(comment33);
        org.junit.Assert.assertNull(scopeList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(scopeList52);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        scriptNode2.setBaseLineno(18);
        scriptNode2.setEndLineno(26);
        com.google.javascript.rhino.head.Node node9 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(1275261773, (com.google.javascript.rhino.head.Node) scriptNode2, 4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope12 = scriptNode2.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertNotNull(node9);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot6.visitComments(nodeVisitor13);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope15 = astRoot6.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        java.lang.String str4 = scriptNode0.getEncodedSource();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = scriptNode0.new NodeIterator();
        boolean boolean6 = nodeIterator5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node7 = nodeIterator5.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        com.google.javascript.rhino.head.Node node23 = scriptNode17.getLastSibling();
        java.lang.Object obj25 = node23.getProp((-117418037));
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scope1.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        scope1.setTop(scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scope1.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        int int14 = comment12.getLineno();
        com.google.javascript.rhino.head.Node node16 = comment12.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        int int23 = comment21.getLineno();
        com.google.javascript.rhino.head.Node node25 = comment21.setType(18);
        comment21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope1, (com.google.javascript.rhino.head.Node) comment12, (com.google.javascript.rhino.head.Node) comment21, 15);
        com.google.javascript.rhino.head.Node node29 = scope1.getFirstChild();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap30 = scope1.getSymbolTable();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        java.lang.String str35 = scriptNode32.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode37.getChildScopes();
        int int40 = scriptNode37.getBaseLineno();
        com.google.javascript.rhino.head.Node node41 = scriptNode37.getLastSibling();
        int int42 = scriptNode37.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator43 = scriptNode37.new NodeIterator();
        int int44 = scriptNode37.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot45 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = astRoot45.new NodeIterator();
        scriptNode37.setCompilerData((java.lang.Object) nodeIterator46);
        int int48 = scriptNode32.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode49.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode50.getFunctions();
        scriptNode50.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot55 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int56 = astRoot55.getBaseLineno();
        scriptNode50.addChildToBack((com.google.javascript.rhino.head.Node) astRoot55);
        scriptNode50.flattenSymbolTable(true);
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        scope1.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode50);
        scope1.setBounds(65536, (-1496675853));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = scope1.getTop();
        scriptNode65.setBaseLineno(492844799);
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 98062381 + "'", int48 == 98062381);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(scriptNode65);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((-110742292), 994604176);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = scope2.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        astRoot0.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.lang.String str20 = comment17.getValue();
        scriptNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) comment17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        com.google.javascript.rhino.head.Node node52 = astRoot22.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot22, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) comment17, (com.google.javascript.rhino.head.Node) scriptNode54);
        astRoot0.addComment(comment17);
        java.lang.Object obj60 = astRoot0.getProp((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = astRoot0.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(obj60);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((-777163487));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator4 = scriptNode3.spliterator();
        com.google.javascript.rhino.head.Node node6 = scriptNode3.setType((int) '#');
        int int7 = scriptNode3.getLineno();
        boolean boolean8 = scriptNode3.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node node12 = scriptNode9.setType((int) '#');
        java.lang.Object obj13 = scriptNode9.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol15 = scriptNode9.getSymbol("typeof");
        scriptNode9.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot18 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet19 = astRoot18.getComments();
        int int20 = astRoot18.getEndLineno();
        com.google.javascript.rhino.head.Node node22 = astRoot18.setType((int) (short) 10);
        astRoot18.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator30 = scriptNode29.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        java.lang.String str37 = comment35.toSource(100);
        java.lang.String str38 = comment35.getValue();
        scriptNode29.setParent((com.google.javascript.rhino.head.ast.AstNode) comment35);
        com.google.javascript.rhino.head.ast.AstRoot astRoot40 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = astRoot40.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        boolean boolean53 = comment52.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType56 = null;
        com.google.javascript.rhino.head.ast.Comment comment58 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType56, "");
        java.lang.String str60 = comment58.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray61 = new com.google.javascript.rhino.head.ast.Comment[] { comment46, comment52, comment58 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet62 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet62, commentArray61);
        astRoot40.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet62);
        boolean boolean65 = astRoot40.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray66 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList67 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList67, symbolArray66);
        astRoot40.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList67);
        com.google.javascript.rhino.head.Node node70 = astRoot40.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot40, (com.google.javascript.rhino.head.ast.Scope) scriptNode72);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode28, (com.google.javascript.rhino.head.Node) comment35, (com.google.javascript.rhino.head.Node) scriptNode72);
        astRoot18.addComment(comment35);
        com.google.javascript.rhino.head.Node node77 = astRoot18.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator78 = node77.spliterator();
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node(21, (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) scriptNode9, node77, (int) (byte) 10);
        boolean boolean81 = node80.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node82 = scriptNode1.getChildBefore(node80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(symbol15);
        org.junit.Assert.assertNull(commentSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(nodeSpliterator30);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "                                                                                                                                                                                                        " + "'", str37, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "                                                                                                                                                                                                        " + "'", str60, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(symbolArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(nodeSpliterator78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setGenerateObserverCount(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node node3 = scriptNode0.setType((int) '#');
        java.lang.Object obj4 = scriptNode0.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol6 = scriptNode0.getSymbol("typeof");
        scriptNode0.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode10.getChildScopes();
        int int13 = scriptNode10.getBaseLineno();
        com.google.javascript.rhino.head.Node node14 = scriptNode10.getLastSibling();
        int int15 = scriptNode10.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = scriptNode10.new NodeIterator();
        int int17 = scriptNode10.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope18 = scriptNode10.getParentScope();
        java.lang.String str19 = scriptNode10.debugPrint();
        scriptNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode10);
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        boolean boolean26 = comment25.hasSideEffects();
        int int27 = comment25.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = comment25.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode30.getChildScopes();
        int int33 = scriptNode30.getBaseLineno();
        int int34 = scriptNode30.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList38 = scriptNode36.getFunctions();
        scriptNode36.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope41 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode30.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode36, (com.google.javascript.rhino.head.Node) scope41);
        scriptNode36.setEncodedSourceEnd(18);
        comment25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        int int46 = scriptNode36.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot47 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int48 = astRoot47.getBaseLineno();
        int int49 = astRoot47.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode51.getChildScopes();
        int int54 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.Node node55 = scriptNode51.getLastSibling();
        scriptNode51.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList61 = scriptNode59.getFunctions();
        scriptNode59.setPosition((int) (byte) 10);
        java.lang.String str64 = scriptNode51.toStringTree(scriptNode59);
        int int65 = scriptNode51.getBaseLineno();
        astRoot47.target = scriptNode51;
        scriptNode36.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot47);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor68 = scriptNode36.iterator();
        boolean boolean69 = scriptNode36.hasChildren();
        com.google.javascript.rhino.head.ast.AstRoot astRoot70 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str72 = astRoot70.toSource((int) '4');
        astRoot70.setPosition(100);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray76 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList77 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList77, symbolArray76);
        scriptNode75.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList77);
        astRoot70.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList77);
        scriptNode36.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList77);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node82 = scriptNode10.getChildBefore((com.google.javascript.rhino.head.Node) scriptNode36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(symbol6);
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1\t  SCRIPT 0 1\n" + "'", str19, "-1\t  SCRIPT 0 1\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNull(commentType28);
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(functionNodeList38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(functionNodeList61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(nodeItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(symbolArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        scriptNode7.putIntProp((-837790279), 520206471);
        java.lang.String str20 = scriptNode7.shortName();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ScriptNode" + "'", str20, "ScriptNode");
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getParamCount();
        int int2 = astRoot0.getPosition();
        com.google.javascript.rhino.head.Node node3 = astRoot0.target;
        astRoot0.checkParentLinks();
        com.google.javascript.rhino.head.ast.AstNode astNode5 = astRoot0.getParent();
        com.google.javascript.rhino.head.Token.CommentType commentType8 = null;
        com.google.javascript.rhino.head.ast.Comment comment10 = new com.google.javascript.rhino.head.ast.Comment((int) '4', (int) (byte) 1, commentType8, "                                                                                                                                                                                                  ");
        java.lang.String str12 = comment10.toSource(25);
        java.lang.String str13 = comment10.getValue();
        comment10.setLength(5);
        // The following exception was thrown during execution in test generation
        try {
            astNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) comment10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(astNode5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                                                                                                                                                                                                                    " + "'", str12, "                                                                                                                                                                                                                                                    ");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                                                                                                                                                                  " + "'", str13, "                                                                                                                                                                                                  ");
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getLineno();
        java.lang.Object obj32 = astRoot0.getProp(0);
        astRoot0.removeProp((-1116244898));
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = astRoot0.addFunction(functionNode35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator3 = positionComparator1.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int5 = astRoot4.getBaseLineno();
        java.lang.String str6 = astRoot4.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        int int9 = positionComparator2.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot4, (com.google.javascript.rhino.head.ast.AstNode) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = scriptNode10.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = scriptNode10.new NodeIterator();
        astRoot7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        com.google.javascript.rhino.head.Node node14 = scriptNode10.getNext();
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray41 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList42 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList42, symbolArray41);
        astRoot15.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList42);
        com.google.javascript.rhino.head.Node node45 = astRoot15.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot15, (com.google.javascript.rhino.head.ast.Scope) scriptNode47);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode51.getChildScopes();
        int int54 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.Node node55 = scriptNode51.getLastSibling();
        scriptNode51.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList61 = scriptNode59.getFunctions();
        scriptNode59.setPosition((int) (byte) 10);
        java.lang.String str64 = scriptNode51.toStringTree(scriptNode59);
        int int65 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.Node node67 = scriptNode51.setType((int) (byte) -1);
        java.lang.String str68 = astRoot15.toStringTree(scriptNode51);
        java.lang.String str70 = scriptNode51.toSource((-306271829));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode73.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot76 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet77 = astRoot76.getComments();
        int int78 = astRoot76.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor79 = null;
        astRoot76.visitComments(nodeVisitor79);
        com.google.javascript.rhino.head.Node node81 = astRoot76.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet82 = astRoot76.getComments();
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode73, (com.google.javascript.rhino.head.Node) astRoot76);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node(17, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scriptNode51, (com.google.javascript.rhino.head.Node) astRoot76);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList85 = scriptNode51.getStatements();
        scriptNode51.setEncodedSourceStart(559562297);
        org.junit.Assert.assertNotNull(astNodeComparator3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str6, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(symbolArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(functionNodeList61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{\n}\n" + "'", str70, "{\n}\n");
        org.junit.Assert.assertNull(commentSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(commentSet82);
        org.junit.Assert.assertNotNull(astNodeList85);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(65536);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.Node node7 = scriptNode3.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        java.lang.String str13 = scriptNode9.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.Object obj18 = scriptNode9.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        java.lang.String str22 = scriptNode9.toStringTree(scriptNode19);
        scriptNode19.setLength((-1));
        com.google.javascript.rhino.head.Node node25 = scriptNode19.getLastSibling();
        scriptNode1.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode19);
        scriptNode1.setEncodedSourceEnd(20);
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator3 = positionComparator1.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int5 = astRoot4.getBaseLineno();
        java.lang.String str6 = astRoot4.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        int int9 = positionComparator2.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot4, (com.google.javascript.rhino.head.ast.AstNode) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = scriptNode10.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = scriptNode10.new NodeIterator();
        astRoot7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        com.google.javascript.rhino.head.Node node14 = scriptNode10.getNext();
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray41 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList42 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList42, symbolArray41);
        astRoot15.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList42);
        com.google.javascript.rhino.head.Node node45 = astRoot15.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot15, (com.google.javascript.rhino.head.ast.Scope) scriptNode47);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode51.getChildScopes();
        int int54 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.Node node55 = scriptNode51.getLastSibling();
        scriptNode51.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList61 = scriptNode59.getFunctions();
        scriptNode59.setPosition((int) (byte) 10);
        java.lang.String str64 = scriptNode51.toStringTree(scriptNode59);
        int int65 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.Node node67 = scriptNode51.setType((int) (byte) -1);
        java.lang.String str68 = astRoot15.toStringTree(scriptNode51);
        java.lang.String str70 = scriptNode51.toSource((-306271829));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode73.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot76 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet77 = astRoot76.getComments();
        int int78 = astRoot76.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor79 = null;
        astRoot76.visitComments(nodeVisitor79);
        com.google.javascript.rhino.head.Node node81 = astRoot76.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet82 = astRoot76.getComments();
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode73, (com.google.javascript.rhino.head.Node) astRoot76);
        com.google.javascript.rhino.head.Node node84 = new com.google.javascript.rhino.head.Node(17, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scriptNode51, (com.google.javascript.rhino.head.Node) astRoot76);
        com.google.javascript.rhino.head.Node node85 = node84.getLastSibling();
        org.junit.Assert.assertNotNull(astNodeComparator3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str6, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(symbolArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(functionNodeList61);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{\n}\n" + "'", str70, "{\n}\n");
        org.junit.Assert.assertNull(commentSet77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNull(commentSet82);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setRecordingComments(false);
        int int10 = compilerEnvirons0.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean12 = compilerEnvirons11.isReservedKeywordAsIdentifier();
        compilerEnvirons11.setStrictMode(true);
        compilerEnvirons11.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean18 = compilerEnvirons17.isReservedKeywordAsIdentifier();
        compilerEnvirons17.setStrictMode(true);
        compilerEnvirons17.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean24 = compilerEnvirons23.isReservedKeywordAsIdentifier();
        boolean boolean25 = compilerEnvirons23.getWarnTrailingComma();
        compilerEnvirons23.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet28 = compilerEnvirons23.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter29 = compilerEnvirons23.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory30 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons17, errorReporter29);
        com.google.javascript.rhino.head.IRFactory iRFactory31 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons11, errorReporter29);
        com.google.javascript.rhino.head.ErrorReporter errorReporter32 = compilerEnvirons11.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser33 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter32);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.EvaluatorException evaluatorException39 = errorReporter32.runtimeError("                                                    ", "2\tSCRIPT 2 1\n", (-704784932), "                          {\n                          }\n", 36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 170 + "'", int10 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(errorReporter29);
        org.junit.Assert.assertNotNull(errorReporter32);
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str2 = scriptNode0.toSource((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        int int6 = scriptNode3.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode0, (com.google.javascript.rhino.head.ast.Scope) scriptNode3);
        scriptNode0.removeProp((-60212263));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str2, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        java.lang.String str6 = comment4.toSource(5);
        java.lang.String str8 = comment4.makeIndent(3);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.Node node15 = scriptNode11.getLastSibling();
        int int16 = scriptNode11.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot20 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = astRoot20.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        boolean boolean33 = comment32.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        java.lang.String str40 = comment38.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray41 = new com.google.javascript.rhino.head.ast.Comment[] { comment26, comment32, comment38 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet42 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet42, commentArray41);
        astRoot20.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet42);
        boolean boolean45 = astRoot20.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode46 = astRoot20.getParent();
        astRoot20.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) scope19, (com.google.javascript.rhino.head.Node) astRoot20, 6);
        astRoot20.setLineno((int) '#');
        com.google.javascript.rhino.head.Token.CommentType commentType55 = null;
        com.google.javascript.rhino.head.ast.Comment comment57 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType55, "");
        com.google.javascript.rhino.head.Token.CommentType commentType58 = comment57.getCommentType();
        int int59 = comment57.depth();
        astRoot20.addComment(comment57);
        com.google.javascript.rhino.head.Token.CommentType commentType61 = null;
        comment57.setCommentType(commentType61);
        comment4.setJsDocNode(comment57);
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        comment4.setCommentType(commentType64);
        com.google.javascript.rhino.head.Token.CommentType commentType66 = comment4.getCommentType();
        java.lang.String str67 = comment4.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "          hi!" + "'", str6, "          hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "      " + "'", str8, "      ");
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "                                                                                                                                                                                                        " + "'", str40, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(astNode46);
        org.junit.Assert.assertNull(commentType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(commentType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "161" + "'", str67, "161");
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        int int10 = scriptNode7.getBaseLineno();
        com.google.javascript.rhino.head.Node node11 = scriptNode7.getLastSibling();
        int int12 = scriptNode7.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor13 = scriptNode7.iterator();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        boolean boolean16 = compilerEnvirons14.isIdeMode();
        int int17 = compilerEnvirons14.getOptimizationLevel();
        scriptNode7.setCompilerData((java.lang.Object) compilerEnvirons14);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean20 = compilerEnvirons19.isReservedKeywordAsIdentifier();
        boolean boolean21 = compilerEnvirons19.isIdeMode();
        compilerEnvirons19.setRecordingLocalJsDocComments(false);
        boolean boolean24 = compilerEnvirons19.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons25 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean26 = compilerEnvirons25.isReservedKeywordAsIdentifier();
        int int27 = compilerEnvirons25.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.isIdeMode();
        compilerEnvirons28.setRecordingLocalJsDocComments(false);
        boolean boolean33 = compilerEnvirons28.isGenerateDebugInfo();
        compilerEnvirons28.setRecordingLocalJsDocComments(true);
        boolean boolean36 = compilerEnvirons28.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons37 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean38 = compilerEnvirons37.isReservedKeywordAsIdentifier();
        boolean boolean39 = compilerEnvirons37.getWarnTrailingComma();
        boolean boolean40 = compilerEnvirons37.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter41 = compilerEnvirons37.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser42 = new com.google.javascript.rhino.head.Parser(compilerEnvirons28, errorReporter41);
        compilerEnvirons25.setErrorReporter(errorReporter41);
        compilerEnvirons19.setErrorReporter(errorReporter41);
        compilerEnvirons14.setErrorReporter(errorReporter41);
        com.google.javascript.rhino.head.Parser parser46 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter41);
        boolean boolean47 = compilerEnvirons0.getAllowSharpComments();
        boolean boolean48 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 170 + "'", int27 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(errorReporter41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((-1116244898), 0, commentType2, "9\t  SCRIPT 10 1\n");
        int int5 = comment4.getPosition();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1116244898) + "'", int5 == (-1116244898));
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(36, (-282781957));
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        compilerEnvirons0.setXmlAvailable(false);
        boolean boolean7 = compilerEnvirons0.isStrictMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        java.lang.String str5 = scriptNode1.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        scriptNode7.setEncodedSourceEnd(11);
        int int11 = scriptNode1.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        int int12 = scriptNode1.getRegexpCount();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = scriptNode1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 119843761 + "'", int11 == 119843761);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        astRoot0.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.lang.String str20 = comment17.getValue();
        scriptNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) comment17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        com.google.javascript.rhino.head.Node node52 = astRoot22.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot22, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) comment17, (com.google.javascript.rhino.head.Node) scriptNode54);
        astRoot0.addComment(comment17);
        com.google.javascript.rhino.head.Node node59 = astRoot0.getLastSibling();
        astRoot0.setPosition(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode(24);
        astRoot0.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList65 = astRoot0.getFunctions();
        java.lang.String str66 = astRoot0.getNextTempName();
        boolean boolean67 = astRoot0.hasSideEffects();
        astRoot0.putIntProp((-975234622), (-1565844615));
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(functionNodeList65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "$0" + "'", str66, "$0");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot6.visitComments(nodeVisitor13);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList15 = astRoot6.getStatements();
        int int16 = astRoot6.getLength();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = astRoot6.getRegexpString(325741318);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(astNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        java.lang.String str16 = scriptNode12.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scriptNode18);
        int int20 = scriptNode12.getType();
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        int int22 = scriptNode12.getParamCount();
        com.google.javascript.rhino.head.Node node23 = scriptNode12.getLastSibling();
        scriptNode12.removeProp(14);
        com.google.javascript.rhino.head.ast.Symbol symbol27 = scriptNode12.getSymbol(">>>");
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator28 = scriptNode12.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str31 = scriptNode29.toSource((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        int int35 = scriptNode32.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode29, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        com.google.javascript.rhino.head.ast.AstRoot astRoot37 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator38 = astRoot37.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        boolean boolean44 = comment43.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        boolean boolean50 = comment49.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType53 = null;
        com.google.javascript.rhino.head.ast.Comment comment55 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType53, "");
        java.lang.String str57 = comment55.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray58 = new com.google.javascript.rhino.head.ast.Comment[] { comment43, comment49, comment55 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet59 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet59, commentArray58);
        astRoot37.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet59);
        boolean boolean62 = astRoot37.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray63 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList64 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList64, symbolArray63);
        astRoot37.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList64);
        int int67 = astRoot37.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode68.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode69);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList71 = scriptNode69.getChildScopes();
        int int72 = scriptNode69.getBaseLineno();
        com.google.javascript.rhino.head.Node node73 = scriptNode69.getLastSibling();
        scriptNode69.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode76.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode77);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList79 = scriptNode77.getFunctions();
        scriptNode77.setPosition((int) (byte) 10);
        java.lang.String str82 = scriptNode69.toStringTree(scriptNode77);
        int int83 = scriptNode69.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot37, (com.google.javascript.rhino.head.ast.Scope) scriptNode69);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap85 = scriptNode69.getSymbolTable();
        scriptNode29.setSymbolTable(strMap85);
        scriptNode12.setSymbolTable(strMap85);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 136 + "'", int20 == 136);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(symbol27);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str31, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "                                                                                                                                                                                                        " + "'", str57, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(symbolArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(scopeList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(functionNodeList79);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(strMap85);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        int int10 = scriptNode7.getBaseLineno();
        int int11 = scriptNode7.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode13.getFunctions();
        scriptNode13.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope18 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode7.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode13, (com.google.javascript.rhino.head.Node) scope18);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode21.getChildScopes();
        int int24 = scriptNode21.getBaseLineno();
        com.google.javascript.rhino.head.Node node25 = scriptNode21.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = scriptNode21.getAstRoot();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode7, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        scriptNode7.setEndLineno(9);
        scriptNode7.setLength(1617059566);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode(11);
        scriptNode7.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode34);
        // The following exception was thrown during execution in test generation
        try {
            int int36 = scriptNode34.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(astRoot26);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot6.visitComments(nodeVisitor13);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList15 = astRoot6.getStatements();
        java.lang.String str17 = astRoot6.makeIndent(0);
        com.google.javascript.rhino.head.ast.Scope scope18 = astRoot6.getParentScope();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(astNodeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(scope18);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 100L);
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment(842975161, 26, commentType4, "                                                                hi!");
        node1.setJsDocNode(comment6);
        java.lang.Class<?> wildcardClass8 = comment6.getClass();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-361648642));
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        int int8 = astRoot4.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = astRoot4.getAstRoot();
        int int10 = astRoot4.getBaseLineno();
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(23, (-603115504));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode((-1492185149));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode18 = scriptNode17.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.AstRoot astRoot19 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = astRoot19.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        boolean boolean26 = comment25.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        java.lang.String str39 = comment37.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray40 = new com.google.javascript.rhino.head.ast.Comment[] { comment25, comment31, comment37 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet41 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet41, commentArray40);
        astRoot19.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet41);
        boolean boolean44 = astRoot19.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray45 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList46 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList46, symbolArray45);
        astRoot19.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList46);
        int int49 = astRoot19.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment50 = astRoot19.getJsDocNode();
        astRoot19.setInStrictMode(false);
        scriptNode17.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot19);
        int int54 = astRoot19.getEndLineno();
        java.lang.String str55 = astRoot19.toString();
        com.google.javascript.rhino.head.Node node56 = new com.google.javascript.rhino.head.Node(4, node14, (com.google.javascript.rhino.head.Node) scriptNode16, (com.google.javascript.rhino.head.Node) astRoot19);
        // The following exception was thrown during execution in test generation
        try {
            astRoot4.setDefault((com.google.javascript.rhino.head.Node) scriptNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(astRoot9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(functionNode18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "                                                                                                                                                                                                        " + "'", str39, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(symbolArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(comment50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "136" + "'", str55, "136");
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType28, "");
        boolean boolean31 = comment30.hasSideEffects();
        int int32 = comment30.getLineno();
        com.google.javascript.rhino.head.Node node34 = comment30.setType(18);
        boolean boolean35 = comment30.hasSideEffects();
        astRoot1.addComment(comment30);
        comment30.setBounds(1891424362, 12);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node(423587025, (com.google.javascript.rhino.head.Node) comment30);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean11 = compilerEnvirons0.isGenerateDebugInfo();
        java.lang.String[] strArray21 = new java.lang.String[] { "$0", "                      ", "                                                                                                                                                                                                        ", "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n", "ScriptNode", "AstRoot", "136" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet22);
        boolean boolean25 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean26 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean27 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setWarnTrailingComma(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap48 = scriptNode32.getSymbolTable();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = scriptNode32.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator49.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strMap48);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scope1.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        scope1.setTop(scriptNode4);
        scope1.setLineno((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator13 = scriptNode12.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        java.lang.String str21 = comment18.getValue();
        scriptNode12.setParent((com.google.javascript.rhino.head.ast.AstNode) comment18);
        com.google.javascript.rhino.head.ast.AstRoot astRoot23 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator24 = astRoot23.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        boolean boolean30 = comment29.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        boolean boolean36 = comment35.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType39 = null;
        com.google.javascript.rhino.head.ast.Comment comment41 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType39, "");
        java.lang.String str43 = comment41.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray44 = new com.google.javascript.rhino.head.ast.Comment[] { comment29, comment35, comment41 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet45 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet45, commentArray44);
        astRoot23.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet45);
        boolean boolean48 = astRoot23.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray49 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList50 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList50, symbolArray49);
        astRoot23.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList50);
        com.google.javascript.rhino.head.Node node53 = astRoot23.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode54.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode55);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot23, (com.google.javascript.rhino.head.ast.Scope) scriptNode55);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) comment18, (com.google.javascript.rhino.head.Node) scriptNode55);
        java.lang.String str59 = scriptNode11.getJsDoc();
        int int60 = scriptNode11.getLength();
        com.google.javascript.rhino.head.ast.Scope.joinScopes(scope1, (com.google.javascript.rhino.head.ast.Scope) scriptNode11);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((-933351410), (com.google.javascript.rhino.head.Node) scriptNode11);
        scriptNode11.setEndLineno(603173706);
        com.google.javascript.rhino.head.ast.AstRoot astRoot65 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int66 = astRoot65.getParamCount();
        int int67 = astRoot65.getPosition();
        com.google.javascript.rhino.head.Node node68 = astRoot65.target;
        astRoot65.checkParentLinks();
        com.google.javascript.rhino.head.ast.AstNode astNode70 = astRoot65.getParent();
        scriptNode11.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray72 = scriptNode11.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(nodeSpliterator13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "                                                                                                                                                                                                        " + "'", str43, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(symbolArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(astNode70);
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        scriptNode1.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope8 = scriptNode1.getEnclosingScope();
        com.google.javascript.rhino.head.Node node9 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.addChildToFront(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(scope8);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean1 = astRoot0.hasSideEffects();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons2 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory4 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons2, errorReporter3);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList8 = scriptNode6.getFunctions();
        scriptNode6.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node11 = iRFactory4.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        astRoot0.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode6);
        java.lang.Object obj13 = scriptNode6.getCompilerData();
        scriptNode6.setEncodedSourceStart((-328046526));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(functionNodeList8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean1 = astRoot0.hasSideEffects();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap2 = null;
        astRoot0.setSymbolTable(strMap2);
        boolean boolean4 = astRoot0.isInStrictMode();
        astRoot0.flattenSymbolTable(true);
        com.google.javascript.rhino.head.Node node7 = astRoot0.getLastSibling();
        int int8 = node7.getType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 136 + "'", int8 == 136);
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        scriptNode0.setEncodedSource("typeof");
        java.lang.Object obj7 = scriptNode0.getProp(2);
        java.lang.Object obj8 = scriptNode0.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode10.getChildScopes();
        int int13 = scriptNode10.getBaseLineno();
        com.google.javascript.rhino.head.Node node14 = scriptNode10.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode15.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode16.getChildScopes();
        java.lang.String str20 = scriptNode16.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode10.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode16, (com.google.javascript.rhino.head.Node) scriptNode22);
        java.lang.Object obj25 = scriptNode16.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str28 = scriptNode26.toSource((int) '4');
        java.lang.String str29 = scriptNode16.toStringTree(scriptNode26);
        scriptNode26.setLength((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode33.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = astRoot36.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor38 = astRoot36.iterator();
        scriptNode33.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot36);
        java.lang.String str40 = scriptNode33.toString();
        scriptNode26.setCompilerData((java.lang.Object) scriptNode33);
        boolean boolean42 = scriptNode26.hasSideEffects();
        scriptNode0.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode26);
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType47, "hi!");
        java.lang.String str51 = comment49.toSource(0);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) comment49, 10);
        scriptNode0.setJsDocNode(comment49);
        java.lang.String str55 = scriptNode0.getSourceName();
        scriptNode0.setBounds((-163019660), 884545562);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = scriptNode0.getRegexpFlags((-1436414259));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str28, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(nodeItor38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "136" + "'", str40, "136");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode26 = astRoot0.getParent();
        java.lang.String str27 = astRoot0.debugPrint();
        int int28 = astRoot0.getFunctionCount();
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.setEndLineno((-1171321573));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(astNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str27, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter4 = compilerEnvirons0.getErrorReporter();
        int int5 = compilerEnvirons0.getOptimizationLevel();
        compilerEnvirons0.setIdeMode(true);
        boolean boolean8 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray15 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        compilerEnvirons9.setActivationNames((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.head.Parser parser19 = new com.google.javascript.rhino.head.Parser(compilerEnvirons9);
        boolean boolean20 = compilerEnvirons9.getAllowSharpComments();
        boolean boolean21 = compilerEnvirons9.getAllowSharpComments();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        boolean boolean24 = compilerEnvirons22.isIdeMode();
        compilerEnvirons22.setRecordingLocalJsDocComments(false);
        boolean boolean27 = compilerEnvirons22.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        int int30 = compilerEnvirons28.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean32 = compilerEnvirons31.isReservedKeywordAsIdentifier();
        boolean boolean33 = compilerEnvirons31.isIdeMode();
        compilerEnvirons31.setRecordingLocalJsDocComments(false);
        boolean boolean36 = compilerEnvirons31.isGenerateDebugInfo();
        compilerEnvirons31.setRecordingLocalJsDocComments(true);
        boolean boolean39 = compilerEnvirons31.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons40 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean41 = compilerEnvirons40.isReservedKeywordAsIdentifier();
        boolean boolean42 = compilerEnvirons40.getWarnTrailingComma();
        boolean boolean43 = compilerEnvirons40.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = compilerEnvirons40.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser45 = new com.google.javascript.rhino.head.Parser(compilerEnvirons31, errorReporter44);
        compilerEnvirons28.setErrorReporter(errorReporter44);
        compilerEnvirons22.setErrorReporter(errorReporter44);
        com.google.javascript.rhino.head.Parser parser48 = new com.google.javascript.rhino.head.Parser(compilerEnvirons9, errorReporter44);
        com.google.javascript.rhino.head.Parser parser49 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter44);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter44.error("          {\n          }\n", "                                                                hi!", 327994914, "                                                                hi!", 1560112722);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(errorReporter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 170 + "'", int30 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(errorReporter44);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope13);
        scriptNode8.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        int int22 = scriptNode19.getBaseLineno();
        com.google.javascript.rhino.head.Node node23 = scriptNode19.getLastSibling();
        int int24 = scriptNode19.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope27 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = astRoot28.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        java.lang.String str48 = comment46.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray49 = new com.google.javascript.rhino.head.ast.Comment[] { comment34, comment40, comment46 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet50 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet50, commentArray49);
        astRoot28.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet50);
        boolean boolean53 = astRoot28.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode54 = astRoot28.getParent();
        astRoot28.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scope27, (com.google.javascript.rhino.head.Node) astRoot28, 6);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) astRoot28);
        com.google.javascript.rhino.head.Token.CommentType commentType62 = null;
        com.google.javascript.rhino.head.ast.Comment comment64 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType62, "");
        boolean boolean65 = comment64.hasSideEffects();
        int int66 = comment64.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType67 = comment64.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode68.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode69);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList71 = scriptNode69.getChildScopes();
        int int72 = scriptNode69.getBaseLineno();
        int int73 = scriptNode69.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode74.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode75);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList77 = scriptNode75.getFunctions();
        scriptNode75.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope80 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode69.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode75, (com.google.javascript.rhino.head.Node) scope80);
        scriptNode75.setEncodedSourceEnd(18);
        comment64.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode75);
        com.google.javascript.rhino.head.ast.AstRoot astRoot85 = scriptNode75.getAstRoot();
        int int86 = scriptNode75.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = scriptNode75.getTop();
        astRoot28.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode75);
        com.google.javascript.rhino.head.Token.CommentType commentType91 = null;
        com.google.javascript.rhino.head.ast.Comment comment93 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType91, "");
        boolean boolean94 = comment93.hasSideEffects();
        int int95 = comment93.getLineno();
        java.lang.String str96 = comment93.debugPrint();
        astRoot28.addChildToBack((com.google.javascript.rhino.head.Node) comment93);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode98 = comment93.getEnclosingFunction();
        int int99 = comment93.getType();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "                                                                                                                                                                                                        " + "'", str48, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(astNode54);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(commentType67);
        org.junit.Assert.assertNull(scopeList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(functionNodeList77);
        org.junit.Assert.assertNull(astRoot85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 18 + "'", int86 == 18);
        org.junit.Assert.assertNotNull(scriptNode87);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1\tCOMMENT 1 0\n" + "'", str96, "1\tCOMMENT 1 0\n");
        org.junit.Assert.assertNull(functionNode98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 161 + "'", int99 == 161);
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        int int11 = scriptNode8.getBaseLineno();
        int int12 = scriptNode8.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode14.getFunctions();
        scriptNode14.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode8.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) scope19);
        scriptNode1.setTop(scriptNode8);
        scriptNode8.setLength(14);
        java.lang.Object obj24 = scriptNode8.getCompilerData();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        boolean boolean2 = astRoot1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = astRoot3.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        boolean boolean10 = comment9.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        java.lang.String str23 = comment21.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray24 = new com.google.javascript.rhino.head.ast.Comment[] { comment9, comment15, comment21 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet25, commentArray24);
        astRoot3.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet25);
        boolean boolean28 = astRoot3.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode29 = astRoot3.getParent();
        astRoot3.setPosition(14);
        com.google.javascript.rhino.head.Node node32 = astRoot3.getFirstChild();
        com.google.javascript.rhino.head.ast.AstRoot astRoot33 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet34 = astRoot33.getComments();
        int int35 = astRoot33.getEndLineno();
        com.google.javascript.rhino.head.Node node37 = astRoot33.setType((int) (short) 10);
        astRoot33.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        scriptNode42.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        com.google.javascript.rhino.head.Node node51 = scriptNode47.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList55 = scriptNode53.getChildScopes();
        java.lang.String str57 = scriptNode53.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scriptNode59);
        int int61 = scriptNode53.getType();
        scriptNode42.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        int int63 = scriptNode53.getParamCount();
        com.google.javascript.rhino.head.Node node64 = scriptNode53.getLastSibling();
        astRoot33.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode53);
        java.lang.String str66 = scriptNode53.getSourceName();
        astRoot3.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode53);
        astRoot3.checkParentLinks();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator70 = scriptNode69.spliterator();
        scriptNode69.setRelative((int) (byte) 100);
        int int73 = scriptNode69.getRegexpCount();
        com.google.javascript.rhino.head.Token.CommentType commentType76 = null;
        com.google.javascript.rhino.head.ast.Comment comment78 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType76, "");
        java.lang.String str80 = comment78.toSource(100);
        java.lang.String str81 = comment78.getValue();
        astRoot3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode69, (com.google.javascript.rhino.head.Node) comment78);
        astRoot1.setJsDocNode(comment78);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap84 = astRoot1.getSymbolTable();
        astRoot1.setEncodedSourceBounds((-1116244898), (-361648642));
        astRoot1.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                                                                                                                                                                                                        " + "'", str23, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(astNode29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(commentSet34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(scopeList55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 136 + "'", int61 == 136);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(nodeSpliterator70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "                                                                                                                                                                                                        " + "'", str80, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNull(strMap84);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean4 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons0.reportWarningAsError();
        boolean boolean6 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setOptimizationLevel(0);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode32.getFunctions();
        scriptNode32.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scope37);
        scriptNode32.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node41 = iRFactory24.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode32.setTop(scriptNode52);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode32, 10);
        int int67 = scriptNode8.getIntProp(5, 100);
        scriptNode8.setRelative(9);
        java.lang.String str70 = scriptNode8.getSourceName();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode71 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int72 = scriptNode8.addFunction(functionNode71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 100 + "'", int67 == 100);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        java.lang.String str31 = comment29.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray32 = new com.google.javascript.rhino.head.ast.Comment[] { comment17, comment23, comment29 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet33, commentArray32);
        astRoot11.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet33);
        boolean boolean36 = astRoot11.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = astRoot11.getParent();
        astRoot11.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scope10, (com.google.javascript.rhino.head.Node) astRoot11, 6);
        astRoot11.setLineno((int) '#');
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        com.google.javascript.rhino.head.Token.CommentType commentType49 = comment48.getCommentType();
        int int50 = comment48.depth();
        astRoot11.addComment(comment48);
        com.google.javascript.rhino.head.Node node53 = comment48.setType(136);
        // The following exception was thrown during execution in test generation
        try {
            comment48.setDouble((double) 604841955);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Comment cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(astNode37);
        org.junit.Assert.assertNull(commentType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        boolean boolean3 = astRoot2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode5.getChildScopes();
        int int8 = scriptNode5.getBaseLineno();
        int int9 = scriptNode5.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList13 = scriptNode11.getFunctions();
        scriptNode11.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope16 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode5.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) scope16);
        com.google.javascript.rhino.head.ast.Scope scope19 = scope16.getDefiningScope("0\tSCRIPT 0 1\n");
        astRoot2.setParentScope(scope16);
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope(15);
        java.lang.String str23 = scope22.debugPrint();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory26 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList30 = scriptNode28.getFunctions();
        scriptNode28.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node33 = iRFactory26.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.lang.String str34 = scriptNode28.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList44 = scriptNode42.getChildScopes();
        java.lang.String str46 = scriptNode42.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode36.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode42, (com.google.javascript.rhino.head.Node) scriptNode48);
        java.lang.Object obj51 = scriptNode42.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str54 = scriptNode52.toSource((int) '4');
        java.lang.String str55 = scriptNode42.toStringTree(scriptNode52);
        scriptNode28.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        int int57 = scriptNode42.getLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes(scope22, (com.google.javascript.rhino.head.ast.Scope) scriptNode42);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) astRoot2, (com.google.javascript.rhino.head.Node) scriptNode42);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump60 = astRoot2.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(functionNodeList13);
        org.junit.Assert.assertNull(scope19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "15\tBLOCK 15 1\n" + "'", str23, "15\tBLOCK 15 1\n");
        org.junit.Assert.assertNotNull(functionNodeList30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(scopeList44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str54, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        comment4.setCommentType(commentType7);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = comment4.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node10 = nodeItor9.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor9);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        boolean boolean8 = compilerEnvirons6.getWarnTrailingComma();
        compilerEnvirons6.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet11 = compilerEnvirons6.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter12 = compilerEnvirons6.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory13 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter12);
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = iRFactory13.parse("typeof", "typeof", 5);
        int int20 = astRoot17.getIntProp((-1), 21);
        boolean boolean21 = astRoot17.hasChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType24, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        comment26.setCommentType(commentType27);
        java.lang.String str29 = comment26.getValue();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator34 = scriptNode33.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        java.lang.String str42 = comment39.getValue();
        scriptNode33.setParent((com.google.javascript.rhino.head.ast.AstNode) comment39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        java.lang.String str64 = comment62.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray65 = new com.google.javascript.rhino.head.ast.Comment[] { comment50, comment56, comment62 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet66 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet66, commentArray65);
        astRoot44.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet66);
        boolean boolean69 = astRoot44.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray70 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList71 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList71, symbolArray70);
        astRoot44.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList71);
        com.google.javascript.rhino.head.Node node74 = astRoot44.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot44, (com.google.javascript.rhino.head.ast.Scope) scriptNode76);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) comment39, (com.google.javascript.rhino.head.Node) scriptNode76);
        int int80 = comment26.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        astRoot17.setParent((com.google.javascript.rhino.head.ast.AstNode) comment26);
        com.google.javascript.rhino.head.ast.AstRoot astRoot82 = astRoot17.getAstRoot();
        com.google.javascript.rhino.head.ast.Symbol symbol83 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot17.putSymbol(symbol83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(errorReporter12);
        org.junit.Assert.assertNotNull(astRoot17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "                                                                                                                                                                                                        " + "'", str64, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(symbolArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(astRoot82);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        scriptNode6.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.Node node15 = scriptNode11.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode17.getChildScopes();
        java.lang.String str21 = scriptNode17.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode11.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode17, (com.google.javascript.rhino.head.Node) scriptNode23);
        int int25 = scriptNode17.getType();
        scriptNode6.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode28.getChildScopes();
        int int31 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node32 = scriptNode28.getLastSibling();
        scriptNode28.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList38 = scriptNode36.getFunctions();
        scriptNode36.setPosition((int) (byte) 10);
        java.lang.String str41 = scriptNode28.toStringTree(scriptNode36);
        int int42 = scriptNode28.getBaseLineno();
        scriptNode28.setEncodedSourceStart((int) '4');
        scriptNode17.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode28);
        scriptNode1.setCompilerData((java.lang.Object) scriptNode28);
        java.lang.String str47 = scriptNode1.getJsDoc();
        com.google.javascript.rhino.head.ast.Scope scope48 = scriptNode1.getParentScope();
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 136 + "'", int25 == 136);
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(functionNodeList38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(scope48);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap7 = scriptNode6.getSymbolTable();
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode10.getChildScopes();
        int int13 = scriptNode10.getBaseLineno();
        com.google.javascript.rhino.head.Node node14 = scriptNode10.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode15.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode16.getChildScopes();
        java.lang.String str20 = scriptNode16.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode10.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode16, (com.google.javascript.rhino.head.Node) scriptNode22);
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode10);
        scriptNode10.setBaseLineno(4);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator27 = scriptNode10.spliterator();
        scriptNode10.setLength((-117418037));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = scriptNode10.getParamOrVarName((-449082186));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(nodeSpliterator27);
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        boolean boolean18 = compilerEnvirons0.isGenerateObserverCount();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setXmlAvailable(false);
        compilerEnvirons0.setWarnTrailingComma(false);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        boolean boolean27 = compilerEnvirons0.isStrictMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        comment4.setCommentType(commentType5);
        java.lang.String str7 = comment4.getValue();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.lang.String str20 = comment17.getValue();
        scriptNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) comment17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        com.google.javascript.rhino.head.Node node52 = astRoot22.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot22, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) comment17, (com.google.javascript.rhino.head.Node) scriptNode54);
        int int58 = comment4.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = comment4.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scope12);
        int int14 = scriptNode7.getEndLineno();
        scriptNode7.setEncodedSource("hi!");
        java.lang.String str17 = scriptNode7.getEncodedSource();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList18 = scriptNode7.getFunctions();
        com.google.javascript.rhino.head.ast.AstRoot astRoot19 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean20 = astRoot19.hasSideEffects();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory23 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList27 = scriptNode25.getFunctions();
        scriptNode25.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node30 = iRFactory23.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        astRoot19.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode25);
        scriptNode25.setEncodedSourceStart(20);
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList35 = scriptNode7.getStatements();
        scriptNode7.flattenSymbolTable(true);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(functionNodeList18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(functionNodeList27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(astNodeList35);
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(994604176, (-282781957));
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(20);
        int int2 = scriptNode1.getLength();
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = astRoot3.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        boolean boolean10 = comment9.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        java.lang.String str23 = comment21.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray24 = new com.google.javascript.rhino.head.ast.Comment[] { comment9, comment15, comment21 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet25, commentArray24);
        astRoot3.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet25);
        boolean boolean28 = astRoot3.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray29 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList30 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList30, symbolArray29);
        astRoot3.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList30);
        com.google.javascript.rhino.head.Node node33 = astRoot3.getFirstChild();
        int int36 = astRoot3.getIntProp(1748151865, 1755968153);
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.setScope((com.google.javascript.rhino.head.ast.Scope) astRoot3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                                                                                                                                                                                                        " + "'", str23, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(symbolArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1755968153 + "'", int36 == 1755968153);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        int int8 = compilerEnvirons6.getLanguageVersion();
        int int9 = compilerEnvirons6.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        compilerEnvirons10.setStrictMode(true);
        compilerEnvirons10.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons16 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean17 = compilerEnvirons16.isReservedKeywordAsIdentifier();
        boolean boolean18 = compilerEnvirons16.getWarnTrailingComma();
        compilerEnvirons16.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet21 = compilerEnvirons16.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = compilerEnvirons16.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory23 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10, errorReporter22);
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6, errorReporter22);
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter22);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot29 = iRFactory25.parse("9\t  SCRIPT 8 1\n", "!", (-1178528397));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 170 + "'", int8 == 170);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 170 + "'", int9 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(errorReporter22);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        compilerEnvirons0.setRecoverFromErrors(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        int int12 = compilerEnvirons10.getLanguageVersion();
        compilerEnvirons10.setLanguageVersion((int) (byte) 100);
        boolean boolean15 = compilerEnvirons10.isAllowMemberExprAsFunctionName();
        compilerEnvirons10.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray24 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        compilerEnvirons18.setActivationNames((java.util.Set<java.lang.String>) strSet25);
        boolean boolean28 = compilerEnvirons18.isGenerateDebugInfo();
        compilerEnvirons18.setOptimizationLevel((int) (short) 1);
        compilerEnvirons18.setAllowSharpComments(true);
        boolean boolean33 = compilerEnvirons18.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons18.getErrorReporter();
        compilerEnvirons10.setErrorReporter(errorReporter34);
        compilerEnvirons0.setErrorReporter(errorReporter34);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter34.error("-1\tSCRIPT -1 1\n35\t  COMMENT 36 2\n", "{\n  {\n  }\n}\n", (-361648642), "                                                                        ", 327994914);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 170 + "'", int12 == 170);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(errorReporter34);
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        java.lang.String str5 = scriptNode1.makeIndent((int) (byte) -1);
        java.lang.String str6 = scriptNode1.debugPrint();
        int int7 = scriptNode1.getEncodedSourceEnd();
        int int8 = scriptNode1.getEncodedSourceEnd();
        int int9 = scriptNode1.getLength();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj12 = scriptNode11.getCompilerData();
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator14 = scope13.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode15.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        scope13.setTop(scriptNode16);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode11, (com.google.javascript.rhino.head.ast.Scope) scriptNode16);
        int int22 = scriptNode11.getIntProp(9, 9);
        scriptNode11.setEncodedSourceBounds(481479666, (-87298254));
        int int26 = scriptNode11.depth();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode11);
        int int28 = scriptNode1.getEndLineno();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1\t  SCRIPT 0 1\n" + "'", str6, "-1\t  SCRIPT 0 1\n");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (-748307395));
        // The following exception was thrown during execution in test generation
        try {
            node1.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scriptNode1.iterator();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons8 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean9 = compilerEnvirons8.isReservedKeywordAsIdentifier();
        boolean boolean10 = compilerEnvirons8.isIdeMode();
        int int11 = compilerEnvirons8.getOptimizationLevel();
        scriptNode1.setCompilerData((java.lang.Object) compilerEnvirons8);
        java.lang.String str14 = scriptNode1.toSource((-603115504));
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        com.google.javascript.rhino.head.Token.CommentType commentType21 = comment20.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        int int28 = comment26.getLineno();
        com.google.javascript.rhino.head.Node node30 = comment26.setType(18);
        comment26.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        comment36.setCommentType(commentType38);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator41 = scriptNode40.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        java.lang.String str48 = comment46.toSource(100);
        java.lang.String str49 = comment46.getValue();
        scriptNode40.setParent((com.google.javascript.rhino.head.ast.AstNode) comment46);
        com.google.javascript.rhino.head.ast.Comment[] commentArray51 = new com.google.javascript.rhino.head.ast.Comment[] { comment20, comment26, comment36, comment46 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet52 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet52, commentArray51);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet52);
        scriptNode1.target = astRoot15;
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot15.visitComments(nodeVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(compilerEnvirons8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\n}\n" + "'", str14, "{\n}\n");
        org.junit.Assert.assertNull(commentType21);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator41);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "                                                                                                                                                                                                        " + "'", str48, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(commentArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        int int8 = astRoot4.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = astRoot4.getAstRoot();
        int int10 = astRoot4.getBaseLineno();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = astRoot4.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(astRoot9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10, 100);
        java.lang.String str3 = scope2.toSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = scope2.getTop();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{\n}\n" + "'", str3, "{\n}\n");
        org.junit.Assert.assertNull(scriptNode4);
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons1 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray7 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        compilerEnvirons1.setActivationNames((java.util.Set<java.lang.String>) strSet8);
        boolean boolean11 = compilerEnvirons1.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter12 = compilerEnvirons1.getErrorReporter();
        boolean boolean13 = compilerEnvirons1.isRecordingComments();
        boolean boolean14 = compilerEnvirons1.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean16 = compilerEnvirons15.isReservedKeywordAsIdentifier();
        int int17 = compilerEnvirons15.getLanguageVersion();
        compilerEnvirons15.setLanguageVersion((int) (byte) 100);
        boolean boolean20 = compilerEnvirons15.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        compilerEnvirons21.setStrictMode(true);
        compilerEnvirons21.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons27 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean28 = compilerEnvirons27.isReservedKeywordAsIdentifier();
        compilerEnvirons27.setStrictMode(true);
        compilerEnvirons27.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons33 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean34 = compilerEnvirons33.isReservedKeywordAsIdentifier();
        boolean boolean35 = compilerEnvirons33.getWarnTrailingComma();
        compilerEnvirons33.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet38 = compilerEnvirons33.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter39 = compilerEnvirons33.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory40 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons27, errorReporter39);
        com.google.javascript.rhino.head.IRFactory iRFactory41 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter39);
        com.google.javascript.rhino.head.Parser parser42 = new com.google.javascript.rhino.head.Parser(compilerEnvirons15, errorReporter39);
        com.google.javascript.rhino.head.Parser parser43 = new com.google.javascript.rhino.head.Parser(compilerEnvirons1, errorReporter39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot47 = parser43.parse("1", "  0;\n  SCRIPT;\n  0;\n  1;\n", 14);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator48 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator49 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator50 = positionComparator48.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator49);
        com.google.javascript.rhino.head.ast.AstRoot astRoot51 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int52 = astRoot51.getBaseLineno();
        java.lang.String str53 = astRoot51.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot54 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = astRoot54.new NodeIterator();
        int int56 = positionComparator49.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot51, (com.google.javascript.rhino.head.ast.AstNode) astRoot54);
        int int57 = astRoot51.getFunctionCount();
        astRoot51.setPosition(1384960853);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(402672405, (com.google.javascript.rhino.head.Node) astRoot47, (com.google.javascript.rhino.head.Node) astRoot51);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap61 = astRoot47.getSymbolTable();
        org.junit.Assert.assertNotNull(compilerEnvirons1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(errorReporter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNotNull(errorReporter39);
        org.junit.Assert.assertNotNull(astRoot47);
        org.junit.Assert.assertNotNull(astNodeComparator50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str53, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNull(strMap61);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        int int2 = astRoot0.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        com.google.javascript.rhino.head.Node node8 = scriptNode4.getLastSibling();
        scriptNode4.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList14 = scriptNode12.getFunctions();
        scriptNode12.setPosition((int) (byte) 10);
        java.lang.String str17 = scriptNode4.toStringTree(scriptNode12);
        int int18 = scriptNode4.getBaseLineno();
        astRoot0.target = scriptNode4;
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons20.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean24 = compilerEnvirons23.isReservedKeywordAsIdentifier();
        boolean boolean25 = compilerEnvirons23.getWarnTrailingComma();
        compilerEnvirons23.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet28 = compilerEnvirons23.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter29 = compilerEnvirons23.getErrorReporter();
        java.lang.String[] strArray35 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        compilerEnvirons23.setActivationNames((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.head.ErrorReporter errorReporter39 = compilerEnvirons23.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser40 = new com.google.javascript.rhino.head.Parser(compilerEnvirons20, errorReporter39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = parser40.parse("          hi!", "hi!", 2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot45 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = astRoot45.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType49 = null;
        com.google.javascript.rhino.head.ast.Comment comment51 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType49, "");
        boolean boolean52 = comment51.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType55 = null;
        com.google.javascript.rhino.head.ast.Comment comment57 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType55, "");
        boolean boolean58 = comment57.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType61 = null;
        com.google.javascript.rhino.head.ast.Comment comment63 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType61, "");
        java.lang.String str65 = comment63.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray66 = new com.google.javascript.rhino.head.ast.Comment[] { comment51, comment57, comment63 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet67 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet67, commentArray66);
        astRoot45.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet67);
        boolean boolean70 = astRoot45.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray71 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList72 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList72, symbolArray71);
        astRoot45.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList72);
        int int75 = astRoot45.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment76 = astRoot45.getJsDocNode();
        astRoot45.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.Token.CommentType commentType81 = null;
        com.google.javascript.rhino.head.ast.Comment comment83 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType81, "");
        com.google.javascript.rhino.head.Token.CommentType commentType84 = null;
        comment83.setCommentType(commentType84);
        astRoot45.setJsDocNode(comment83);
        astRoot44.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot45);
        scriptNode4.setCompilerData((java.lang.Object) astRoot44);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor89 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot44.visitAll(nodeVisitor89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(functionNodeList14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertNotNull(compilerEnvirons23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(errorReporter29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorReporter39);
        org.junit.Assert.assertNotNull(astRoot44);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "                                                                                                                                                                                                        " + "'", str65, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(symbolArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNull(comment76);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str2 = astRoot0.toSource((int) '4');
        astRoot0.setPosition(100);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray6 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList7 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList7, symbolArray6);
        scriptNode5.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList7);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = astRoot0.getTop();
        boolean boolean12 = astRoot0.hasChildren();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(symbolArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(scriptNode11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        java.lang.String str31 = comment29.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray32 = new com.google.javascript.rhino.head.ast.Comment[] { comment17, comment23, comment29 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet33, commentArray32);
        astRoot11.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet33);
        boolean boolean36 = astRoot11.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = astRoot11.getParent();
        astRoot11.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scope10, (com.google.javascript.rhino.head.Node) astRoot11, 6);
        astRoot11.setInStrictMode(true);
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        boolean boolean49 = comment48.hasSideEffects();
        int int50 = comment48.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = comment48.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList55 = scriptNode53.getChildScopes();
        int int56 = scriptNode53.getBaseLineno();
        int int57 = scriptNode53.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList61 = scriptNode59.getFunctions();
        scriptNode59.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope64 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode53.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode59, (com.google.javascript.rhino.head.Node) scope64);
        scriptNode59.setEncodedSourceEnd(18);
        comment48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        int int69 = scriptNode59.getLineno();
        boolean boolean70 = scriptNode59.hasSideEffects();
        astRoot11.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode59);
        scriptNode59.flattenSymbolTable(false);
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(astNode37);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(commentType51);
        org.junit.Assert.assertNull(scopeList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(functionNodeList61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        com.google.javascript.rhino.head.ast.Scope scope0 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scope0.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        scope0.setTop(scriptNode3);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap6 = scriptNode3.getSymbolTable();
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertNull(strMap6);
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope(688059738);
        boolean boolean2 = scope1.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        int int9 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean10 = compilerEnvirons0.isGenerateObserverCount();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        boolean boolean13 = compilerEnvirons0.isRecordingLocalJsDocComments();
        boolean boolean14 = compilerEnvirons0.isRecordingLocalJsDocComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        java.lang.String str5 = scriptNode1.makeIndent((int) (byte) -1);
        java.lang.String str6 = scriptNode1.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = astRoot8.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        java.lang.String str28 = comment26.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray29 = new com.google.javascript.rhino.head.ast.Comment[] { comment14, comment20, comment26 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet30 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet30, commentArray29);
        astRoot8.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet30);
        boolean boolean33 = astRoot8.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray34 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList35 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList35, symbolArray34);
        astRoot8.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList35);
        int int38 = astRoot8.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator40 = scriptNode39.spliterator();
        com.google.javascript.rhino.head.Node node42 = scriptNode39.setType((int) '#');
        java.lang.Object obj43 = scriptNode39.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator44 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator45 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator46 = positionComparator44.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator45);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode48.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot51 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = astRoot51.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor53 = astRoot51.iterator();
        scriptNode48.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot51);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode55.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode56);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList58 = scriptNode56.getChildScopes();
        int int59 = positionComparator45.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot51, (com.google.javascript.rhino.head.ast.AstNode) scriptNode56);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot8, (com.google.javascript.rhino.head.Node) scriptNode39, (com.google.javascript.rhino.head.Node) scriptNode56);
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode56);
        scriptNode1.setBaseLineno(95442629);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1\t  SCRIPT 0 1\n" + "'", str6, "-1\t  SCRIPT 0 1\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "                                                                                                                                                                                                        " + "'", str28, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(symbolArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(astNodeComparator46);
        org.junit.Assert.assertNotNull(nodeItor53);
        org.junit.Assert.assertNull(scopeList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd((-505759099));
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        java.lang.String str7 = astRoot5.getJsDoc();
        java.lang.String str8 = astRoot5.getNextTempName();
        scriptNode1.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot5);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int11 = scriptNode1.addFunction(functionNode10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "$0" + "'", str8, "$0");
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        com.google.javascript.rhino.head.Node node30 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        scriptNode36.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList46 = scriptNode44.getFunctions();
        scriptNode44.setPosition((int) (byte) 10);
        java.lang.String str49 = scriptNode36.toStringTree(scriptNode44);
        int int50 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node52 = scriptNode36.setType((int) (byte) -1);
        java.lang.String str53 = astRoot0.toStringTree(scriptNode36);
        scriptNode36.clearParentScope();
        scriptNode36.setEncodedSourceBounds(10, (int) (byte) 10);
        java.lang.String str59 = scriptNode36.toSource(170);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = scriptNode36.getTop();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(functionNodeList46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "                                                                                                                                                                                                                                                                                                                                                    {\n                                                                                                                                                                                                                                                                                                                                                    }\n" + "'", str59, "                                                                                                                                                                                                                                                                                                                                                    {\n                                                                                                                                                                                                                                                                                                                                                    }\n");
        org.junit.Assert.assertNotNull(scriptNode60);
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean12 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean13 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean14 = compilerEnvirons0.isRecordingComments();
        boolean boolean15 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setGeneratingSource(true);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor2 = astRoot0.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getNext();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot0.iterator();
        boolean boolean7 = astRoot0.isInStrictMode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node8 = astRoot0.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        astRoot0.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.lang.String str20 = comment17.getValue();
        scriptNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) comment17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        com.google.javascript.rhino.head.Node node52 = astRoot22.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot22, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) comment17, (com.google.javascript.rhino.head.Node) scriptNode54);
        astRoot0.addComment(comment17);
        com.google.javascript.rhino.head.Node node59 = astRoot0.getLastSibling();
        astRoot0.setPosition(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode(24);
        astRoot0.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode63);
        java.lang.Object obj66 = scriptNode63.getProp((-270991973));
        int int67 = scriptNode63.getRegexpCount();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor68 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode63.visit(nodeVisitor68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(871114474);
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        int int8 = comment6.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = comment6.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        int int15 = scriptNode11.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList19 = scriptNode17.getFunctions();
        scriptNode17.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode11.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode17, (com.google.javascript.rhino.head.Node) scope22);
        scriptNode17.setEncodedSourceEnd(18);
        comment6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        scriptNode28.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap34 = scriptNode33.getSymbolTable();
        scriptNode28.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode33);
        com.google.javascript.rhino.head.ast.Scope scope36 = scriptNode28.getParentScope();
        boolean boolean37 = scriptNode28.hasChildren();
        com.google.javascript.rhino.head.ast.AstRoot astRoot39 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet40 = astRoot39.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol42 = astRoot39.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType45, "hi!");
        astRoot39.addChildrenToFront((com.google.javascript.rhino.head.Node) comment47);
        boolean boolean49 = astRoot39.hasSideEffects();
        boolean boolean50 = astRoot39.isInStrictMode();
        boolean boolean51 = astRoot39.isInStrictMode();
        scriptNode28.putProp((int) '#', (java.lang.Object) astRoot39);
        scriptNode17.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode28);
        com.google.javascript.rhino.head.ast.AstRoot astRoot54 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = astRoot54.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        boolean boolean61 = comment60.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        boolean boolean67 = comment66.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType70 = null;
        com.google.javascript.rhino.head.ast.Comment comment72 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType70, "");
        java.lang.String str74 = comment72.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray75 = new com.google.javascript.rhino.head.ast.Comment[] { comment60, comment66, comment72 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet76 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet76, commentArray75);
        astRoot54.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet76);
        boolean boolean79 = astRoot54.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray80 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList81 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList81, symbolArray80);
        astRoot54.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList81);
        int int84 = astRoot54.getEncodedSourceStart();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode28, (com.google.javascript.rhino.head.Node) astRoot54);
        com.google.javascript.rhino.head.Node node87 = com.google.javascript.rhino.head.Node.newNumber((double) (short) 10);
        astRoot54.setCompilerData((java.lang.Object) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(commentType9);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(functionNodeList19);
        org.junit.Assert.assertNull(strMap34);
        org.junit.Assert.assertNull(scope36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(commentSet40);
        org.junit.Assert.assertNull(symbol42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "                                                                                                                                                                                                        " + "'", str74, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(symbolArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        compilerEnvirons6.setStrictMode(true);
        compilerEnvirons6.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.getWarnTrailingComma();
        compilerEnvirons12.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet17 = compilerEnvirons12.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter18 = compilerEnvirons12.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory19 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6, errorReporter18);
        com.google.javascript.rhino.head.IRFactory iRFactory20 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter18);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot24 = iRFactory20.parse("                                                                                                        ", "", (-748307395));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(errorReporter18);
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = astRoot1.getExistingIntProp(161);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory6 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor10 = null;
        astRoot7.visitComments(nodeVisitor10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = iRFactory6.transformTree(astRoot7);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        java.lang.String str34 = comment32.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray35 = new com.google.javascript.rhino.head.ast.Comment[] { comment20, comment26, comment32 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet36, commentArray35);
        astRoot14.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet36);
        boolean boolean39 = astRoot14.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray40 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList41 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList41, symbolArray40);
        astRoot14.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList41);
        int int44 = astRoot14.getLineno();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(603173706, 0);
        astRoot14.addChildrenToFront(node47);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode49.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode50.getChildScopes();
        int int53 = scriptNode50.getBaseLineno();
        com.google.javascript.rhino.head.Node node54 = scriptNode50.getLastSibling();
        int int55 = scriptNode50.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator56 = scriptNode50.new NodeIterator();
        int int57 = scriptNode50.getLineno();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((-1101340812), node47, (com.google.javascript.rhino.head.Node) scriptNode50, 25);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor60 = scriptNode50.iterator();
        java.lang.String str61 = scriptNode50.getSourceName();
        astRoot7.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode50);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNotNull(scriptNode12);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "                                                                                                                                                                                                        " + "'", str34, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(symbolArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(nodeItor60);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.getWarnTrailingComma();
        compilerEnvirons3.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet8 = compilerEnvirons3.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons3.getErrorReporter();
        java.lang.String[] strArray15 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons3.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser20 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter19);
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = parser20.parse("          hi!", "hi!", 2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray51 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList52 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList52, symbolArray51);
        astRoot25.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList52);
        int int55 = astRoot25.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment56 = astRoot25.getJsDocNode();
        astRoot25.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.Token.CommentType commentType61 = null;
        com.google.javascript.rhino.head.ast.Comment comment63 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType61, "");
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        comment63.setCommentType(commentType64);
        astRoot25.setJsDocNode(comment63);
        astRoot24.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot25);
        java.lang.String str68 = astRoot25.getNextTempName();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator69 = astRoot25.spliterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot70 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int71 = astRoot70.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot72 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int73 = astRoot72.getBaseLineno();
        int int74 = astRoot72.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList78 = scriptNode76.getChildScopes();
        int int79 = scriptNode76.getBaseLineno();
        com.google.javascript.rhino.head.Node node80 = scriptNode76.getLastSibling();
        scriptNode76.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode83 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode83.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode84);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList86 = scriptNode84.getFunctions();
        scriptNode84.setPosition((int) (byte) 10);
        java.lang.String str89 = scriptNode76.toStringTree(scriptNode84);
        int int90 = scriptNode76.getBaseLineno();
        astRoot72.target = scriptNode76;
        int int92 = astRoot70.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        java.lang.String str94 = astRoot70.toSource(19);
        java.lang.String str95 = astRoot70.getEncodedSource();
        // The following exception was thrown during execution in test generation
        try {
            astRoot25.setScope((com.google.javascript.rhino.head.ast.Scope) astRoot70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(errorReporter9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertNotNull(astRoot24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(symbolArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(comment56);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "$0" + "'", str68, "$0");
        org.junit.Assert.assertNotNull(nodeSpliterator69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(scopeList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(functionNodeList86);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.reportWarningAsError();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons4 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean5 = compilerEnvirons4.isReservedKeywordAsIdentifier();
        boolean boolean6 = compilerEnvirons4.getWarnTrailingComma();
        boolean boolean7 = compilerEnvirons4.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter8 = compilerEnvirons4.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory9 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter8);
        com.google.javascript.rhino.head.ast.AstRoot astRoot13 = iRFactory9.parse("          hi!", "1\tCOMMENT 1 0\n", 25);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        boolean boolean16 = compilerEnvirons14.getWarnTrailingComma();
        compilerEnvirons14.setXmlAvailable(true);
        boolean boolean19 = compilerEnvirons14.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory20 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons14);
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator22 = astRoot21.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor23 = astRoot21.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor24 = null;
        astRoot21.visitComments(nodeVisitor24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = iRFactory20.transformTree(astRoot21);
        com.google.javascript.rhino.head.ast.Scope scope27 = astRoot21.getEnclosingScope();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet28 = astRoot21.getComments();
        astRoot21.setInStrictMode(false);
        boolean boolean31 = astRoot21.hasChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node32 = iRFactory9.transform((com.google.javascript.rhino.head.ast.AstNode) astRoot21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(errorReporter8);
        org.junit.Assert.assertNotNull(astRoot13);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeItor23);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertNull(scope27);
        org.junit.Assert.assertNull(commentSet28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        boolean boolean7 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        int int12 = compilerEnvirons10.getLanguageVersion();
        int int13 = compilerEnvirons10.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        compilerEnvirons14.setStrictMode(true);
        compilerEnvirons14.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        boolean boolean22 = compilerEnvirons20.getWarnTrailingComma();
        compilerEnvirons20.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet25 = compilerEnvirons20.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter26 = compilerEnvirons20.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory27 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons14, errorReporter26);
        com.google.javascript.rhino.head.IRFactory iRFactory28 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10, errorReporter26);
        com.google.javascript.rhino.head.IRFactory iRFactory29 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter26);
        compilerEnvirons0.setRecordingComments(true);
        compilerEnvirons0.setGeneratingSource(false);
        compilerEnvirons0.setIdeMode(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 170 + "'", int12 == 170);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 170 + "'", int13 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(errorReporter26);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        com.google.javascript.rhino.head.Node node1 = null;
        com.google.javascript.rhino.head.Node node2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node4 = new com.google.javascript.rhino.head.Node((-361648642), node1, node2, 423587025);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(95442629, 538062289, commentType2, "                      ");
        java.lang.String str5 = comment4.getValue();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment4.visit(nodeVisitor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "                      " + "'", str5, "                      ");
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = scriptNode0.getEnclosingFunction();
        // The following exception was thrown during execution in test generation
        try {
            int int2 = functionNode1.depth();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(functionNode1);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((-60212263));
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        int int15 = scriptNode7.getType();
        java.lang.String str16 = scriptNode7.getSourceName();
        java.lang.String str17 = scriptNode7.toSource();
        java.lang.String str19 = scriptNode7.toSource((int) (byte) 0);
        int int20 = scriptNode7.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.Scope scope21 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode7.addChildScope(scope21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 136 + "'", int15 == 136);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{\n}\n" + "'", str17, "{\n}\n");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n}\n" + "'", str19, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        int int10 = scriptNode7.getBaseLineno();
        int int11 = scriptNode7.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode13.getFunctions();
        scriptNode13.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope18 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode7.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode13, (com.google.javascript.rhino.head.Node) scope18);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode21.getChildScopes();
        int int24 = scriptNode21.getBaseLineno();
        com.google.javascript.rhino.head.Node node25 = scriptNode21.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = scriptNode21.getAstRoot();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode7, (com.google.javascript.rhino.head.ast.Scope) scriptNode21);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        scriptNode7.setEndLineno(9);
        scriptNode7.setEncodedSourceBounds(7, 22);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = scriptNode7.getExistingIntProp((-1222715009));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(astRoot26);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        com.google.javascript.rhino.head.ast.Scope scope3 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node((-270991973), (com.google.javascript.rhino.head.Node) scope3, 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope6 = node5.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.Node cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("136");
        node1.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(1041503403);
        node1.addChildrenToFront(node5);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        com.google.javascript.rhino.head.IRFactory iRFactory14 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        boolean boolean15 = compilerEnvirons0.isGenerateObserverCount();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("                                    {\n                                    }\n");
        com.google.javascript.rhino.head.ast.Comment comment2 = node1.getJsDocNode();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(comment2);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.lang.String str49 = astRoot0.toSource(15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot50 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = astRoot50.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor52 = astRoot50.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor53 = null;
        astRoot50.visitComments(nodeVisitor53);
        com.google.javascript.rhino.head.Node node55 = astRoot50.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = astRoot50.getTop();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        java.lang.String str58 = astRoot0.toString();
        astRoot0.setRelative((-975234622));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(nodeItor52);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(scriptNode56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "136" + "'", str58, "136");
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        java.lang.String str25 = astRoot0.debugPrint();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        int int31 = scriptNode27.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode33.getFunctions();
        scriptNode33.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode27.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scope38);
        int int40 = scriptNode33.getEndLineno();
        scriptNode33.setEncodedSource("hi!");
        int int43 = astRoot0.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator44 = astRoot0.spliterator();
        int int45 = astRoot0.getType();
        boolean boolean46 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        scriptNode49.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap55 = scriptNode54.getSymbolTable();
        scriptNode49.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode54);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList57 = scriptNode49.getStatements();
        com.google.javascript.rhino.head.ast.Scope scope58 = scriptNode49.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot59 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int60 = astRoot59.getBaseLineno();
        java.lang.String str61 = astRoot59.debugPrint();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList62 = astRoot59.getSymbols();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scope58, (com.google.javascript.rhino.head.Node) astRoot59, 0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot65 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean66 = astRoot65.hasSideEffects();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons67 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory69 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons67, errorReporter68);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList73 = scriptNode71.getFunctions();
        scriptNode71.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node76 = iRFactory69.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        astRoot65.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode71);
        scriptNode71.setEncodedSourceStart(20);
        scriptNode71.setEncodedSource("136");
        astRoot59.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode71);
        astRoot0.addChildToFront((com.google.javascript.rhino.head.Node) astRoot59);
        java.lang.String str85 = astRoot0.toSource(365503559);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str25, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 136 + "'", int45 == 136);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(strMap55);
        org.junit.Assert.assertNotNull(astNodeList57);
        org.junit.Assert.assertNotNull(scope58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str61, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNotNull(symbolList62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(functionNodeList73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj2 = scriptNode1.getCompilerData();
        com.google.javascript.rhino.head.ast.Scope scope3 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator4 = scope3.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        scope3.setTop(scriptNode6);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode6);
        int int12 = scriptNode1.getIntProp(9, 9);
        scriptNode1.setEncodedSourceBounds(481479666, (-87298254));
        int int16 = scriptNode1.getPosition();
        java.lang.String str17 = scriptNode1.getEncodedSource();
        scriptNode1.setRelative(0);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(nodeSpliterator4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        int int8 = astRoot4.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = astRoot4.getAstRoot();
        int int10 = astRoot4.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope11 = astRoot4.getParentScope();
        com.google.javascript.rhino.head.Node node12 = astRoot4.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = node12.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator13.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(astRoot9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode32.getFunctions();
        scriptNode32.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scope37);
        scriptNode32.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node41 = iRFactory24.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode32.setTop(scriptNode52);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode32, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode66);
        com.google.javascript.rhino.head.Node node68 = scriptNode8.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode71.getChildScopes();
        int int74 = scriptNode71.getBaseLineno();
        com.google.javascript.rhino.head.Node node75 = scriptNode71.getLastSibling();
        scriptNode71.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode79);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList81 = scriptNode79.getFunctions();
        scriptNode79.setPosition((int) (byte) 10);
        java.lang.String str84 = scriptNode71.toStringTree(scriptNode79);
        int int85 = scriptNode71.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode87.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope90 = scriptNode87.getParentScope();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode87);
        java.lang.Object obj92 = scriptNode87.getCompilerData();
        scriptNode8.putProp(12, (java.lang.Object) scriptNode87);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator94 = scriptNode8.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator94.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(functionNodeList81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(scope90);
        org.junit.Assert.assertNull(obj92);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = comment4.getCommentType();
        int int6 = comment4.depth();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        boolean boolean20 = comment19.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        java.lang.String str27 = comment25.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray28 = new com.google.javascript.rhino.head.ast.Comment[] { comment13, comment19, comment25 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet29 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet29, commentArray28);
        astRoot7.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet29);
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        int int38 = comment36.getLineno();
        com.google.javascript.rhino.head.Node node40 = comment36.setType(18);
        boolean boolean41 = comment36.hasSideEffects();
        astRoot7.addComment(comment36);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons43, errorReporter44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node62 = iRFactory45.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons63 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory65 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons63, errorReporter64);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode66.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode67);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList69 = scriptNode67.getChildScopes();
        int int70 = scriptNode67.getBaseLineno();
        int int71 = scriptNode67.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode72.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode73);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList75 = scriptNode73.getFunctions();
        scriptNode73.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope78 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode67.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode73, (com.google.javascript.rhino.head.Node) scope78);
        scriptNode73.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node82 = iRFactory65.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode73);
        scriptNode53.setTop(scriptNode73);
        comment4.addChildAfter((com.google.javascript.rhino.head.Node) astRoot7, (com.google.javascript.rhino.head.Node) scriptNode73);
        java.lang.String str86 = comment4.toSource(9);
        // The following exception was thrown during execution in test generation
        try {
            int int88 = comment4.getExistingIntProp(163023072);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "                                                                                                                                                                                                        " + "'", str27, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(scopeList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(functionNodeList75);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "                  " + "'", str86, "                  ");
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode24.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = astRoot27.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor29 = astRoot27.iterator();
        scriptNode24.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot27);
        java.lang.String str31 = scriptNode24.toString();
        scriptNode17.setCompilerData((java.lang.Object) scriptNode24);
        int int33 = scriptNode17.getAbsolutePosition();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode37.getChildScopes();
        int int40 = scriptNode37.getBaseLineno();
        com.google.javascript.rhino.head.Node node41 = scriptNode37.getLastSibling();
        int int42 = scriptNode37.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator43 = scriptNode37.new NodeIterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode44.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList47 = scriptNode45.getChildScopes();
        int int48 = scriptNode45.getBaseLineno();
        com.google.javascript.rhino.head.Node node49 = scriptNode45.getLastSibling();
        scriptNode45.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        java.lang.String str58 = scriptNode45.toStringTree(scriptNode53);
        int int59 = scriptNode45.getBaseLineno();
        com.google.javascript.rhino.head.Node node61 = scriptNode45.setType((int) (byte) -1);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(9, (com.google.javascript.rhino.head.Node) scriptNode37, node61);
        com.google.javascript.rhino.head.ast.AstRoot astRoot64 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int65 = astRoot64.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj69 = scriptNode68.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        int int73 = scriptNode70.getEndLineno();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode68, (com.google.javascript.rhino.head.Node) scriptNode70);
        com.google.javascript.rhino.head.ast.Scope scope76 = new com.google.javascript.rhino.head.ast.Scope(16);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((int) 'a', (com.google.javascript.rhino.head.Node) astRoot64, node74, (com.google.javascript.rhino.head.Node) scope76);
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(644758030, (com.google.javascript.rhino.head.Node) scriptNode37, node74);
        scriptNode37.setEncodedSourceBounds(0, (-447184571));
        com.google.javascript.rhino.head.ast.Scope scope82 = scriptNode37.getEnclosingScope();
        scriptNode17.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode37);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(nodeItor29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "136" + "'", str31, "136");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(scopeList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(scope82);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        boolean boolean42 = astRoot0.hasSideEffects();
        astRoot0.setPosition(2);
        boolean boolean45 = astRoot0.hasConsistentReturnUsage();
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.Parser parser6 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot10 = parser6.parse("                                                                                                                                                                                                  {\n                                                                                                                                                                                                    {\n                                                                                                                                                                                                    }\n                                                                                                                                                                                                  }\n", "-1\tSCRIPT -1 1\n35\t  COMMENT 36 2\n", (-449082186));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator3.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int7 = astRoot6.getBaseLineno();
        java.lang.String str8 = astRoot6.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        int int11 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot6, (com.google.javascript.rhino.head.ast.AstNode) astRoot9);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator12 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor20 = comment17.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        comment17.setCommentType(commentType21);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator23 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator24 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator25 = positionComparator23.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator24);
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int27 = astRoot26.getBaseLineno();
        java.lang.String str28 = astRoot26.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = astRoot29.new NodeIterator();
        int int31 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot26, (com.google.javascript.rhino.head.ast.AstNode) astRoot29);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.putIntProp((int) (short) 1, 1);
        java.lang.String str36 = scriptNode32.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator38 = scope37.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        scope37.setTop(scriptNode40);
        scope37.setLineno((int) (short) -1);
        int int45 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode32, (com.google.javascript.rhino.head.ast.AstNode) scope37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str62 = scriptNode32.toStringTree(scriptNode53);
        int int63 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) comment17, (com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.lang.String str64 = comment17.toString();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment17.visit(nodeVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str8, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(astNodeComparator25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str28, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "161" + "'", str64, "161");
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setGenerateDebugInfo(false);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setLanguageVersion(481479666);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad language version: 481479666");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = compilerEnvirons0.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser11 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setLanguageVersion((-837790279));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad language version: -837790279");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(errorReporter10);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("                                                                                                                                                                                                        {\n                                                                                                                                                                                                        }\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scriptNode1.iterator();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons8 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean9 = compilerEnvirons8.isReservedKeywordAsIdentifier();
        boolean boolean10 = compilerEnvirons8.isIdeMode();
        int int11 = compilerEnvirons8.getOptimizationLevel();
        scriptNode1.setCompilerData((java.lang.Object) compilerEnvirons8);
        com.google.javascript.rhino.head.Node node13 = scriptNode1.getLastSibling();
        node13.putIntProp((int) (short) 1, 273945299);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(compilerEnvirons8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        java.lang.String str10 = astRoot6.makeIndent(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode11 = astRoot6.getEnclosingFunction();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(functionNode11);
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope scope5 = astRoot0.getParentScope();
        astRoot0.flattenSymbolTable(true);
        astRoot0.putIntProp((int) (byte) 100, (int) (byte) 100);
        com.google.javascript.rhino.head.Node node11 = astRoot0.target;
        int int12 = astRoot0.getParamAndVarCount();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(scope5);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str3 = scriptNode1.toSource((int) '4');
        com.google.javascript.rhino.head.Node node4 = scriptNode1.getFirstChild();
        java.lang.Object obj6 = scriptNode1.getProp(18);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        int int11 = scriptNode8.getBaseLineno();
        com.google.javascript.rhino.head.Node node12 = scriptNode8.getLastSibling();
        scriptNode8.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode15.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList18 = scriptNode16.getFunctions();
        scriptNode16.setPosition((int) (byte) 10);
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode16);
        int int22 = scriptNode8.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = astRoot24.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol27 = astRoot24.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType30, "hi!");
        astRoot24.addChildrenToFront((com.google.javascript.rhino.head.Node) comment32);
        boolean boolean34 = astRoot24.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        int int40 = scriptNode36.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList41 = scriptNode36.getSymbols();
        int int42 = scriptNode36.getPosition();
        com.google.javascript.rhino.head.ast.AstRoot astRoot43 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator44 = astRoot43.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        boolean boolean50 = comment49.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType53 = null;
        com.google.javascript.rhino.head.ast.Comment comment55 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType53, "");
        boolean boolean56 = comment55.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType59 = null;
        com.google.javascript.rhino.head.ast.Comment comment61 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType59, "");
        java.lang.String str63 = comment61.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray64 = new com.google.javascript.rhino.head.ast.Comment[] { comment49, comment55, comment61 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet65 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet65, commentArray64);
        astRoot43.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet65);
        boolean boolean68 = astRoot43.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray69 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList70 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList70, symbolArray69);
        astRoot43.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList70);
        com.google.javascript.rhino.head.Node node73 = astRoot43.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode74.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode75);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot43, (com.google.javascript.rhino.head.ast.Scope) scriptNode75);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(19, (com.google.javascript.rhino.head.Node) astRoot24, (com.google.javascript.rhino.head.Node) scriptNode36, (com.google.javascript.rhino.head.Node) astRoot43, (int) (byte) 1);
        scriptNode8.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot43);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) astRoot43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode83 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode82.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode83);
        scriptNode83.setEncodedSourceEnd(11);
        scriptNode83.setSourceName("-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node(20, (com.google.javascript.rhino.head.Node) scriptNode1, (com.google.javascript.rhino.head.Node) scriptNode83, 13);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode92 = new com.google.javascript.rhino.head.ast.ScriptNode(100);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) scriptNode92);
        scriptNode1.setBaseLineno(605628279);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode96 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int97 = scriptNode1.addFunction(functionNode96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str3, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(functionNodeList18);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(commentSet25);
        org.junit.Assert.assertNull(symbol27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(symbolList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "                                                                                                                                                                                                        " + "'", str63, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(symbolArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node73);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getParamCount();
        int int2 = astRoot0.getRegexpCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet4 = astRoot3.getComments();
        int int5 = astRoot3.getEndLineno();
        com.google.javascript.rhino.head.Node node7 = astRoot3.setType((int) (short) 10);
        astRoot3.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator15 = scriptNode14.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        java.lang.String str23 = comment20.getValue();
        scriptNode14.setParent((com.google.javascript.rhino.head.ast.AstNode) comment20);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray51 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList52 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList52, symbolArray51);
        astRoot25.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList52);
        com.google.javascript.rhino.head.Node node55 = astRoot25.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode56.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode57);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot25, (com.google.javascript.rhino.head.ast.Scope) scriptNode57);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode13, (com.google.javascript.rhino.head.Node) comment20, (com.google.javascript.rhino.head.Node) scriptNode57);
        astRoot3.addComment(comment20);
        com.google.javascript.rhino.head.Node node62 = astRoot3.getLastSibling();
        astRoot0.addChildToFront(node62);
        com.google.javascript.rhino.head.Token.CommentType commentType66 = null;
        com.google.javascript.rhino.head.ast.Comment comment68 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType66, "hi!");
        java.lang.String str70 = comment68.toSource(0);
        java.lang.String str71 = comment68.shortName();
        boolean boolean72 = comment68.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator73 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator74 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator75 = positionComparator73.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator74);
        com.google.javascript.rhino.head.ast.AstRoot astRoot76 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int77 = astRoot76.getBaseLineno();
        java.lang.String str78 = astRoot76.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot79 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator80 = astRoot79.new NodeIterator();
        int int81 = positionComparator74.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot76, (com.google.javascript.rhino.head.ast.AstNode) astRoot79);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator83 = scriptNode82.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator84 = scriptNode82.new NodeIterator();
        astRoot79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode82);
        com.google.javascript.rhino.head.Node node86 = scriptNode82.getFirstChild();
        comment68.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode82);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode88 = scriptNode82.getTop();
        astRoot0.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode88);
        astRoot0.setInStrictMode(false);
        int int92 = astRoot0.getRegexpCount();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator93 = astRoot0.spliterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(commentSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(symbolArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Comment" + "'", str71, "Comment");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(astNodeComparator75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str78, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator83);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertNotNull(scriptNode88);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator93);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = scriptNode1.new NodeIterator();
        java.lang.String str4 = scriptNode1.getNextTempName();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor5 = scriptNode1.iterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor8 = astRoot6.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor9 = null;
        astRoot6.visitComments(nodeVisitor9);
        astRoot6.setInStrictMode(false);
        int int13 = astRoot6.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) astRoot6);
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        com.google.javascript.rhino.head.Node node40 = new com.google.javascript.rhino.head.Node((-527128964), (com.google.javascript.rhino.head.Node) scriptNode1, (com.google.javascript.rhino.head.Node) astRoot15);
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$0" + "'", str4, "$0");
        org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setGenerateObserverCount(true);
        compilerEnvirons0.setIdeMode(false);
        boolean boolean16 = compilerEnvirons0.isRecordingLocalJsDocComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        boolean boolean6 = comment5.hasSideEffects();
        int int7 = comment5.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope8 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator9 = scope8.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        scope8.setTop(scriptNode11);
        comment5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.lang.String str15 = comment5.getValue();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node((-306271829), (com.google.javascript.rhino.head.Node) comment5, 22);
        com.google.javascript.rhino.head.ast.Comment comment18 = node17.getJsDocNode();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(comment18);
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean1 = astRoot0.hasSideEffects();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap2 = null;
        astRoot0.setSymbolTable(strMap2);
        boolean boolean4 = astRoot0.isInStrictMode();
        astRoot0.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        java.lang.String str17 = comment15.toSource(100);
        java.lang.String str18 = comment15.getValue();
        scriptNode9.setParent((com.google.javascript.rhino.head.ast.AstNode) comment15);
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType22, "hi!");
        int int25 = comment24.getLength();
        java.lang.String str26 = comment24.getValue();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(1490422031, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) comment24, (-476424842));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode30.getChildScopes();
        int int33 = scriptNode30.getBaseLineno();
        com.google.javascript.rhino.head.Node node34 = scriptNode30.getLastSibling();
        scriptNode30.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList40 = scriptNode38.getFunctions();
        scriptNode38.setPosition((int) (byte) 10);
        java.lang.String str43 = scriptNode30.toStringTree(scriptNode38);
        int int44 = scriptNode30.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode46.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope49 = scriptNode46.getParentScope();
        scriptNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList54 = scriptNode52.getChildScopes();
        int int55 = scriptNode52.getBaseLineno();
        com.google.javascript.rhino.head.Node node56 = scriptNode52.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode57.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode58);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList60 = scriptNode58.getChildScopes();
        java.lang.String str62 = scriptNode58.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode52.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode58, (com.google.javascript.rhino.head.Node) scriptNode64);
        java.lang.Object obj67 = scriptNode58.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str70 = scriptNode68.toSource((int) '4');
        java.lang.String str71 = scriptNode58.toStringTree(scriptNode68);
        node28.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode46, (com.google.javascript.rhino.head.Node) scriptNode58);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode46);
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.setContinue(node73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "                                                                                                                                                                                                        " + "'", str17, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(functionNodeList40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(scope49);
        org.junit.Assert.assertNull(scopeList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(scopeList60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str70, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = new com.google.javascript.rhino.head.CompilerEnvirons();
        int int1 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons4 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray10 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        compilerEnvirons4.setActivationNames((java.util.Set<java.lang.String>) strSet11);
        com.google.javascript.rhino.head.Parser parser14 = new com.google.javascript.rhino.head.Parser(compilerEnvirons4);
        boolean boolean15 = compilerEnvirons4.getAllowSharpComments();
        boolean boolean16 = compilerEnvirons4.getAllowSharpComments();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean18 = compilerEnvirons17.isReservedKeywordAsIdentifier();
        boolean boolean19 = compilerEnvirons17.isIdeMode();
        compilerEnvirons17.setRecordingLocalJsDocComments(false);
        boolean boolean22 = compilerEnvirons17.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean24 = compilerEnvirons23.isReservedKeywordAsIdentifier();
        int int25 = compilerEnvirons23.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons26 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean27 = compilerEnvirons26.isReservedKeywordAsIdentifier();
        boolean boolean28 = compilerEnvirons26.isIdeMode();
        compilerEnvirons26.setRecordingLocalJsDocComments(false);
        boolean boolean31 = compilerEnvirons26.isGenerateDebugInfo();
        compilerEnvirons26.setRecordingLocalJsDocComments(true);
        boolean boolean34 = compilerEnvirons26.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons35 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean36 = compilerEnvirons35.isReservedKeywordAsIdentifier();
        boolean boolean37 = compilerEnvirons35.getWarnTrailingComma();
        boolean boolean38 = compilerEnvirons35.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter39 = compilerEnvirons35.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser40 = new com.google.javascript.rhino.head.Parser(compilerEnvirons26, errorReporter39);
        compilerEnvirons23.setErrorReporter(errorReporter39);
        compilerEnvirons17.setErrorReporter(errorReporter39);
        com.google.javascript.rhino.head.Parser parser43 = new com.google.javascript.rhino.head.Parser(compilerEnvirons4, errorReporter39);
        com.google.javascript.rhino.head.Parser parser44 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter39);
        com.google.javascript.rhino.head.Context context45 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.initFromContext(context45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons4);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 170 + "'", int25 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(errorReporter39);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        int int5 = compilerEnvirons3.getLanguageVersion();
        boolean boolean6 = compilerEnvirons3.isGenerateObserverCount();
        com.google.javascript.rhino.head.Parser parser7 = new com.google.javascript.rhino.head.Parser(compilerEnvirons3);
        com.google.javascript.rhino.head.ErrorReporter errorReporter8 = compilerEnvirons3.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser9 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter8);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter8.warning("-253374738\tSCRIPT -253374738 1\n", "      ", 35, "-213029975\tSCRIPT -213029975 1\n", 225099420);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 170 + "'", int5 == 170);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(errorReporter8);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        int int9 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean10 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        boolean boolean12 = compilerEnvirons0.recoverFromErrors();
        boolean boolean13 = compilerEnvirons0.isGeneratingSource();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        boolean boolean16 = compilerEnvirons14.isIdeMode();
        boolean boolean17 = compilerEnvirons14.getWarnTrailingComma();
        com.google.javascript.rhino.head.ErrorReporter errorReporter18 = compilerEnvirons14.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory19 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter18);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.EvaluatorException evaluatorException25 = errorReporter18.runtimeError("|", "                        {\n                        }\n", (int) (byte) 100, "                                      {\n                                      }\n", 221450998);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(errorReporter18);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        int int8 = compilerEnvirons6.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        boolean boolean11 = compilerEnvirons9.isIdeMode();
        compilerEnvirons9.setRecordingLocalJsDocComments(false);
        boolean boolean14 = compilerEnvirons9.isGenerateDebugInfo();
        compilerEnvirons9.setRecordingLocalJsDocComments(true);
        boolean boolean17 = compilerEnvirons9.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        boolean boolean20 = compilerEnvirons18.getWarnTrailingComma();
        boolean boolean21 = compilerEnvirons18.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = compilerEnvirons18.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser23 = new com.google.javascript.rhino.head.Parser(compilerEnvirons9, errorReporter22);
        compilerEnvirons6.setErrorReporter(errorReporter22);
        compilerEnvirons0.setErrorReporter(errorReporter22);
        boolean boolean26 = compilerEnvirons0.isXmlAvailable();
        boolean boolean27 = compilerEnvirons0.isIdeMode();
        boolean boolean28 = compilerEnvirons0.isStrictMode();
        int int29 = compilerEnvirons0.getLanguageVersion();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 170 + "'", int8 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(errorReporter22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 170 + "'", int29 == 170);
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        java.lang.String str10 = astRoot3.makeIndent(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        java.lang.String str18 = scriptNode12.toSource((int) (short) -1);
        astRoot3.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope20 = scriptNode12.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator22 = astRoot21.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        boolean boolean34 = comment33.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray42 = new com.google.javascript.rhino.head.ast.Comment[] { comment27, comment33, comment39 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet43 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet43, commentArray42);
        astRoot21.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet43);
        boolean boolean46 = astRoot21.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray47 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList48 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList48, symbolArray47);
        astRoot21.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList48);
        astRoot21.setInStrictMode(false);
        astRoot21.putIntProp(0, (int) (byte) 100);
        scope20.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot21);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator57 = scope20.new NodeIterator();
        com.google.javascript.rhino.head.Node node58 = nodeIterator57.next();
        int int59 = node58.getType();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "                                " + "'", str10, "                                ");
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n}\n" + "'", str18, "{\n}\n");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(symbolArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 136 + "'", int59 == 136);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode1.setType((int) (byte) -1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor18 = scriptNode1.iterator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator19 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator20 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator21 = positionComparator19.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator20);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int23 = astRoot22.getBaseLineno();
        java.lang.String str24 = astRoot22.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        int int27 = positionComparator20.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot22, (com.google.javascript.rhino.head.ast.AstNode) astRoot25);
        boolean boolean28 = astRoot22.isInStrictMode();
        scriptNode1.addChildToFront((com.google.javascript.rhino.head.Node) astRoot22);
        com.google.javascript.rhino.head.Node node30 = scriptNode1.getNext();
        int int31 = scriptNode1.getFunctionCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = scriptNode32.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = astRoot34.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        java.lang.String str54 = comment52.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray55 = new com.google.javascript.rhino.head.ast.Comment[] { comment40, comment46, comment52 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet56 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet56, commentArray55);
        astRoot34.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet56);
        boolean boolean59 = astRoot34.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray60 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList61 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList61, symbolArray60);
        astRoot34.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList61);
        int int64 = astRoot34.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment65 = astRoot34.getJsDocNode();
        astRoot34.setInStrictMode(false);
        scriptNode32.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        java.lang.String str69 = astRoot34.debugPrint();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        scriptNode70.setBaseLineno((int) 'a');
        scriptNode70.setEncodedSourceEnd((int) (short) -1);
        java.lang.Object obj77 = scriptNode70.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol79 = scriptNode70.getSymbol("|");
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.addChildBefore((com.google.javascript.rhino.head.Node) astRoot34, (com.google.javascript.rhino.head.Node) scriptNode70);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertNotNull(astNodeComparator21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str24, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(functionNode33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "                                                                                                                                                                                                        " + "'", str54, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(symbolArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(comment65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str69, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(symbol79);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        scriptNode1.setBaseLineno(4);
        scriptNode1.clearParentScope();
        boolean boolean10 = scriptNode1.hasChildren();
        int int11 = scriptNode1.getEncodedSourceStart();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(10, 9);
        java.lang.String str3 = scope2.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        astRoot4.clearParentScope();
        com.google.javascript.rhino.head.ast.Scope.joinScopes(scope2, (com.google.javascript.rhino.head.ast.Scope) astRoot4);
        int int9 = astRoot4.getRegexpCount();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "10\tBLOCK 10 9\n" + "'", str3, "10\tBLOCK 10 9\n");
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        boolean boolean4 = compilerEnvirons0.isRecordingComments();
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(strSet5);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = scriptNode1.new NodeIterator();
        java.lang.Object obj8 = scriptNode1.getCompilerData();
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet11 = astRoot10.getComments();
        int int12 = astRoot10.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot10.visitComments(nodeVisitor13);
        com.google.javascript.rhino.head.Node node15 = astRoot10.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope16 = astRoot10.getEnclosingScope();
        java.lang.String str17 = astRoot10.getJsDoc();
        com.google.javascript.rhino.head.ast.Symbol symbol19 = astRoot10.getSymbol("  ");
        scriptNode1.putProp((-34), (java.lang.Object) astRoot10);
        astRoot10.removeChildren();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(commentSet11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(scope16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(symbol19);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isGenerateObserverCount();
        compilerEnvirons0.setStrictMode(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter8 = compilerEnvirons0.getErrorReporter();
        int int9 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorReporter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot6.visitComments(nodeVisitor13);
        int int15 = astRoot6.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode17.getChildScopes();
        int int20 = scriptNode17.getBaseLineno();
        com.google.javascript.rhino.head.Node node21 = scriptNode17.getLastSibling();
        int int22 = scriptNode17.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = scriptNode17.new NodeIterator();
        int int24 = scriptNode17.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        scriptNode17.setCompilerData((java.lang.Object) nodeIterator26);
        astRoot6.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode17);
        com.google.javascript.rhino.head.Node node29 = astRoot6.getLastChild();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node29);
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode4.getChildScopes();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap11 = scriptNode4.getSymbolTable();
        scriptNode4.setBaseLineno(1267544753);
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        int int23 = comment21.getLineno();
        java.lang.String str24 = comment21.debugPrint();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        comment21.setCommentType(commentType25);
        scriptNode7.setJsDocNode(comment21);
        boolean boolean28 = scriptNode7.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope scope29 = scriptNode7.getParentScope();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj31 = scope29.getProp(25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1\tCOMMENT 1 0\n" + "'", str24, "1\tCOMMENT 1 0\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(scope29);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setAllowSharpComments(true);
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        boolean boolean11 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setIdeMode(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        compilerEnvirons0.setRecordingComments(false);
        compilerEnvirons0.setReservedKeywordAsIdentifier(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        int int16 = compilerEnvirons14.getLanguageVersion();
        compilerEnvirons14.setLanguageVersion((int) (byte) 100);
        boolean boolean19 = compilerEnvirons14.isGenerateObserverCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode21.getChildScopes();
        int int24 = scriptNode21.getBaseLineno();
        com.google.javascript.rhino.head.Node node25 = scriptNode21.getLastSibling();
        int int26 = scriptNode21.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor27 = scriptNode21.iterator();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.isIdeMode();
        int int31 = compilerEnvirons28.getOptimizationLevel();
        scriptNode21.setCompilerData((java.lang.Object) compilerEnvirons28);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons33 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean34 = compilerEnvirons33.isReservedKeywordAsIdentifier();
        boolean boolean35 = compilerEnvirons33.isIdeMode();
        compilerEnvirons33.setRecordingLocalJsDocComments(false);
        boolean boolean38 = compilerEnvirons33.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons39 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean40 = compilerEnvirons39.isReservedKeywordAsIdentifier();
        int int41 = compilerEnvirons39.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean43 = compilerEnvirons42.isReservedKeywordAsIdentifier();
        boolean boolean44 = compilerEnvirons42.isIdeMode();
        compilerEnvirons42.setRecordingLocalJsDocComments(false);
        boolean boolean47 = compilerEnvirons42.isGenerateDebugInfo();
        compilerEnvirons42.setRecordingLocalJsDocComments(true);
        boolean boolean50 = compilerEnvirons42.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons51 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean52 = compilerEnvirons51.isReservedKeywordAsIdentifier();
        boolean boolean53 = compilerEnvirons51.getWarnTrailingComma();
        boolean boolean54 = compilerEnvirons51.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter55 = compilerEnvirons51.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser56 = new com.google.javascript.rhino.head.Parser(compilerEnvirons42, errorReporter55);
        compilerEnvirons39.setErrorReporter(errorReporter55);
        compilerEnvirons33.setErrorReporter(errorReporter55);
        compilerEnvirons28.setErrorReporter(errorReporter55);
        com.google.javascript.rhino.head.Parser parser60 = new com.google.javascript.rhino.head.Parser(compilerEnvirons14, errorReporter55);
        com.google.javascript.rhino.head.IRFactory iRFactory61 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter55);
        java.io.Reader reader62 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot65 = iRFactory61.parse(reader62, "                          {\n                          }\n", 391457258);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 170 + "'", int16 == 170);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 170 + "'", int41 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(errorReporter55);
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scriptNode1.iterator();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons8 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean9 = compilerEnvirons8.isReservedKeywordAsIdentifier();
        boolean boolean10 = compilerEnvirons8.isIdeMode();
        int int11 = compilerEnvirons8.getOptimizationLevel();
        scriptNode1.setCompilerData((java.lang.Object) compilerEnvirons8);
        boolean boolean13 = scriptNode1.hasChildren();
        int int14 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        int int22 = comment20.getLineno();
        com.google.javascript.rhino.head.Node node24 = comment20.setType(18);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor25 = node24.iterator();
        int int26 = node24.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope(15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode30.getChildScopes();
        int int33 = scriptNode30.getBaseLineno();
        com.google.javascript.rhino.head.Node node34 = scriptNode30.getLastSibling();
        java.lang.String str36 = scriptNode30.toSource((int) (short) -1);
        int int37 = scriptNode30.getLength();
        scope28.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator39 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator40 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator41 = positionComparator39.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator40);
        com.google.javascript.rhino.head.ast.AstRoot astRoot42 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int43 = astRoot42.getBaseLineno();
        java.lang.String str44 = astRoot42.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot45 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = astRoot45.new NodeIterator();
        int int47 = positionComparator40.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot42, (com.google.javascript.rhino.head.ast.AstNode) astRoot45);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.putIntProp((int) (short) 1, 1);
        java.lang.String str52 = scriptNode48.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope53 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator54 = scope53.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode55.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode56);
        scope53.setTop(scriptNode56);
        scope53.setLineno((int) (short) -1);
        int int61 = positionComparator40.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode48, (com.google.javascript.rhino.head.ast.AstNode) scope53);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList65 = scriptNode63.getChildScopes();
        int int66 = scriptNode63.getBaseLineno();
        int int67 = scriptNode63.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode68.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode69);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList71 = scriptNode69.getFunctions();
        scriptNode69.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope74 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode63.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode69, (com.google.javascript.rhino.head.Node) scope74);
        scriptNode69.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str78 = scriptNode48.toStringTree(scriptNode69);
        scriptNode48.clearParentScope();
        java.lang.Object obj81 = scriptNode48.getProp(19);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node(8, node24, (com.google.javascript.rhino.head.Node) scope28, (com.google.javascript.rhino.head.Node) scriptNode48);
        scriptNode1.addChildToFront(node82);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(compilerEnvirons8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{\n}\n" + "'", str36, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(astNodeComparator41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str44, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(nodeSpliterator54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(scopeList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(functionNodeList71);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode24.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = astRoot27.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor29 = astRoot27.iterator();
        scriptNode24.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot27);
        java.lang.String str31 = scriptNode24.toString();
        scriptNode17.setCompilerData((java.lang.Object) scriptNode24);
        int int33 = scriptNode17.getLength();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(nodeItor29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "136" + "'", str31, "136");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setGenerateObserverCount(false);
        boolean boolean8 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setGeneratingSource(false);
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode1.setType((int) (byte) -1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor18 = scriptNode1.iterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        scriptNode1.target = scriptNode19;
        scriptNode19.setBounds((-1116244898), (int) (byte) 100);
        int int26 = scriptNode19.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode27 = scriptNode19.getEnclosingFunction();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(functionNode27);
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode17.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope20 = scriptNode17.getParentScope();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray23 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList24 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList24, symbolArray23);
        scriptNode22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList24);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int28 = astRoot27.getParamCount();
        int int29 = astRoot27.getRegexpCount();
        scriptNode22.addChildToBack((com.google.javascript.rhino.head.Node) astRoot27);
        java.lang.String str31 = astRoot27.getSourceName();
        astRoot27.setEncodedSourceEnd(5);
        int int34 = scriptNode17.compareTo((com.google.javascript.rhino.head.ast.AstNode) astRoot27);
        com.google.javascript.rhino.head.Node node35 = astRoot27.target;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node.NodeIterator nodeIterator36 = node35.new NodeIterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to com.google.javascript.rhino.head.Node$NodeIterator with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scope20);
        org.junit.Assert.assertNotNull(symbolArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 37739343 + "'", int34 == 37739343);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        astRoot6.checkParentLinks();
        boolean boolean14 = astRoot6.hasConsistentReturnUsage();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = astRoot6.getExistingIntProp((-163019660));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Node node4 = scriptNode1.setType((int) '#');
        java.lang.Object obj5 = scriptNode1.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol7 = scriptNode1.getSymbol("typeof");
        scriptNode1.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.Node node15 = scriptNode11.getLastSibling();
        int int16 = scriptNode11.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = scriptNode11.new NodeIterator();
        int int18 = scriptNode11.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope19 = scriptNode11.getParentScope();
        java.lang.String str20 = scriptNode11.debugPrint();
        scriptNode1.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode11);
        com.google.javascript.rhino.head.ast.Scope scope24 = new com.google.javascript.rhino.head.ast.Scope(136, 7);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode11, scope24);
        com.google.javascript.rhino.head.Node node26 = new com.google.javascript.rhino.head.Node((int) (byte) 1, (com.google.javascript.rhino.head.Node) scriptNode11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode28.getChildScopes();
        int int31 = scriptNode28.getBaseLineno();
        int int32 = scriptNode28.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList36 = scriptNode34.getFunctions();
        scriptNode34.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope39 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode28.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode34, (com.google.javascript.rhino.head.Node) scope39);
        int int41 = scriptNode34.getEndLineno();
        scriptNode34.setEncodedSource("hi!");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray45 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList46 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList46, symbolArray45);
        scriptNode44.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList46);
        com.google.javascript.rhino.head.ast.AstRoot astRoot49 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int50 = astRoot49.getParamCount();
        int int51 = astRoot49.getRegexpCount();
        scriptNode44.addChildToBack((com.google.javascript.rhino.head.Node) astRoot49);
        com.google.javascript.rhino.head.ast.Scope scope54 = scriptNode44.getDefiningScope("136");
        int int55 = scriptNode44.getEndLineno();
        scriptNode44.setSourceName("                                    {\n                                    }\n");
        node26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode34, (com.google.javascript.rhino.head.Node) scriptNode44);
        com.google.javascript.rhino.head.ast.AstRoot astRoot59 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int60 = astRoot59.getBaseLineno();
        int int61 = astRoot59.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList65 = scriptNode63.getChildScopes();
        int int66 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.Node node67 = scriptNode63.getLastSibling();
        scriptNode63.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList73 = scriptNode71.getFunctions();
        scriptNode71.setPosition((int) (byte) 10);
        java.lang.String str76 = scriptNode63.toStringTree(scriptNode71);
        int int77 = scriptNode63.getBaseLineno();
        astRoot59.target = scriptNode63;
        com.google.javascript.rhino.head.Token.CommentType commentType81 = null;
        com.google.javascript.rhino.head.ast.Comment comment83 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType81, "");
        boolean boolean84 = comment83.hasSideEffects();
        int int85 = comment83.getLineno();
        com.google.javascript.rhino.head.Node node87 = comment83.setType(18);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor88 = node87.iterator();
        int int89 = node87.getLineno();
        scriptNode63.addChildToFront(node87);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode91 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode91.putIntProp((int) (short) 1, 1);
        java.lang.String str95 = scriptNode91.getEncodedSource();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode34.replaceChildAfter(node87, (com.google.javascript.rhino.head.Node) scriptNode91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(symbol7);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(scope19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-1\t  SCRIPT 0 1\n" + "'", str20, "-1\t  SCRIPT 0 1\n");
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(functionNodeList36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(symbolArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(scope54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(scopeList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(functionNodeList73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(nodeItor88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        java.lang.String str4 = scriptNode0.getEncodedSource();
        com.google.javascript.rhino.head.Node node5 = scriptNode0.getFirstChild();
        int int6 = scriptNode0.getType();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(1397279810, 0);
        scriptNode0.addChildrenToFront(node9);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        scriptNode12.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap18 = scriptNode17.getSymbolTable();
        scriptNode12.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode17);
        scriptNode17.setLineno((int) (byte) 1);
        node9.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode17);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList29 = scriptNode27.getFunctions();
        scriptNode27.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node32 = iRFactory25.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.lang.String str33 = scriptNode27.getSourceName();
        int int34 = scriptNode27.getRegexpCount();
        java.lang.Object obj35 = scriptNode27.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        scriptNode37.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap43 = scriptNode42.getSymbolTable();
        scriptNode37.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList45 = scriptNode37.getStatements();
        com.google.javascript.rhino.head.ast.Scope scope46 = scriptNode37.getEnclosingScope();
        scriptNode27.target = scope46;
        scriptNode27.clearParentScope();
        scriptNode17.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode27);
        int int50 = scriptNode27.getLineno();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 136 + "'", int6 == 136);
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(functionNodeList29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(strMap43);
        org.junit.Assert.assertNotNull(astNodeList45);
        org.junit.Assert.assertNotNull(scope46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        compilerEnvirons0.setRecordingComments(false);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray20 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        compilerEnvirons14.setActivationNames((java.util.Set<java.lang.String>) strSet21);
        boolean boolean24 = compilerEnvirons14.isGenerateDebugInfo();
        compilerEnvirons14.setOptimizationLevel((int) (short) 1);
        compilerEnvirons14.setAllowSharpComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter29 = compilerEnvirons14.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory30 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter29);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.EvaluatorException evaluatorException36 = errorReporter29.runtimeError("                                                                hi!", "0\tSCRIPT 0 1\n", 148564836, "-1\tBLOCK -1 1\n", 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(errorReporter29);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        boolean boolean6 = comment5.hasSideEffects();
        int int7 = comment5.getLineno();
        com.google.javascript.rhino.head.Node node9 = comment5.setType(18);
        comment5.removeChildren();
        comment5.setLineno(19);
        boolean boolean13 = comment5.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope scope14 = comment5.getEnclosingScope();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean16 = compilerEnvirons15.isReservedKeywordAsIdentifier();
        boolean boolean17 = compilerEnvirons15.getWarnTrailingComma();
        compilerEnvirons15.setXmlAvailable(true);
        boolean boolean20 = compilerEnvirons15.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory21 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor24 = astRoot22.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor25 = null;
        astRoot22.visitComments(nodeVisitor25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = iRFactory21.transformTree(astRoot22);
        java.lang.String str28 = astRoot22.toSource();
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        com.google.javascript.rhino.head.Token.CommentType commentType35 = comment34.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        int int42 = comment40.getLineno();
        com.google.javascript.rhino.head.Node node44 = comment40.setType(18);
        comment40.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        comment50.setCommentType(commentType52);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator55 = scriptNode54.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        java.lang.String str62 = comment60.toSource(100);
        java.lang.String str63 = comment60.getValue();
        scriptNode54.setParent((com.google.javascript.rhino.head.ast.AstNode) comment60);
        com.google.javascript.rhino.head.ast.Comment[] commentArray65 = new com.google.javascript.rhino.head.ast.Comment[] { comment34, comment40, comment50, comment60 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet66 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet66, commentArray65);
        astRoot29.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet66);
        astRoot29.setEncodedSourceStart((-603115504));
        astRoot29.removeChildren();
        java.lang.String str72 = astRoot29.debugPrint();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(163023072, (com.google.javascript.rhino.head.Node) comment5, (com.google.javascript.rhino.head.Node) astRoot22, (com.google.javascript.rhino.head.Node) astRoot29, 0);
        java.lang.String str75 = comment5.getValue();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor76 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment5.visit(nodeVisitor76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(compilerEnvirons15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeItor24);
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(commentType35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator55);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "                                                                                                                                                                                                        " + "'", str62, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(commentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n" + "'", str72, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        boolean boolean2 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        scriptNode4.setBaseLineno(18);
        astRoot1.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode4);
        int int10 = scriptNode4.getLineno();
        int int11 = scriptNode4.getFunctionCount();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode4.visit(nodeVisitor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 18 + "'", int10 == 18);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int2 = astRoot1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(100, (int) (byte) 1);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100, (com.google.javascript.rhino.head.Node) astRoot1, node5);
        int int7 = astRoot1.getType();
        java.lang.Object obj8 = astRoot1.getCompilerData();
        com.google.javascript.rhino.head.Node node9 = astRoot1.getFirstChild();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList10 = astRoot1.getStatements();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 136 + "'", int7 == 136);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNotNull(astNodeList10);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        boolean boolean12 = compilerEnvirons0.isRecordingComments();
        boolean boolean13 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        int int16 = compilerEnvirons14.getLanguageVersion();
        compilerEnvirons14.setLanguageVersion((int) (byte) 100);
        boolean boolean19 = compilerEnvirons14.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        compilerEnvirons20.setStrictMode(true);
        compilerEnvirons20.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons26 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean27 = compilerEnvirons26.isReservedKeywordAsIdentifier();
        compilerEnvirons26.setStrictMode(true);
        compilerEnvirons26.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons32 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean33 = compilerEnvirons32.isReservedKeywordAsIdentifier();
        boolean boolean34 = compilerEnvirons32.getWarnTrailingComma();
        compilerEnvirons32.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet37 = compilerEnvirons32.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter38 = compilerEnvirons32.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory39 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons26, errorReporter38);
        com.google.javascript.rhino.head.IRFactory iRFactory40 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons20, errorReporter38);
        com.google.javascript.rhino.head.Parser parser41 = new com.google.javascript.rhino.head.Parser(compilerEnvirons14, errorReporter38);
        com.google.javascript.rhino.head.Parser parser42 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter38);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean44 = compilerEnvirons43.isReservedKeywordAsIdentifier();
        boolean boolean45 = compilerEnvirons43.getWarnTrailingComma();
        compilerEnvirons43.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet48 = compilerEnvirons43.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter49 = compilerEnvirons43.getErrorReporter();
        boolean boolean50 = compilerEnvirons43.isRecordingComments();
        compilerEnvirons43.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons53 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean54 = compilerEnvirons53.isReservedKeywordAsIdentifier();
        int int55 = compilerEnvirons53.getLanguageVersion();
        int int56 = compilerEnvirons53.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons57 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean58 = compilerEnvirons57.isReservedKeywordAsIdentifier();
        compilerEnvirons57.setStrictMode(true);
        compilerEnvirons57.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons63 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean64 = compilerEnvirons63.isReservedKeywordAsIdentifier();
        boolean boolean65 = compilerEnvirons63.getWarnTrailingComma();
        compilerEnvirons63.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet68 = compilerEnvirons63.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter69 = compilerEnvirons63.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory70 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons57, errorReporter69);
        com.google.javascript.rhino.head.IRFactory iRFactory71 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons53, errorReporter69);
        com.google.javascript.rhino.head.IRFactory iRFactory72 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons43, errorReporter69);
        java.util.Set<java.lang.String> strSet73 = compilerEnvirons43.getActivationNames();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons74 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray80 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet81 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet81, strArray80);
        compilerEnvirons74.setActivationNames((java.util.Set<java.lang.String>) strSet81);
        boolean boolean84 = compilerEnvirons74.isGenerateDebugInfo();
        compilerEnvirons74.setOptimizationLevel((int) (short) 1);
        compilerEnvirons74.setAllowSharpComments(true);
        boolean boolean89 = compilerEnvirons74.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter90 = compilerEnvirons74.getErrorReporter();
        int int91 = compilerEnvirons74.getLanguageVersion();
        java.util.Set<java.lang.String> strSet92 = compilerEnvirons74.getActivationNames();
        compilerEnvirons43.setActivationNames(strSet92);
        compilerEnvirons0.setActivationNames(strSet92);
        boolean boolean95 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean96 = compilerEnvirons0.isGeneratingSource();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 170 + "'", int16 == 170);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(errorReporter38);
        org.junit.Assert.assertNotNull(compilerEnvirons43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(errorReporter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 170 + "'", int55 == 170);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 170 + "'", int56 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertNotNull(errorReporter69);
        org.junit.Assert.assertNull(strSet73);
        org.junit.Assert.assertNotNull(compilerEnvirons74);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(errorReporter90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 170 + "'", int91 == 170);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        java.lang.String str5 = scriptNode1.makeIndent((int) (byte) -1);
        int int6 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator7 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator8 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator9 = positionComparator7.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator8);
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int11 = astRoot10.getBaseLineno();
        java.lang.String str12 = astRoot10.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot13 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator14 = astRoot13.new NodeIterator();
        int int15 = positionComparator8.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot10, (com.google.javascript.rhino.head.ast.AstNode) astRoot13);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.putIntProp((int) (short) 1, 1);
        java.lang.String str20 = scriptNode16.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope21 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator22 = scope21.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        scope21.setTop(scriptNode24);
        scope21.setLineno((int) (short) -1);
        int int29 = positionComparator8.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode16, (com.google.javascript.rhino.head.ast.AstNode) scope21);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode31);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode31.getChildScopes();
        int int34 = scriptNode31.getBaseLineno();
        int int35 = scriptNode31.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList39 = scriptNode37.getFunctions();
        scriptNode37.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope42 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode31.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode37, (com.google.javascript.rhino.head.Node) scope42);
        scriptNode37.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str46 = scriptNode16.toStringTree(scriptNode37);
        int int49 = scriptNode16.getIntProp((-1721493936), (int) (short) 1);
        scriptNode16.putIntProp((-325419474), 2);
        java.lang.String str53 = scriptNode1.toStringTree(scriptNode16);
        scriptNode1.putIntProp(22, (-213029975));
        scriptNode1.setLineno((-9));
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(astNodeComparator9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str12, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(nodeSpliterator22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(functionNodeList39);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        astRoot0.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.lang.String str20 = comment17.getValue();
        scriptNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) comment17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        com.google.javascript.rhino.head.Node node52 = astRoot22.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot22, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) comment17, (com.google.javascript.rhino.head.Node) scriptNode54);
        astRoot0.addComment(comment17);
        com.google.javascript.rhino.head.Node node59 = astRoot0.getLastSibling();
        astRoot0.setPosition(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode(24);
        astRoot0.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode63);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.visitComments(nodeVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(952007591, 604841955, commentType2, "2\tSCRIPT 2 1\n");
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str15 = scriptNode1.getSourceName();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType18, "hi!");
        scriptNode1.setJsDocNode(comment20);
        com.google.javascript.rhino.head.ast.Scope scope23 = scriptNode1.getDefiningScope("-1\tRETURN -1 1\n");
        int int24 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        scriptNode27.setBaseLineno(18);
        scriptNode27.setEndLineno(26);
        com.google.javascript.rhino.head.Node node34 = scriptNode27.getLastSibling();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(1275261773, (com.google.javascript.rhino.head.Node) scriptNode27, 4);
        com.google.javascript.rhino.head.ast.AstNode astNode37 = scriptNode27.getParent();
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str40 = astRoot38.toSource((int) '4');
        astRoot38.setPosition(100);
        com.google.javascript.rhino.head.Node node44 = com.google.javascript.rhino.head.Node.newString("136");
        astRoot38.addChildToBack(node44);
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.addChildBefore((com.google.javascript.rhino.head.Node) astNode37, node44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(scope23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(astNode37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = node5.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope scope5 = scriptNode1.getEnclosingScope();
        int int6 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        com.google.javascript.rhino.head.Token.CommentType commentType13 = comment12.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        int int20 = comment18.getLineno();
        com.google.javascript.rhino.head.Node node22 = comment18.setType(18);
        comment18.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        comment28.setCommentType(commentType30);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator33 = scriptNode32.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        java.lang.String str40 = comment38.toSource(100);
        java.lang.String str41 = comment38.getValue();
        scriptNode32.setParent((com.google.javascript.rhino.head.ast.AstNode) comment38);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment12, comment18, comment28, comment38 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot7.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        astRoot7.setEncodedSourceStart((-603115504));
        int int49 = astRoot7.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList50 = astRoot7.getSymbols();
        scriptNode1.setSymbols(symbolList50);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray52 = scriptNode1.getParamAndVarConst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(commentType13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator33);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "                                                                                                                                                                                                        " + "'", str40, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(symbolList50);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType28, "");
        boolean boolean31 = comment30.hasSideEffects();
        int int32 = comment30.getLineno();
        com.google.javascript.rhino.head.Node node34 = comment30.setType(18);
        boolean boolean35 = comment30.hasSideEffects();
        astRoot1.addComment(comment30);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(14, (com.google.javascript.rhino.head.Node) comment30, (-1));
        com.google.javascript.rhino.head.ast.AstRoot astRoot39 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet40 = astRoot39.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol42 = astRoot39.getSymbol("                                                                                                                                                                                                        ");
        node38.addChildToFront((com.google.javascript.rhino.head.Node) astRoot39);
        com.google.javascript.rhino.head.ast.Scope scope46 = new com.google.javascript.rhino.head.ast.Scope(136, 538062289);
        astRoot39.addChildToFront((com.google.javascript.rhino.head.Node) scope46);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap48 = astRoot39.getSymbolTable();
        int int49 = astRoot39.getRegexpCount();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = astRoot39.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(commentSet40);
        org.junit.Assert.assertNull(symbol42);
        org.junit.Assert.assertNull(strMap48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = parser10.parse("<=", "10\tBLOCK 10 9\n", 327994914);
        com.google.javascript.rhino.head.ast.Scope scope16 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator17 = scope16.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        scope16.setTop(scriptNode19);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor22 = scope16.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        int int29 = comment27.getLineno();
        com.google.javascript.rhino.head.Node node31 = comment27.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        int int38 = comment36.getLineno();
        com.google.javascript.rhino.head.Node node40 = comment36.setType(18);
        comment36.removeChildren();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope16, (com.google.javascript.rhino.head.Node) comment27, (com.google.javascript.rhino.head.Node) comment36, 15);
        astRoot14.setJsDocNode(comment36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        java.lang.String str50 = scriptNode46.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode52.setEncodedSourceEnd(11);
        int int56 = scriptNode46.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        comment36.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode46);
        java.lang.String str58 = comment36.getValue();
        com.google.javascript.rhino.head.Node node59 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment36.addChildToFront(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(astRoot14);
        org.junit.Assert.assertNotNull(nodeSpliterator17);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-382310699) + "'", int56 == (-382310699));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = scriptNode0.new NodeIterator();
        int int3 = scriptNode0.getBaseLineno();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList4 = scriptNode0.getFunctions();
        scriptNode0.setSourceName("18");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope7 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) scriptNode0);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.ScriptNode");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList4);
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter4 = compilerEnvirons0.getErrorReporter();
        boolean boolean5 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setReservedKeywordAsIdentifier(true);
        compilerEnvirons0.setAllowSharpComments(false);
        boolean boolean10 = compilerEnvirons0.isGenerateObserverCount();
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setLanguageVersion((-964909396));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad language version: -964909396");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(errorReporter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.reportWarningAsError();
        java.util.Set<java.lang.String> strSet4 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.IRFactory iRFactory5 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet7 = astRoot6.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol9 = astRoot6.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot((int) '4');
        astRoot6.setCompilerData((java.lang.Object) astRoot11);
        java.lang.String str13 = astRoot11.debugPrint();
        int int14 = astRoot11.getFunctionCount();
        astRoot11.setInStrictMode(true);
        java.lang.String str18 = astRoot11.toSource(538062289);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = iRFactory5.transformTree(astRoot11);
        com.google.javascript.rhino.head.ast.AstRoot astRoot23 = iRFactory5.parse("-1\tSCRIPT -1 1\n", "                                                                hi!", 189974018);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot27 = iRFactory5.parse("                                      ", "-1\tSCRIPT -1 1\n-1\tBITXOR -1 1\n", (-777447127));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: parser reused");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(commentSet7);
        org.junit.Assert.assertNull(symbol9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "52\tSCRIPT 52 1\n" + "'", str13, "52\tSCRIPT 52 1\n");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(scriptNode19);
        org.junit.Assert.assertNotNull(astRoot23);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope6 = astRoot0.getEnclosingScope();
        astRoot0.setEncodedSourceStart(23);
        astRoot0.setLineno((-1116244898));
        com.google.javascript.rhino.head.ast.Scope scope11 = astRoot0.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot13 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator14 = astRoot13.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        boolean boolean20 = comment19.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        boolean boolean26 = comment25.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray34 = new com.google.javascript.rhino.head.ast.Comment[] { comment19, comment25, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet35 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet35, commentArray34);
        astRoot13.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet35);
        boolean boolean38 = astRoot13.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray39 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList40 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList40, symbolArray39);
        astRoot13.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList40);
        int int43 = astRoot13.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        java.lang.String str64 = comment62.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray65 = new com.google.javascript.rhino.head.ast.Comment[] { comment50, comment56, comment62 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet66 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet66, commentArray65);
        astRoot44.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet66);
        boolean boolean69 = astRoot44.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray70 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList71 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList71, symbolArray70);
        astRoot44.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList71);
        com.google.javascript.rhino.head.Node node74 = astRoot44.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot44, (com.google.javascript.rhino.head.ast.Scope) scriptNode76);
        com.google.javascript.rhino.head.ast.AstRoot astRoot79 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator80 = astRoot79.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor81 = astRoot79.iterator();
        astRoot79.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node85 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) astRoot13, (com.google.javascript.rhino.head.Node) astRoot44, (com.google.javascript.rhino.head.Node) astRoot79, (int) (byte) 0);
        astRoot44.setInStrictMode(false);
        astRoot44.setSourceName("                                                                                                        {\n                                                                                                        }\n");
        astRoot44.setEndLineno(423587025);
        // The following exception was thrown during execution in test generation
        try {
            scope11.removeChild((com.google.javascript.rhino.head.Node) astRoot44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(scope6);
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(symbolArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "                                                                                                                                                                                                        " + "'", str64, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(symbolArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(nodeItor81);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode32.getFunctions();
        scriptNode32.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scope37);
        scriptNode32.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node41 = iRFactory24.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode32.setTop(scriptNode52);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode32, 10);
        scriptNode8.setEncodedSourceStart(17);
        // The following exception was thrown during execution in test generation
        try {
            int int67 = scriptNode8.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setGenerateObserverCount(false);
        boolean boolean13 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean14 = compilerEnvirons0.getAllowSharpComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment31 = astRoot0.getJsDocNode();
        astRoot0.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = astRoot34.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        java.lang.String str54 = comment52.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray55 = new com.google.javascript.rhino.head.ast.Comment[] { comment40, comment46, comment52 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet56 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet56, commentArray55);
        astRoot34.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet56);
        boolean boolean59 = astRoot34.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray60 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList61 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList61, symbolArray60);
        astRoot34.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList61);
        int int64 = astRoot34.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode65.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode66);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList68 = scriptNode66.getChildScopes();
        int int69 = scriptNode66.getBaseLineno();
        com.google.javascript.rhino.head.Node node70 = scriptNode66.getLastSibling();
        scriptNode66.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode73.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode74);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList76 = scriptNode74.getFunctions();
        scriptNode74.setPosition((int) (byte) 10);
        java.lang.String str79 = scriptNode66.toStringTree(scriptNode74);
        int int80 = scriptNode66.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot34, (com.google.javascript.rhino.head.ast.Scope) scriptNode66);
        astRoot0.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        astRoot0.setEndLineno(15);
        astRoot0.setEncodedSource("      ");
        astRoot0.checkParentLinks();
        astRoot0.setLineno(270991972);
        int int90 = astRoot0.getAbsolutePosition();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(comment31);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "                                                                                                                                                                                                        " + "'", str54, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(symbolArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(scopeList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(functionNodeList76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator4 = positionComparator2.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator3);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getBaseLineno();
        java.lang.String str7 = astRoot5.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = astRoot8.new NodeIterator();
        int int10 = positionComparator3.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot5, (com.google.javascript.rhino.head.ast.AstNode) astRoot8);
        java.lang.String str12 = astRoot5.makeIndent(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        int int17 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = scriptNode14.getLastSibling();
        java.lang.String str20 = scriptNode14.toSource((int) (short) -1);
        astRoot5.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode14);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot5);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = astRoot5.getComments();
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator25 = astRoot24.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType28, "");
        boolean boolean31 = comment30.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        java.lang.String str44 = comment42.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray45 = new com.google.javascript.rhino.head.ast.Comment[] { comment30, comment36, comment42 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet46 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet46, commentArray45);
        astRoot24.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet46);
        boolean boolean49 = astRoot24.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj53 = scriptNode52.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode54.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode55);
        int int57 = scriptNode54.getEndLineno();
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scriptNode54);
        com.google.javascript.rhino.head.ast.AstRoot astRoot59 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator60 = astRoot59.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType63 = null;
        com.google.javascript.rhino.head.ast.Comment comment65 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType63, "");
        boolean boolean66 = comment65.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType69 = null;
        com.google.javascript.rhino.head.ast.Comment comment71 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType69, "");
        boolean boolean72 = comment71.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType75 = null;
        com.google.javascript.rhino.head.ast.Comment comment77 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType75, "");
        java.lang.String str79 = comment77.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray80 = new com.google.javascript.rhino.head.ast.Comment[] { comment65, comment71, comment77 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet81 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet81, commentArray80);
        astRoot59.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet81);
        java.lang.String str84 = astRoot59.getEncodedSource();
        com.google.javascript.rhino.head.Node node85 = astRoot59.target;
        scriptNode52.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot59);
        java.lang.String str87 = astRoot59.getNextTempName();
        java.lang.String str88 = astRoot59.getSourceName();
        // The following exception was thrown during execution in test generation
        try {
            astRoot5.addChildBefore((com.google.javascript.rhino.head.Node) astRoot24, (com.google.javascript.rhino.head.Node) astRoot59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str7, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                " + "'", str12, "                                ");
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{\n}\n" + "'", str20, "{\n}\n");
        org.junit.Assert.assertNull(commentSet23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "                                                                                                                                                                                                        " + "'", str44, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "                                                                                                                                                                                                        " + "'", str79, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "$0" + "'", str87, "$0");
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType3, "hi!");
        java.lang.String str7 = comment5.toSource(0);
        java.lang.String str8 = comment5.shortName();
        boolean boolean9 = comment5.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node((-527128964), (com.google.javascript.rhino.head.Node) comment5, (int) (short) 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Comment" + "'", str8, "Comment");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        com.google.javascript.rhino.head.Node node30 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        scriptNode36.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList46 = scriptNode44.getFunctions();
        scriptNode44.setPosition((int) (byte) 10);
        java.lang.String str49 = scriptNode36.toStringTree(scriptNode44);
        int int50 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node52 = scriptNode36.setType((int) (byte) -1);
        java.lang.String str53 = astRoot0.toStringTree(scriptNode36);
        java.lang.String str54 = astRoot0.debugPrint();
        com.google.javascript.rhino.head.ast.Symbol symbol56 = astRoot0.getSymbol("129");
        com.google.javascript.rhino.head.Node node57 = astRoot0.target;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope58 = node57.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(functionNodeList46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str54, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertNull(symbol56);
        org.junit.Assert.assertNull(node57);
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment6.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        int int12 = scriptNode9.getBaseLineno();
        int int13 = scriptNode9.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList17 = scriptNode15.getFunctions();
        scriptNode15.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode9.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode15, (com.google.javascript.rhino.head.Node) scope20);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList25 = scriptNode23.getChildScopes();
        int int26 = scriptNode23.getBaseLineno();
        com.google.javascript.rhino.head.Node node27 = scriptNode23.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = scriptNode23.getAstRoot();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode9, (com.google.javascript.rhino.head.ast.Scope) scriptNode23);
        comment6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(15, (com.google.javascript.rhino.head.Node) scriptNode9);
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType35, "hi!");
        java.lang.String str39 = comment37.toSource(0);
        java.lang.String str40 = comment37.shortName();
        boolean boolean41 = comment37.hasConsistentReturnUsage();
        int int42 = comment37.getLineno();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((int) (byte) 1, (com.google.javascript.rhino.head.Node) comment37, (-147910580));
        com.google.javascript.rhino.head.ast.Scope scope46 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator47 = scope46.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        scope46.setTop(scriptNode49);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor52 = scope46.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType55 = null;
        com.google.javascript.rhino.head.ast.Comment comment57 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType55, "");
        boolean boolean58 = comment57.hasSideEffects();
        int int59 = comment57.getLineno();
        com.google.javascript.rhino.head.Node node61 = comment57.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        boolean boolean67 = comment66.hasSideEffects();
        int int68 = comment66.getLineno();
        com.google.javascript.rhino.head.Node node70 = comment66.setType(18);
        comment66.removeChildren();
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope46, (com.google.javascript.rhino.head.Node) comment57, (com.google.javascript.rhino.head.Node) comment66, 15);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode74 = comment66.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator76 = scriptNode75.spliterator();
        com.google.javascript.rhino.head.Node node78 = scriptNode75.setType((int) '#');
        java.lang.String str79 = node78.getJsDoc();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode81 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode80.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode81);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList83 = scriptNode81.getChildScopes();
        int int84 = scriptNode81.getBaseLineno();
        com.google.javascript.rhino.head.Node node85 = scriptNode81.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode86 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode86.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode87);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList89 = scriptNode87.getChildScopes();
        java.lang.String str91 = scriptNode87.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode93 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode81.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode87, (com.google.javascript.rhino.head.Node) scriptNode93);
        scriptNode93.setEncodedSourceEnd((int) (byte) 1);
        comment66.addChildAfter(node78, (com.google.javascript.rhino.head.Node) scriptNode93);
        int int98 = comment66.getPosition();
        com.google.javascript.rhino.head.Node node99 = new com.google.javascript.rhino.head.Node(1891424362, node31, node44, (com.google.javascript.rhino.head.Node) comment66);
        org.junit.Assert.assertNull(commentType7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(functionNodeList17);
        org.junit.Assert.assertNull(scopeList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(astRoot28);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Comment" + "'", str40, "Comment");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator47);
        org.junit.Assert.assertNotNull(nodeItor52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(functionNode74);
        org.junit.Assert.assertNotNull(nodeSpliterator76);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(scopeList83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(scopeList89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        java.lang.String str10 = astRoot3.makeIndent(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        java.lang.String str18 = scriptNode12.toSource((int) (short) -1);
        astRoot3.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope20 = scriptNode12.getEnclosingScope();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory23 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList27 = scriptNode25.getChildScopes();
        int int28 = scriptNode25.getBaseLineno();
        int int29 = scriptNode25.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode31);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList33 = scriptNode31.getFunctions();
        scriptNode31.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope36 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode25.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode31, (com.google.javascript.rhino.head.Node) scope36);
        scriptNode31.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node40 = iRFactory23.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode31);
        int int41 = scriptNode31.getRegexpCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot42 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator43 = astRoot42.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        boolean boolean49 = comment48.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        boolean boolean55 = comment54.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        java.lang.String str62 = comment60.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray63 = new com.google.javascript.rhino.head.ast.Comment[] { comment48, comment54, comment60 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet64 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet64, commentArray63);
        astRoot42.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet64);
        boolean boolean67 = astRoot42.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode68 = astRoot42.getParent();
        astRoot42.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.ast.AstNode astNode71 = astRoot42.getParent();
        java.lang.String str72 = scriptNode31.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot42);
        com.google.javascript.rhino.head.ast.Scope scope73 = null;
        scriptNode31.setParentScope(scope73);
        scope20.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode31);
        int int76 = scriptNode31.getLineno();
        java.lang.String str77 = scriptNode31.debugPrint();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "                                " + "'", str10, "                                ");
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n}\n" + "'", str18, "{\n}\n");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertNull(scopeList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(functionNodeList33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "                                                                                                                                                                                                        " + "'", str62, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(astNode68);
        org.junit.Assert.assertNull(astNode71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "9\t  SCRIPT 10 1\n" + "'", str77, "9\t  SCRIPT 10 1\n");
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean12 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean13 = compilerEnvirons0.isRecordingComments();
        boolean boolean14 = compilerEnvirons0.isRecordingComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.lang.String str10 = scriptNode4.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode18.getChildScopes();
        java.lang.String str22 = scriptNode18.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode12.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode18, (com.google.javascript.rhino.head.Node) scriptNode24);
        java.lang.Object obj27 = scriptNode18.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str30 = scriptNode28.toSource((int) '4');
        java.lang.String str31 = scriptNode18.toStringTree(scriptNode28);
        scriptNode4.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        int int33 = scriptNode18.getLineno();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator34 = scriptNode18.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = scriptNode18.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str30, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setXmlAvailable(false);
        compilerEnvirons0.setXmlAvailable(false);
        com.google.javascript.rhino.head.Parser parser22 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean23 = compilerEnvirons0.recoverFromErrors();
        compilerEnvirons0.setGenerateDebugInfo(false);
        compilerEnvirons0.setWarnTrailingComma(true);
        com.google.javascript.rhino.head.Context context28 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.initFromContext(context28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(717018487, (-992112407));
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int2 = astRoot1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(100, (int) (byte) 1);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((int) (short) 100, (com.google.javascript.rhino.head.Node) astRoot1, node5);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = node6.iterator();
        boolean boolean8 = nodeItor7.hasNext();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isIdeMode();
        boolean boolean6 = compilerEnvirons0.reportWarningAsError();
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean9 = compilerEnvirons0.reportWarningAsError();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope6 = astRoot0.getEnclosingScope();
        astRoot0.setEncodedSourceStart(23);
        java.lang.String str10 = astRoot0.toSource(95442629);
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType13, "hi!");
        java.lang.String str17 = comment15.toSource(5);
        astRoot0.setJsDocNode(comment15);
        java.lang.String str19 = comment15.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType20 = comment15.getCommentType();
        java.lang.String str21 = comment15.getValue();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(scope6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "          hi!" + "'", str17, "          hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNull(commentType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        java.lang.String str6 = comment4.toSource(0);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment4.visit(nodeVisitor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot2.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node((-19), (com.google.javascript.rhino.head.Node) astRoot2, 1617059566);
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean8 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet13 = compilerEnvirons0.getActivationNames();
        boolean boolean14 = compilerEnvirons0.isGenerateObserverCount();
        compilerEnvirons0.setGenerateObserverCount(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = parser10.parse("-1\tSCRIPT -1 1\n", "35", 10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope15 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) astRoot14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.ScriptNode");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(astRoot14);
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        scriptNode2.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        java.lang.String str15 = scriptNode2.toStringTree(scriptNode10);
        int int16 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = scriptNode2.setType((int) (byte) -1);
        scriptNode2.setSourceName("typeof");
        scriptNode2.removeProp(0);
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node((int) (short) 100, (com.google.javascript.rhino.head.Node) scriptNode2, 22);
        int int25 = scriptNode2.getFunctionCount();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setStrictMode(true);
        boolean boolean13 = compilerEnvirons0.isXmlAvailable();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 189974018);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = node1.spliterator();
        com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(19);
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = scope7.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        scope7.setTop(scriptNode10);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor13 = scope7.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        int int20 = comment18.getLineno();
        com.google.javascript.rhino.head.Node node22 = comment18.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        int int29 = comment27.getLineno();
        com.google.javascript.rhino.head.Node node31 = comment27.setType(18);
        comment27.removeChildren();
        com.google.javascript.rhino.head.Node node34 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope7, (com.google.javascript.rhino.head.Node) comment18, (com.google.javascript.rhino.head.Node) comment27, 15);
        boolean boolean35 = scope7.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray37 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList38 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList38, symbolArray37);
        scriptNode36.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList38);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj44 = scriptNode43.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        int int48 = scriptNode45.getEndLineno();
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode43, (com.google.javascript.rhino.head.Node) scriptNode45);
        scriptNode36.setCompilerData((java.lang.Object) scriptNode43);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(12, node5, (com.google.javascript.rhino.head.Node) scope7, (com.google.javascript.rhino.head.Node) scriptNode43, 1617059566);
        node1.addChildrenToFront(node52);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(symbolArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setPosition((int) (byte) 10);
        int int6 = scriptNode1.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        boolean boolean20 = comment19.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        java.lang.String str27 = comment25.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray28 = new com.google.javascript.rhino.head.ast.Comment[] { comment13, comment19, comment25 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet29 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet29, commentArray28);
        astRoot7.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet29);
        boolean boolean32 = astRoot7.isInStrictMode();
        astRoot7.putIntProp(170, (int) (short) 0);
        scriptNode1.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        com.google.javascript.rhino.head.ast.Scope scope37 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        astRoot7.removeChildren();
        com.google.javascript.rhino.head.ast.AstRoot astRoot39 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet40 = astRoot39.getComments();
        java.lang.String str41 = astRoot39.getSourceName();
        boolean boolean42 = astRoot39.hasChildren();
        int int43 = astRoot39.getLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor44 = null;
        astRoot39.visitComments(nodeVisitor44);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons46 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean47 = compilerEnvirons46.isReservedKeywordAsIdentifier();
        boolean boolean48 = compilerEnvirons46.isIdeMode();
        boolean boolean49 = compilerEnvirons46.getWarnTrailingComma();
        compilerEnvirons46.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons52 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean53 = compilerEnvirons52.isReservedKeywordAsIdentifier();
        int int54 = compilerEnvirons52.getLanguageVersion();
        int int55 = compilerEnvirons52.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons56 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean57 = compilerEnvirons56.isReservedKeywordAsIdentifier();
        compilerEnvirons56.setStrictMode(true);
        compilerEnvirons56.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons62 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean63 = compilerEnvirons62.isReservedKeywordAsIdentifier();
        boolean boolean64 = compilerEnvirons62.getWarnTrailingComma();
        compilerEnvirons62.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet67 = compilerEnvirons62.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter68 = compilerEnvirons62.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory69 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons56, errorReporter68);
        com.google.javascript.rhino.head.IRFactory iRFactory70 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons52, errorReporter68);
        com.google.javascript.rhino.head.IRFactory iRFactory71 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons46, errorReporter68);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons72 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter73 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory74 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons72, errorReporter73);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList78 = scriptNode76.getFunctions();
        scriptNode76.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node81 = iRFactory74.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        java.lang.String str82 = scriptNode76.getSourceName();
        int int83 = scriptNode76.getRegexpCount();
        java.lang.Object obj84 = scriptNode76.getCompilerData();
        java.lang.String str85 = scriptNode76.getSourceName();
        com.google.javascript.rhino.head.Node node86 = iRFactory71.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        astRoot39.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode76);
        int int88 = scriptNode76.getEncodedSourceStart();
        astRoot7.setTop(scriptNode76);
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "                                                                                                                                                                                                        " + "'", str27, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(scope37);
        org.junit.Assert.assertNull(commentSet40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(compilerEnvirons46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 170 + "'", int54 == 170);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 170 + "'", int55 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertNotNull(errorReporter68);
        org.junit.Assert.assertNotNull(functionNodeList78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        boolean boolean11 = compilerEnvirons0.reportWarningAsError();
        compilerEnvirons0.setRecordingComments(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        int int4 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet6 = astRoot5.getComments();
        int int7 = astRoot5.getEndLineno();
        com.google.javascript.rhino.head.Node node9 = astRoot5.setType((int) (short) 10);
        astRoot5.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator17 = scriptNode16.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType20, "");
        java.lang.String str24 = comment22.toSource(100);
        java.lang.String str25 = comment22.getValue();
        scriptNode16.setParent((com.google.javascript.rhino.head.ast.AstNode) comment22);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = astRoot27.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        boolean boolean34 = comment33.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        boolean boolean40 = comment39.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType43 = null;
        com.google.javascript.rhino.head.ast.Comment comment45 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType43, "");
        java.lang.String str47 = comment45.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray48 = new com.google.javascript.rhino.head.ast.Comment[] { comment33, comment39, comment45 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet49 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet49, commentArray48);
        astRoot27.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet49);
        boolean boolean52 = astRoot27.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray53 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList54 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList54, symbolArray53);
        astRoot27.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList54);
        com.google.javascript.rhino.head.Node node57 = astRoot27.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot27, (com.google.javascript.rhino.head.ast.Scope) scriptNode59);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode15, (com.google.javascript.rhino.head.Node) comment22, (com.google.javascript.rhino.head.Node) scriptNode59);
        astRoot5.addComment(comment22);
        com.google.javascript.rhino.head.Node node64 = astRoot5.getLastSibling();
        scriptNode1.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot5);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode(538062289);
        int int68 = astRoot5.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode67);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode70.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope73 = scriptNode70.getEnclosingScope();
        java.lang.String[] strArray74 = scriptNode70.getParamAndVarNames();
        astRoot5.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode70);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(commentSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeSpliterator17);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "                                                                                                                                                                                                        " + "'", str24, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "                                                                                                                                                                                                        " + "'", str47, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(symbolArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(scope73);
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = scriptNode0.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = astRoot2.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType6, "");
        boolean boolean9 = comment8.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray23 = new com.google.javascript.rhino.head.ast.Comment[] { comment8, comment14, comment20 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet24 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet24, commentArray23);
        astRoot2.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet24);
        boolean boolean27 = astRoot2.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray28 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList29 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList29, symbolArray28);
        astRoot2.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList29);
        int int32 = astRoot2.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment33 = astRoot2.getJsDocNode();
        astRoot2.setInStrictMode(false);
        scriptNode0.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot2);
        int int37 = astRoot2.getEndLineno();
        java.lang.String str38 = astRoot2.toString();
        astRoot2.setInStrictMode(false);
        astRoot2.flattenSymbolTable(true);
        org.junit.Assert.assertNull(functionNode1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(symbolArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(comment33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "136" + "'", str38, "136");
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(1397279810, (-1121952777), commentType2, "");
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator33 = scriptNode32.spliterator();
        com.google.javascript.rhino.head.Node node35 = scriptNode32.setType((int) '#');
        java.lang.Object obj36 = scriptNode32.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator37 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator38 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator39 = positionComparator37.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator38);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode41.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor46 = astRoot44.iterator();
        scriptNode41.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode49.getChildScopes();
        int int52 = positionComparator38.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot44, (com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scriptNode49);
        scriptNode49.putIntProp((int) (byte) -1, 11);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = scriptNode49.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(astNodeComparator39);
        org.junit.Assert.assertNotNull(nodeItor46);
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean4 = compilerEnvirons0.isRecordingComments();
        boolean boolean5 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean6 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.head.Parser parser8 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter7);
        int int9 = compilerEnvirons0.getOptimizationLevel();
        compilerEnvirons0.setStrictMode(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = parser10.parse("-1\tSCRIPT -1 1\n", "35", 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode18.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = astRoot21.getComments();
        int int23 = astRoot21.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor24 = null;
        astRoot21.visitComments(nodeVisitor24);
        com.google.javascript.rhino.head.Node node26 = astRoot21.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet27 = astRoot21.getComments();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode18, (com.google.javascript.rhino.head.Node) astRoot21);
        int int29 = scriptNode18.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons30 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory32 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons30, errorReporter31);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList36 = scriptNode34.getFunctions();
        scriptNode34.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node39 = iRFactory32.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        java.lang.String str40 = scriptNode34.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList44 = scriptNode42.getChildScopes();
        int int45 = scriptNode42.getBaseLineno();
        com.google.javascript.rhino.head.Node node46 = scriptNode42.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode48.getChildScopes();
        java.lang.String str52 = scriptNode48.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode42.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode48, (com.google.javascript.rhino.head.Node) scriptNode54);
        java.lang.Object obj57 = scriptNode48.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str60 = scriptNode58.toSource((int) '4');
        java.lang.String str61 = scriptNode48.toStringTree(scriptNode58);
        scriptNode34.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode18, (com.google.javascript.rhino.head.Node) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList64 = scriptNode18.getChildScopes();
        astRoot14.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode18);
        astRoot14.checkParentLinks();
        int int67 = astRoot14.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.Symbol symbol68 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot14.putSymbol(symbol68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(astRoot14);
        org.junit.Assert.assertNull(commentSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(commentSet27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(functionNodeList36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNull(scopeList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str60, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(scopeList64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        int int23 = comment21.getLineno();
        java.lang.String str24 = comment21.debugPrint();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        comment21.setCommentType(commentType25);
        scriptNode7.setJsDocNode(comment21);
        boolean boolean28 = scriptNode7.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope scope29 = scriptNode7.getParentScope();
        // The following exception was thrown during execution in test generation
        try {
            double double30 = scriptNode7.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1\tCOMMENT 1 0\n" + "'", str24, "1\tCOMMENT 1 0\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(scope29);
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope(100);
        com.google.javascript.rhino.head.Node node2 = null;
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        java.lang.String str19 = scriptNode10.getJsDoc();
        int int20 = scriptNode10.depth();
        java.lang.String str22 = scriptNode10.toSource(3);
        scriptNode10.setEncodedSourceBounds((int) (short) -1, 22);
        // The following exception was thrown during execution in test generation
        try {
            scope1.addChildAfter(node2, (com.google.javascript.rhino.head.Node) scriptNode10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "      {\n      }\n" + "'", str22, "      {\n      }\n");
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        scriptNode1.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope8 = scriptNode1.getEnclosingScope();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = scriptNode1.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray12 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList13 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList13, symbolArray12);
        scriptNode11.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList13);
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int17 = astRoot16.getParamCount();
        int int18 = astRoot16.getRegexpCount();
        scriptNode11.addChildToBack((com.google.javascript.rhino.head.Node) astRoot16);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator20 = astRoot16.spliterator();
        scriptNode1.putProp((-777163487), (java.lang.Object) astRoot16);
        java.lang.String str23 = astRoot16.toSource(601078793);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot16.visitAll(nodeVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNull(functionNode9);
        org.junit.Assert.assertNotNull(symbolArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getParamCount();
        java.lang.String str2 = astRoot0.getNextTempName();
        int int3 = astRoot0.getEncodedSourceStart();
        java.lang.String str4 = astRoot0.shortName();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet5 = astRoot0.getComments();
        astRoot0.setEncodedSourceEnd((int) (byte) 100);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator8 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator9 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator10 = positionComparator8.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator9);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode12.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = astRoot15.iterator();
        scriptNode12.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        int int23 = positionComparator9.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot15, (com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList24 = scriptNode20.getSymbols();
        scriptNode20.setSourceName("                                          ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str29 = scriptNode27.toSource((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode31);
        int int33 = scriptNode30.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode27, (com.google.javascript.rhino.head.ast.Scope) scriptNode30);
        scriptNode20.setTop(scriptNode27);
        astRoot0.setTop(scriptNode20);
        int int37 = scriptNode20.getParamCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "$0" + "'", str2, "$0");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AstRoot" + "'", str4, "AstRoot");
        org.junit.Assert.assertNull(commentSet5);
        org.junit.Assert.assertNotNull(astNodeComparator10);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(symbolList24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str29, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        java.lang.String str52 = comment50.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray53 = new com.google.javascript.rhino.head.ast.Comment[] { comment38, comment44, comment50 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet54, commentArray53);
        astRoot32.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet54);
        boolean boolean57 = astRoot32.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray58 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList59 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList59, symbolArray58);
        astRoot32.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList59);
        com.google.javascript.rhino.head.Node node62 = astRoot32.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot32, (com.google.javascript.rhino.head.ast.Scope) scriptNode64);
        com.google.javascript.rhino.head.ast.AstRoot astRoot67 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = astRoot67.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor69 = astRoot67.iterator();
        astRoot67.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) astRoot32, (com.google.javascript.rhino.head.Node) astRoot67, (int) (byte) 0);
        java.lang.String str75 = astRoot1.toSource(170);
        com.google.javascript.rhino.head.Token.CommentType commentType78 = null;
        com.google.javascript.rhino.head.ast.Comment comment80 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType78, "");
        boolean boolean81 = comment80.hasSideEffects();
        int int82 = comment80.getLineno();
        com.google.javascript.rhino.head.Node node84 = comment80.setType(18);
        boolean boolean85 = comment80.hasSideEffects();
        astRoot1.addComment(comment80);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = astRoot1.getTop();
        int int88 = astRoot1.getType();
        astRoot1.removeProp(15);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = astRoot1.getParamAndVarCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                                                                                                                                                                        " + "'", str52, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(symbolArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(nodeItor69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(scriptNode87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 136 + "'", int88 == 136);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        int int3 = compilerEnvirons0.getLanguageVersion();
        int int4 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        boolean boolean6 = compilerEnvirons0.isStrictMode();
        compilerEnvirons0.setRecordingComments(false);
        boolean boolean9 = compilerEnvirons0.isRecordingComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 170 + "'", int3 == 170);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        int int8 = compilerEnvirons6.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        boolean boolean11 = compilerEnvirons9.isIdeMode();
        compilerEnvirons9.setRecordingLocalJsDocComments(false);
        boolean boolean14 = compilerEnvirons9.isGenerateDebugInfo();
        compilerEnvirons9.setRecordingLocalJsDocComments(true);
        boolean boolean17 = compilerEnvirons9.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        boolean boolean20 = compilerEnvirons18.getWarnTrailingComma();
        boolean boolean21 = compilerEnvirons18.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = compilerEnvirons18.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser23 = new com.google.javascript.rhino.head.Parser(compilerEnvirons9, errorReporter22);
        compilerEnvirons6.setErrorReporter(errorReporter22);
        compilerEnvirons0.setErrorReporter(errorReporter22);
        compilerEnvirons0.setRecordingComments(true);
        java.util.Set<java.lang.String> strSet28 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 170 + "'", int8 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(errorReporter22);
        org.junit.Assert.assertNull(strSet28);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator4 = scriptNode3.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        java.lang.String str11 = comment9.toSource(100);
        java.lang.String str12 = comment9.getValue();
        scriptNode3.setParent((com.google.javascript.rhino.head.ast.AstNode) comment9);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        java.lang.String str34 = comment32.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray35 = new com.google.javascript.rhino.head.ast.Comment[] { comment20, comment26, comment32 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet36, commentArray35);
        astRoot14.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet36);
        boolean boolean39 = astRoot14.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray40 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList41 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList41, symbolArray40);
        astRoot14.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList41);
        com.google.javascript.rhino.head.Node node44 = astRoot14.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot14, (com.google.javascript.rhino.head.ast.Scope) scriptNode46);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) comment9, (com.google.javascript.rhino.head.Node) scriptNode46);
        java.lang.String str50 = scriptNode2.getJsDoc();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons51 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory53 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons51, errorReporter52);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode54.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode55);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList57 = scriptNode55.getFunctions();
        scriptNode55.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node60 = iRFactory53.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode55);
        java.lang.String str61 = scriptNode55.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator63 = scriptNode62.spliterator();
        com.google.javascript.rhino.head.Node node65 = scriptNode62.setType((int) '#');
        boolean boolean66 = scriptNode62.hasConsistentReturnUsage();
        scriptNode55.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode62);
        com.google.javascript.rhino.head.ast.Symbol symbol69 = scriptNode55.getSymbol("                                      ");
        scriptNode2.target = scriptNode55;
        com.google.javascript.rhino.head.ast.AstRoot astRoot71 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str73 = astRoot71.toSource((int) '4');
        astRoot71.setPosition(100);
        scriptNode55.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot71);
        com.google.javascript.rhino.head.Node node77 = astRoot71.target;
        java.lang.String str79 = astRoot71.toSource(18);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode81 = astRoot71.getFunctionNode((-110742292));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "                                                                                                                                                                                                        " + "'", str11, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "                                                                                                                                                                                                        " + "'", str34, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(symbolArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(functionNodeList57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(nodeSpliterator63);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(symbol69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        int int2 = astRoot0.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        com.google.javascript.rhino.head.Node node8 = scriptNode4.getLastSibling();
        scriptNode4.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList14 = scriptNode12.getFunctions();
        scriptNode12.setPosition((int) (byte) 10);
        java.lang.String str17 = scriptNode4.toStringTree(scriptNode12);
        int int18 = scriptNode4.getBaseLineno();
        astRoot0.target = scriptNode4;
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet20 = astRoot0.getComments();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList21 = astRoot0.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        int int28 = scriptNode24.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode30.getFunctions();
        scriptNode30.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope35 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode24.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) scope35);
        int int37 = scriptNode30.getEndLineno();
        scriptNode30.setEncodedSource("hi!");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode43.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray50 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList51 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList51, symbolArray50);
        scriptNode49.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode46.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode43.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode41.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode30.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        com.google.javascript.rhino.head.ast.AstRoot astRoot59 = new com.google.javascript.rhino.head.ast.AstRoot(136);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator61 = scriptNode60.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList65 = scriptNode63.getChildScopes();
        int int66 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.Node node67 = scriptNode63.getLastSibling();
        int int68 = scriptNode63.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator69 = scriptNode63.new NodeIterator();
        int int70 = scriptNode63.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot71 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator72 = astRoot71.new NodeIterator();
        scriptNode63.setCompilerData((java.lang.Object) nodeIterator72);
        scriptNode60.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        astRoot59.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode60);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node((-933351410), (com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) astRoot59, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.setContinue((com.google.javascript.rhino.head.Node) astRoot59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(functionNodeList14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(commentSet20);
        org.junit.Assert.assertNotNull(symbolList21);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(symbolArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator61);
        org.junit.Assert.assertNull(scopeList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        boolean boolean4 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setWarnTrailingComma(true);
        compilerEnvirons0.setGeneratingSource(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons0.getErrorReporter();
        // The following exception was thrown during execution in test generation
        try {
            errorReporter9.error("", "                                                                        ", 764472231, "9\t  SCRIPT 8 1\n", (-117418037));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(errorReporter9);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode32.getFunctions();
        scriptNode32.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scope37);
        scriptNode32.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node41 = iRFactory24.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode32.setTop(scriptNode52);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode32, 10);
        scriptNode8.setEncodedSourceStart(17);
        scriptNode8.setRelative(2);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator69 = scriptNode8.new NodeIterator();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setStrictMode(false);
        compilerEnvirons0.setRecordingComments(false);
        int int8 = compilerEnvirons0.getLanguageVersion();
        boolean boolean9 = compilerEnvirons0.isStrictMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 170 + "'", int8 == 170);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        java.lang.String str9 = comment4.makeIndent((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.Node node15 = scriptNode11.getLastSibling();
        int int16 = scriptNode11.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode18.getChildScopes();
        int int21 = scriptNode18.getBaseLineno();
        int int22 = scriptNode18.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList26 = scriptNode24.getFunctions();
        scriptNode24.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope29 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode18.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode24, (com.google.javascript.rhino.head.Node) scope29);
        scriptNode11.setTop(scriptNode18);
        com.google.javascript.rhino.head.ast.Comment comment32 = scriptNode11.getJsDocNode();
        com.google.javascript.rhino.head.ast.AstRoot astRoot33 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet34 = astRoot33.getComments();
        java.lang.String str35 = astRoot33.getSourceName();
        boolean boolean36 = astRoot33.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode38.getChildScopes();
        int int41 = scriptNode38.getBaseLineno();
        com.google.javascript.rhino.head.Node node42 = scriptNode38.getLastSibling();
        scriptNode38.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList48 = scriptNode46.getFunctions();
        scriptNode46.setPosition((int) (byte) 10);
        java.lang.String str51 = scriptNode38.toStringTree(scriptNode46);
        int int52 = scriptNode38.getBaseLineno();
        boolean boolean53 = scriptNode38.hasConsistentReturnUsage();
        astRoot33.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode38);
        astRoot33.setBaseLineno(14);
        // The following exception was thrown during execution in test generation
        try {
            comment4.addChildBefore((com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) astRoot33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(commentType7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "                                                                                                        " + "'", str9, "                                                                                                        ");
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(functionNodeList26);
        org.junit.Assert.assertNull(comment32);
        org.junit.Assert.assertNull(commentSet34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(functionNodeList48);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean4 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons5 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray11 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerEnvirons5.setActivationNames((java.util.Set<java.lang.String>) strSet12);
        boolean boolean15 = compilerEnvirons5.isGenerateDebugInfo();
        boolean boolean16 = compilerEnvirons5.isGeneratingSource();
        compilerEnvirons5.setIdeMode(false);
        java.util.Set<java.lang.String> strSet19 = compilerEnvirons5.getActivationNames();
        compilerEnvirons0.setActivationNames(strSet19);
        com.google.javascript.rhino.head.ErrorReporter errorReporter21 = compilerEnvirons0.getErrorReporter();
        boolean boolean22 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(errorReporter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot7, (com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        com.google.javascript.rhino.head.Node node16 = astRoot7.getLastSibling();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = astRoot7.iterator();
        boolean boolean18 = astRoot7.isInStrictMode();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("136");
        node1.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode41 = astRoot15.getParent();
        astRoot15.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode6, (com.google.javascript.rhino.head.Node) scope14, (com.google.javascript.rhino.head.Node) astRoot15, 6);
        java.lang.String str46 = node1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot15);
        astRoot15.checkParentLinks();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment(95442629, 538062289, commentType50, "                      ");
        java.lang.String str53 = comment52.getValue();
        astRoot15.setJsDocNode(comment52);
        boolean boolean55 = astRoot15.hasSideEffects();
        astRoot15.removeChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(astNode41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "                      " + "'", str53, "                      ");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope6 = astRoot0.getEnclosingScope();
        astRoot0.setEncodedSourceStart(23);
        java.lang.String str10 = astRoot0.toSource(95442629);
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType13, "hi!");
        java.lang.String str17 = comment15.toSource(5);
        astRoot0.setJsDocNode(comment15);
        astRoot0.setRelative(0);
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(scope6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "          hi!" + "'", str17, "          hi!");
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator33 = scriptNode32.spliterator();
        com.google.javascript.rhino.head.Node node35 = scriptNode32.setType((int) '#');
        java.lang.Object obj36 = scriptNode32.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator37 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator38 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator39 = positionComparator37.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator38);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode41.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor46 = astRoot44.iterator();
        scriptNode41.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode49.getChildScopes();
        int int52 = positionComparator38.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot44, (com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scriptNode49);
        java.lang.String str54 = scriptNode32.toString();
        int int55 = scriptNode32.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator57 = scriptNode56.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        java.lang.String str64 = comment62.toSource(100);
        java.lang.String str65 = comment62.getValue();
        scriptNode56.setParent((com.google.javascript.rhino.head.ast.AstNode) comment62);
        scriptNode32.setJsDocNode(comment62);
        com.google.javascript.rhino.head.Node node68 = scriptNode32.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator69 = scriptNode32.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator69.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(astNodeComparator39);
        org.junit.Assert.assertNotNull(nodeItor46);
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "35" + "'", str54, "35");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator57);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "                                                                                                                                                                                                        " + "'", str64, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory6 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor10 = null;
        astRoot7.visitComments(nodeVisitor10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = iRFactory6.transformTree(astRoot7);
        com.google.javascript.rhino.head.ast.Scope scope13 = astRoot7.getEnclosingScope();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet14 = astRoot7.getComments();
        astRoot7.setInStrictMode(false);
        com.google.javascript.rhino.head.ast.Scope scope17 = astRoot7.getParentScope();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = astRoot7.getParamOrVarName(1859345902);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNotNull(scriptNode12);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNull(commentSet14);
        org.junit.Assert.assertNull(scope17);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scope12);
        scriptNode7.setEncodedSourceEnd(18);
        java.lang.String str16 = scriptNode7.getJsDoc();
        int int17 = scriptNode7.depth();
        java.lang.String str18 = scriptNode7.getEncodedSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode21.getChildScopes();
        int int24 = scriptNode21.getBaseLineno();
        int int25 = scriptNode21.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList29 = scriptNode27.getFunctions();
        scriptNode27.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope32 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode27, (com.google.javascript.rhino.head.Node) scope32);
        scriptNode27.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scriptNode38.getChildScopes();
        int int41 = scriptNode38.getBaseLineno();
        com.google.javascript.rhino.head.Node node42 = scriptNode38.getLastSibling();
        int int43 = scriptNode38.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope46 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot47 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator48 = astRoot47.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = null;
        com.google.javascript.rhino.head.ast.Comment comment53 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType51, "");
        boolean boolean54 = comment53.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType57 = null;
        com.google.javascript.rhino.head.ast.Comment comment59 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType57, "");
        boolean boolean60 = comment59.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType63 = null;
        com.google.javascript.rhino.head.ast.Comment comment65 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType63, "");
        java.lang.String str67 = comment65.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray68 = new com.google.javascript.rhino.head.ast.Comment[] { comment53, comment59, comment65 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet69 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet69, commentArray68);
        astRoot47.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet69);
        boolean boolean72 = astRoot47.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode73 = astRoot47.getParent();
        astRoot47.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode38, (com.google.javascript.rhino.head.Node) scope46, (com.google.javascript.rhino.head.Node) astRoot47, 6);
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode27, (com.google.javascript.rhino.head.Node) astRoot47);
        scriptNode7.addChildToFront(node78);
        com.google.javascript.rhino.head.Node node80 = scriptNode7.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot82 = new com.google.javascript.rhino.head.ast.AstRoot((-1222715009));
        com.google.javascript.rhino.head.Node node83 = astRoot82.target;
        int int84 = scriptNode7.compareTo((com.google.javascript.rhino.head.ast.AstNode) astRoot82);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(functionNodeList29);
        org.junit.Assert.assertNull(scopeList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "                                                                                                                                                                                                        " + "'", str67, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(astNode73);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        comment4.setCommentType(commentType5);
        java.lang.String str7 = comment4.getValue();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.lang.String str20 = comment17.getValue();
        scriptNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) comment17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        com.google.javascript.rhino.head.Node node52 = astRoot22.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot22, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) comment17, (com.google.javascript.rhino.head.Node) scriptNode54);
        int int58 = comment4.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator59 = scriptNode10.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode10.labelId(1891424362);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(nodeSpliterator59);
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        java.lang.String str5 = scriptNode1.makeIndent((int) (byte) -1);
        scriptNode1.setLineno((-253374738));
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList6 = scriptNode1.getSymbols();
        scriptNode1.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor11 = astRoot9.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor12 = null;
        astRoot9.visitComments(nodeVisitor12);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) astRoot9);
        com.google.javascript.rhino.head.Node node16 = com.google.javascript.rhino.head.Node.newNumber(0.0d);
        scriptNode1.setCompilerData((java.lang.Object) 0.0d);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(symbolList6);
        org.junit.Assert.assertNotNull(nodeItor11);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getLineno();
        java.lang.String str31 = astRoot0.getNextTempName();
        int int32 = astRoot0.getBaseLineno();
        astRoot0.clearParentScope();
        java.lang.String str34 = astRoot0.debugPrint();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode35 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = astRoot0.addFunction(functionNode35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "$0" + "'", str31, "$0");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str34, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        java.lang.String str31 = comment29.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray32 = new com.google.javascript.rhino.head.ast.Comment[] { comment17, comment23, comment29 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet33, commentArray32);
        astRoot11.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet33);
        boolean boolean36 = astRoot11.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = astRoot11.getParent();
        astRoot11.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scope10, (com.google.javascript.rhino.head.Node) astRoot11, 6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = scriptNode2.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.Scope scope43 = scriptNode2.getParentScope();
        java.lang.Object obj44 = scriptNode2.getCompilerData();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(astNode37);
        org.junit.Assert.assertNull(functionNode42);
        org.junit.Assert.assertNull(scope43);
        org.junit.Assert.assertNull(obj44);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        java.lang.String str16 = scriptNode12.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scriptNode18);
        int int20 = scriptNode12.getType();
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        int int22 = scriptNode12.getParamCount();
        com.google.javascript.rhino.head.Node node23 = scriptNode12.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment24 = node23.getJsDocNode();
        com.google.javascript.rhino.head.Node node25 = node23.getFirstChild();
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 136 + "'", int20 == 136);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(comment24);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        boolean boolean30 = comment29.hasSideEffects();
        int int31 = comment29.getLineno();
        com.google.javascript.rhino.head.Node node33 = comment29.setType(18);
        boolean boolean34 = comment29.hasSideEffects();
        astRoot0.addComment(comment29);
        java.lang.Object obj37 = astRoot0.getProp(20);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj37);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        boolean boolean16 = scriptNode1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = scriptNode1.getTop();
        scriptNode17.setBaseLineno(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode21.getChildScopes();
        int int24 = scriptNode21.getBaseLineno();
        int int25 = scriptNode21.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList29 = scriptNode27.getFunctions();
        scriptNode27.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope32 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode21.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode27, (com.google.javascript.rhino.head.Node) scope32);
        scriptNode27.setEncodedSourceEnd(18);
        java.lang.String str36 = scriptNode27.getJsDoc();
        int int37 = scriptNode27.depth();
        java.lang.String str39 = scriptNode27.toSource(3);
        scriptNode27.setEncodedSourceBounds((int) (short) -1, 22);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode27.getChildScopes();
        java.lang.String str44 = scriptNode27.toSource();
        scriptNode27.setBaseLineno(170);
        scriptNode17.setTop(scriptNode27);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(scriptNode17);
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(functionNodeList29);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "      {\n      }\n" + "'", str39, "      {\n      }\n");
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{\n}\n" + "'", str44, "{\n}\n");
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setGenerateObserverCount(true);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setOptimizationLevel((-328046526));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Optimization level outside [-1..9]: -328046526");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorReporter11);
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor13 = astRoot11.iterator();
        scriptNode8.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        astRoot11.visitComments(nodeVisitor15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        com.google.javascript.rhino.head.Node node20 = scriptNode17.getFirstChild();
        astRoot11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode17);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        com.google.javascript.rhino.head.Node node28 = scriptNode24.getLastSibling();
        int int29 = scriptNode24.getEndLineno();
        scriptNode24.setBaseLineno(4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = astRoot32.getComments();
        int int34 = astRoot32.getEndLineno();
        com.google.javascript.rhino.head.Node node36 = astRoot32.setType((int) (short) 10);
        astRoot32.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator44 = scriptNode43.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        java.lang.String str51 = comment49.toSource(100);
        java.lang.String str52 = comment49.getValue();
        scriptNode43.setParent((com.google.javascript.rhino.head.ast.AstNode) comment49);
        com.google.javascript.rhino.head.ast.AstRoot astRoot54 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = astRoot54.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        boolean boolean61 = comment60.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        boolean boolean67 = comment66.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType70 = null;
        com.google.javascript.rhino.head.ast.Comment comment72 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType70, "");
        java.lang.String str74 = comment72.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray75 = new com.google.javascript.rhino.head.ast.Comment[] { comment60, comment66, comment72 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet76 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet76, commentArray75);
        astRoot54.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet76);
        boolean boolean79 = astRoot54.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray80 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList81 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList81, symbolArray80);
        astRoot54.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList81);
        com.google.javascript.rhino.head.Node node84 = astRoot54.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode86 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode85.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode86);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot54, (com.google.javascript.rhino.head.ast.Scope) scriptNode86);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode42, (com.google.javascript.rhino.head.Node) comment49, (com.google.javascript.rhino.head.Node) scriptNode86);
        astRoot32.addComment(comment49);
        scriptNode24.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot32);
        boolean boolean92 = scriptNode24.hasChildren();
        astRoot11.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode24);
        int int94 = scriptNode24.getEncodedSourceStart();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(commentSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeSpliterator44);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                                                                                                                        " + "'", str51, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "                                                                                                                                                                                                        " + "'", str74, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(symbolArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((-387673394));
        // The following exception was thrown during execution in test generation
        try {
            int int3 = scriptNode1.getExistingIntProp(6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (-659200707));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        astRoot4.visitComments(nodeVisitor8);
        astRoot4.setEndLineno(17);
        com.google.javascript.rhino.head.ast.Symbol symbol13 = astRoot4.getSymbol("AstRoot");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList14 = astRoot4.getSymbols();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor15 = astRoot4.iterator();
        astRoot4.setLineno(492844799);
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType20, "");
        boolean boolean23 = comment22.hasSideEffects();
        int int24 = comment22.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = comment22.getCommentType();
        java.lang.String str27 = comment22.toSource((int) (short) 100);
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        comment32.setCommentType(commentType33);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator35 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator36 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator37 = positionComparator35.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator36);
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int39 = astRoot38.getBaseLineno();
        java.lang.String str40 = astRoot38.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot41 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator42 = astRoot41.new NodeIterator();
        int int43 = positionComparator36.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot38, (com.google.javascript.rhino.head.ast.AstNode) astRoot41);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator45 = scriptNode44.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = scriptNode44.new NodeIterator();
        astRoot41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        int int48 = scriptNode44.getPosition();
        comment22.addChildAfter((com.google.javascript.rhino.head.Node) comment32, (com.google.javascript.rhino.head.Node) scriptNode44);
        // The following exception was thrown during execution in test generation
        try {
            astRoot4.setDefault((com.google.javascript.rhino.head.Node) comment22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertNull(symbol13);
        org.junit.Assert.assertNotNull(symbolList14);
        org.junit.Assert.assertNotNull(nodeItor15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(commentType25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "                                                                                                                                                                                                        " + "'", str27, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(astNodeComparator37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str40, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator1 = positionComparator0.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator4 = positionComparator2.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator3);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet7 = astRoot6.getComments();
        int int8 = astRoot6.getEndLineno();
        com.google.javascript.rhino.head.Node node10 = astRoot6.setType((int) (short) 10);
        astRoot6.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator18 = scriptNode17.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        java.lang.String str25 = comment23.toSource(100);
        java.lang.String str26 = comment23.getValue();
        scriptNode17.setParent((com.google.javascript.rhino.head.ast.AstNode) comment23);
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = astRoot28.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        java.lang.String str48 = comment46.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray49 = new com.google.javascript.rhino.head.ast.Comment[] { comment34, comment40, comment46 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet50 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet50, commentArray49);
        astRoot28.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet50);
        boolean boolean53 = astRoot28.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray54 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList55 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList55, symbolArray54);
        astRoot28.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList55);
        com.google.javascript.rhino.head.Node node58 = astRoot28.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode59.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode60);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot28, (com.google.javascript.rhino.head.ast.Scope) scriptNode60);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode16, (com.google.javascript.rhino.head.Node) comment23, (com.google.javascript.rhino.head.Node) scriptNode60);
        astRoot6.addComment(comment23);
        com.google.javascript.rhino.head.Node node65 = astRoot6.getLastSibling();
        astRoot6.setPosition(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode(24);
        astRoot6.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode69);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray75 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList76 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList76, symbolArray75);
        scriptNode74.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList76);
        scriptNode71.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList76);
        int int80 = positionComparator0.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode69, (com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator81 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator82 = positionComparator81.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator83 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator84 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator85 = positionComparator83.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator84);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator86 = positionComparator81.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator83);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator87 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator81);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator88 = positionComparator81.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator89 = astNodeComparator88.reversed();
        org.junit.Assert.assertNotNull(astNodeComparator1);
        org.junit.Assert.assertNotNull(astNodeComparator4);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertNull(commentSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeSpliterator18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "                                                                                                                                                                                                        " + "'", str25, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "                                                                                                                                                                                                        " + "'", str48, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(symbolArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(symbolArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 25 + "'", int80 == 25);
        org.junit.Assert.assertNotNull(astNodeComparator82);
        org.junit.Assert.assertNotNull(astNodeComparator85);
        org.junit.Assert.assertNotNull(astNodeComparator86);
        org.junit.Assert.assertNotNull(astNodeComparator87);
        org.junit.Assert.assertNotNull(astNodeComparator88);
        org.junit.Assert.assertNotNull(astNodeComparator89);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        java.lang.String str2 = astRoot0.getSourceName();
        boolean boolean3 = astRoot0.hasChildren();
        com.google.javascript.rhino.head.Node node4 = astRoot0.getLastSibling();
        com.google.javascript.rhino.head.ast.Scope scope5 = astRoot0.getParentScope();
        astRoot0.setEncodedSourceBounds(24, 0);
        astRoot0.setInStrictMode(true);
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(scope5);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("136");
        node1.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode41 = astRoot15.getParent();
        astRoot15.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode6, (com.google.javascript.rhino.head.Node) scope14, (com.google.javascript.rhino.head.Node) astRoot15, 6);
        java.lang.String str46 = node1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot15);
        astRoot15.checkParentLinks();
        java.lang.String str49 = astRoot15.toSource(3);
        java.lang.String str50 = astRoot15.getJsDoc();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = astRoot15.getParamAndVarCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(astNode41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet7 = astRoot6.getComments();
        int int8 = astRoot6.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor9 = null;
        astRoot6.visitComments(nodeVisitor9);
        com.google.javascript.rhino.head.Node node11 = astRoot6.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet12 = astRoot6.getComments();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) astRoot6);
        int int14 = scriptNode3.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory17 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons15, errorReporter16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList21 = scriptNode19.getFunctions();
        scriptNode19.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node24 = iRFactory17.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.lang.String str25 = scriptNode19.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = scriptNode27.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        java.lang.String str37 = scriptNode33.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode27.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scriptNode39);
        java.lang.Object obj42 = scriptNode33.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str45 = scriptNode43.toSource((int) '4');
        java.lang.String str46 = scriptNode33.toStringTree(scriptNode43);
        scriptNode19.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode3.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray51 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList52 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList52, symbolArray51);
        scriptNode50.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList52);
        com.google.javascript.rhino.head.ast.AstRoot astRoot55 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int56 = astRoot55.getParamCount();
        int int57 = astRoot55.getRegexpCount();
        scriptNode50.addChildToBack((com.google.javascript.rhino.head.Node) astRoot55);
        scriptNode3.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot55);
        int int60 = astRoot55.getAbsolutePosition();
        com.google.javascript.rhino.head.Node node61 = astRoot55.getFirstChild();
        org.junit.Assert.assertNull(commentSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(commentSet12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(functionNodeList21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str45, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertNotNull(symbolArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(node61);
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope13);
        scriptNode8.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode18.getChildScopes();
        int int21 = scriptNode18.getBaseLineno();
        com.google.javascript.rhino.head.Node node22 = scriptNode18.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        java.lang.String str28 = scriptNode24.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode18.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode24, (com.google.javascript.rhino.head.Node) scriptNode30);
        java.lang.Object obj33 = scriptNode24.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str36 = scriptNode34.toSource((int) '4');
        java.lang.String str37 = scriptNode24.toStringTree(scriptNode34);
        scriptNode34.setLength((-1));
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((int) '4', (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode34, 0);
        java.lang.Object obj43 = scriptNode34.getProp((-1492185149));
        com.google.javascript.rhino.head.ast.Symbol symbol45 = scriptNode34.getSymbol("100\tSCRIPT 100 1\n");
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str36, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(symbol45);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        boolean boolean2 = astRoot1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node5 = com.google.javascript.rhino.head.Node.newString((int) 'a', "                                                                                                                                                                                                        ");
        astRoot1.addChildToFront(node5);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = node5.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node8 = nodeIterator7.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(node5);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        com.google.javascript.rhino.head.Node node30 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        scriptNode36.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList46 = scriptNode44.getFunctions();
        scriptNode44.setPosition((int) (byte) 10);
        java.lang.String str49 = scriptNode36.toStringTree(scriptNode44);
        int int50 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node52 = scriptNode36.setType((int) (byte) -1);
        java.lang.String str53 = astRoot0.toStringTree(scriptNode36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = scriptNode36.getTop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = scriptNode54.getRegexpString(1397279810);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(functionNodeList46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(scriptNode54);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scope1.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        scope1.setTop(scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scope1.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        int int14 = comment12.getLineno();
        com.google.javascript.rhino.head.Node node16 = comment12.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        int int23 = comment21.getLineno();
        com.google.javascript.rhino.head.Node node25 = comment21.setType(18);
        comment21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope1, (com.google.javascript.rhino.head.Node) comment12, (com.google.javascript.rhino.head.Node) comment21, 15);
        com.google.javascript.rhino.head.Node node29 = scope1.getFirstChild();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap30 = scope1.getSymbolTable();
        com.google.javascript.rhino.head.ast.AstRoot astRoot31 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator32 = astRoot31.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        boolean boolean44 = comment43.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        java.lang.String str51 = comment49.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray52 = new com.google.javascript.rhino.head.ast.Comment[] { comment37, comment43, comment49 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet53 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet53, commentArray52);
        astRoot31.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet53);
        boolean boolean56 = astRoot31.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray57 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList58 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList58, symbolArray57);
        astRoot31.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList58);
        int int61 = astRoot31.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList65 = scriptNode63.getChildScopes();
        int int66 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.Node node67 = scriptNode63.getLastSibling();
        scriptNode63.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList73 = scriptNode71.getFunctions();
        scriptNode71.setPosition((int) (byte) 10);
        java.lang.String str76 = scriptNode63.toStringTree(scriptNode71);
        int int77 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot31, (com.google.javascript.rhino.head.ast.Scope) scriptNode63);
        java.lang.String str80 = astRoot31.toSource(15);
        com.google.javascript.rhino.head.Token.CommentType commentType83 = null;
        com.google.javascript.rhino.head.ast.Comment comment85 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType83, "");
        java.lang.String str87 = comment85.toSource(100);
        java.lang.String str88 = comment85.getValue();
        boolean boolean89 = comment85.hasSideEffects();
        java.lang.String str90 = comment85.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType91 = comment85.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType92 = null;
        comment85.setCommentType(commentType92);
        astRoot31.setJsDocNode(comment85);
        scope1.addChildrenToBack((com.google.javascript.rhino.head.Node) astRoot31);
        com.google.javascript.rhino.head.Node node97 = astRoot31.setType((-954561564));
        java.lang.String str98 = astRoot31.getEncodedSource();
        astRoot31.clearParentScope();
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                                                                                                                        " + "'", str51, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(symbolArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(scopeList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(functionNodeList73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "                                                                                                                                                                                                        " + "'", str87, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNull(commentType91);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNull(str98);
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        int int4 = compilerEnvirons0.getOptimizationLevel();
        int int5 = compilerEnvirons0.getLanguageVersion();
        boolean boolean6 = compilerEnvirons0.isRecordingComments();
        com.google.javascript.rhino.head.IRFactory iRFactory7 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        java.io.Reader reader8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot11 = iRFactory7.parse(reader8, "", 605628279);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 170 + "'", int5 == 170);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(577653725);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        java.lang.String str31 = comment29.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray32 = new com.google.javascript.rhino.head.ast.Comment[] { comment17, comment23, comment29 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet33, commentArray32);
        astRoot11.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet33);
        boolean boolean36 = astRoot11.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = astRoot11.getParent();
        astRoot11.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scope10, (com.google.javascript.rhino.head.Node) astRoot11, 6);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode52.putProp(17, (java.lang.Object) 18);
        int int65 = scriptNode2.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        // The following exception was thrown during execution in test generation
        try {
            scriptNode2.labelId(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(astNode37);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        int int12 = scriptNode9.getBaseLineno();
        int int13 = scriptNode9.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList17 = scriptNode15.getFunctions();
        scriptNode15.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode9.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode15, (com.google.javascript.rhino.head.Node) scope20);
        scriptNode15.setEncodedSourceEnd(18);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        int int25 = scriptNode15.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int27 = astRoot26.getBaseLineno();
        int int28 = astRoot26.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode30.getChildScopes();
        int int33 = scriptNode30.getBaseLineno();
        com.google.javascript.rhino.head.Node node34 = scriptNode30.getLastSibling();
        scriptNode30.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList40 = scriptNode38.getFunctions();
        scriptNode38.setPosition((int) (byte) 10);
        java.lang.String str43 = scriptNode30.toStringTree(scriptNode38);
        int int44 = scriptNode30.getBaseLineno();
        astRoot26.target = scriptNode30;
        scriptNode15.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot26);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor47 = scriptNode15.iterator();
        com.google.javascript.rhino.head.ast.Symbol symbol49 = scriptNode15.getSymbol("Scope");
        com.google.javascript.rhino.head.ast.AstRoot astRoot50 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = astRoot50.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        boolean boolean63 = comment62.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType66 = null;
        com.google.javascript.rhino.head.ast.Comment comment68 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType66, "");
        java.lang.String str70 = comment68.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray71 = new com.google.javascript.rhino.head.ast.Comment[] { comment56, comment62, comment68 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet72 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet72, commentArray71);
        astRoot50.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet72);
        boolean boolean75 = astRoot50.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode77.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot80 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator81 = astRoot80.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor82 = astRoot80.iterator();
        scriptNode77.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot80);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor84 = null;
        astRoot80.visitComments(nodeVisitor84);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode86 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str88 = scriptNode86.toSource((int) '4');
        com.google.javascript.rhino.head.Node node89 = scriptNode86.getFirstChild();
        astRoot80.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode86);
        boolean boolean91 = astRoot80.isInStrictMode();
        astRoot50.setCompilerData((java.lang.Object) astRoot80);
        com.google.javascript.rhino.head.ast.AstRoot astRoot93 = astRoot50.getAstRoot();
        scriptNode15.setTop((com.google.javascript.rhino.head.ast.ScriptNode) astRoot50);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(commentType7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(functionNodeList17);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(functionNodeList40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeItor47);
        org.junit.Assert.assertNull(symbol49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "                                                                                                                                                                                                        " + "'", str70, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeItor82);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str88, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(astRoot93);
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        int int8 = astRoot4.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = astRoot4.getAstRoot();
        java.lang.String str11 = astRoot4.toSource((int) '4');
        com.google.javascript.rhino.head.ast.Symbol symbol13 = astRoot4.getSymbol("                  ");
        astRoot4.clearParentScope();
        java.lang.String str15 = astRoot4.toString();
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(astRoot9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(symbol13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "136" + "'", str15, "136");
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setXmlAvailable(true);
        com.google.javascript.rhino.head.IRFactory iRFactory8 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor11 = astRoot9.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor12 = null;
        astRoot9.visitComments(nodeVisitor12);
        com.google.javascript.rhino.head.Node node14 = astRoot9.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = iRFactory8.transformTree(astRoot9);
        com.google.javascript.rhino.head.ast.AstRoot astRoot19 = iRFactory8.parse("                                          ", "9\t  SCRIPT 10 1\n", 2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot20 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = astRoot20.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        boolean boolean33 = comment32.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        java.lang.String str40 = comment38.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray41 = new com.google.javascript.rhino.head.ast.Comment[] { comment26, comment32, comment38 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet42 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet42, commentArray41);
        astRoot20.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet42);
        boolean boolean45 = astRoot20.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray46 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList47 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList47, symbolArray46);
        astRoot20.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList47);
        int int50 = astRoot20.getLineno();
        com.google.javascript.rhino.head.ast.Comment comment51 = astRoot20.getJsDocNode();
        astRoot20.clearParentScope();
        astRoot19.addChildToFront((com.google.javascript.rhino.head.Node) astRoot20);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode54 = astRoot20.getEnclosingFunction();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeItor11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertNotNull(astRoot19);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "                                                                                                                                                                                                        " + "'", str40, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(symbolArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(comment51);
        org.junit.Assert.assertNull(functionNode54);
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        com.google.javascript.rhino.head.ast.Scope scope3 = new com.google.javascript.rhino.head.ast.Scope(0, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode5.getChildScopes();
        int int8 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.Node node9 = scriptNode5.getLastSibling();
        scriptNode5.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode13.getFunctions();
        scriptNode13.setPosition((int) (byte) 10);
        java.lang.String str18 = scriptNode5.toStringTree(scriptNode13);
        int int19 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.Node node21 = scriptNode5.setType((int) (byte) -1);
        scriptNode5.setSourceName("typeof");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        com.google.javascript.rhino.head.Node node30 = scriptNode26.getLastSibling();
        int int31 = scriptNode26.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator32 = scriptNode26.new NodeIterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList36 = scriptNode34.getChildScopes();
        int int37 = scriptNode34.getBaseLineno();
        com.google.javascript.rhino.head.Node node38 = scriptNode34.getLastSibling();
        scriptNode34.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList44 = scriptNode42.getFunctions();
        scriptNode42.setPosition((int) (byte) 10);
        java.lang.String str47 = scriptNode34.toStringTree(scriptNode42);
        int int48 = scriptNode34.getBaseLineno();
        com.google.javascript.rhino.head.Node node50 = scriptNode34.setType((int) (byte) -1);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(9, (com.google.javascript.rhino.head.Node) scriptNode26, node50);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) scope3, (com.google.javascript.rhino.head.Node) scriptNode5, node51, 17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot55 = new com.google.javascript.rhino.head.ast.AstRoot((int) '4');
        node53.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot55);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = astRoot55.getTop();
        java.lang.String str58 = astRoot55.debugPrint();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode59.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode60);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList62 = scriptNode60.getChildScopes();
        java.lang.String str63 = scriptNode60.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode64.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode65);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList67 = scriptNode65.getChildScopes();
        int int68 = scriptNode65.getBaseLineno();
        com.google.javascript.rhino.head.Node node69 = scriptNode65.getLastSibling();
        int int70 = scriptNode65.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator71 = scriptNode65.new NodeIterator();
        int int72 = scriptNode65.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot73 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator74 = astRoot73.new NodeIterator();
        scriptNode65.setCompilerData((java.lang.Object) nodeIterator74);
        int int76 = scriptNode60.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode65);
        scriptNode65.setLineno(20);
        com.google.javascript.rhino.head.Token.CommentType commentType81 = null;
        com.google.javascript.rhino.head.ast.Comment comment83 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType81, "hi!");
        int int84 = comment83.getLength();
        java.lang.String str85 = comment83.getValue();
        scriptNode65.target = comment83;
        astRoot55.addComment(comment83);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope88 = com.google.javascript.rhino.head.ast.Scope.splitScope((com.google.javascript.rhino.head.ast.Scope) astRoot55);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.ScriptNode");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(functionNodeList44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(scriptNode57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "52\tSCRIPT 52 1\n" + "'", str58, "52\tSCRIPT 52 1\n");
        org.junit.Assert.assertNull(scopeList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNull(scopeList67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-412789908) + "'", int76 == (-412789908));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "hi!" + "'", str85, "hi!");
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        boolean boolean4 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        boolean boolean6 = compilerEnvirons0.isIdeMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons7 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray13 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        compilerEnvirons7.setActivationNames((java.util.Set<java.lang.String>) strSet14);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean19 = compilerEnvirons0.isRecordingLocalJsDocComments();
        boolean boolean20 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean21 = compilerEnvirons0.isStrictMode();
        compilerEnvirons0.setXmlAvailable(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node19 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory22 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons20, errorReporter21);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        int int28 = scriptNode24.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode30.getFunctions();
        scriptNode30.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope35 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode24.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) scope35);
        scriptNode30.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node39 = iRFactory22.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        scriptNode10.setTop(scriptNode30);
        int int41 = scriptNode30.getLineno();
        boolean boolean42 = scriptNode30.hasChildren();
        java.lang.String str43 = scriptNode30.toSource();
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{\n}\n" + "'", str43, "{\n}\n");
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode26 = astRoot0.getParent();
        java.lang.String str27 = astRoot0.debugPrint();
        int int28 = astRoot0.getEncodedSourceStart();
        int int29 = astRoot0.getEncodedSourceEnd();
        astRoot0.checkParentLinks();
        astRoot0.setPosition((int) (short) 100);
        com.google.javascript.rhino.head.ast.Scope scope33 = astRoot0.getEnclosingScope();
        java.lang.String str34 = astRoot0.shortName();
        astRoot0.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(astNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str27, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scope33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AstRoot" + "'", str34, "AstRoot");
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setPosition((int) (byte) 10);
        int int6 = scriptNode1.getEncodedSourceEnd();
        int int7 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        int int12 = scriptNode9.getBaseLineno();
        com.google.javascript.rhino.head.Node node13 = scriptNode9.getLastSibling();
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int16 = astRoot15.getBaseLineno();
        int int17 = astRoot15.getPosition();
        astRoot15.setRelative(0);
        int int20 = scriptNode1.compareTo((com.google.javascript.rhino.head.ast.AstNode) astRoot15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int22 = astRoot21.getBaseLineno();
        java.lang.String str23 = astRoot21.debugPrint();
        astRoot21.setEncodedSourceBounds((int) (byte) -1, 18);
        com.google.javascript.rhino.head.ast.Scope scope28 = astRoot21.getDefiningScope("136");
        int int29 = astRoot21.getEncodedSourceStart();
        astRoot21.setEndLineno(24);
        com.google.javascript.rhino.head.ast.AstRoot astRoot33 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator34 = astRoot33.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        boolean boolean40 = comment39.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType43 = null;
        com.google.javascript.rhino.head.ast.Comment comment45 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType43, "");
        boolean boolean46 = comment45.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType49 = null;
        com.google.javascript.rhino.head.ast.Comment comment51 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType49, "");
        java.lang.String str53 = comment51.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray54 = new com.google.javascript.rhino.head.ast.Comment[] { comment39, comment45, comment51 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet55 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet55, commentArray54);
        astRoot33.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet55);
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        boolean boolean63 = comment62.hasSideEffects();
        int int64 = comment62.getLineno();
        com.google.javascript.rhino.head.Node node66 = comment62.setType(18);
        boolean boolean67 = comment62.hasSideEffects();
        astRoot33.addComment(comment62);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(14, (com.google.javascript.rhino.head.Node) comment62, (-1));
        comment62.setPosition(842975161);
        astRoot21.addComment(comment62);
        int int74 = astRoot21.depth();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) astRoot21);
        boolean boolean76 = astRoot21.isInStrictMode();
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str23, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(scope28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "                                                                                                                                                                                                        " + "'", str53, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        com.google.javascript.rhino.head.ast.AstRoot astRoot42 = astRoot0.getAstRoot();
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.labelId(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(astRoot42);
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.lang.String str11 = scriptNode4.makeIndent(12);
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = astRoot12.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        boolean boolean25 = comment24.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType28, "");
        java.lang.String str32 = comment30.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray33 = new com.google.javascript.rhino.head.ast.Comment[] { comment18, comment24, comment30 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet34 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet34, commentArray33);
        astRoot12.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet34);
        boolean boolean37 = astRoot12.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray38 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList39 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList39, symbolArray38);
        astRoot12.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList39);
        scriptNode4.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList39);
        scriptNode4.setBounds(25, 25);
        com.google.javascript.rhino.head.ast.AstNode astNode46 = scriptNode4.getParent();
        com.google.javascript.rhino.head.ast.AstNode astNode47 = scriptNode4.getParent();
        java.lang.String str48 = astNode47.toString();
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "                        " + "'", str11, "                        ");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                                                                                                                                                                                                        " + "'", str32, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(symbolArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(astNode46);
        org.junit.Assert.assertNotNull(astNode47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "136" + "'", str48, "136");
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        scriptNode2.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        int int10 = scriptNode7.getBaseLineno();
        com.google.javascript.rhino.head.Node node11 = scriptNode7.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        java.lang.String str17 = scriptNode13.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode7.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode13, (com.google.javascript.rhino.head.Node) scriptNode19);
        int int21 = scriptNode13.getType();
        scriptNode2.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        int int23 = scriptNode13.getParamCount();
        int int24 = scriptNode13.getEndLineno();
        scriptNode13.removeProp(1275261773);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator27 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator28 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator29 = positionComparator27.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator28);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode31.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = astRoot34.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor36 = astRoot34.iterator();
        scriptNode31.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode38.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList41 = scriptNode39.getChildScopes();
        int int42 = positionComparator28.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot34, (com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList43 = scriptNode39.getSymbols();
        scriptNode13.setSymbols(symbolList43);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node((-15), (com.google.javascript.rhino.head.Node) scriptNode13);
        int int46 = node45.getLineno();
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 136 + "'", int21 == 136);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(astNodeComparator29);
        org.junit.Assert.assertNotNull(nodeItor36);
        org.junit.Assert.assertNull(scopeList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(symbolList43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray10 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList11 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList11, symbolArray10);
        scriptNode9.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList11);
        scriptNode6.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList11);
        scriptNode3.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList11);
        scriptNode1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList11);
        java.lang.String str17 = scriptNode1.debugPrint();
        int int18 = scriptNode1.getLineno();
        scriptNode1.setEncodedSourceStart((-147910580));
        org.junit.Assert.assertNotNull(symbolArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0\tSCRIPT 0 1\n" + "'", str17, "0\tSCRIPT 0 1\n");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.reportWarningAsError();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons4 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean5 = compilerEnvirons4.isReservedKeywordAsIdentifier();
        boolean boolean6 = compilerEnvirons4.getWarnTrailingComma();
        boolean boolean7 = compilerEnvirons4.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter8 = compilerEnvirons4.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory9 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter8);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        compilerEnvirons10.setStrictMode(true);
        compilerEnvirons10.setXmlAvailable(true);
        compilerEnvirons10.setXmlAvailable(true);
        com.google.javascript.rhino.head.IRFactory iRFactory18 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot19 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = astRoot19.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor21 = astRoot19.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor22 = null;
        astRoot19.visitComments(nodeVisitor22);
        com.google.javascript.rhino.head.Node node24 = astRoot19.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = iRFactory18.transformTree(astRoot19);
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = iRFactory18.parse("                                          ", "9\t  SCRIPT 10 1\n", 2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot30 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = astRoot30.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        boolean boolean43 = comment42.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        java.lang.String str50 = comment48.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray51 = new com.google.javascript.rhino.head.ast.Comment[] { comment36, comment42, comment48 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet52 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet52, commentArray51);
        astRoot30.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet52);
        boolean boolean55 = astRoot30.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray56 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList57 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList57, symbolArray56);
        astRoot30.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList57);
        int int60 = astRoot30.getLineno();
        com.google.javascript.rhino.head.ast.Comment comment61 = astRoot30.getJsDocNode();
        astRoot30.clearParentScope();
        astRoot29.addChildToFront((com.google.javascript.rhino.head.Node) astRoot30);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = iRFactory9.transformTree(astRoot29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(errorReporter8);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(nodeItor21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(scriptNode25);
        org.junit.Assert.assertNotNull(astRoot29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "                                                                                                                                                                                                        " + "'", str50, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(symbolArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(comment61);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol3 = astRoot0.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot((int) '4');
        astRoot0.setCompilerData((java.lang.Object) astRoot5);
        astRoot0.clearParentScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode11.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray18 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList19 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList19, symbolArray18);
        scriptNode17.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList19);
        scriptNode14.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList19);
        scriptNode11.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList19);
        scriptNode9.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList19);
        com.google.javascript.rhino.head.ast.Scope scope25 = scriptNode9.getParentScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = scriptNode9.getTop();
        astRoot0.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode26);
        astRoot0.setLineno((-505759099));
        com.google.javascript.rhino.head.ast.AstRoot astRoot30 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = astRoot30.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        boolean boolean43 = comment42.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        java.lang.String str50 = comment48.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray51 = new com.google.javascript.rhino.head.ast.Comment[] { comment36, comment42, comment48 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet52 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet52, commentArray51);
        astRoot30.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet52);
        boolean boolean55 = astRoot30.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray56 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList57 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList57, symbolArray56);
        astRoot30.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList57);
        int int60 = astRoot30.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.Scope scope62 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator63 = scope62.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode64.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode65);
        scope62.setTop(scriptNode65);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor68 = scope62.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType71 = null;
        com.google.javascript.rhino.head.ast.Comment comment73 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType71, "");
        boolean boolean74 = comment73.hasSideEffects();
        int int75 = comment73.getLineno();
        com.google.javascript.rhino.head.Node node77 = comment73.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType80 = null;
        com.google.javascript.rhino.head.ast.Comment comment82 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType80, "");
        boolean boolean83 = comment82.hasSideEffects();
        int int84 = comment82.getLineno();
        com.google.javascript.rhino.head.Node node86 = comment82.setType(18);
        comment82.removeChildren();
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope62, (com.google.javascript.rhino.head.Node) comment73, (com.google.javascript.rhino.head.Node) comment82, 15);
        astRoot30.addComment(comment73);
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.removeChild((com.google.javascript.rhino.head.Node) comment73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(symbol3);
        org.junit.Assert.assertNotNull(symbolArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(scope25);
        org.junit.Assert.assertNotNull(scriptNode26);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "                                                                                                                                                                                                        " + "'", str50, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(symbolArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator63);
        org.junit.Assert.assertNotNull(nodeItor68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        boolean boolean2 = nodeIterator1.hasNext();
        boolean boolean3 = nodeIterator1.hasNext();
        boolean boolean4 = nodeIterator1.hasNext();
        boolean boolean5 = nodeIterator1.hasNext();
        boolean boolean6 = nodeIterator1.hasNext();
        boolean boolean7 = nodeIterator1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node8 = nodeIterator1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        astRoot4.visitComments(nodeVisitor8);
        com.google.javascript.rhino.head.ast.Scope scope11 = new com.google.javascript.rhino.head.ast.Scope(18);
        astRoot4.setParentScope(scope11);
        com.google.javascript.rhino.head.ast.AstRoot astRoot13 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet14 = astRoot13.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol16 = astRoot13.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        com.google.javascript.rhino.head.Node node20 = scriptNode17.getFirstChild();
        java.lang.Object obj22 = scriptNode17.getProp(18);
        boolean boolean23 = scriptNode17.hasConsistentReturnUsage();
        java.lang.String str24 = astRoot13.toStringTree(scriptNode17);
        scope11.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot13);
        astRoot13.setInStrictMode(false);
        java.lang.String str28 = astRoot13.debugPrint();
        int int29 = astRoot13.getEndLineno();
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertNull(commentSet14);
        org.junit.Assert.assertNull(symbol16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1\t  SCRIPT -19 1\n" + "'", str28, "-1\t  SCRIPT -19 1\n");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray16 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        compilerEnvirons10.setActivationNames((java.util.Set<java.lang.String>) strSet17);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet17);
        compilerEnvirons0.setGenerateObserverCount(false);
        boolean boolean23 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setOptimizationLevel(1560112722);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Optimization level outside [-1..9]: 1560112722");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean8 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setRecoverFromErrors(true);
        compilerEnvirons0.setReservedKeywordAsIdentifier(true);
        boolean boolean13 = compilerEnvirons0.isStrictMode();
        com.google.javascript.rhino.head.Parser parser14 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setXmlAvailable(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean6 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean7 = compilerEnvirons0.isRecordingComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = comment4.getCommentType();
        int int6 = comment4.depth();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        boolean boolean20 = comment19.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        java.lang.String str27 = comment25.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray28 = new com.google.javascript.rhino.head.ast.Comment[] { comment13, comment19, comment25 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet29 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet29, commentArray28);
        astRoot7.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet29);
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        int int38 = comment36.getLineno();
        com.google.javascript.rhino.head.Node node40 = comment36.setType(18);
        boolean boolean41 = comment36.hasSideEffects();
        astRoot7.addComment(comment36);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons43, errorReporter44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node62 = iRFactory45.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons63 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter64 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory65 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons63, errorReporter64);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode66.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode67);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList69 = scriptNode67.getChildScopes();
        int int70 = scriptNode67.getBaseLineno();
        int int71 = scriptNode67.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode72.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode73);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList75 = scriptNode73.getFunctions();
        scriptNode73.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope78 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode67.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode73, (com.google.javascript.rhino.head.Node) scope78);
        scriptNode73.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node82 = iRFactory65.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode73);
        scriptNode53.setTop(scriptNode73);
        comment4.addChildAfter((com.google.javascript.rhino.head.Node) astRoot7, (com.google.javascript.rhino.head.Node) scriptNode73);
        astRoot7.setEncodedSource("typeof");
        boolean boolean87 = astRoot7.hasSideEffects();
        com.google.javascript.rhino.head.ast.Jump jump88 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot7.setJumpStatement(jump88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "                                                                                                                                                                                                        " + "'", str27, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(scopeList69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(functionNodeList75);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((-856448165), (-891351598), commentType2, "AstRoot");
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        com.google.javascript.rhino.head.IRFactory iRFactory14 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        java.io.Reader reader15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot18 = iRFactory14.parse(reader15, "$0", (-1094142582));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        int int8 = scriptNode1.getLineno();
        java.lang.String str10 = scriptNode1.toSource(6);
        com.google.javascript.rhino.head.ast.Scope scope12 = scriptNode1.getDefiningScope("          hi!");
        scriptNode1.setBaseLineno(644758030);
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "            {\n            }\n" + "'", str10, "            {\n            }\n");
        org.junit.Assert.assertNull(scope12);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean6 = compilerEnvirons0.reportWarningAsError();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons7 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean8 = compilerEnvirons7.isReservedKeywordAsIdentifier();
        int int9 = compilerEnvirons7.getLanguageVersion();
        int int10 = compilerEnvirons7.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean12 = compilerEnvirons11.isReservedKeywordAsIdentifier();
        compilerEnvirons11.setStrictMode(true);
        compilerEnvirons11.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean18 = compilerEnvirons17.isReservedKeywordAsIdentifier();
        boolean boolean19 = compilerEnvirons17.getWarnTrailingComma();
        compilerEnvirons17.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet22 = compilerEnvirons17.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = compilerEnvirons17.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons11, errorReporter23);
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons7, errorReporter23);
        compilerEnvirons7.setAllowSharpComments(false);
        boolean boolean28 = compilerEnvirons7.recoverFromErrors();
        java.util.Set<java.lang.String> strSet29 = compilerEnvirons7.getActivationNames();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons30 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean31 = compilerEnvirons30.isReservedKeywordAsIdentifier();
        boolean boolean32 = compilerEnvirons30.getWarnTrailingComma();
        compilerEnvirons30.setXmlAvailable(true);
        boolean boolean35 = compilerEnvirons30.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons30);
        boolean boolean37 = compilerEnvirons30.recoverFromErrors();
        com.google.javascript.rhino.head.ErrorReporter errorReporter38 = compilerEnvirons30.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser39 = new com.google.javascript.rhino.head.Parser(compilerEnvirons7, errorReporter38);
        com.google.javascript.rhino.head.Parser parser40 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter38);
        boolean boolean41 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 170 + "'", int9 == 170);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 170 + "'", int10 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(errorReporter23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(compilerEnvirons30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorReporter38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        boolean boolean11 = compilerEnvirons0.reportWarningAsError();
        compilerEnvirons0.setIdeMode(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator18 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator19 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator20 = positionComparator18.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator19);
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int22 = astRoot21.getBaseLineno();
        java.lang.String str23 = astRoot21.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator25 = astRoot24.new NodeIterator();
        int int26 = positionComparator19.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot21, (com.google.javascript.rhino.head.ast.AstNode) astRoot24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.putIntProp((int) (short) 1, 1);
        java.lang.String str31 = scriptNode27.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope32 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator33 = scope32.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        scope32.setTop(scriptNode35);
        scope32.setLineno((int) (short) -1);
        int int40 = positionComparator19.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode27, (com.google.javascript.rhino.head.ast.AstNode) scope32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList44 = scriptNode42.getChildScopes();
        int int45 = scriptNode42.getBaseLineno();
        int int46 = scriptNode42.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode48.getFunctions();
        scriptNode48.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope53 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode42.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode48, (com.google.javascript.rhino.head.Node) scope53);
        scriptNode48.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str57 = scriptNode27.toStringTree(scriptNode48);
        int int58 = scriptNode27.getAbsolutePosition();
        scriptNode27.setEncodedSource("136");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons62 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean63 = compilerEnvirons62.isReservedKeywordAsIdentifier();
        boolean boolean64 = compilerEnvirons62.isIdeMode();
        compilerEnvirons62.setRecordingLocalJsDocComments(false);
        boolean boolean67 = compilerEnvirons62.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons68 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean69 = compilerEnvirons68.isReservedKeywordAsIdentifier();
        int int70 = compilerEnvirons68.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons71 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean72 = compilerEnvirons71.isReservedKeywordAsIdentifier();
        boolean boolean73 = compilerEnvirons71.isIdeMode();
        compilerEnvirons71.setRecordingLocalJsDocComments(false);
        boolean boolean76 = compilerEnvirons71.isGenerateDebugInfo();
        compilerEnvirons71.setRecordingLocalJsDocComments(true);
        boolean boolean79 = compilerEnvirons71.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons80 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean81 = compilerEnvirons80.isReservedKeywordAsIdentifier();
        boolean boolean82 = compilerEnvirons80.getWarnTrailingComma();
        boolean boolean83 = compilerEnvirons80.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter84 = compilerEnvirons80.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser85 = new com.google.javascript.rhino.head.Parser(compilerEnvirons71, errorReporter84);
        compilerEnvirons68.setErrorReporter(errorReporter84);
        compilerEnvirons62.setErrorReporter(errorReporter84);
        scriptNode27.putProp(129, (java.lang.Object) errorReporter84);
        com.google.javascript.rhino.head.IRFactory iRFactory89 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter84);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertNotNull(astNodeComparator20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str23, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(nodeSpliterator33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(scopeList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(compilerEnvirons62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 170 + "'", int70 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(errorReporter84);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scope12);
        boolean boolean14 = scope12.hasChildren();
        java.lang.String str15 = scope12.shortName();
        boolean boolean16 = scope12.hasChildren();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Scope" + "'", str15, "Scope");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        int int26 = astRoot0.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean28 = astRoot27.hasSideEffects();
        astRoot0.target = astRoot27;
        astRoot27.setBaseLineno(65536);
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = astRoot27.getAstRoot();
        com.google.javascript.rhino.head.ast.Scope scope34 = astRoot27.getDefiningScope("");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope35 = scope34.getEnclosingScope();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(astRoot32);
        org.junit.Assert.assertNull(scope34);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        java.lang.String str2 = astRoot0.debugPrint();
        astRoot0.setEncodedSourceBounds((int) (byte) -1, 18);
        com.google.javascript.rhino.head.ast.Scope scope7 = astRoot0.getDefiningScope("136");
        int int8 = astRoot0.getEncodedSourceStart();
        astRoot0.setEndLineno(24);
        com.google.javascript.rhino.head.ast.Comment comment11 = astRoot0.getJsDocNode();
        int int12 = astRoot0.getAbsolutePosition();
        com.google.javascript.rhino.head.ast.Scope scope13 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.setScope(scope13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str2, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(scope7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(comment11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        astRoot0.removeChildren();
        java.lang.String str44 = astRoot0.toSource(161);
        astRoot0.checkParentLinks();
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scope1.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        scope1.setTop(scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scope1.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        int int14 = comment12.getLineno();
        com.google.javascript.rhino.head.Node node16 = comment12.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        int int23 = comment21.getLineno();
        com.google.javascript.rhino.head.Node node25 = comment21.setType(18);
        comment21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope1, (com.google.javascript.rhino.head.Node) comment12, (com.google.javascript.rhino.head.Node) comment21, 15);
        com.google.javascript.rhino.head.Node node29 = scope1.getFirstChild();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap30 = scope1.getSymbolTable();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        java.lang.String str35 = scriptNode32.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode37.getChildScopes();
        int int40 = scriptNode37.getBaseLineno();
        com.google.javascript.rhino.head.Node node41 = scriptNode37.getLastSibling();
        int int42 = scriptNode37.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator43 = scriptNode37.new NodeIterator();
        int int44 = scriptNode37.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot45 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = astRoot45.new NodeIterator();
        scriptNode37.setCompilerData((java.lang.Object) nodeIterator46);
        int int48 = scriptNode32.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode49.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode50.getFunctions();
        scriptNode50.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot55 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int56 = astRoot55.getBaseLineno();
        scriptNode50.addChildToBack((com.google.javascript.rhino.head.Node) astRoot55);
        scriptNode50.flattenSymbolTable(true);
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        scope1.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode50);
        scriptNode50.setPosition(7);
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-35128119) + "'", int48 == (-35128119));
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.hasChildren();
        int int26 = astRoot0.getRegexpCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = astRoot28.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        java.lang.String str48 = comment46.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray49 = new com.google.javascript.rhino.head.ast.Comment[] { comment34, comment40, comment46 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet50 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet50, commentArray49);
        astRoot28.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet50);
        boolean boolean53 = astRoot28.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray54 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList55 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList55, symbolArray54);
        astRoot28.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList55);
        int int58 = astRoot28.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator60 = scriptNode59.spliterator();
        com.google.javascript.rhino.head.Node node62 = scriptNode59.setType((int) '#');
        java.lang.Object obj63 = scriptNode59.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator64 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator65 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator66 = positionComparator64.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator65);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode68.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot71 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator72 = astRoot71.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor73 = astRoot71.iterator();
        scriptNode68.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot71);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList78 = scriptNode76.getChildScopes();
        int int79 = positionComparator65.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot71, (com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot28, (com.google.javascript.rhino.head.Node) scriptNode59, (com.google.javascript.rhino.head.Node) scriptNode76);
        java.lang.String str81 = scriptNode59.toString();
        com.google.javascript.rhino.head.Node node83 = scriptNode59.setType(1275261773);
        astRoot0.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode59);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = scriptNode59.getTop();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node86 = scriptNode59.getFinally();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "                                                                                                                                                                                                        " + "'", str48, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(symbolArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator60);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(astNodeComparator66);
        org.junit.Assert.assertNotNull(nodeItor73);
        org.junit.Assert.assertNull(scopeList78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "35" + "'", str81, "35");
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(scriptNode85);
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        java.lang.String str16 = scriptNode12.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scriptNode18);
        int int20 = scriptNode12.getType();
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        int int22 = scriptNode12.getParamCount();
        com.google.javascript.rhino.head.Node node23 = scriptNode12.getLastSibling();
        scriptNode12.removeProp(14);
        com.google.javascript.rhino.head.ast.Symbol symbol27 = scriptNode12.getSymbol(">>>");
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator28 = scriptNode12.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump29 = scriptNode12.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 136 + "'", int20 == 136);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(symbol27);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        int int4 = compilerEnvirons0.getOptimizationLevel();
        int int5 = compilerEnvirons0.getLanguageVersion();
        boolean boolean6 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setXmlAvailable(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 170 + "'", int5 == 170);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet7 = astRoot6.getComments();
        int int8 = astRoot6.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor9 = null;
        astRoot6.visitComments(nodeVisitor9);
        com.google.javascript.rhino.head.Node node11 = astRoot6.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet12 = astRoot6.getComments();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) astRoot6);
        int int14 = scriptNode3.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory17 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons15, errorReporter16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList21 = scriptNode19.getFunctions();
        scriptNode19.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node24 = iRFactory17.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.lang.String str25 = scriptNode19.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = scriptNode27.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        java.lang.String str37 = scriptNode33.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode27.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scriptNode39);
        java.lang.Object obj42 = scriptNode33.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str45 = scriptNode43.toSource((int) '4');
        java.lang.String str46 = scriptNode33.toStringTree(scriptNode43);
        scriptNode19.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode3.getChildScopes();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList50 = scriptNode3.getSymbols();
        int int51 = scriptNode3.getAbsolutePosition();
        org.junit.Assert.assertNull(commentSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(commentSet12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(functionNodeList21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str45, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertNotNull(symbolList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        int int2 = astRoot0.getPosition();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap11 = scriptNode4.getSymbolTable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.isIdeMode();
        compilerEnvirons12.setReservedKeywordAsIdentifier(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray23 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        compilerEnvirons17.setActivationNames((java.util.Set<java.lang.String>) strSet24);
        boolean boolean27 = compilerEnvirons17.isGenerateDebugInfo();
        compilerEnvirons17.setOptimizationLevel((int) (short) 1);
        compilerEnvirons17.setAllowSharpComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter32 = compilerEnvirons17.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory33 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons12, errorReporter32);
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int35 = astRoot34.getParamCount();
        int int36 = astRoot34.getPosition();
        com.google.javascript.rhino.head.Node node37 = astRoot34.target;
        com.google.javascript.rhino.head.Node node38 = iRFactory33.transform((com.google.javascript.rhino.head.ast.AstNode) astRoot34);
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot40 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = astRoot40.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        boolean boolean53 = comment52.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType56 = null;
        com.google.javascript.rhino.head.ast.Comment comment58 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType56, "");
        java.lang.String str60 = comment58.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray61 = new com.google.javascript.rhino.head.ast.Comment[] { comment46, comment52, comment58 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet62 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet62, commentArray61);
        astRoot40.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet62);
        boolean boolean65 = astRoot40.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray66 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList67 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList67, symbolArray66);
        astRoot40.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList67);
        int int70 = astRoot40.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList74 = scriptNode72.getChildScopes();
        int int75 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.Node node76 = scriptNode72.getLastSibling();
        scriptNode72.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList82 = scriptNode80.getFunctions();
        scriptNode80.setPosition((int) (byte) 10);
        java.lang.String str85 = scriptNode72.toStringTree(scriptNode80);
        int int86 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot40, (com.google.javascript.rhino.head.ast.Scope) scriptNode72);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap88 = astRoot40.getSymbolTable();
        scriptNode4.setSymbolTable(strMap88);
        astRoot0.setSymbolTable(strMap88);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet91 = astRoot0.getComments();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode93 = astRoot0.getFunctionNode((-1034592013));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(errorReporter32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "                                                                                                                                                                                                        " + "'", str60, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(symbolArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(scopeList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(functionNodeList82);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNull(commentSet91);
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = new com.google.javascript.rhino.head.CompilerEnvirons();
        com.google.javascript.rhino.head.IRFactory iRFactory1 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.getWarnTrailingComma();
        compilerEnvirons3.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet8 = compilerEnvirons3.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons3.getErrorReporter();
        boolean boolean10 = compilerEnvirons3.isRecordingComments();
        compilerEnvirons3.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons13 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean14 = compilerEnvirons13.isReservedKeywordAsIdentifier();
        boolean boolean15 = compilerEnvirons13.getWarnTrailingComma();
        compilerEnvirons13.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet18 = compilerEnvirons13.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons13.getErrorReporter();
        java.lang.String[] strArray25 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        compilerEnvirons13.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        boolean boolean29 = compilerEnvirons13.isGenerateDebugInfo();
        boolean boolean30 = compilerEnvirons13.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean32 = compilerEnvirons31.isReservedKeywordAsIdentifier();
        int int33 = compilerEnvirons31.getLanguageVersion();
        int int34 = compilerEnvirons31.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons35 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean36 = compilerEnvirons35.isReservedKeywordAsIdentifier();
        compilerEnvirons35.setStrictMode(true);
        compilerEnvirons35.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons41 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean42 = compilerEnvirons41.isReservedKeywordAsIdentifier();
        boolean boolean43 = compilerEnvirons41.getWarnTrailingComma();
        compilerEnvirons41.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet46 = compilerEnvirons41.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter47 = compilerEnvirons41.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory48 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons35, errorReporter47);
        com.google.javascript.rhino.head.IRFactory iRFactory49 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons31, errorReporter47);
        com.google.javascript.rhino.head.IRFactory iRFactory50 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons13, errorReporter47);
        boolean boolean51 = compilerEnvirons13.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons52 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean53 = compilerEnvirons52.isReservedKeywordAsIdentifier();
        compilerEnvirons52.setStrictMode(true);
        int int56 = compilerEnvirons52.getOptimizationLevel();
        java.lang.String[] strArray77 = new java.lang.String[] { "-1\tSCRIPT -1 1\n", "                    ", "35\t  COMMENT 36 2\n", "typeof", "$0", "                    ", "Comment", "                    {\n                    }\n", "35\t  COMMENT 36 2\n", "                      ", "                                                                                                        ", "136", "$0", "                    {\n                    }\n", "                                                                                                        ", "{\n}\n", "ScriptNode", "                      ", "                      ", "typeof" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        compilerEnvirons52.setActivationNames((java.util.Set<java.lang.String>) strSet78);
        compilerEnvirons13.setActivationNames((java.util.Set<java.lang.String>) strSet78);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet78);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet78);
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        compilerEnvirons0.setXmlAvailable(true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(errorReporter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 170 + "'", int33 == 170);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 170 + "'", int34 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertNotNull(errorReporter47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        int int13 = scriptNode9.getRegexpCount();
        boolean boolean14 = scriptNode9.hasChildren();
        int int15 = scriptNode9.getParamCount();
        int int16 = scriptNode9.getLineno();
        scriptNode9.setBounds(1410155489, 25);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor20 = scriptNode9.iterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator22 = astRoot21.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        boolean boolean34 = comment33.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray42 = new com.google.javascript.rhino.head.ast.Comment[] { comment27, comment33, comment39 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet43 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet43, commentArray42);
        astRoot21.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet43);
        boolean boolean46 = astRoot21.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray47 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList48 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList48, symbolArray47);
        astRoot21.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList48);
        com.google.javascript.rhino.head.Node node51 = astRoot21.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot21, (com.google.javascript.rhino.head.ast.Scope) scriptNode53);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode56.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode57);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode57.getChildScopes();
        int int60 = scriptNode57.getBaseLineno();
        com.google.javascript.rhino.head.Node node61 = scriptNode57.getLastSibling();
        scriptNode57.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode64.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode65);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList67 = scriptNode65.getFunctions();
        scriptNode65.setPosition((int) (byte) 10);
        java.lang.String str70 = scriptNode57.toStringTree(scriptNode65);
        int int71 = scriptNode57.getBaseLineno();
        com.google.javascript.rhino.head.Node node73 = scriptNode57.setType((int) (byte) -1);
        java.lang.String str74 = astRoot21.toStringTree(scriptNode57);
        java.lang.String str75 = astRoot21.debugPrint();
        com.google.javascript.rhino.head.ast.Symbol symbol77 = astRoot21.getSymbol("129");
        com.google.javascript.rhino.head.Node node78 = astRoot21.target;
        scriptNode9.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot21);
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(symbolArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(functionNodeList67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str75, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertNull(symbol77);
        org.junit.Assert.assertNull(node78);
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator3.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int7 = astRoot6.getBaseLineno();
        java.lang.String str8 = astRoot6.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        int int11 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot6, (com.google.javascript.rhino.head.ast.AstNode) astRoot9);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator12 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor20 = comment17.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        comment17.setCommentType(commentType21);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator23 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator24 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator25 = positionComparator23.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator24);
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int27 = astRoot26.getBaseLineno();
        java.lang.String str28 = astRoot26.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = astRoot29.new NodeIterator();
        int int31 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot26, (com.google.javascript.rhino.head.ast.AstNode) astRoot29);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.putIntProp((int) (short) 1, 1);
        java.lang.String str36 = scriptNode32.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator38 = scope37.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        scope37.setTop(scriptNode40);
        scope37.setLineno((int) (short) -1);
        int int45 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode32, (com.google.javascript.rhino.head.ast.AstNode) scope37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str62 = scriptNode32.toStringTree(scriptNode53);
        int int63 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) comment17, (com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode67.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray74 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList75 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList75, symbolArray74);
        scriptNode73.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList75);
        scriptNode70.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList75);
        scriptNode67.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList75);
        scriptNode65.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList75);
        com.google.javascript.rhino.head.ast.Scope scope81 = scriptNode65.getParentScope();
        int int82 = scriptNode65.getFunctionCount();
        comment17.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode65);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator84 = scriptNode65.spliterator();
        int int85 = scriptNode65.depth();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str8, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(astNodeComparator25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str28, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(symbolArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(scope81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons16 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean17 = compilerEnvirons16.isReservedKeywordAsIdentifier();
        boolean boolean18 = compilerEnvirons16.isIdeMode();
        compilerEnvirons16.setRecordingLocalJsDocComments(false);
        boolean boolean21 = compilerEnvirons16.isGenerateDebugInfo();
        compilerEnvirons16.setRecordingLocalJsDocComments(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        boolean boolean26 = compilerEnvirons24.getWarnTrailingComma();
        boolean boolean27 = compilerEnvirons24.isRecordingComments();
        boolean boolean28 = compilerEnvirons24.getWarnTrailingComma();
        boolean boolean29 = compilerEnvirons24.isRecordingLocalJsDocComments();
        boolean boolean30 = compilerEnvirons24.isIdeMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray37 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        compilerEnvirons31.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons24.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons16.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        boolean boolean44 = compilerEnvirons0.reportWarningAsError();
        int int45 = compilerEnvirons0.getOptimizationLevel();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.Node node7 = scriptNode3.getLastSibling();
        int int8 = scriptNode3.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope11 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = astRoot12.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        boolean boolean25 = comment24.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType28, "");
        java.lang.String str32 = comment30.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray33 = new com.google.javascript.rhino.head.ast.Comment[] { comment18, comment24, comment30 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet34 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet34, commentArray33);
        astRoot12.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet34);
        boolean boolean37 = astRoot12.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode38 = astRoot12.getParent();
        astRoot12.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) scope11, (com.google.javascript.rhino.head.Node) astRoot12, 6);
        com.google.javascript.rhino.head.ast.AstRoot astRoot43 = astRoot12.getAstRoot();
        com.google.javascript.rhino.head.Node node44 = new com.google.javascript.rhino.head.Node((-748307395), (com.google.javascript.rhino.head.Node) astRoot12);
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                                                                                                                                                                                                        " + "'", str32, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(astNode38);
        org.junit.Assert.assertNotNull(astRoot43);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator3 = positionComparator1.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator5 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator6 = positionComparator4.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator5);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator7 = astNodeComparator3.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator8 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator9 = positionComparator4.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator10 = astNodeComparator9.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator11 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator12 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator13 = positionComparator11.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator12);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int15 = astRoot14.getBaseLineno();
        java.lang.String str16 = astRoot14.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = astRoot17.new NodeIterator();
        int int19 = positionComparator12.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot14, (com.google.javascript.rhino.head.ast.AstNode) astRoot17);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator20 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator21 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator22 = positionComparator20.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator21);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator23 = positionComparator20.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator24 = positionComparator12.thenComparing(astNodeComparator23);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator25 = astNodeComparator10.thenComparing(astNodeComparator23);
        org.junit.Assert.assertNotNull(astNodeComparator3);
        org.junit.Assert.assertNotNull(astNodeComparator6);
        org.junit.Assert.assertNotNull(astNodeComparator7);
        org.junit.Assert.assertNotNull(astNodeComparator8);
        org.junit.Assert.assertNotNull(astNodeComparator9);
        org.junit.Assert.assertNotNull(astNodeComparator10);
        org.junit.Assert.assertNotNull(astNodeComparator13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str16, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator22);
        org.junit.Assert.assertNotNull(astNodeComparator23);
        org.junit.Assert.assertNotNull(astNodeComparator24);
        org.junit.Assert.assertNotNull(astNodeComparator25);
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setIdeMode(true);
        boolean boolean5 = compilerEnvirons0.isXmlAvailable();
        java.util.Set<java.lang.String> strSet6 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons7 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray13 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        compilerEnvirons7.setActivationNames((java.util.Set<java.lang.String>) strSet14);
        com.google.javascript.rhino.head.Parser parser17 = new com.google.javascript.rhino.head.Parser(compilerEnvirons7);
        compilerEnvirons7.setRecoverFromErrors(false);
        boolean boolean20 = compilerEnvirons7.isXmlAvailable();
        compilerEnvirons7.setRecoverFromErrors(true);
        int int23 = compilerEnvirons7.getOptimizationLevel();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        boolean boolean26 = compilerEnvirons24.getWarnTrailingComma();
        compilerEnvirons24.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet29 = compilerEnvirons24.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter30 = compilerEnvirons24.getErrorReporter();
        boolean boolean31 = compilerEnvirons24.isRecordingComments();
        compilerEnvirons24.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons34 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray40 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        compilerEnvirons34.setActivationNames((java.util.Set<java.lang.String>) strSet41);
        boolean boolean44 = compilerEnvirons34.isGenerateDebugInfo();
        compilerEnvirons34.setOptimizationLevel((int) (short) 1);
        compilerEnvirons34.setAllowSharpComments(true);
        boolean boolean49 = compilerEnvirons34.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter50 = compilerEnvirons34.getErrorReporter();
        int int51 = compilerEnvirons34.getLanguageVersion();
        boolean boolean52 = compilerEnvirons34.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons53 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray59 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        compilerEnvirons53.setActivationNames((java.util.Set<java.lang.String>) strSet60);
        compilerEnvirons34.setActivationNames((java.util.Set<java.lang.String>) strSet60);
        compilerEnvirons24.setActivationNames((java.util.Set<java.lang.String>) strSet60);
        compilerEnvirons7.setActivationNames((java.util.Set<java.lang.String>) strSet60);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet60);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(compilerEnvirons7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(errorReporter30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons34);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(errorReporter50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 170 + "'", int51 == 170);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        int int3 = scriptNode0.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope scope4 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode0.setParentScope(scope4);
        com.google.javascript.rhino.head.Node node6 = scriptNode0.getNext();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment(10, (-1721493936), commentType9, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n");
        scriptNode0.addChildToFront((com.google.javascript.rhino.head.Node) comment11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = comment11.toSource((-1255639346));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.isIdeMode();
        compilerEnvirons3.setRecordingLocalJsDocComments(false);
        boolean boolean8 = compilerEnvirons3.isGenerateDebugInfo();
        compilerEnvirons3.setRecordingLocalJsDocComments(true);
        boolean boolean11 = compilerEnvirons3.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.getWarnTrailingComma();
        boolean boolean15 = compilerEnvirons12.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons12.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser17 = new com.google.javascript.rhino.head.Parser(compilerEnvirons3, errorReporter16);
        compilerEnvirons0.setErrorReporter(errorReporter16);
        boolean boolean19 = compilerEnvirons0.recoverFromErrors();
        boolean boolean20 = compilerEnvirons0.isXmlAvailable();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 481479666);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        com.google.javascript.rhino.head.Parser parser18 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean19 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setRecordingComments(true);
        boolean boolean22 = compilerEnvirons0.recoverFromErrors();
        boolean boolean23 = compilerEnvirons0.isStrictMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode4.getChildScopes();
        java.lang.Object obj11 = scriptNode4.getCompilerData();
        int int12 = scriptNode4.getType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj16 = scriptNode15.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        int int20 = scriptNode17.getEndLineno();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode15, (com.google.javascript.rhino.head.Node) scriptNode17);
        int int22 = scriptNode15.getFunctionCount();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode15);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node24 = scriptNode4.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 136 + "'", int12 == 136);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("136");
        node1.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode41 = astRoot15.getParent();
        astRoot15.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode6, (com.google.javascript.rhino.head.Node) scope14, (com.google.javascript.rhino.head.Node) astRoot15, 6);
        java.lang.String str46 = node1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot15);
        com.google.javascript.rhino.head.ast.Scope scope47 = astRoot15.getEnclosingScope();
        astRoot15.setEncodedSourceEnd((-603115504));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode51.getChildScopes();
        int int54 = scriptNode51.getBaseLineno();
        int int55 = scriptNode51.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList56 = scriptNode51.getSymbols();
        astRoot15.setSymbols(symbolList56);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor58 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot15.visitComments(nodeVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(astNode41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(scope47);
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(symbolList56);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        astRoot0.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        scriptNode9.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        int int17 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = scriptNode14.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        java.lang.String str24 = scriptNode20.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode14.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode20, (com.google.javascript.rhino.head.Node) scriptNode26);
        int int28 = scriptNode20.getType();
        scriptNode9.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        int int30 = scriptNode20.getParamCount();
        com.google.javascript.rhino.head.Node node31 = scriptNode20.getLastSibling();
        astRoot0.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode20);
        java.lang.String str33 = scriptNode20.getSourceName();
        java.lang.Object obj35 = scriptNode20.getProp((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node36 = scriptNode20.getFinally();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 136 + "'", int28 == 136);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(obj35);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray30 = new com.google.javascript.rhino.head.ast.Comment[] { comment15, comment21, comment27 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet31, commentArray30);
        astRoot9.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet31);
        boolean boolean34 = astRoot9.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray35 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList36 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList36, symbolArray35);
        astRoot9.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList36);
        com.google.javascript.rhino.head.Node node39 = astRoot9.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot9, (com.google.javascript.rhino.head.ast.Scope) scriptNode41);
        int int44 = astRoot9.depth();
        com.google.javascript.rhino.head.ast.Comment comment45 = astRoot9.getJsDocNode();
        astRoot5.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot9);
        astRoot5.checkParentLinks();
        int int48 = astRoot5.depth();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = astRoot5.getExistingIntProp(1936891202);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(symbolArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(comment45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope13);
        scriptNode8.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        int int22 = scriptNode19.getBaseLineno();
        com.google.javascript.rhino.head.Node node23 = scriptNode19.getLastSibling();
        int int24 = scriptNode19.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope27 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = astRoot28.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        java.lang.String str48 = comment46.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray49 = new com.google.javascript.rhino.head.ast.Comment[] { comment34, comment40, comment46 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet50 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet50, commentArray49);
        astRoot28.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet50);
        boolean boolean53 = astRoot28.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode54 = astRoot28.getParent();
        astRoot28.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scope27, (com.google.javascript.rhino.head.Node) astRoot28, 6);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) astRoot28);
        com.google.javascript.rhino.head.Token.CommentType commentType62 = null;
        com.google.javascript.rhino.head.ast.Comment comment64 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType62, "");
        boolean boolean65 = comment64.hasSideEffects();
        int int66 = comment64.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType67 = comment64.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode68.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode69);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList71 = scriptNode69.getChildScopes();
        int int72 = scriptNode69.getBaseLineno();
        int int73 = scriptNode69.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode74.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode75);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList77 = scriptNode75.getFunctions();
        scriptNode75.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope80 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode69.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode75, (com.google.javascript.rhino.head.Node) scope80);
        scriptNode75.setEncodedSourceEnd(18);
        comment64.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode75);
        com.google.javascript.rhino.head.ast.AstRoot astRoot85 = scriptNode75.getAstRoot();
        int int86 = scriptNode75.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = scriptNode75.getTop();
        astRoot28.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = scriptNode75.getRegexpFlags(52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "                                                                                                                                                                                                        " + "'", str48, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(astNode54);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNull(commentType67);
        org.junit.Assert.assertNull(scopeList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(functionNodeList77);
        org.junit.Assert.assertNull(astRoot85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 18 + "'", int86 == 18);
        org.junit.Assert.assertNotNull(scriptNode87);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean1 = astRoot0.hasSideEffects();
        int int2 = astRoot0.getEncodedSourceEnd();
        int int3 = astRoot0.getPosition();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = astRoot0.getSymbols();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(symbolList4);
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = compilerEnvirons0.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser11 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        java.io.Reader reader12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot15 = parser11.parse(reader12, "                                                                hi!", 1337018329);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(errorReporter10);
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.reportWarningAsError();
        java.util.Set<java.lang.String> strSet4 = compilerEnvirons0.getActivationNames();
        boolean boolean5 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        boolean boolean8 = compilerEnvirons6.getWarnTrailingComma();
        compilerEnvirons6.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet11 = compilerEnvirons6.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter12 = compilerEnvirons6.getErrorReporter();
        java.lang.String[] strArray18 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        compilerEnvirons6.setActivationNames((java.util.Set<java.lang.String>) strSet19);
        boolean boolean22 = compilerEnvirons6.isGenerateDebugInfo();
        boolean boolean23 = compilerEnvirons6.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        int int26 = compilerEnvirons24.getLanguageVersion();
        int int27 = compilerEnvirons24.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        compilerEnvirons28.setStrictMode(true);
        compilerEnvirons28.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons34 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean35 = compilerEnvirons34.isReservedKeywordAsIdentifier();
        boolean boolean36 = compilerEnvirons34.getWarnTrailingComma();
        compilerEnvirons34.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet39 = compilerEnvirons34.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter40 = compilerEnvirons34.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory41 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons28, errorReporter40);
        com.google.javascript.rhino.head.IRFactory iRFactory42 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter40);
        com.google.javascript.rhino.head.IRFactory iRFactory43 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6, errorReporter40);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons44 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray50 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        compilerEnvirons44.setActivationNames((java.util.Set<java.lang.String>) strSet51);
        boolean boolean54 = compilerEnvirons44.isGenerateDebugInfo();
        compilerEnvirons44.setOptimizationLevel((int) (short) 1);
        compilerEnvirons44.setAllowSharpComments(true);
        boolean boolean59 = compilerEnvirons44.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter60 = compilerEnvirons44.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser61 = new com.google.javascript.rhino.head.Parser(compilerEnvirons6, errorReporter60);
        com.google.javascript.rhino.head.IRFactory iRFactory62 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter60);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode64.getChildScopes();
        int int67 = scriptNode64.getBaseLineno();
        com.google.javascript.rhino.head.Node node68 = scriptNode64.getLastSibling();
        int int69 = scriptNode64.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode71.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot74 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator75 = astRoot74.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor76 = astRoot74.iterator();
        scriptNode71.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot74);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor78 = null;
        astRoot74.visitComments(nodeVisitor78);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str82 = scriptNode80.toSource((int) '4');
        com.google.javascript.rhino.head.Node node83 = scriptNode80.getFirstChild();
        astRoot74.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode80);
        scriptNode64.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot74);
        com.google.javascript.rhino.head.Node node86 = iRFactory62.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        int int89 = node86.getIntProp((int) (byte) -1, 18);
        com.google.javascript.rhino.head.Node node91 = node86.setType(1748151865);
        // The following exception was thrown during execution in test generation
        try {
            node91.labelId((-1343149577));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(errorReporter12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 170 + "'", int26 == 170);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 170 + "'", int27 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(errorReporter40);
        org.junit.Assert.assertNotNull(compilerEnvirons44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(errorReporter60);
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(nodeItor76);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str82, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 18 + "'", int89 == 18);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        astRoot0.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.lang.String str20 = comment17.getValue();
        scriptNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) comment17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        com.google.javascript.rhino.head.Node node52 = astRoot22.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot22, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) comment17, (com.google.javascript.rhino.head.Node) scriptNode54);
        astRoot0.addComment(comment17);
        com.google.javascript.rhino.head.Node node59 = astRoot0.getLastSibling();
        astRoot0.setPosition(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode(24);
        astRoot0.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode63);
        java.lang.Object obj66 = scriptNode63.getProp((-270991973));
        int int67 = scriptNode63.getRegexpCount();
        int int68 = scriptNode63.getEncodedSourceStart();
        java.lang.String str69 = scriptNode63.getSourceName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode71 = scriptNode63.getFunctionNode((-856448165));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        boolean boolean38 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons39 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean40 = compilerEnvirons39.isReservedKeywordAsIdentifier();
        compilerEnvirons39.setStrictMode(true);
        int int43 = compilerEnvirons39.getOptimizationLevel();
        java.lang.String[] strArray64 = new java.lang.String[] { "-1\tSCRIPT -1 1\n", "                    ", "35\t  COMMENT 36 2\n", "typeof", "$0", "                    ", "Comment", "                    {\n                    }\n", "35\t  COMMENT 36 2\n", "                      ", "                                                                                                        ", "136", "$0", "                    {\n                    }\n", "                                                                                                        ", "{\n}\n", "ScriptNode", "                      ", "                      ", "typeof" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        compilerEnvirons39.setActivationNames((java.util.Set<java.lang.String>) strSet65);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet65);
        com.google.javascript.rhino.head.IRFactory iRFactory69 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.Node node8 = comment4.setType(18);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = node8.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node10 = nodeItor9.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(nodeItor9);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        scriptNode0.setEncodedSource("typeof");
        java.lang.Object obj7 = scriptNode0.getProp(2);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList8 = scriptNode0.getStatements();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory11 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons9, errorReporter10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode13.getFunctions();
        scriptNode13.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node18 = iRFactory11.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode13.getChildScopes();
        scriptNode0.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = scriptNode13.getTop();
        com.google.javascript.rhino.head.Node node23 = com.google.javascript.rhino.head.Node.newString("136");
        node23.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode28.getChildScopes();
        int int31 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node32 = scriptNode28.getLastSibling();
        int int33 = scriptNode28.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope36 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot37 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator38 = astRoot37.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        boolean boolean44 = comment43.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        boolean boolean50 = comment49.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType53 = null;
        com.google.javascript.rhino.head.ast.Comment comment55 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType53, "");
        java.lang.String str57 = comment55.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray58 = new com.google.javascript.rhino.head.ast.Comment[] { comment43, comment49, comment55 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet59 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet59, commentArray58);
        astRoot37.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet59);
        boolean boolean62 = astRoot37.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode63 = astRoot37.getParent();
        astRoot37.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode28, (com.google.javascript.rhino.head.Node) scope36, (com.google.javascript.rhino.head.Node) astRoot37, 6);
        java.lang.String str68 = node23.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot37);
        com.google.javascript.rhino.head.ast.Scope scope69 = astRoot37.getEnclosingScope();
        astRoot37.setEncodedSourceEnd((-603115504));
        scriptNode21.addChildToBack((com.google.javascript.rhino.head.Node) astRoot37);
        scriptNode21.setLineno(5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(astNodeList8);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertNotNull(scriptNode21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "                                                                                                                                                                                                        " + "'", str57, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(astNode63);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(scope69);
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scope1.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        scope1.setTop(scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scope1.iterator();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scope1.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = scriptNode10.spliterator();
        com.google.javascript.rhino.head.Node node13 = scriptNode10.setType((int) '#');
        int int14 = scriptNode10.getLineno();
        boolean boolean15 = scriptNode10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator17 = scriptNode16.spliterator();
        com.google.javascript.rhino.head.Node node19 = scriptNode16.setType((int) '#');
        java.lang.Object obj20 = scriptNode16.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol22 = scriptNode16.getSymbol("typeof");
        scriptNode16.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet26 = astRoot25.getComments();
        int int27 = astRoot25.getEndLineno();
        com.google.javascript.rhino.head.Node node29 = astRoot25.setType((int) (short) 10);
        astRoot25.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator37 = scriptNode36.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        java.lang.String str44 = comment42.toSource(100);
        java.lang.String str45 = comment42.getValue();
        scriptNode36.setParent((com.google.javascript.rhino.head.ast.AstNode) comment42);
        com.google.javascript.rhino.head.ast.AstRoot astRoot47 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator48 = astRoot47.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = null;
        com.google.javascript.rhino.head.ast.Comment comment53 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType51, "");
        boolean boolean54 = comment53.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType57 = null;
        com.google.javascript.rhino.head.ast.Comment comment59 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType57, "");
        boolean boolean60 = comment59.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType63 = null;
        com.google.javascript.rhino.head.ast.Comment comment65 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType63, "");
        java.lang.String str67 = comment65.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray68 = new com.google.javascript.rhino.head.ast.Comment[] { comment53, comment59, comment65 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet69 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet69, commentArray68);
        astRoot47.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet69);
        boolean boolean72 = astRoot47.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray73 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList74 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList74, symbolArray73);
        astRoot47.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList74);
        com.google.javascript.rhino.head.Node node77 = astRoot47.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode79);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot47, (com.google.javascript.rhino.head.ast.Scope) scriptNode79);
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode35, (com.google.javascript.rhino.head.Node) comment42, (com.google.javascript.rhino.head.Node) scriptNode79);
        astRoot25.addComment(comment42);
        com.google.javascript.rhino.head.Node node84 = astRoot25.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator85 = node84.spliterator();
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node(21, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scriptNode16, node84, (int) (byte) 10);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList88 = scriptNode10.getSymbols();
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node(5, (com.google.javascript.rhino.head.Node) scope1, (com.google.javascript.rhino.head.Node) scriptNode10, (int) (byte) 10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList91 = scriptNode10.getChildScopes();
        com.google.javascript.rhino.head.Node node92 = scriptNode10.target;
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator17);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(symbol22);
        org.junit.Assert.assertNull(commentSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeSpliterator37);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "                                                                                                                                                                                                        " + "'", str44, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "                                                                                                                                                                                                        " + "'", str67, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(symbolArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(nodeSpliterator85);
        org.junit.Assert.assertNotNull(symbolList88);
        org.junit.Assert.assertNull(scopeList91);
        org.junit.Assert.assertNull(node92);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Node node4 = scriptNode1.setType((int) '#');
        int int5 = scriptNode1.getLineno();
        boolean boolean6 = scriptNode1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = scriptNode7.spliterator();
        com.google.javascript.rhino.head.Node node10 = scriptNode7.setType((int) '#');
        java.lang.Object obj11 = scriptNode7.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol13 = scriptNode7.getSymbol("typeof");
        scriptNode7.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet17 = astRoot16.getComments();
        int int18 = astRoot16.getEndLineno();
        com.google.javascript.rhino.head.Node node20 = astRoot16.setType((int) (short) 10);
        astRoot16.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator28 = scriptNode27.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        java.lang.String str36 = comment33.getValue();
        scriptNode27.setParent((com.google.javascript.rhino.head.ast.AstNode) comment33);
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator39 = astRoot38.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        java.lang.String str58 = comment56.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray59 = new com.google.javascript.rhino.head.ast.Comment[] { comment44, comment50, comment56 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet60 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet60, commentArray59);
        astRoot38.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet60);
        boolean boolean63 = astRoot38.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray64 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList65 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList65, symbolArray64);
        astRoot38.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList65);
        com.google.javascript.rhino.head.Node node68 = astRoot38.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode69.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode70);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot38, (com.google.javascript.rhino.head.ast.Scope) scriptNode70);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode26, (com.google.javascript.rhino.head.Node) comment33, (com.google.javascript.rhino.head.Node) scriptNode70);
        astRoot16.addComment(comment33);
        com.google.javascript.rhino.head.Node node75 = astRoot16.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator76 = node75.spliterator();
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(21, (com.google.javascript.rhino.head.Node) scriptNode1, (com.google.javascript.rhino.head.Node) scriptNode7, node75, (int) (byte) 10);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons79 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter80 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory81 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons79, errorReporter80);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode83 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode82.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode83);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList85 = scriptNode83.getFunctions();
        scriptNode83.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node88 = iRFactory81.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode83);
        java.lang.String str89 = scriptNode83.getSourceName();
        int int90 = scriptNode83.getRegexpCount();
        java.lang.Object obj91 = scriptNode83.getCompilerData();
        scriptNode7.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode83);
        java.lang.String str93 = scriptNode83.debugPrint();
        int int94 = scriptNode83.getFunctionCount();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList95 = scriptNode83.getFunctions();
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(symbol13);
        org.junit.Assert.assertNull(commentSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "                                                                                                                                                                                                        " + "'", str58, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(symbolArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeSpliterator76);
        org.junit.Assert.assertNotNull(functionNodeList85);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "9\t  SCRIPT 10 1\n" + "'", str93, "9\t  SCRIPT 10 1\n");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(functionNodeList95);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(3, (-202912574));
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        com.google.javascript.rhino.head.Node node21 = scriptNode17.target;
        int int22 = scriptNode17.getLineno();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean24 = compilerEnvirons23.isReservedKeywordAsIdentifier();
        boolean boolean25 = compilerEnvirons23.getWarnTrailingComma();
        compilerEnvirons23.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet28 = compilerEnvirons23.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter29 = compilerEnvirons23.getErrorReporter();
        java.lang.String[] strArray35 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        compilerEnvirons23.setActivationNames((java.util.Set<java.lang.String>) strSet36);
        boolean boolean39 = compilerEnvirons23.isGenerateDebugInfo();
        boolean boolean40 = compilerEnvirons23.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons41 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean42 = compilerEnvirons41.isReservedKeywordAsIdentifier();
        int int43 = compilerEnvirons41.getLanguageVersion();
        int int44 = compilerEnvirons41.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons45 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean46 = compilerEnvirons45.isReservedKeywordAsIdentifier();
        compilerEnvirons45.setStrictMode(true);
        compilerEnvirons45.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons51 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean52 = compilerEnvirons51.isReservedKeywordAsIdentifier();
        boolean boolean53 = compilerEnvirons51.getWarnTrailingComma();
        compilerEnvirons51.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet56 = compilerEnvirons51.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter57 = compilerEnvirons51.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory58 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons45, errorReporter57);
        com.google.javascript.rhino.head.IRFactory iRFactory59 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons41, errorReporter57);
        com.google.javascript.rhino.head.IRFactory iRFactory60 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter57);
        com.google.javascript.rhino.head.ast.AstRoot astRoot64 = iRFactory60.parse("0\tSCRIPT 0 1\n", "                                ", 13);
        astRoot64.setPosition(0);
        java.lang.String str68 = astRoot64.toSource(1);
        scriptNode17.addChildToFront((com.google.javascript.rhino.head.Node) astRoot64);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor70 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot64.visitAll(nodeVisitor70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(compilerEnvirons23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(errorReporter29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 170 + "'", int43 == 170);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 170 + "'", int44 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(errorReporter57);
        org.junit.Assert.assertNotNull(astRoot64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "  0;\n  SCRIPT;\n  0;\n  1;\n" + "'", str68, "  0;\n  SCRIPT;\n  0;\n  1;\n");
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        int int15 = scriptNode13.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = astRoot16.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType20, "");
        boolean boolean23 = comment22.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        java.lang.String str36 = comment34.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray37 = new com.google.javascript.rhino.head.ast.Comment[] { comment22, comment28, comment34 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet38 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet38, commentArray37);
        astRoot16.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet38);
        boolean boolean41 = astRoot16.isInStrictMode();
        int int42 = astRoot16.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot43 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean44 = astRoot43.hasSideEffects();
        astRoot16.target = astRoot43;
        astRoot43.setBaseLineno(65536);
        com.google.javascript.rhino.head.ast.AstRoot astRoot48 = astRoot43.getAstRoot();
        com.google.javascript.rhino.head.ast.AstRoot astRoot49 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int50 = astRoot49.getParamCount();
        java.lang.String str51 = astRoot49.getJsDoc();
        java.lang.String str52 = astRoot49.getNextTempName();
        com.google.javascript.rhino.head.ast.Symbol symbol54 = astRoot49.getSymbol("                          ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot55 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int56 = astRoot55.getParamCount();
        java.lang.String str57 = astRoot55.getJsDoc();
        java.lang.String str58 = astRoot55.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = astRoot55.getTop();
        boolean boolean60 = astRoot55.isInStrictMode();
        int int61 = astRoot55.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment62 = astRoot55.getJsDocNode();
        java.lang.String str63 = astRoot55.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot49, (com.google.javascript.rhino.head.ast.Scope) astRoot55);
        astRoot43.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot55);
        // The following exception was thrown during execution in test generation
        try {
            scriptNode13.setFinally((com.google.javascript.rhino.head.Node) astRoot43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "                                                                                                                                                                                                        " + "'", str36, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(astRoot48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "$0" + "'", str52, "$0");
        org.junit.Assert.assertNull(symbol54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "$0" + "'", str58, "$0");
        org.junit.Assert.assertNotNull(scriptNode59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(comment62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str63, "-1\tSCRIPT -1 1\n");
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        int int4 = compilerEnvirons0.getOptimizationLevel();
        java.lang.String[] strArray25 = new java.lang.String[] { "-1\tSCRIPT -1 1\n", "                    ", "35\t  COMMENT 36 2\n", "typeof", "$0", "                    ", "Comment", "                    {\n                    }\n", "35\t  COMMENT 36 2\n", "                      ", "                                                                                                        ", "136", "$0", "                    {\n                    }\n", "                                                                                                        ", "{\n}\n", "ScriptNode", "                      ", "                      ", "typeof" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        boolean boolean29 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setIdeMode(true);
        boolean boolean32 = compilerEnvirons0.isXmlAvailable();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        int int12 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean13 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean14 = compilerEnvirons0.isRecordingComments();
        boolean boolean15 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setGeneratingSource(true);
        compilerEnvirons0.setRecordingComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter20 = compilerEnvirons0.getErrorReporter();
        // The following exception was thrown during execution in test generation
        try {
            errorReporter20.warning("Comment", "-1\tSCRIPT -1 1\n", (int) (short) -1, "10\tBLOCK 10 9\n", (-3137945));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter20);
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = parser10.parse("<=", "10\tBLOCK 10 9\n", 327994914);
        com.google.javascript.rhino.head.ast.Scope scope16 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator17 = scope16.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        scope16.setTop(scriptNode19);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor22 = scope16.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        int int29 = comment27.getLineno();
        com.google.javascript.rhino.head.Node node31 = comment27.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        int int38 = comment36.getLineno();
        com.google.javascript.rhino.head.Node node40 = comment36.setType(18);
        comment36.removeChildren();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope16, (com.google.javascript.rhino.head.Node) comment27, (com.google.javascript.rhino.head.Node) comment36, 15);
        astRoot14.setJsDocNode(comment36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        java.lang.String str50 = scriptNode46.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode52.setEncodedSourceEnd(11);
        int int56 = scriptNode46.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        comment36.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode46);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump58 = scriptNode46.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(astRoot14);
        org.junit.Assert.assertNotNull(nodeSpliterator17);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1836645525) + "'", int56 == (-1836645525));
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        compilerEnvirons6.setStrictMode(true);
        compilerEnvirons6.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        compilerEnvirons12.setStrictMode(true);
        compilerEnvirons12.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        boolean boolean20 = compilerEnvirons18.getWarnTrailingComma();
        compilerEnvirons18.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet23 = compilerEnvirons18.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter24 = compilerEnvirons18.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons12, errorReporter24);
        com.google.javascript.rhino.head.IRFactory iRFactory26 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6, errorReporter24);
        com.google.javascript.rhino.head.Parser parser27 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter24);
        boolean boolean28 = compilerEnvirons0.isGenerateObserverCount();
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setOptimizationLevel(1617059566);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Optimization level outside [-1..9]: 1617059566");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(strSet23);
        org.junit.Assert.assertNotNull(errorReporter24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        java.lang.String str13 = scriptNode9.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        scriptNode15.setEncodedSourceEnd(11);
        int int19 = scriptNode9.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        scriptNode1.putProp(8, (java.lang.Object) scriptNode15);
        scriptNode1.setEndLineno(14);
        java.lang.String str23 = scriptNode1.toSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList27 = scriptNode25.getChildScopes();
        int int28 = scriptNode25.getBaseLineno();
        com.google.javascript.rhino.head.Node node29 = scriptNode25.getLastSibling();
        int int30 = scriptNode25.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = scriptNode25.new NodeIterator();
        int int32 = scriptNode25.getLineno();
        scriptNode25.setEncodedSourceEnd((int) (byte) -1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap35 = scriptNode25.getSymbolTable();
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str39 = scriptNode37.toSource((int) '4');
        com.google.javascript.rhino.head.Node node40 = scriptNode37.getFirstChild();
        java.lang.Object obj42 = scriptNode37.getProp(18);
        boolean boolean43 = scriptNode37.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet45 = astRoot44.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol47 = astRoot44.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType50, "hi!");
        astRoot44.addChildrenToFront((com.google.javascript.rhino.head.Node) comment52);
        astRoot44.setInStrictMode(true);
        java.lang.String str56 = scriptNode37.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot44);
        com.google.javascript.rhino.head.Node node57 = astRoot44.getLastChild();
        scriptNode1.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot44);
        com.google.javascript.rhino.head.ast.Scope scope59 = scriptNode1.getEnclosingScope();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 253506622 + "'", int19 == 253506622);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n}\n" + "'", str23, "{\n}\n");
        org.junit.Assert.assertNull(scopeList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(strMap35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str39, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(commentSet45);
        org.junit.Assert.assertNull(symbol47);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(scope59);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.lang.String str49 = astRoot0.toSource(15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode51.getChildScopes();
        int int54 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.Node node55 = scriptNode51.getLastSibling();
        int int56 = scriptNode51.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode57.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode58);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList60 = scriptNode58.getChildScopes();
        int int61 = scriptNode58.getBaseLineno();
        int int62 = scriptNode58.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList66 = scriptNode64.getFunctions();
        scriptNode64.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope69 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode58.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode64, (com.google.javascript.rhino.head.Node) scope69);
        scriptNode51.setTop(scriptNode58);
        int int72 = astRoot0.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = scriptNode51.getRegexpFlags((-476424842));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(scopeList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(functionNodeList66);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-756405993) + "'", int72 == (-756405993));
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setRecoverFromErrors(false);
        boolean boolean13 = compilerEnvirons0.isXmlAvailable();
        compilerEnvirons0.setRecoverFromErrors(true);
        boolean boolean16 = compilerEnvirons0.reportWarningAsError();
        boolean boolean17 = compilerEnvirons0.isStrictMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean6 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setXmlAvailable(false);
        boolean boolean9 = compilerEnvirons0.isStrictMode();
        compilerEnvirons0.setWarnTrailingComma(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode32.getFunctions();
        scriptNode32.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scope37);
        scriptNode32.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node41 = iRFactory24.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode32.setTop(scriptNode52);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode32, 10);
        scriptNode32.setBaseLineno(100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray67 = scriptNode32.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot((-253374738));
        java.lang.String str2 = astRoot1.debugPrint();
        com.google.javascript.rhino.head.ast.Symbol symbol4 = astRoot1.getSymbol("                                                    hi!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-253374738\tSCRIPT -253374738 1\n" + "'", str2, "-253374738\tSCRIPT -253374738 1\n");
        org.junit.Assert.assertNull(symbol4);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '4', (int) (byte) 1, commentType2, "                                                                                                                                                                                                  ");
        java.lang.String str6 = comment4.toSource(25);
        com.google.javascript.rhino.head.ast.Comment comment7 = comment4.getJsDocNode();
        java.lang.String str8 = comment4.getValue();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment4.visit(nodeVisitor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                                                                                                                                                                                                                                                    " + "'", str6, "                                                                                                                                                                                                                                                    ");
        org.junit.Assert.assertNull(comment7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "                                                                                                                                                                                                  " + "'", str8, "                                                                                                                                                                                                  ");
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        boolean boolean18 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray25 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        compilerEnvirons19.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.head.IRFactory iRFactory30 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot31 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean32 = astRoot31.hasSideEffects();
        int int33 = astRoot31.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet35 = astRoot34.getComments();
        int int36 = astRoot34.getEndLineno();
        com.google.javascript.rhino.head.Node node38 = astRoot34.setType((int) (short) 10);
        astRoot34.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator46 = scriptNode45.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType49 = null;
        com.google.javascript.rhino.head.ast.Comment comment51 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType49, "");
        java.lang.String str53 = comment51.toSource(100);
        java.lang.String str54 = comment51.getValue();
        scriptNode45.setParent((com.google.javascript.rhino.head.ast.AstNode) comment51);
        com.google.javascript.rhino.head.ast.AstRoot astRoot56 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator57 = astRoot56.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        boolean boolean63 = comment62.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType66 = null;
        com.google.javascript.rhino.head.ast.Comment comment68 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType66, "");
        boolean boolean69 = comment68.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType72 = null;
        com.google.javascript.rhino.head.ast.Comment comment74 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType72, "");
        java.lang.String str76 = comment74.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray77 = new com.google.javascript.rhino.head.ast.Comment[] { comment62, comment68, comment74 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet78 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet78, commentArray77);
        astRoot56.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet78);
        boolean boolean81 = astRoot56.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray82 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList83 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList83, symbolArray82);
        astRoot56.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList83);
        com.google.javascript.rhino.head.Node node86 = astRoot56.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode88 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode87.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode88);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot56, (com.google.javascript.rhino.head.ast.Scope) scriptNode88);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode44, (com.google.javascript.rhino.head.Node) comment51, (com.google.javascript.rhino.head.Node) scriptNode88);
        astRoot34.addComment(comment51);
        int int93 = astRoot31.compareTo((com.google.javascript.rhino.head.ast.AstNode) comment51);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor94 = null;
        astRoot31.visitComments(nodeVisitor94);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode96 = iRFactory30.transformTree(astRoot31);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = iRFactory30.eof();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(commentSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeSpliterator46);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "                                                                                                                                                                                                        " + "'", str53, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "                                                                                                                                                                                                        " + "'", str76, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(symbolArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(scriptNode96);
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = scriptNode0.new NodeIterator();
        int int3 = scriptNode0.getBaseLineno();
        java.lang.String str4 = scriptNode0.shortName();
        int int5 = scriptNode0.getFunctionCount();
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ScriptNode" + "'", str4, "ScriptNode");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        java.lang.String str52 = comment50.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray53 = new com.google.javascript.rhino.head.ast.Comment[] { comment38, comment44, comment50 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet54, commentArray53);
        astRoot32.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet54);
        boolean boolean57 = astRoot32.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray58 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList59 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList59, symbolArray58);
        astRoot32.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList59);
        com.google.javascript.rhino.head.Node node62 = astRoot32.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot32, (com.google.javascript.rhino.head.ast.Scope) scriptNode64);
        com.google.javascript.rhino.head.ast.AstRoot astRoot67 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = astRoot67.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor69 = astRoot67.iterator();
        astRoot67.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) astRoot32, (com.google.javascript.rhino.head.Node) astRoot67, (int) (byte) 0);
        astRoot32.setInStrictMode(false);
        astRoot32.setSourceName("                                                                                                        {\n                                                                                                        }\n");
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList78 = astRoot32.getStatements();
        astRoot32.removeProp(298081840);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                                                                                                                                                                        " + "'", str52, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(symbolArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(nodeItor69);
        org.junit.Assert.assertNotNull(astNodeList78);
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(3, (-1721493936), commentType2, ">>>");
        int int5 = comment4.getLineno();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType28, "hi!");
        astRoot0.addComment(comment30);
        astRoot0.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet35 = astRoot34.getComments();
        int int36 = astRoot34.getEndLineno();
        com.google.javascript.rhino.head.Node node38 = astRoot34.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) astRoot34);
        astRoot34.clearParentScope();
        boolean boolean41 = astRoot34.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode42.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode43);
        scriptNode43.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap49 = scriptNode48.getSymbolTable();
        scriptNode43.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode48);
        int int51 = scriptNode48.getParamCount();
        int int52 = scriptNode48.getBaseLineno();
        astRoot34.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode48);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray54 = astRoot34.getParamAndVarConst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(commentSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(strMap49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        astRoot0.setEncodedSourceBounds(14, 15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray45 = astRoot0.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        scriptNode0.setRelative((int) (byte) 100);
        int int4 = scriptNode0.getRegexpCount();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList5 = scriptNode0.getFunctions();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str10 = scriptNode7.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        int int17 = scriptNode12.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = scriptNode12.new NodeIterator();
        int int19 = scriptNode12.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot20 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = astRoot20.new NodeIterator();
        scriptNode12.setCompilerData((java.lang.Object) nodeIterator21);
        int int23 = scriptNode7.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        scriptNode12.setLineno(20);
        com.google.javascript.rhino.head.Node node26 = scriptNode12.getLastSibling();
        java.lang.String str28 = scriptNode12.makeIndent((-1721493936));
        scriptNode12.setEncodedSourceStart((-1171321573));
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode0, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = scriptNode12.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(functionNodeList5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-859043345) + "'", int23 == (-859043345));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = scriptNode1.new NodeIterator();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        java.lang.String str26 = comment24.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray27 = new com.google.javascript.rhino.head.ast.Comment[] { comment12, comment18, comment24 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet28 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet28, commentArray27);
        astRoot6.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet28);
        boolean boolean31 = astRoot6.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray32 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList33 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList33, symbolArray32);
        astRoot6.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList33);
        int int36 = astRoot6.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator38 = scriptNode37.spliterator();
        com.google.javascript.rhino.head.Node node40 = scriptNode37.setType((int) '#');
        java.lang.Object obj41 = scriptNode37.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator42 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator43 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator44 = positionComparator42.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode46.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot49 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator50 = astRoot49.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor51 = astRoot49.iterator();
        scriptNode46.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot49);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList56 = scriptNode54.getChildScopes();
        int int57 = positionComparator43.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot49, (com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot6, (com.google.javascript.rhino.head.Node) scriptNode37, (com.google.javascript.rhino.head.Node) scriptNode54);
        java.lang.String str59 = scriptNode37.toString();
        int int60 = scriptNode37.getParamCount();
        scriptNode1.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList65 = scriptNode63.getChildScopes();
        int int66 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.Node node67 = scriptNode63.getLastSibling();
        java.lang.String str69 = scriptNode63.toSource((int) (short) -1);
        int int70 = scriptNode63.getLength();
        boolean boolean71 = scriptNode63.hasChildren();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(933351434, (com.google.javascript.rhino.head.Node) scriptNode1, (com.google.javascript.rhino.head.Node) scriptNode63);
        int int73 = scriptNode63.getEncodedSourceStart();
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                                                                                                                                                                        " + "'", str26, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(symbolArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(astNodeComparator44);
        org.junit.Assert.assertNotNull(nodeItor51);
        org.junit.Assert.assertNull(scopeList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "35" + "'", str59, "35");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(scopeList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{\n}\n" + "'", str69, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) 842975161);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean4 = compilerEnvirons0.isRecordingComments();
        boolean boolean5 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGeneratingSource(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.Parser parser3 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean4 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        scriptNode1.setBaseLineno(4);
        int int9 = scriptNode1.getRegexpCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str12 = scriptNode10.toSource((int) '4');
        com.google.javascript.rhino.head.Node node13 = scriptNode10.getFirstChild();
        java.lang.Object obj15 = scriptNode10.getProp(18);
        boolean boolean16 = scriptNode10.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment17 = scriptNode10.getJsDocNode();
        scriptNode10.setPosition((int) ' ');
        scriptNode10.setEncodedSourceStart(8);
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        com.google.javascript.rhino.head.Token.CommentType commentType28 = comment27.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode30.getChildScopes();
        int int33 = scriptNode30.getBaseLineno();
        int int34 = scriptNode30.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList38 = scriptNode36.getFunctions();
        scriptNode36.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope41 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode30.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode36, (com.google.javascript.rhino.head.Node) scope41);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList46 = scriptNode44.getChildScopes();
        int int47 = scriptNode44.getBaseLineno();
        com.google.javascript.rhino.head.Node node48 = scriptNode44.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot49 = scriptNode44.getAstRoot();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode30, (com.google.javascript.rhino.head.ast.Scope) scriptNode44);
        comment27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(15, (com.google.javascript.rhino.head.Node) scriptNode30);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList56 = scriptNode54.getFunctions();
        scriptNode54.setPosition((int) (byte) 10);
        int int59 = scriptNode54.getEncodedSourceEnd();
        java.lang.String str60 = scriptNode30.toStringTree(scriptNode54);
        int int61 = scriptNode54.getBaseLineno();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scriptNode54);
        int int65 = scriptNode10.getIntProp((-1020608546), 1499437464);
        int int66 = scriptNode10.getAbsolutePosition();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str12, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(comment17);
        org.junit.Assert.assertNull(commentType28);
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(functionNodeList38);
        org.junit.Assert.assertNull(scopeList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(astRoot49);
        org.junit.Assert.assertNotNull(functionNodeList56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1499437464 + "'", int65 == 1499437464);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 32 + "'", int66 == 32);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        int int12 = scriptNode9.getBaseLineno();
        int int13 = scriptNode9.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList17 = scriptNode15.getFunctions();
        scriptNode15.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode9.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode15, (com.google.javascript.rhino.head.Node) scope20);
        scriptNode15.setEncodedSourceEnd(18);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        scriptNode26.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap32 = scriptNode31.getSymbolTable();
        scriptNode26.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode31);
        com.google.javascript.rhino.head.ast.Scope scope34 = scriptNode26.getParentScope();
        boolean boolean35 = scriptNode26.hasChildren();
        com.google.javascript.rhino.head.ast.AstRoot astRoot37 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet38 = astRoot37.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol40 = astRoot37.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType43 = null;
        com.google.javascript.rhino.head.ast.Comment comment45 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType43, "hi!");
        astRoot37.addChildrenToFront((com.google.javascript.rhino.head.Node) comment45);
        boolean boolean47 = astRoot37.hasSideEffects();
        boolean boolean48 = astRoot37.isInStrictMode();
        boolean boolean49 = astRoot37.isInStrictMode();
        scriptNode26.putProp((int) '#', (java.lang.Object) astRoot37);
        scriptNode15.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode26);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node52 = scriptNode15.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(commentType7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(functionNodeList17);
        org.junit.Assert.assertNull(strMap32);
        org.junit.Assert.assertNull(scope34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(commentSet38);
        org.junit.Assert.assertNull(symbol40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean8 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setAllowSharpComments(true);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setLanguageVersion(104131204);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad language version: 104131204");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj2 = scriptNode1.getCompilerData();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = scriptNode1.new NodeIterator();
        boolean boolean4 = nodeIterator3.hasNext();
        boolean boolean5 = nodeIterator3.hasNext();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        int int36 = scriptNode33.getBaseLineno();
        com.google.javascript.rhino.head.Node node37 = scriptNode33.getLastSibling();
        scriptNode33.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList43 = scriptNode41.getFunctions();
        scriptNode41.setPosition((int) (byte) 10);
        java.lang.String str46 = scriptNode33.toStringTree(scriptNode41);
        int int47 = scriptNode33.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot1, (com.google.javascript.rhino.head.ast.Scope) scriptNode33);
        java.lang.String str49 = astRoot1.getSourceName();
        com.google.javascript.rhino.head.ast.AstRoot astRoot51 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet52 = astRoot51.getComments();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList56 = scriptNode54.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator58 = scriptNode57.spliterator();
        com.google.javascript.rhino.head.Node node60 = scriptNode57.setType((int) '#');
        boolean boolean61 = scriptNode57.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) astRoot51, (com.google.javascript.rhino.head.Node) scriptNode54, (com.google.javascript.rhino.head.Node) scriptNode57);
        com.google.javascript.rhino.head.Token.CommentType commentType65 = null;
        com.google.javascript.rhino.head.ast.Comment comment67 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType65, "");
        com.google.javascript.rhino.head.Token.CommentType commentType68 = comment67.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType69 = null;
        comment67.setCommentType(commentType69);
        java.lang.String str71 = comment67.getValue();
        scriptNode54.setCompilerData((java.lang.Object) str71);
        java.lang.String str73 = astRoot1.toStringTree(scriptNode54);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node(161, (com.google.javascript.rhino.head.Node) scriptNode54, (-50044338));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = scriptNode54.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(functionNodeList43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(commentSet52);
        org.junit.Assert.assertNull(scopeList56);
        org.junit.Assert.assertNotNull(nodeSpliterator58);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(commentType68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        java.lang.String str4 = scriptNode1.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = scriptNode6.new NodeIterator();
        int int13 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        scriptNode6.setCompilerData((java.lang.Object) nodeIterator15);
        int int17 = scriptNode1.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) '4', (int) (byte) 1, commentType20, "                                                                                                                                                                                                  ");
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment22.setCommentType(commentType23);
        scriptNode1.setJsDocNode(comment22);
        java.lang.String str27 = comment22.toSource((-929928321));
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment22.visit(nodeVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-830154543) + "'", int17 == (-830154543));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "                                                                                                                                                                                                  " + "'", str27, "                                                                                                                                                                                                  ");
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setPosition((int) (byte) 10);
        int int6 = scriptNode1.getEncodedSourceEnd();
        int int7 = scriptNode1.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray9 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList10 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList10, symbolArray9);
        scriptNode8.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList10);
        scriptNode1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList10);
        scriptNode1.setEncodedSource("          hi!");
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(symbolArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        java.lang.String str31 = comment29.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray32 = new com.google.javascript.rhino.head.ast.Comment[] { comment17, comment23, comment29 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet33, commentArray32);
        astRoot11.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet33);
        boolean boolean36 = astRoot11.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = astRoot11.getParent();
        astRoot11.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scope10, (com.google.javascript.rhino.head.Node) astRoot11, 6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = scriptNode2.getEnclosingFunction();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        boolean boolean48 = comment47.hasSideEffects();
        int int49 = comment47.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope50 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator51 = scope50.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        scope50.setTop(scriptNode53);
        comment47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = scriptNode53.getEnclosingFunction();
        int int58 = scriptNode53.getLineno();
        scriptNode2.target = scriptNode53;
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor60 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode53.visit(nodeVisitor60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(astNode37);
        org.junit.Assert.assertNull(functionNode42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator51);
        org.junit.Assert.assertNull(functionNode57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getLength();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        int int36 = scriptNode33.getBaseLineno();
        com.google.javascript.rhino.head.Node node37 = scriptNode33.getLastSibling();
        scriptNode33.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList43 = scriptNode41.getFunctions();
        scriptNode41.setPosition((int) (byte) 10);
        java.lang.String str46 = scriptNode33.toStringTree(scriptNode41);
        int int47 = scriptNode33.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode49.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope52 = scriptNode49.getParentScope();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        com.google.javascript.rhino.head.ast.Scope scope55 = new com.google.javascript.rhino.head.ast.Scope(7);
        scriptNode33.target = scope55;
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node((int) (short) 1, (com.google.javascript.rhino.head.Node) scriptNode33);
        astRoot0.setTop(scriptNode33);
        int int59 = scriptNode33.getEncodedSourceStart();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(functionNodeList43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(scope52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        com.google.javascript.rhino.head.ast.Scope scope0 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scope0.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        scope0.setTop(scriptNode3);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = scope0.iterator();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scope0.getChildScopes();
        java.lang.String str9 = scope0.toSource((-1116244898));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = scope0.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{\n}\n" + "'", str9, "{\n}\n");
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(1379135754, "                        ");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot((int) (short) 100);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor2 = null;
        astRoot1.visitComments(nodeVisitor2);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList4 = astRoot1.getSymbols();
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = astRoot1.getAstRoot();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = astRoot5.getParamAndVarCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolList4);
        org.junit.Assert.assertNotNull(astRoot5);
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("136");
        node1.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode41 = astRoot15.getParent();
        astRoot15.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode6, (com.google.javascript.rhino.head.Node) scope14, (com.google.javascript.rhino.head.Node) astRoot15, 6);
        java.lang.String str46 = node1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot15);
        astRoot15.checkParentLinks();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment(95442629, 538062289, commentType50, "                      ");
        java.lang.String str53 = comment52.getValue();
        astRoot15.setJsDocNode(comment52);
        boolean boolean55 = astRoot15.isInStrictMode();
        astRoot15.setSourceName("-213029975\tSCRIPT -213029975 1\n");
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(astNode41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "                      " + "'", str53, "                      ");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString(327994914, "AstRoot");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setAllowSharpComments(true);
        compilerEnvirons0.setWarnTrailingComma(true);
        boolean boolean11 = compilerEnvirons0.isIdeMode();
        com.google.javascript.rhino.head.Parser parser12 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = parser12.parse("                                                                                                                                                                                                        ", "                                            ", 9);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot20 = parser12.parse("                                                                                                        {\n                                                                                                        }\n", "52\tSCRIPT 52 1\n", 709071950);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: parser reused");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(astRoot16);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scriptNode1.iterator();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons8 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean9 = compilerEnvirons8.isReservedKeywordAsIdentifier();
        boolean boolean10 = compilerEnvirons8.isIdeMode();
        int int11 = compilerEnvirons8.getOptimizationLevel();
        scriptNode1.setCompilerData((java.lang.Object) compilerEnvirons8);
        boolean boolean13 = compilerEnvirons8.getAllowSharpComments();
        compilerEnvirons8.setGenerateDebugInfo(false);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(compilerEnvirons8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        scriptNode7.setSourceName("-1\tSCRIPT -1 1\n");
        boolean boolean19 = scriptNode7.hasSideEffects();
        java.lang.String str20 = scriptNode7.getNextTempName();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "$0" + "'", str20, "$0");
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope scope5 = astRoot0.getParentScope();
        int int8 = astRoot0.getIntProp((-1), 18);
        astRoot0.setEncodedSourceEnd(161);
        int int11 = astRoot0.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory14 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons12, errorReporter13);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode15.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList18 = scriptNode16.getFunctions();
        scriptNode16.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node21 = iRFactory14.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        java.lang.String str22 = scriptNode16.getSourceName();
        int int23 = scriptNode16.getRegexpCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        scriptNode25.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap31 = scriptNode30.getSymbolTable();
        scriptNode25.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode30);
        int int33 = scriptNode30.getParamCount();
        int int34 = scriptNode30.getBaseLineno();
        int int35 = scriptNode30.getEncodedSourceEnd();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons36 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory38 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons36, errorReporter37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node45 = iRFactory38.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList46 = scriptNode40.getChildScopes();
        java.lang.Object obj48 = scriptNode40.getProp((-213029975));
        scriptNode16.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) scriptNode40);
        int int50 = scriptNode30.getEndLineno();
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.removeChild((com.google.javascript.rhino.head.Node) scriptNode30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(scope5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 18 + "'", int8 == 18);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(functionNodeList18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(strMap31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(scopeList46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setPosition((int) (byte) 10);
        int int6 = scriptNode1.getEncodedSourceEnd();
        int int7 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        int int12 = scriptNode9.getBaseLineno();
        com.google.javascript.rhino.head.Node node13 = scriptNode9.getLastSibling();
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        com.google.javascript.rhino.head.ast.AstNode astNode15 = scriptNode1.getParent();
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = astRoot16.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType20, "");
        boolean boolean23 = comment22.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        java.lang.String str36 = comment34.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray37 = new com.google.javascript.rhino.head.ast.Comment[] { comment22, comment28, comment34 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet38 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet38, commentArray37);
        astRoot16.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet38);
        boolean boolean41 = astRoot16.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray42 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList43 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList43, symbolArray42);
        astRoot16.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList43);
        int int46 = astRoot16.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment47 = astRoot16.getJsDocNode();
        astRoot16.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        com.google.javascript.rhino.head.Token.CommentType commentType55 = null;
        comment54.setCommentType(commentType55);
        astRoot16.setJsDocNode(comment54);
        int int58 = astRoot16.getType();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) astRoot16);
        scriptNode1.setSourceName("                                                                                                                                                                                                                                                                  {\n                                                                                                                                                                                                                                                                  }\n");
        scriptNode1.flattenSymbolTable(true);
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(astNode15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "                                                                                                                                                                                                        " + "'", str36, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(symbolArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(comment47);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 136 + "'", int58 == 136);
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setReservedKeywordAsIdentifier(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons5 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray11 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        compilerEnvirons5.setActivationNames((java.util.Set<java.lang.String>) strSet12);
        boolean boolean15 = compilerEnvirons5.isGenerateDebugInfo();
        compilerEnvirons5.setOptimizationLevel((int) (short) 1);
        compilerEnvirons5.setAllowSharpComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter20 = compilerEnvirons5.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory21 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter20);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = iRFactory21.parse(">>>", "%", 10);
        astRoot25.putIntProp(875237497, 15);
        int int29 = astRoot25.getFunctionCount();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter20);
        org.junit.Assert.assertNotNull(astRoot25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        int int11 = compilerEnvirons0.getOptimizationLevel();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        compilerEnvirons0.setRecordingComments(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        com.google.javascript.rhino.head.Node node21 = scriptNode17.target;
        scriptNode17.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int25 = astRoot24.getBaseLineno();
        java.lang.String str26 = astRoot24.debugPrint();
        astRoot24.setEncodedSourceBounds((int) (byte) -1, 18);
        astRoot24.clearParentScope();
        scriptNode17.addChildToBack((com.google.javascript.rhino.head.Node) astRoot24);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = astRoot24.getParamAndVarCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        astRoot4.visitComments(nodeVisitor8);
        int int10 = astRoot4.getEndLineno();
        int int11 = astRoot4.getAbsolutePosition();
        com.google.javascript.rhino.head.ast.Symbol symbol12 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot4.putSymbol(symbol12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastChild();
        scriptNode1.setPosition((-15));
        int int8 = scriptNode1.getType();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 136 + "'", int8 == 136);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.IRFactory iRFactory4 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        compilerEnvirons0.setGenerateObserverCount(false);
        compilerEnvirons0.setAllowSharpComments(false);
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        compilerEnvirons0.setIdeMode(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        compilerEnvirons10.setStrictMode(true);
        compilerEnvirons10.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons16 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean17 = compilerEnvirons16.isReservedKeywordAsIdentifier();
        compilerEnvirons16.setStrictMode(true);
        compilerEnvirons16.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        boolean boolean24 = compilerEnvirons22.getWarnTrailingComma();
        compilerEnvirons22.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet27 = compilerEnvirons22.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter28 = compilerEnvirons22.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory29 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons16, errorReporter28);
        com.google.javascript.rhino.head.IRFactory iRFactory30 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10, errorReporter28);
        com.google.javascript.rhino.head.ErrorReporter errorReporter31 = compilerEnvirons10.getErrorReporter();
        compilerEnvirons0.setErrorReporter(errorReporter31);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNotNull(errorReporter28);
        org.junit.Assert.assertNotNull(errorReporter31);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.Context context16 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.initFromContext(context16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((-87298254));
        int int2 = scriptNode1.getPosition();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.visit(nodeVisitor3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-87298254) + "'", int2 == (-87298254));
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        java.lang.String str6 = comment4.toSource(0);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode7 = comment4.getEnclosingFunction();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(functionNode7);
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setIdeMode(false);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        boolean boolean16 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setOptimizationLevel((-213029975));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Optimization level outside [-1..9]: -213029975");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        java.lang.String str6 = comment4.toSource(100);
        java.lang.String str7 = comment4.getValue();
        boolean boolean8 = comment4.hasSideEffects();
        int int9 = comment4.depth();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment4.visit(nodeVisitor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                                                                                                                                                                                                        " + "'", str6, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        boolean boolean10 = compilerEnvirons0.getWarnTrailingComma();
        int int11 = compilerEnvirons0.getLanguageVersion();
        boolean boolean12 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean13 = compilerEnvirons0.recoverFromErrors();
        boolean boolean14 = compilerEnvirons0.recoverFromErrors();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 170 + "'", int11 == 170);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(391457258, 7);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        boolean boolean12 = compilerEnvirons0.recoverFromErrors();
        compilerEnvirons0.setAllowSharpComments(false);
        compilerEnvirons0.setReservedKeywordAsIdentifier(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (-17));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        int int42 = astRoot0.getFunctionCount();
        com.google.javascript.rhino.head.ast.Scope scope43 = astRoot0.getParentScope();
        boolean boolean44 = astRoot0.isInStrictMode();
        boolean boolean45 = astRoot0.hasChildren();
        astRoot0.flattenSymbolTable(false);
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        int int2 = astRoot0.getLineno();
        java.lang.String str4 = astRoot0.toSource(26);
        astRoot0.setEncodedSourceStart(459405140);
        int int7 = astRoot0.getPosition();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.isIdeMode();
        compilerEnvirons3.setRecordingLocalJsDocComments(false);
        boolean boolean8 = compilerEnvirons3.isGenerateDebugInfo();
        compilerEnvirons3.setRecordingLocalJsDocComments(true);
        boolean boolean11 = compilerEnvirons3.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.getWarnTrailingComma();
        boolean boolean15 = compilerEnvirons12.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons12.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser17 = new com.google.javascript.rhino.head.Parser(compilerEnvirons3, errorReporter16);
        compilerEnvirons0.setErrorReporter(errorReporter16);
        boolean boolean19 = compilerEnvirons0.recoverFromErrors();
        boolean boolean20 = compilerEnvirons0.getWarnTrailingComma();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode1.setType((int) (byte) -1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor18 = scriptNode1.iterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        scriptNode1.target = scriptNode19;
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap23 = scriptNode1.getSymbolTable();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(strMap23);
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        boolean boolean2 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot1.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.ast.Symbol symbol6 = astRoot1.getSymbol("");
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = scope7.spliterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = scope7.getAstRoot();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.Node node15 = scriptNode11.getLastSibling();
        int int16 = scriptNode11.getEndLineno();
        scriptNode11.setBaseLineno(4);
        scriptNode11.clearParentScope();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = scriptNode11.getEnclosingFunction();
        scope7.target = scriptNode11;
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope();
        int int25 = scope22.getIntProp(16, 22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = scriptNode27.getLastSibling();
        int int32 = scriptNode27.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = scriptNode27.new NodeIterator();
        int int34 = scriptNode27.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot35 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator36 = astRoot35.new NodeIterator();
        scriptNode27.setCompilerData((java.lang.Object) nodeIterator36);
        scope22.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode27);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode40.removeProp(10);
        scriptNode11.addChildAfter((com.google.javascript.rhino.head.Node) scope22, (com.google.javascript.rhino.head.Node) scriptNode40);
        java.lang.Object obj44 = scriptNode11.getCompilerData();
        com.google.javascript.rhino.head.ast.Scope scope45 = scriptNode11.getParentScope();
        astRoot1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = scriptNode11.getRegexpString((-1101340812));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(symbol6);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNull(astRoot9);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(functionNode20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(scope45);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        boolean boolean18 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray25 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        compilerEnvirons19.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.head.IRFactory iRFactory30 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        compilerEnvirons0.setGenerateObserverCount(false);
        compilerEnvirons0.setAllowSharpComments(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        int int13 = astRoot6.getParamCount();
        astRoot6.checkParentLinks();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        astRoot0.setInStrictMode(false);
        astRoot0.setPosition(0);
        java.lang.String str35 = astRoot0.toSource((int) '4');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scriptNode1.iterator();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons8 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean9 = compilerEnvirons8.isReservedKeywordAsIdentifier();
        boolean boolean10 = compilerEnvirons8.isIdeMode();
        int int11 = compilerEnvirons8.getOptimizationLevel();
        scriptNode1.setCompilerData((java.lang.Object) compilerEnvirons8);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.putIntProp((int) (short) 1, 1);
        scriptNode13.setEncodedSource("typeof");
        com.google.javascript.rhino.head.Node node19 = scriptNode13.getLastChild();
        scriptNode1.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = astRoot21.getComments();
        com.google.javascript.rhino.head.ast.Comment comment23 = astRoot21.getJsDocNode();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot21);
        com.google.javascript.rhino.head.ast.Scope scope25 = scriptNode1.getEnclosingScope();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor26 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.visit(nodeVisitor26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(compilerEnvirons8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNull(commentSet22);
        org.junit.Assert.assertNull(comment23);
        org.junit.Assert.assertNotNull(scope25);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray30 = new com.google.javascript.rhino.head.ast.Comment[] { comment15, comment21, comment27 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet31, commentArray30);
        astRoot9.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet31);
        boolean boolean34 = astRoot9.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray35 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList36 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList36, symbolArray35);
        astRoot9.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList36);
        com.google.javascript.rhino.head.Node node39 = astRoot9.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot9, (com.google.javascript.rhino.head.ast.Scope) scriptNode41);
        int int44 = astRoot9.depth();
        com.google.javascript.rhino.head.ast.Comment comment45 = astRoot9.getJsDocNode();
        astRoot5.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot9);
        astRoot5.checkParentLinks();
        int int48 = astRoot5.getLineno();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = astRoot5.getSymbols();
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(symbolArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(comment45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(symbolList49);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator3 = positionComparator1.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int5 = astRoot4.getBaseLineno();
        java.lang.String str6 = astRoot4.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        int int9 = positionComparator2.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot4, (com.google.javascript.rhino.head.ast.AstNode) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = scriptNode10.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = scriptNode10.new NodeIterator();
        astRoot7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor14 = null;
        astRoot7.visitComments(nodeVisitor14);
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = astRoot17.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        boolean boolean30 = comment29.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        java.lang.String str37 = comment35.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray38 = new com.google.javascript.rhino.head.ast.Comment[] { comment23, comment29, comment35 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet39 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet39, commentArray38);
        astRoot17.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet39);
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        int int48 = comment46.getLineno();
        com.google.javascript.rhino.head.Node node50 = comment46.setType(18);
        boolean boolean51 = comment46.hasSideEffects();
        astRoot17.addComment(comment46);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(14, (com.google.javascript.rhino.head.Node) comment46, (-1));
        com.google.javascript.rhino.head.ast.AstRoot astRoot55 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet56 = astRoot55.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol58 = astRoot55.getSymbol("                                                                                                                                                                                                        ");
        node54.addChildToFront((com.google.javascript.rhino.head.Node) astRoot55);
        com.google.javascript.rhino.head.ast.Scope scope62 = new com.google.javascript.rhino.head.ast.Scope(136, 538062289);
        astRoot55.addChildToFront((com.google.javascript.rhino.head.Node) scope62);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap64 = astRoot55.getSymbolTable();
        int int65 = astRoot55.getRegexpCount();
        astRoot7.target = astRoot55;
        com.google.javascript.rhino.head.ast.Symbol symbol68 = astRoot7.getSymbol("9\t  SCRIPT 10 1\n");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons69 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean70 = compilerEnvirons69.isReservedKeywordAsIdentifier();
        compilerEnvirons69.setStrictMode(true);
        compilerEnvirons69.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons75 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean76 = compilerEnvirons75.isReservedKeywordAsIdentifier();
        boolean boolean77 = compilerEnvirons75.getWarnTrailingComma();
        compilerEnvirons75.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet80 = compilerEnvirons75.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter81 = compilerEnvirons75.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory82 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons69, errorReporter81);
        com.google.javascript.rhino.head.ast.AstRoot astRoot86 = iRFactory82.parse("typeof", "typeof", 5);
        astRoot86.setLength(0);
        int int89 = astRoot7.compareTo((com.google.javascript.rhino.head.ast.AstNode) astRoot86);
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node((-761991377), (com.google.javascript.rhino.head.Node) astRoot86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = astRoot86.getParamOrVarName(338455453);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str6, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "                                                                                                                                                                                                        " + "'", str37, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(commentSet56);
        org.junit.Assert.assertNull(symbol58);
        org.junit.Assert.assertNull(strMap64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(symbol68);
        org.junit.Assert.assertNotNull(compilerEnvirons69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertNotNull(errorReporter81);
        org.junit.Assert.assertNotNull(astRoot86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.Scope scope2 = scriptNode1.getParentScope();
        int int3 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.Comment comment4 = scriptNode1.getJsDocNode();
        org.junit.Assert.assertNull(scope2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(comment4);
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        int int9 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean10 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean11 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean12 = compilerEnvirons0.isGenerateObserverCount();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        java.lang.String str1 = com.google.javascript.rhino.head.ast.AstNode.operatorToString(32);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "typeof" + "'", str1, "typeof");
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.getWarnTrailingComma();
        compilerEnvirons12.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet17 = compilerEnvirons12.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter18 = compilerEnvirons12.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory19 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter18);
        compilerEnvirons0.setRecoverFromErrors(false);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        compilerEnvirons0.setRecoverFromErrors(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(errorReporter18);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.flattenSymbolTable(true);
        scriptNode1.setBounds((-1116244898), 3);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator7 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator8 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator9 = positionComparator7.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator8);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator10 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator11 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator12 = positionComparator10.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator11);
        com.google.javascript.rhino.head.ast.AstRoot astRoot13 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int14 = astRoot13.getBaseLineno();
        java.lang.String str15 = astRoot13.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = astRoot16.new NodeIterator();
        int int18 = positionComparator11.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot13, (com.google.javascript.rhino.head.ast.AstNode) astRoot16);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator19 = positionComparator7.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator11);
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        java.lang.String str26 = comment24.toSource(100);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor27 = comment24.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        comment24.setCommentType(commentType28);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator30 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator31 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator32 = positionComparator30.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator31);
        com.google.javascript.rhino.head.ast.AstRoot astRoot33 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int34 = astRoot33.getBaseLineno();
        java.lang.String str35 = astRoot33.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = astRoot36.new NodeIterator();
        int int38 = positionComparator31.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot33, (com.google.javascript.rhino.head.ast.AstNode) astRoot36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.putIntProp((int) (short) 1, 1);
        java.lang.String str43 = scriptNode39.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope44 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator45 = scope44.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        scope44.setTop(scriptNode47);
        scope44.setLineno((int) (short) -1);
        int int52 = positionComparator31.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode39, (com.google.javascript.rhino.head.ast.AstNode) scope44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList56 = scriptNode54.getChildScopes();
        int int57 = scriptNode54.getBaseLineno();
        int int58 = scriptNode54.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode59.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode60);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList62 = scriptNode60.getFunctions();
        scriptNode60.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope65 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode54.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode60, (com.google.javascript.rhino.head.Node) scope65);
        scriptNode60.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str69 = scriptNode39.toStringTree(scriptNode60);
        int int70 = positionComparator11.compare((com.google.javascript.rhino.head.ast.AstNode) comment24, (com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) comment24);
        com.google.javascript.rhino.head.Token.CommentType commentType72 = null;
        comment24.setCommentType(commentType72);
        int int74 = comment24.getLength();
        org.junit.Assert.assertNotNull(astNodeComparator9);
        org.junit.Assert.assertNotNull(astNodeComparator12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str15, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator19);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                                                                                                                                                                        " + "'", str26, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(nodeItor27);
        org.junit.Assert.assertNotNull(astNodeComparator32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str35, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(nodeSpliterator45);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(scopeList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(functionNodeList62);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = compilerEnvirons0.getErrorReporter();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.EvaluatorException evaluatorException16 = errorReporter10.runtimeError("      {\n      }\n", "hi!", 20, "                        ", 9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(errorReporter10);
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node19 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        int int20 = scriptNode10.getRegexpCount();
        scriptNode10.setBaseLineno(21);
        com.google.javascript.rhino.head.Node node23 = scriptNode10.getLastSibling();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor24 = node23.iterator();
        int int25 = node23.getLineno();
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(nodeItor24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21 + "'", int25 == 21);
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj3 = scriptNode2.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        int int7 = scriptNode4.getEndLineno();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray30 = new com.google.javascript.rhino.head.ast.Comment[] { comment15, comment21, comment27 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet31, commentArray30);
        astRoot9.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet31);
        java.lang.String str34 = astRoot9.getEncodedSource();
        com.google.javascript.rhino.head.Node node35 = astRoot9.target;
        scriptNode2.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot9);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator37 = astRoot9.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment(95442629, 538062289, commentType40, "                      ");
        java.lang.String str43 = comment42.getValue();
        int int44 = comment42.getAbsolutePosition();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        comment42.setCommentType(commentType45);
        com.google.javascript.rhino.head.ast.AstRoot astRoot47 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int48 = astRoot47.getParamCount();
        int int49 = astRoot47.getPosition();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons50 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory52 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons50, errorReporter51);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList56 = scriptNode54.getFunctions();
        scriptNode54.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node59 = iRFactory52.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        java.lang.String str60 = scriptNode54.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator62 = scriptNode61.spliterator();
        com.google.javascript.rhino.head.Node node64 = scriptNode61.setType((int) '#');
        boolean boolean65 = scriptNode61.hasConsistentReturnUsage();
        scriptNode54.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode61);
        com.google.javascript.rhino.head.ast.Symbol symbol68 = scriptNode54.getSymbol("                                      ");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot47, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        boolean boolean70 = scriptNode54.hasSideEffects();
        comment42.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        astRoot9.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode54);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node73 = astRoot9.getContinue();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(nodeSpliterator37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "                      " + "'", str43, "                      ");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 95442629 + "'", int44 == 95442629);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(nodeSpliterator62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(symbol68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (byte) 1, 559562297);
        int int3 = scope2.getLineno();
        boolean boolean4 = scope2.hasConsistentReturnUsage();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons2 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons2.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons5 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean6 = compilerEnvirons5.isReservedKeywordAsIdentifier();
        boolean boolean7 = compilerEnvirons5.getWarnTrailingComma();
        compilerEnvirons5.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet10 = compilerEnvirons5.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons5.getErrorReporter();
        java.lang.String[] strArray17 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        compilerEnvirons5.setActivationNames((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.head.ErrorReporter errorReporter21 = compilerEnvirons5.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser22 = new com.google.javascript.rhino.head.Parser(compilerEnvirons2, errorReporter21);
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = parser22.parse("          hi!", "hi!", 2);
        astRoot0.setTop((com.google.javascript.rhino.head.ast.ScriptNode) astRoot26);
        boolean boolean28 = astRoot26.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int30 = astRoot29.getBaseLineno();
        int int31 = astRoot29.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        int int36 = scriptNode33.getBaseLineno();
        com.google.javascript.rhino.head.Node node37 = scriptNode33.getLastSibling();
        scriptNode33.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList43 = scriptNode41.getFunctions();
        scriptNode41.setPosition((int) (byte) 10);
        java.lang.String str46 = scriptNode33.toStringTree(scriptNode41);
        int int47 = scriptNode33.getBaseLineno();
        astRoot29.target = scriptNode33;
        // The following exception was thrown during execution in test generation
        try {
            astRoot26.setJumpStatement((com.google.javascript.rhino.head.ast.Jump) astRoot29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(compilerEnvirons2);
        org.junit.Assert.assertNotNull(compilerEnvirons5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(errorReporter21);
        org.junit.Assert.assertNotNull(astRoot26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(functionNodeList43);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons8 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray14 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        compilerEnvirons8.setActivationNames((java.util.Set<java.lang.String>) strSet15);
        boolean boolean18 = compilerEnvirons8.isGenerateDebugInfo();
        compilerEnvirons8.setOptimizationLevel((int) (short) 1);
        compilerEnvirons8.setAllowSharpComments(true);
        boolean boolean23 = compilerEnvirons8.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter24 = compilerEnvirons8.getErrorReporter();
        compilerEnvirons0.setErrorReporter(errorReporter24);
        com.google.javascript.rhino.head.ErrorReporter errorReporter26 = compilerEnvirons0.getErrorReporter();
        boolean boolean27 = compilerEnvirons0.isGeneratingSource();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.isIdeMode();
        boolean boolean31 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons28.setAllowSharpComments(true);
        boolean boolean36 = compilerEnvirons28.isRecordingLocalJsDocComments();
        compilerEnvirons28.setAllowMemberExprAsFunctionName(true);
        boolean boolean39 = compilerEnvirons28.reportWarningAsError();
        com.google.javascript.rhino.head.Parser parser40 = new com.google.javascript.rhino.head.Parser(compilerEnvirons28);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons41 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean42 = compilerEnvirons41.isReservedKeywordAsIdentifier();
        boolean boolean43 = compilerEnvirons41.isIdeMode();
        boolean boolean44 = compilerEnvirons41.getWarnTrailingComma();
        compilerEnvirons41.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons47 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean48 = compilerEnvirons47.isReservedKeywordAsIdentifier();
        int int49 = compilerEnvirons47.getLanguageVersion();
        int int50 = compilerEnvirons47.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons51 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean52 = compilerEnvirons51.isReservedKeywordAsIdentifier();
        compilerEnvirons51.setStrictMode(true);
        compilerEnvirons51.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons57 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean58 = compilerEnvirons57.isReservedKeywordAsIdentifier();
        boolean boolean59 = compilerEnvirons57.getWarnTrailingComma();
        compilerEnvirons57.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet62 = compilerEnvirons57.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter63 = compilerEnvirons57.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory64 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons51, errorReporter63);
        com.google.javascript.rhino.head.IRFactory iRFactory65 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons47, errorReporter63);
        com.google.javascript.rhino.head.IRFactory iRFactory66 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons41, errorReporter63);
        com.google.javascript.rhino.head.IRFactory iRFactory67 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons28, errorReporter63);
        com.google.javascript.rhino.head.IRFactory iRFactory68 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter63);
        java.io.Reader reader69 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot72 = iRFactory68.parse(reader69, "                                            ", 1278095946);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(errorReporter24);
        org.junit.Assert.assertNotNull(errorReporter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 170 + "'", int49 == 170);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 170 + "'", int50 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(strSet62);
        org.junit.Assert.assertNotNull(errorReporter63);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getBaseLineno();
        astRoot0.setEncodedSourceBounds(225099420, 20);
        com.google.javascript.rhino.head.Node node34 = astRoot0.target;
        astRoot0.setEncodedSource("                  ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node34);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode26 = astRoot0.getParent();
        astRoot0.setPosition(14);
        java.lang.String str29 = astRoot0.getSourceName();
        int int30 = astRoot0.getParamCount();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(astNode26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("                                  hi!");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newString((-447184571), "35\tCOMMENT 35 2\n");
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = node2.new NodeIterator();
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        java.util.Set<java.lang.String> strSet18 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setStrictMode(false);
        boolean boolean21 = compilerEnvirons0.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        boolean boolean24 = compilerEnvirons22.isIdeMode();
        compilerEnvirons22.setReservedKeywordAsIdentifier(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons27 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray33 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        compilerEnvirons27.setActivationNames((java.util.Set<java.lang.String>) strSet34);
        boolean boolean37 = compilerEnvirons27.isGenerateDebugInfo();
        compilerEnvirons27.setOptimizationLevel((int) (short) 1);
        compilerEnvirons27.setAllowSharpComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter42 = compilerEnvirons27.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory43 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter42);
        com.google.javascript.rhino.head.Parser parser44 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter42);
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setLanguageVersion(418338579);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad language version: 418338579");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(errorReporter42);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode0.setBaseLineno((int) 'a');
        scriptNode0.setEncodedSourceEnd((int) (short) -1);
        java.lang.Object obj7 = scriptNode0.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol9 = scriptNode0.getSymbol("|");
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = scriptNode0.new NodeIterator();
        boolean boolean11 = nodeIterator10.hasNext();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(symbol9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType29, "hi!");
        astRoot1.addComment(comment31);
        astRoot1.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.AstRoot astRoot35 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = astRoot35.getComments();
        int int37 = astRoot35.getEndLineno();
        com.google.javascript.rhino.head.Node node39 = astRoot35.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot1, (com.google.javascript.rhino.head.ast.Scope) astRoot35);
        astRoot35.clearParentScope();
        boolean boolean42 = astRoot35.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        scriptNode44.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap50 = scriptNode49.getSymbolTable();
        scriptNode44.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode49);
        int int52 = scriptNode49.getParamCount();
        int int53 = scriptNode49.getBaseLineno();
        astRoot35.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode49);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet55 = astRoot35.getComments();
        com.google.javascript.rhino.head.ast.AstRoot astRoot56 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator57 = astRoot56.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        boolean boolean63 = comment62.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType66 = null;
        com.google.javascript.rhino.head.ast.Comment comment68 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType66, "");
        boolean boolean69 = comment68.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType72 = null;
        com.google.javascript.rhino.head.ast.Comment comment74 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType72, "");
        java.lang.String str76 = comment74.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray77 = new com.google.javascript.rhino.head.ast.Comment[] { comment62, comment68, comment74 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet78 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet78, commentArray77);
        astRoot56.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet78);
        boolean boolean81 = astRoot56.isInStrictMode();
        int int82 = astRoot56.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot83 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean84 = astRoot83.hasSideEffects();
        astRoot56.target = astRoot83;
        astRoot83.checkParentLinks();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((-552755211), (com.google.javascript.rhino.head.Node) astRoot35, (com.google.javascript.rhino.head.Node) astRoot83, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = astRoot35.getRegexpString((-191564152));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(commentSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strMap50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(commentSet55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "                                                                                                                                                                                                        " + "'", str76, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-1222715009));
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        boolean boolean38 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean39 = compilerEnvirons0.getAllowSharpComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.getWarnTrailingComma();
        compilerEnvirons3.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet8 = compilerEnvirons3.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons3.getErrorReporter();
        java.lang.String[] strArray15 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons3.getErrorReporter();
        compilerEnvirons0.setErrorReporter(errorReporter19);
        boolean boolean21 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean22 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.Parser parser23 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(errorReporter9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode17.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope20 = scriptNode17.getParentScope();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        com.google.javascript.rhino.head.ast.Scope scope23 = new com.google.javascript.rhino.head.ast.Scope(7);
        scriptNode1.target = scope23;
        int int25 = scope23.getLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol26 = null;
        // The following exception was thrown during execution in test generation
        try {
            scope23.putSymbol(symbol26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scope20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str2 = scriptNode0.toSource((int) '4');
        com.google.javascript.rhino.head.Node node3 = scriptNode0.getFirstChild();
        java.lang.Object obj5 = scriptNode0.getProp(18);
        boolean boolean6 = scriptNode0.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment7 = scriptNode0.getJsDocNode();
        scriptNode0.setPosition((int) ' ');
        java.lang.String str10 = scriptNode0.getNextTempName();
        scriptNode0.setEncodedSourceBounds((-1000485489), 97);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str2, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(comment7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "$0" + "'", str10, "$0");
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        int int3 = scriptNode0.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope scope4 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode0.setParentScope(scope4);
        com.google.javascript.rhino.head.Node node6 = scriptNode0.getNext();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment(10, (-1721493936), commentType9, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n");
        scriptNode0.addChildToFront((com.google.javascript.rhino.head.Node) comment11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = scriptNode0.getRegexpString((-218159225));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        boolean boolean19 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.IRFactory iRFactory20 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        boolean boolean21 = compilerEnvirons0.reportWarningAsError();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        boolean boolean8 = compilerEnvirons6.getWarnTrailingComma();
        compilerEnvirons6.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet11 = compilerEnvirons6.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter12 = compilerEnvirons6.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory13 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter12);
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = iRFactory13.parse("typeof", "typeof", 5);
        int int20 = astRoot17.getIntProp((-1), 21);
        boolean boolean21 = astRoot17.hasChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType24, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        comment26.setCommentType(commentType27);
        java.lang.String str29 = comment26.getValue();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator34 = scriptNode33.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        java.lang.String str42 = comment39.getValue();
        scriptNode33.setParent((com.google.javascript.rhino.head.ast.AstNode) comment39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        java.lang.String str64 = comment62.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray65 = new com.google.javascript.rhino.head.ast.Comment[] { comment50, comment56, comment62 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet66 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet66, commentArray65);
        astRoot44.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet66);
        boolean boolean69 = astRoot44.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray70 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList71 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList71, symbolArray70);
        astRoot44.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList71);
        com.google.javascript.rhino.head.Node node74 = astRoot44.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot44, (com.google.javascript.rhino.head.ast.Scope) scriptNode76);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) comment39, (com.google.javascript.rhino.head.Node) scriptNode76);
        int int80 = comment26.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        astRoot17.setParent((com.google.javascript.rhino.head.ast.AstNode) comment26);
        com.google.javascript.rhino.head.ast.AstRoot astRoot82 = astRoot17.getAstRoot();
        boolean boolean83 = astRoot82.hasSideEffects();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(errorReporter12);
        org.junit.Assert.assertNotNull(astRoot17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "                                                                                                                                                                                                        " + "'", str64, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(symbolArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(astRoot82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-202912574));
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setStrictMode(false);
        compilerEnvirons0.setRecordingComments(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons8 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean9 = compilerEnvirons8.isReservedKeywordAsIdentifier();
        boolean boolean10 = compilerEnvirons8.getWarnTrailingComma();
        compilerEnvirons8.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet13 = compilerEnvirons8.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter14 = compilerEnvirons8.getErrorReporter();
        compilerEnvirons8.setReservedKeywordAsIdentifier(false);
        int int17 = compilerEnvirons8.getOptimizationLevel();
        boolean boolean18 = compilerEnvirons8.isGenerateObserverCount();
        compilerEnvirons8.setRecordingLocalJsDocComments(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray27 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        compilerEnvirons21.setActivationNames((java.util.Set<java.lang.String>) strSet28);
        boolean boolean31 = compilerEnvirons21.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter32 = compilerEnvirons21.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser33 = new com.google.javascript.rhino.head.Parser(compilerEnvirons8, errorReporter32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons34 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean35 = compilerEnvirons34.isReservedKeywordAsIdentifier();
        int int36 = compilerEnvirons34.getLanguageVersion();
        compilerEnvirons34.setLanguageVersion((int) (byte) 100);
        boolean boolean39 = compilerEnvirons34.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons40 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean41 = compilerEnvirons40.isReservedKeywordAsIdentifier();
        compilerEnvirons40.setStrictMode(true);
        compilerEnvirons40.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons46 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean47 = compilerEnvirons46.isReservedKeywordAsIdentifier();
        compilerEnvirons46.setStrictMode(true);
        compilerEnvirons46.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons52 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean53 = compilerEnvirons52.isReservedKeywordAsIdentifier();
        boolean boolean54 = compilerEnvirons52.getWarnTrailingComma();
        compilerEnvirons52.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet57 = compilerEnvirons52.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter58 = compilerEnvirons52.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory59 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons46, errorReporter58);
        com.google.javascript.rhino.head.IRFactory iRFactory60 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons40, errorReporter58);
        com.google.javascript.rhino.head.Parser parser61 = new com.google.javascript.rhino.head.Parser(compilerEnvirons34, errorReporter58);
        compilerEnvirons8.setErrorReporter(errorReporter58);
        compilerEnvirons0.setErrorReporter(errorReporter58);
        boolean boolean64 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons65 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean66 = compilerEnvirons65.isReservedKeywordAsIdentifier();
        int int67 = compilerEnvirons65.getLanguageVersion();
        boolean boolean68 = compilerEnvirons65.isGenerateObserverCount();
        com.google.javascript.rhino.head.Parser parser69 = new com.google.javascript.rhino.head.Parser(compilerEnvirons65);
        com.google.javascript.rhino.head.ErrorReporter errorReporter70 = compilerEnvirons65.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory71 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter70);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(errorReporter14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(errorReporter32);
        org.junit.Assert.assertNotNull(compilerEnvirons34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 170 + "'", int36 == 170);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(errorReporter58);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 170 + "'", int67 == 170);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(errorReporter70);
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope scope5 = scriptNode1.getEnclosingScope();
        com.google.javascript.rhino.head.Node node6 = scriptNode1.target;
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        int int11 = scriptNode8.getBaseLineno();
        com.google.javascript.rhino.head.Node node12 = scriptNode8.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        java.lang.String str18 = scriptNode14.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) scriptNode20);
        java.lang.Object obj23 = scriptNode14.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str26 = scriptNode24.toSource((int) '4');
        java.lang.String str27 = scriptNode14.toStringTree(scriptNode24);
        scriptNode24.setLength((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode31.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = astRoot34.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor36 = astRoot34.iterator();
        scriptNode31.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        java.lang.String str38 = scriptNode31.toString();
        scriptNode24.setCompilerData((java.lang.Object) scriptNode31);
        boolean boolean40 = scriptNode24.hasSideEffects();
        com.google.javascript.rhino.head.ast.AstRoot astRoot41 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator42 = astRoot41.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        boolean boolean48 = comment47.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = null;
        com.google.javascript.rhino.head.ast.Comment comment53 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType51, "");
        boolean boolean54 = comment53.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType57 = null;
        com.google.javascript.rhino.head.ast.Comment comment59 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType57, "");
        java.lang.String str61 = comment59.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray62 = new com.google.javascript.rhino.head.ast.Comment[] { comment47, comment53, comment59 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet63 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet63, commentArray62);
        astRoot41.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet63);
        boolean boolean66 = astRoot41.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray67 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList68 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList68, symbolArray67);
        astRoot41.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList68);
        int int71 = astRoot41.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode72.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode73);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList75 = scriptNode73.getChildScopes();
        int int76 = scriptNode73.getBaseLineno();
        com.google.javascript.rhino.head.Node node77 = scriptNode73.getLastSibling();
        scriptNode73.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode81 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode80.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode81);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList83 = scriptNode81.getFunctions();
        scriptNode81.setPosition((int) (byte) 10);
        java.lang.String str86 = scriptNode73.toStringTree(scriptNode81);
        int int87 = scriptNode73.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot41, (com.google.javascript.rhino.head.ast.Scope) scriptNode73);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap89 = scriptNode73.getSymbolTable();
        scriptNode24.setSymbolTable(strMap89);
        scriptNode1.setSymbolTable(strMap89);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode93 = new com.google.javascript.rhino.head.ast.ScriptNode((-451814955));
        boolean boolean94 = scriptNode93.hasChildren();
        scriptNode1.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode93);
        scriptNode1.setEncodedSourceStart(22);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str26, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(nodeItor36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "136" + "'", str38, "136");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "                                                                                                                                                                                                        " + "'", str61, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(symbolArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(scopeList75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(functionNodeList83);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(strMap89);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = scriptNode0.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = astRoot2.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType6, "");
        boolean boolean9 = comment8.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray23 = new com.google.javascript.rhino.head.ast.Comment[] { comment8, comment14, comment20 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet24 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet24, commentArray23);
        astRoot2.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet24);
        boolean boolean27 = astRoot2.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray28 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList29 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList29, symbolArray28);
        astRoot2.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList29);
        int int32 = astRoot2.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment33 = astRoot2.getJsDocNode();
        astRoot2.setInStrictMode(false);
        scriptNode0.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot2);
        boolean boolean37 = scriptNode0.hasSideEffects();
        scriptNode0.setBounds((int) (byte) 1, 65536);
        com.google.javascript.rhino.head.ast.Comment comment41 = scriptNode0.getJsDocNode();
        org.junit.Assert.assertNull(functionNode1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(symbolArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(comment33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(comment41);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        int int12 = scriptNode9.getBaseLineno();
        int int13 = scriptNode9.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList17 = scriptNode15.getFunctions();
        scriptNode15.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode9.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode15, (com.google.javascript.rhino.head.Node) scope20);
        scriptNode15.setEncodedSourceEnd(18);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        int int25 = scriptNode15.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int27 = astRoot26.getBaseLineno();
        int int28 = astRoot26.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode30.getChildScopes();
        int int33 = scriptNode30.getBaseLineno();
        com.google.javascript.rhino.head.Node node34 = scriptNode30.getLastSibling();
        scriptNode30.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList40 = scriptNode38.getFunctions();
        scriptNode38.setPosition((int) (byte) 10);
        java.lang.String str43 = scriptNode30.toStringTree(scriptNode38);
        int int44 = scriptNode30.getBaseLineno();
        astRoot26.target = scriptNode30;
        scriptNode15.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot26);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = astRoot26.getComments();
        astRoot26.setEncodedSourceBounds(18, (-1721493936));
        astRoot26.setEncodedSourceBounds(21, 638771449);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(commentType7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(functionNodeList17);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(functionNodeList40);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(commentSet47);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory6 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor10 = null;
        astRoot7.visitComments(nodeVisitor10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = iRFactory6.transformTree(astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode15.getChildScopes();
        java.lang.String str18 = scriptNode15.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        int int23 = scriptNode20.getBaseLineno();
        com.google.javascript.rhino.head.Node node24 = scriptNode20.getLastSibling();
        int int25 = scriptNode20.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = scriptNode20.new NodeIterator();
        int int27 = scriptNode20.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = astRoot28.new NodeIterator();
        scriptNode20.setCompilerData((java.lang.Object) nodeIterator29);
        int int31 = scriptNode15.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        scriptNode20.setLineno(20);
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType36, "hi!");
        int int39 = comment38.getLength();
        java.lang.String str40 = comment38.getValue();
        scriptNode20.target = comment38;
        com.google.javascript.rhino.head.Node node42 = comment38.getLastSibling();
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) comment38);
        java.lang.String str44 = comment38.debugPrint();
        scriptNode12.setJsDocNode(comment38);
        int int48 = comment38.getIntProp(163023072, 1);
        comment38.setBounds((-761991377), (-51));
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNotNull(scriptNode12);
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-35053676) + "'", int31 == (-35053676));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "35\tCOMMENT 35 2\n" + "'", str44, "35\tCOMMENT 35 2\n");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        boolean boolean7 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        int int12 = compilerEnvirons10.getLanguageVersion();
        int int13 = compilerEnvirons10.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        compilerEnvirons14.setStrictMode(true);
        compilerEnvirons14.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        boolean boolean22 = compilerEnvirons20.getWarnTrailingComma();
        compilerEnvirons20.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet25 = compilerEnvirons20.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter26 = compilerEnvirons20.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory27 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons14, errorReporter26);
        com.google.javascript.rhino.head.IRFactory iRFactory28 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10, errorReporter26);
        com.google.javascript.rhino.head.IRFactory iRFactory29 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter26);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons30 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean31 = compilerEnvirons30.isReservedKeywordAsIdentifier();
        boolean boolean32 = compilerEnvirons30.isIdeMode();
        compilerEnvirons30.setRecordingLocalJsDocComments(false);
        boolean boolean35 = compilerEnvirons30.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons36 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean37 = compilerEnvirons36.isReservedKeywordAsIdentifier();
        int int38 = compilerEnvirons36.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons39 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean40 = compilerEnvirons39.isReservedKeywordAsIdentifier();
        boolean boolean41 = compilerEnvirons39.isIdeMode();
        compilerEnvirons39.setRecordingLocalJsDocComments(false);
        boolean boolean44 = compilerEnvirons39.isGenerateDebugInfo();
        compilerEnvirons39.setRecordingLocalJsDocComments(true);
        boolean boolean47 = compilerEnvirons39.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons48 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean49 = compilerEnvirons48.isReservedKeywordAsIdentifier();
        boolean boolean50 = compilerEnvirons48.getWarnTrailingComma();
        boolean boolean51 = compilerEnvirons48.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter52 = compilerEnvirons48.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser53 = new com.google.javascript.rhino.head.Parser(compilerEnvirons39, errorReporter52);
        compilerEnvirons36.setErrorReporter(errorReporter52);
        compilerEnvirons30.setErrorReporter(errorReporter52);
        compilerEnvirons0.setErrorReporter(errorReporter52);
        java.util.Set<java.lang.String> strSet57 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setRecoverFromErrors(false);
        compilerEnvirons0.setGeneratingSource(true);
        boolean boolean62 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 170 + "'", int12 == 170);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 170 + "'", int13 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(errorReporter26);
        org.junit.Assert.assertNotNull(compilerEnvirons30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 170 + "'", int38 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(errorReporter52);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setOptimizationLevel(2);
        com.google.javascript.rhino.head.Context context6 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.initFromContext(context6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = com.google.javascript.rhino.head.ast.AstNode.operatorToString(875237497);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid operator: 875237497");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        compilerEnvirons0.setStrictMode(false);
        boolean boolean40 = compilerEnvirons0.isGeneratingSource();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator4 = scriptNode3.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        java.lang.String str11 = comment9.toSource(100);
        java.lang.String str12 = comment9.getValue();
        scriptNode3.setParent((com.google.javascript.rhino.head.ast.AstNode) comment9);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        java.lang.String str34 = comment32.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray35 = new com.google.javascript.rhino.head.ast.Comment[] { comment20, comment26, comment32 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet36, commentArray35);
        astRoot14.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet36);
        boolean boolean39 = astRoot14.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray40 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList41 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList41, symbolArray40);
        astRoot14.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList41);
        com.google.javascript.rhino.head.Node node44 = astRoot14.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot14, (com.google.javascript.rhino.head.ast.Scope) scriptNode46);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) comment9, (com.google.javascript.rhino.head.Node) scriptNode46);
        com.google.javascript.rhino.head.ast.AstRoot astRoot50 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet51 = astRoot50.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol53 = astRoot50.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType56 = null;
        com.google.javascript.rhino.head.ast.Comment comment58 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType56, "hi!");
        astRoot50.addChildrenToFront((com.google.javascript.rhino.head.Node) comment58);
        boolean boolean60 = astRoot50.hasSideEffects();
        boolean boolean61 = astRoot50.isInStrictMode();
        java.lang.String str63 = astRoot50.toSource(26);
        com.google.javascript.rhino.head.ast.AstRoot astRoot64 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet65 = astRoot64.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol67 = astRoot64.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot69 = new com.google.javascript.rhino.head.ast.AstRoot((int) '4');
        astRoot64.setCompilerData((java.lang.Object) astRoot69);
        astRoot69.setBaseLineno(574921099);
        astRoot50.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot69);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = astRoot50.getTop();
        // The following exception was thrown during execution in test generation
        try {
            int int75 = scriptNode2.getIndexForNameNode((com.google.javascript.rhino.head.Node) astRoot50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "                                                                                                                                                                                                        " + "'", str11, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "                                                                                                                                                                                                        " + "'", str34, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(symbolArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(commentSet51);
        org.junit.Assert.assertNull(symbol53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "                                                    hi!" + "'", str63, "                                                    hi!");
        org.junit.Assert.assertNull(commentSet65);
        org.junit.Assert.assertNull(symbol67);
        org.junit.Assert.assertNotNull(scriptNode74);
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        java.lang.String str2 = astRoot0.getSourceName();
        boolean boolean3 = astRoot0.hasChildren();
        com.google.javascript.rhino.head.Node node4 = astRoot0.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getBaseLineno();
        java.lang.String str7 = astRoot5.debugPrint();
        astRoot5.setEncodedSourceBounds((int) (byte) -1, 18);
        com.google.javascript.rhino.head.ast.Scope scope12 = astRoot5.getDefiningScope("136");
        int int13 = astRoot5.getEncodedSourceStart();
        astRoot5.setEndLineno(24);
        com.google.javascript.rhino.head.ast.Comment comment16 = astRoot5.getJsDocNode();
        com.google.javascript.rhino.head.ast.Scope scope17 = astRoot5.getParentScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator22 = scriptNode21.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        java.lang.String str30 = comment27.getValue();
        scriptNode21.setParent((com.google.javascript.rhino.head.ast.AstNode) comment27);
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        java.lang.String str52 = comment50.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray53 = new com.google.javascript.rhino.head.ast.Comment[] { comment38, comment44, comment50 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet54, commentArray53);
        astRoot32.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet54);
        boolean boolean57 = astRoot32.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray58 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList59 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList59, symbolArray58);
        astRoot32.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList59);
        com.google.javascript.rhino.head.Node node62 = astRoot32.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot32, (com.google.javascript.rhino.head.ast.Scope) scriptNode64);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode20, (com.google.javascript.rhino.head.Node) comment27, (com.google.javascript.rhino.head.Node) scriptNode64);
        astRoot5.addComment(comment27);
        comment27.setRelative((-1116244898));
        com.google.javascript.rhino.head.ast.FunctionNode functionNode71 = comment27.getEnclosingFunction();
        astRoot0.addComment(comment27);
        // The following exception was thrown during execution in test generation
        try {
            comment27.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str7, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(scope12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNull(scope17);
        org.junit.Assert.assertNotNull(nodeSpliterator22);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                                                                                                                                                                        " + "'", str52, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(symbolArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNull(functionNode71);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        com.google.javascript.rhino.head.ast.Scope scope0 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scope0.spliterator();
        java.lang.String str2 = scope0.toString();
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = scope0.getAstRoot();
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "129" + "'", str2, "129");
        org.junit.Assert.assertNull(astRoot3);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str2 = astRoot0.toSource((int) '4');
        astRoot0.setPosition(100);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray6 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList7 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList7, symbolArray6);
        scriptNode5.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList7);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList7);
        int int11 = astRoot0.getEncodedSourceStart();
        int int12 = astRoot0.getEndLineno();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(symbolArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        scriptNode1.setSourceName("-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        scriptNode1.setPosition(1511404125);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = scriptNode0.new NodeIterator();
        int int3 = scriptNode0.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = astRoot5.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        java.lang.String str25 = comment23.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray26 = new com.google.javascript.rhino.head.ast.Comment[] { comment11, comment17, comment23 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet27 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet27, commentArray26);
        astRoot5.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet27);
        boolean boolean30 = astRoot5.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray31 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList32 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList32, symbolArray31);
        astRoot5.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList32);
        int int35 = astRoot5.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator37 = scriptNode36.spliterator();
        com.google.javascript.rhino.head.Node node39 = scriptNode36.setType((int) '#');
        java.lang.Object obj40 = scriptNode36.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator41 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator42 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator43 = positionComparator41.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator42);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode45.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot48 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = astRoot48.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor50 = astRoot48.iterator();
        scriptNode45.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot48);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList55 = scriptNode53.getChildScopes();
        int int56 = positionComparator42.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot48, (com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot5, (com.google.javascript.rhino.head.Node) scriptNode36, (com.google.javascript.rhino.head.Node) scriptNode53);
        java.lang.String str58 = scriptNode36.toString();
        int int59 = scriptNode36.getParamCount();
        scriptNode0.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode36);
        int int61 = scriptNode36.getRegexpCount();
        int int62 = scriptNode36.getRegexpCount();
        scriptNode36.setEndLineno(816654735);
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "                                                                                                                                                                                                        " + "'", str25, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(symbolArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator37);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(astNodeComparator43);
        org.junit.Assert.assertNotNull(nodeItor50);
        org.junit.Assert.assertNull(scopeList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "35" + "'", str58, "35");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("                          {\n                          }\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str15 = scriptNode1.getSourceName();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType18, "hi!");
        scriptNode1.setJsDocNode(comment20);
        com.google.javascript.rhino.head.ast.Scope scope23 = scriptNode1.getDefiningScope("-1\tRETURN -1 1\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray51 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList52 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList52, symbolArray51);
        astRoot25.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList52);
        int int55 = astRoot25.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator57 = scriptNode56.spliterator();
        com.google.javascript.rhino.head.Node node59 = scriptNode56.setType((int) '#');
        java.lang.Object obj60 = scriptNode56.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator61 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator62 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator63 = positionComparator61.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator62);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode65.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot68 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator69 = astRoot68.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor70 = astRoot68.iterator();
        scriptNode65.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot68);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode72.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode73);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList75 = scriptNode73.getChildScopes();
        int int76 = positionComparator62.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot68, (com.google.javascript.rhino.head.ast.AstNode) scriptNode73);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot25, (com.google.javascript.rhino.head.Node) scriptNode56, (com.google.javascript.rhino.head.Node) scriptNode73);
        scriptNode73.putIntProp((int) (byte) -1, 11);
        scriptNode73.flattenSymbolTable(false);
        scriptNode73.setSourceName("                        {\n                        }\n");
        scriptNode73.setSourceName("                                  ");
        // The following exception was thrown during execution in test generation
        try {
            scope23.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(scope23);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(symbolArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator57);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(astNodeComparator63);
        org.junit.Assert.assertNotNull(nodeItor70);
        org.junit.Assert.assertNull(scopeList75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        scriptNode2.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap8 = scriptNode7.getSymbolTable();
        scriptNode2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList10 = scriptNode2.getStatements();
        com.google.javascript.rhino.head.ast.Scope scope11 = scriptNode2.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int13 = astRoot12.getBaseLineno();
        java.lang.String str14 = astRoot12.debugPrint();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList15 = astRoot12.getSymbols();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scope11, (com.google.javascript.rhino.head.Node) astRoot12, 0);
        java.lang.String str18 = astRoot12.getSourceName();
        com.google.javascript.rhino.head.Node node19 = astRoot12.target;
        astRoot12.checkParentLinks();
        int int21 = astRoot12.getParamCount();
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(astNodeList10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str14, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNotNull(symbolList15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.Parser parser15 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        boolean boolean4 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        boolean boolean6 = compilerEnvirons0.isIdeMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons7 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray13 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        compilerEnvirons7.setActivationNames((java.util.Set<java.lang.String>) strSet14);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = compilerEnvirons0.isGenerateDebugInfo();
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setLanguageVersion((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad language version: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray16 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        compilerEnvirons10.setActivationNames((java.util.Set<java.lang.String>) strSet17);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet17);
        compilerEnvirons0.setGenerateObserverCount(false);
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons25 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean26 = compilerEnvirons25.isReservedKeywordAsIdentifier();
        int int27 = compilerEnvirons25.getLanguageVersion();
        int int28 = compilerEnvirons25.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons29 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean30 = compilerEnvirons29.isReservedKeywordAsIdentifier();
        compilerEnvirons29.setStrictMode(true);
        compilerEnvirons29.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons35 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean36 = compilerEnvirons35.isReservedKeywordAsIdentifier();
        boolean boolean37 = compilerEnvirons35.getWarnTrailingComma();
        compilerEnvirons35.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet40 = compilerEnvirons35.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter41 = compilerEnvirons35.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory42 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons29, errorReporter41);
        com.google.javascript.rhino.head.IRFactory iRFactory43 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons25, errorReporter41);
        compilerEnvirons25.setAllowSharpComments(false);
        boolean boolean46 = compilerEnvirons25.recoverFromErrors();
        java.util.Set<java.lang.String> strSet47 = compilerEnvirons25.getActivationNames();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons48 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean49 = compilerEnvirons48.isReservedKeywordAsIdentifier();
        boolean boolean50 = compilerEnvirons48.getWarnTrailingComma();
        compilerEnvirons48.setXmlAvailable(true);
        boolean boolean53 = compilerEnvirons48.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory54 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons48);
        boolean boolean55 = compilerEnvirons48.recoverFromErrors();
        com.google.javascript.rhino.head.ErrorReporter errorReporter56 = compilerEnvirons48.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser57 = new com.google.javascript.rhino.head.Parser(compilerEnvirons25, errorReporter56);
        compilerEnvirons0.setErrorReporter(errorReporter56);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 170 + "'", int27 == 170);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 170 + "'", int28 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(errorReporter41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(strSet47);
        org.junit.Assert.assertNotNull(compilerEnvirons48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(errorReporter56);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        scriptNode0.setEncodedSource("typeof");
        java.lang.Object obj7 = scriptNode0.getProp(2);
        java.lang.Object obj8 = scriptNode0.getCompilerData();
        scriptNode0.setSourceName("-213029975\tSCRIPT -213029975 1\n");
        int int11 = scriptNode0.getLength();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        java.lang.String str5 = scriptNode1.makeIndent((int) (byte) -1);
        scriptNode1.clearParentScope();
        boolean boolean7 = scriptNode1.hasChildren();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setXmlAvailable(false);
        boolean boolean20 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setRecoverFromErrors(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        int int2 = astRoot0.getPosition();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap11 = scriptNode4.getSymbolTable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.isIdeMode();
        compilerEnvirons12.setReservedKeywordAsIdentifier(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray23 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        compilerEnvirons17.setActivationNames((java.util.Set<java.lang.String>) strSet24);
        boolean boolean27 = compilerEnvirons17.isGenerateDebugInfo();
        compilerEnvirons17.setOptimizationLevel((int) (short) 1);
        compilerEnvirons17.setAllowSharpComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter32 = compilerEnvirons17.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory33 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons12, errorReporter32);
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int35 = astRoot34.getParamCount();
        int int36 = astRoot34.getPosition();
        com.google.javascript.rhino.head.Node node37 = astRoot34.target;
        com.google.javascript.rhino.head.Node node38 = iRFactory33.transform((com.google.javascript.rhino.head.ast.AstNode) astRoot34);
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot40 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = astRoot40.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        boolean boolean53 = comment52.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType56 = null;
        com.google.javascript.rhino.head.ast.Comment comment58 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType56, "");
        java.lang.String str60 = comment58.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray61 = new com.google.javascript.rhino.head.ast.Comment[] { comment46, comment52, comment58 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet62 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet62, commentArray61);
        astRoot40.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet62);
        boolean boolean65 = astRoot40.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray66 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList67 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList67, symbolArray66);
        astRoot40.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList67);
        int int70 = astRoot40.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList74 = scriptNode72.getChildScopes();
        int int75 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.Node node76 = scriptNode72.getLastSibling();
        scriptNode72.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList82 = scriptNode80.getFunctions();
        scriptNode80.setPosition((int) (byte) 10);
        java.lang.String str85 = scriptNode72.toStringTree(scriptNode80);
        int int86 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot40, (com.google.javascript.rhino.head.ast.Scope) scriptNode72);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap88 = astRoot40.getSymbolTable();
        scriptNode4.setSymbolTable(strMap88);
        astRoot0.setSymbolTable(strMap88);
        com.google.javascript.rhino.head.ast.Symbol symbol91 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.putSymbol(symbol91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(errorReporter32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "                                                                                                                                                                                                        " + "'", str60, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(symbolArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(scopeList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(functionNodeList82);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(strMap88);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.reportWarningAsError();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons4 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean5 = compilerEnvirons4.isReservedKeywordAsIdentifier();
        boolean boolean6 = compilerEnvirons4.getWarnTrailingComma();
        boolean boolean7 = compilerEnvirons4.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter8 = compilerEnvirons4.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory9 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter8);
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = astRoot10.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType14 = null;
        com.google.javascript.rhino.head.ast.Comment comment16 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType14, "");
        boolean boolean17 = comment16.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType20, "");
        boolean boolean23 = comment22.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        java.lang.String str30 = comment28.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray31 = new com.google.javascript.rhino.head.ast.Comment[] { comment16, comment22, comment28 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet32 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet32, commentArray31);
        astRoot10.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet32);
        boolean boolean35 = astRoot10.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType38, "hi!");
        astRoot10.addComment(comment40);
        astRoot10.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = iRFactory9.transformTree(astRoot10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList45 = astRoot10.getFunctions();
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray46 = astRoot10.getParamAndVarConst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(errorReporter8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                                                                                                                                                                                                        " + "'", str30, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(scriptNode44);
        org.junit.Assert.assertNotNull(functionNodeList45);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.isGenerateObserverCount();
        java.util.Set<java.lang.String> strSet4 = compilerEnvirons0.getActivationNames();
        boolean boolean5 = compilerEnvirons0.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        boolean boolean8 = compilerEnvirons6.getWarnTrailingComma();
        compilerEnvirons6.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet11 = compilerEnvirons6.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter12 = compilerEnvirons6.getErrorReporter();
        boolean boolean13 = compilerEnvirons6.isAllowMemberExprAsFunctionName();
        boolean boolean14 = compilerEnvirons6.isGenerateObserverCount();
        compilerEnvirons6.setOptimizationLevel((int) (short) 0);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean18 = compilerEnvirons17.isReservedKeywordAsIdentifier();
        boolean boolean19 = compilerEnvirons17.getWarnTrailingComma();
        compilerEnvirons17.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet22 = compilerEnvirons17.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = compilerEnvirons17.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6, errorReporter23);
        compilerEnvirons0.setErrorReporter(errorReporter23);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter23.error("{\n}\n", "                                                                                                        ", 21, "                                                                                                                                                                                                                                                                                                                                                    {\n                                                                                                                                                                                                                                                                                                                                                    }\n", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(errorReporter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(errorReporter23);
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope13);
        int int15 = scriptNode8.getEndLineno();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(1936891202, (com.google.javascript.rhino.head.Node) scriptNode8, (-929928321));
        // The following exception was thrown during execution in test generation
        try {
            int int18 = scriptNode8.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        int int42 = astRoot0.getParamCount();
        java.lang.String str43 = astRoot0.debugPrint();
        astRoot0.checkParentLinks();
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n1\t  COMMENT 2 0\n" + "'", str43, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n1\t  COMMENT 2 0\n");
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode32.getFunctions();
        scriptNode32.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scope37);
        scriptNode32.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node41 = iRFactory24.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode32.setTop(scriptNode52);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode32, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode66);
        com.google.javascript.rhino.head.ast.Scope scope69 = scriptNode8.getDefiningScope("                      ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode71.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot74 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator75 = astRoot74.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor76 = astRoot74.iterator();
        scriptNode71.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot74);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor78 = null;
        astRoot74.visitComments(nodeVisitor78);
        astRoot74.setEndLineno(17);
        com.google.javascript.rhino.head.ast.Symbol symbol83 = astRoot74.getSymbol("AstRoot");
        scriptNode8.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot74);
        astRoot74.removeChildren();
        com.google.javascript.rhino.head.ast.Scope scope87 = astRoot74.getDefiningScope("typeof");
        int int88 = astRoot74.getBaseLineno();
        // The following exception was thrown during execution in test generation
        try {
            astRoot74.setDouble((double) 692787021);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(scope69);
        org.junit.Assert.assertNotNull(nodeItor76);
        org.junit.Assert.assertNull(symbol83);
        org.junit.Assert.assertNull(scope87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        java.lang.String str2 = astRoot0.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = astRoot3.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        boolean boolean10 = comment9.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        java.lang.String str23 = comment21.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray24 = new com.google.javascript.rhino.head.ast.Comment[] { comment9, comment15, comment21 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet25, commentArray24);
        astRoot3.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet25);
        boolean boolean28 = astRoot3.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType31, "hi!");
        astRoot3.addComment(comment33);
        astRoot0.addComment(comment33);
        astRoot0.checkParentLinks();
        astRoot0.removeChildren();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str2, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                                                                                                                                                                                                        " + "'", str23, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList4 = scriptNode2.getFunctions();
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = astRoot5.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        java.lang.String str25 = comment23.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray26 = new com.google.javascript.rhino.head.ast.Comment[] { comment11, comment17, comment23 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet27 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet27, commentArray26);
        astRoot5.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet27);
        boolean boolean30 = astRoot5.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray31 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList32 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList32, symbolArray31);
        astRoot5.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList32);
        int int35 = astRoot5.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = astRoot36.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        boolean boolean43 = comment42.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        boolean boolean49 = comment48.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        java.lang.String str56 = comment54.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray57 = new com.google.javascript.rhino.head.ast.Comment[] { comment42, comment48, comment54 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet58 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet58, commentArray57);
        astRoot36.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet58);
        boolean boolean61 = astRoot36.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType64, "hi!");
        astRoot36.addComment(comment66);
        astRoot5.addComment(comment66);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode70.removeProp(10);
        astRoot5.setTop(scriptNode70);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-1034592013), (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scriptNode70, 1275261773);
        int int76 = scriptNode2.getPosition();
        org.junit.Assert.assertNotNull(functionNodeList4);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "                                                                                                                                                                                                        " + "'", str25, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(symbolArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "                                                                                                                                                                                                        " + "'", str56, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        java.lang.String str10 = astRoot3.makeIndent(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        java.lang.String str18 = scriptNode12.toSource((int) (short) -1);
        astRoot3.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.Scope scope20 = scriptNode12.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator22 = astRoot21.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        boolean boolean34 = comment33.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray42 = new com.google.javascript.rhino.head.ast.Comment[] { comment27, comment33, comment39 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet43 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet43, commentArray42);
        astRoot21.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet43);
        boolean boolean46 = astRoot21.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray47 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList48 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList48, symbolArray47);
        astRoot21.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList48);
        astRoot21.setInStrictMode(false);
        astRoot21.putIntProp(0, (int) (byte) 100);
        scope20.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot21);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator57 = scope20.new NodeIterator();
        com.google.javascript.rhino.head.Node node58 = nodeIterator57.next();
        com.google.javascript.rhino.head.Node node59 = node58.getNext();
        node58.removeProp(1683826323);
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "                                " + "'", str10, "                                ");
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n}\n" + "'", str18, "{\n}\n");
        org.junit.Assert.assertNotNull(scope20);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(symbolArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(0, 100);
        node2.putIntProp(520206471, (-19));
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = scriptNode2.new NodeIterator();
        int int9 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = scriptNode2.getParentScope();
        scriptNode2.removeProp(65536);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        int int17 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = scriptNode14.getLastSibling();
        int int19 = scriptNode14.getEndLineno();
        scriptNode14.setBaseLineno(4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = astRoot22.getComments();
        int int24 = astRoot22.getEndLineno();
        com.google.javascript.rhino.head.Node node26 = astRoot22.setType((int) (short) 10);
        astRoot22.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator34 = scriptNode33.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        java.lang.String str42 = comment39.getValue();
        scriptNode33.setParent((com.google.javascript.rhino.head.ast.AstNode) comment39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        java.lang.String str64 = comment62.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray65 = new com.google.javascript.rhino.head.ast.Comment[] { comment50, comment56, comment62 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet66 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet66, commentArray65);
        astRoot44.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet66);
        boolean boolean69 = astRoot44.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray70 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList71 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList71, symbolArray70);
        astRoot44.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList71);
        com.google.javascript.rhino.head.Node node74 = astRoot44.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot44, (com.google.javascript.rhino.head.ast.Scope) scriptNode76);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) comment39, (com.google.javascript.rhino.head.Node) scriptNode76);
        astRoot22.addComment(comment39);
        scriptNode14.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot22);
        com.google.javascript.rhino.head.Token.CommentType commentType84 = null;
        com.google.javascript.rhino.head.ast.Comment comment86 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType84, "");
        com.google.javascript.rhino.head.Token.CommentType commentType87 = comment86.getCommentType();
        java.lang.String str89 = comment86.toSource(21);
        java.lang.String str90 = comment86.getValue();
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(15, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) astRoot22, (com.google.javascript.rhino.head.Node) comment86, 6);
        astRoot22.setEncodedSource("1\tCOMMENT 1 0\n");
        com.google.javascript.rhino.head.ast.Symbol symbol96 = astRoot22.getSymbol("1384960853\tSCRIPT 1384960853 1\n");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump97 = astRoot22.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(scope10);
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(commentSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "                                                                                                                                                                                                        " + "'", str64, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(symbolArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(commentType87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "                                          " + "'", str89, "                                          ");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNull(symbol96);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean1 = astRoot0.hasSideEffects();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap2 = null;
        astRoot0.setSymbolTable(strMap2);
        boolean boolean4 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        int int10 = scriptNode6.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList14 = scriptNode12.getFunctions();
        scriptNode12.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope17 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scope17);
        scriptNode12.setEncodedSource("-1\tSCRIPT -1 1\n");
        scriptNode12.setBaseLineno(12);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator28 = scriptNode27.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        java.lang.String str36 = comment33.getValue();
        scriptNode27.setParent((com.google.javascript.rhino.head.ast.AstNode) comment33);
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator39 = astRoot38.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        java.lang.String str58 = comment56.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray59 = new com.google.javascript.rhino.head.ast.Comment[] { comment44, comment50, comment56 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet60 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet60, commentArray59);
        astRoot38.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet60);
        boolean boolean63 = astRoot38.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray64 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList65 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList65, symbolArray64);
        astRoot38.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList65);
        com.google.javascript.rhino.head.Node node68 = astRoot38.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode69.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode70);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot38, (com.google.javascript.rhino.head.ast.Scope) scriptNode70);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode26, (com.google.javascript.rhino.head.Node) comment33, (com.google.javascript.rhino.head.Node) scriptNode70);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode74.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode75);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList77 = scriptNode75.getChildScopes();
        java.lang.String str78 = scriptNode75.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList82 = scriptNode80.getChildScopes();
        int int83 = scriptNode80.getBaseLineno();
        com.google.javascript.rhino.head.Node node84 = scriptNode80.getLastSibling();
        int int85 = scriptNode80.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator86 = scriptNode80.new NodeIterator();
        int int87 = scriptNode80.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot88 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator89 = astRoot88.new NodeIterator();
        scriptNode80.setCompilerData((java.lang.Object) nodeIterator89);
        int int91 = scriptNode75.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        scriptNode80.setLineno(20);
        com.google.javascript.rhino.head.Node node94 = scriptNode80.getLastSibling();
        scriptNode26.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode80);
        int int96 = scriptNode26.getEncodedSourceEnd();
        scriptNode12.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        // The following exception was thrown during execution in test generation
        try {
            scriptNode26.setDouble((double) 391457258);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(functionNodeList14);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "                                                                                                                                                                                                        " + "'", str58, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(symbolArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(scopeList77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(scopeList82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1870913061) + "'", int91 == (-1870913061));
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        com.google.javascript.rhino.head.Node node5 = scriptNode0.setType((int) 'a');
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        java.lang.String str26 = comment24.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray27 = new com.google.javascript.rhino.head.ast.Comment[] { comment12, comment18, comment24 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet28 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet28, commentArray27);
        astRoot6.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet28);
        boolean boolean31 = astRoot6.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode32 = astRoot6.getParent();
        java.lang.String str33 = astRoot6.debugPrint();
        int int34 = astRoot6.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet35 = astRoot6.getComments();
        astRoot6.checkParentLinks();
        astRoot6.setEndLineno(842975161);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode42.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray49 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList50 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList50, symbolArray49);
        scriptNode48.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList50);
        scriptNode45.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList50);
        scriptNode42.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList50);
        scriptNode40.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList50);
        node5.addChildAfter((com.google.javascript.rhino.head.Node) astRoot6, (com.google.javascript.rhino.head.Node) scriptNode40);
        java.lang.String str57 = astRoot6.debugPrint();
        int int58 = astRoot6.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor59 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot6.visit(nodeVisitor59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                                                                                                                                                                        " + "'", str26, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(astNode32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str33, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(commentSet35);
        org.junit.Assert.assertNotNull(symbolArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str57, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType29, "hi!");
        astRoot1.addComment(comment31);
        astRoot1.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.AstRoot astRoot35 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = astRoot35.getComments();
        int int37 = astRoot35.getEndLineno();
        com.google.javascript.rhino.head.Node node39 = astRoot35.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot1, (com.google.javascript.rhino.head.ast.Scope) astRoot35);
        astRoot35.clearParentScope();
        boolean boolean42 = astRoot35.hasSideEffects();
        java.lang.String str44 = astRoot35.toSource(95442629);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(26, (com.google.javascript.rhino.head.Node) astRoot35);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(commentSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        compilerEnvirons0.setStrictMode(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons40 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean41 = compilerEnvirons40.isReservedKeywordAsIdentifier();
        int int42 = compilerEnvirons40.getLanguageVersion();
        compilerEnvirons40.setLanguageVersion((int) (byte) 100);
        compilerEnvirons40.setXmlAvailable(false);
        compilerEnvirons40.setAllowMemberExprAsFunctionName(false);
        com.google.javascript.rhino.head.ErrorReporter errorReporter49 = compilerEnvirons40.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser50 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter49);
        boolean boolean51 = compilerEnvirons0.isGeneratingSource();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertNotNull(compilerEnvirons40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 170 + "'", int42 == 170);
        org.junit.Assert.assertNotNull(errorReporter49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope13);
        scriptNode8.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        int int22 = scriptNode19.getBaseLineno();
        com.google.javascript.rhino.head.Node node23 = scriptNode19.getLastSibling();
        int int24 = scriptNode19.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope27 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = astRoot28.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        java.lang.String str48 = comment46.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray49 = new com.google.javascript.rhino.head.ast.Comment[] { comment34, comment40, comment46 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet50 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet50, commentArray49);
        astRoot28.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet50);
        boolean boolean53 = astRoot28.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode54 = astRoot28.getParent();
        astRoot28.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scope27, (com.google.javascript.rhino.head.Node) astRoot28, 6);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) astRoot28);
        boolean boolean60 = astRoot28.hasConsistentReturnUsage();
        astRoot28.checkParentLinks();
        int int62 = astRoot28.getFunctionCount();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "                                                                                                                                                                                                        " + "'", str48, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(astNode54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode1 = scriptNode0.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = astRoot2.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType6, "");
        boolean boolean9 = comment8.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray23 = new com.google.javascript.rhino.head.ast.Comment[] { comment8, comment14, comment20 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet24 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet24, commentArray23);
        astRoot2.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet24);
        boolean boolean27 = astRoot2.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray28 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList29 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList29, symbolArray28);
        astRoot2.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList29);
        int int32 = astRoot2.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment33 = astRoot2.getJsDocNode();
        astRoot2.setInStrictMode(false);
        scriptNode0.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot2);
        java.lang.String str37 = astRoot2.debugPrint();
        int int38 = astRoot2.depth();
        org.junit.Assert.assertNull(functionNode1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(symbolArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(comment33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str37, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isGeneratingSource();
        boolean boolean7 = compilerEnvirons0.isStrictMode();
        boolean boolean8 = compilerEnvirons0.reportWarningAsError();
        com.google.javascript.rhino.head.IRFactory iRFactory9 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.IRFactory iRFactory10 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray17 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        compilerEnvirons11.setActivationNames((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.head.Parser parser21 = new com.google.javascript.rhino.head.Parser(compilerEnvirons11);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = parser21.parse("-1\tSCRIPT -1 1\n", "35", 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode29.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = astRoot32.getComments();
        int int34 = astRoot32.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor35 = null;
        astRoot32.visitComments(nodeVisitor35);
        com.google.javascript.rhino.head.Node node37 = astRoot32.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet38 = astRoot32.getComments();
        com.google.javascript.rhino.head.Node node39 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode29, (com.google.javascript.rhino.head.Node) astRoot32);
        int int40 = scriptNode29.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons41 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory43 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons41, errorReporter42);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode44.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList47 = scriptNode45.getFunctions();
        scriptNode45.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node50 = iRFactory43.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode45);
        java.lang.String str51 = scriptNode45.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList55 = scriptNode53.getChildScopes();
        int int56 = scriptNode53.getBaseLineno();
        com.google.javascript.rhino.head.Node node57 = scriptNode53.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList61 = scriptNode59.getChildScopes();
        java.lang.String str63 = scriptNode59.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode53.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode59, (com.google.javascript.rhino.head.Node) scriptNode65);
        java.lang.Object obj68 = scriptNode59.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str71 = scriptNode69.toSource((int) '4');
        java.lang.String str72 = scriptNode59.toStringTree(scriptNode69);
        scriptNode45.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode29, (com.google.javascript.rhino.head.Node) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList75 = scriptNode29.getChildScopes();
        astRoot25.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode29);
        astRoot25.checkParentLinks();
        com.google.javascript.rhino.head.ast.AstRoot astRoot78 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean79 = astRoot78.hasSideEffects();
        astRoot25.addChildToBack((com.google.javascript.rhino.head.Node) astRoot78);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode81 = iRFactory10.transformTree(astRoot78);
        // The following exception was thrown during execution in test generation
        try {
            astRoot78.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(astRoot25);
        org.junit.Assert.assertNull(commentSet33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(commentSet38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(functionNodeList47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(scopeList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(scopeList61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str71, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(scopeList75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(scriptNode81);
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setXmlAvailable(false);
        compilerEnvirons0.setXmlAvailable(false);
        com.google.javascript.rhino.head.Parser parser22 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean23 = compilerEnvirons0.isIdeMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray30 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        compilerEnvirons24.setActivationNames((java.util.Set<java.lang.String>) strSet31);
        boolean boolean34 = compilerEnvirons24.getWarnTrailingComma();
        com.google.javascript.rhino.head.ErrorReporter errorReporter35 = compilerEnvirons24.getErrorReporter();
        boolean boolean36 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons37 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean38 = compilerEnvirons37.isReservedKeywordAsIdentifier();
        boolean boolean39 = compilerEnvirons37.getWarnTrailingComma();
        compilerEnvirons37.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet42 = compilerEnvirons37.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = compilerEnvirons37.getErrorReporter();
        compilerEnvirons37.setReservedKeywordAsIdentifier(false);
        boolean boolean46 = compilerEnvirons37.isGeneratingSource();
        compilerEnvirons37.setIdeMode(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons49 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean50 = compilerEnvirons49.isReservedKeywordAsIdentifier();
        boolean boolean51 = compilerEnvirons49.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons52 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean53 = compilerEnvirons52.isReservedKeywordAsIdentifier();
        boolean boolean54 = compilerEnvirons52.getWarnTrailingComma();
        compilerEnvirons52.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet57 = compilerEnvirons52.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter58 = compilerEnvirons52.getErrorReporter();
        java.lang.String[] strArray64 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        compilerEnvirons52.setActivationNames((java.util.Set<java.lang.String>) strSet65);
        com.google.javascript.rhino.head.ErrorReporter errorReporter68 = compilerEnvirons52.getErrorReporter();
        compilerEnvirons49.setErrorReporter(errorReporter68);
        com.google.javascript.rhino.head.Parser parser70 = new com.google.javascript.rhino.head.Parser(compilerEnvirons37, errorReporter68);
        com.google.javascript.rhino.head.IRFactory iRFactory71 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter68);
        com.google.javascript.rhino.head.IRFactory iRFactory72 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter68);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter68.error("Comment", ">", (-50044338), "", (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorReporter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(errorReporter43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(errorReporter58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(errorReporter68);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Node node4 = scriptNode1.setType((int) '#');
        int int5 = scriptNode1.getLineno();
        boolean boolean6 = scriptNode1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = scriptNode7.spliterator();
        com.google.javascript.rhino.head.Node node10 = scriptNode7.setType((int) '#');
        java.lang.Object obj11 = scriptNode7.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol13 = scriptNode7.getSymbol("typeof");
        scriptNode7.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet17 = astRoot16.getComments();
        int int18 = astRoot16.getEndLineno();
        com.google.javascript.rhino.head.Node node20 = astRoot16.setType((int) (short) 10);
        astRoot16.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator28 = scriptNode27.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        java.lang.String str36 = comment33.getValue();
        scriptNode27.setParent((com.google.javascript.rhino.head.ast.AstNode) comment33);
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator39 = astRoot38.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        java.lang.String str58 = comment56.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray59 = new com.google.javascript.rhino.head.ast.Comment[] { comment44, comment50, comment56 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet60 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet60, commentArray59);
        astRoot38.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet60);
        boolean boolean63 = astRoot38.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray64 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList65 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList65, symbolArray64);
        astRoot38.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList65);
        com.google.javascript.rhino.head.Node node68 = astRoot38.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode69.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode70);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot38, (com.google.javascript.rhino.head.ast.Scope) scriptNode70);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode26, (com.google.javascript.rhino.head.Node) comment33, (com.google.javascript.rhino.head.Node) scriptNode70);
        astRoot16.addComment(comment33);
        com.google.javascript.rhino.head.Node node75 = astRoot16.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator76 = node75.spliterator();
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(21, (com.google.javascript.rhino.head.Node) scriptNode1, (com.google.javascript.rhino.head.Node) scriptNode7, node75, (int) (byte) 10);
        scriptNode1.putIntProp(0, 601078793);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode83 = scriptNode1.getFunctionNode(638771449);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(symbol13);
        org.junit.Assert.assertNull(commentSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "                                                                                                                                                                                                        " + "'", str58, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(symbolArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeSpliterator76);
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray2 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList3 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList3, symbolArray2);
        scriptNode1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList3);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList6 = scriptNode1.getStatements();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setEncodedSourceStart((int) 'a');
        java.lang.String str13 = scriptNode8.shortName();
        com.google.javascript.rhino.head.Node node14 = scriptNode8.getLastChild();
        com.google.javascript.rhino.head.ast.Scope scope17 = new com.google.javascript.rhino.head.ast.Scope((-1), 11);
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(842975161, (com.google.javascript.rhino.head.Node) scriptNode1, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope17, (-325419474));
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = node19.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            node19.labelId(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(astNodeList6);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ScriptNode" + "'", str13, "ScriptNode");
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        com.google.javascript.rhino.head.Node node23 = scriptNode17.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator24 = scriptNode17.new NodeIterator();
        boolean boolean25 = nodeIterator24.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator24.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node node3 = scriptNode0.setType((int) '#');
        java.lang.Object obj4 = scriptNode0.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol6 = scriptNode0.getSymbol("typeof");
        scriptNode0.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode10.getChildScopes();
        int int13 = scriptNode10.getBaseLineno();
        com.google.javascript.rhino.head.Node node14 = scriptNode10.getLastSibling();
        int int15 = scriptNode10.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = scriptNode10.new NodeIterator();
        int int17 = scriptNode10.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope18 = scriptNode10.getParentScope();
        java.lang.String str19 = scriptNode10.debugPrint();
        scriptNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode10);
        com.google.javascript.rhino.head.ast.Scope scope23 = new com.google.javascript.rhino.head.ast.Scope(136, 7);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode10, scope23);
        com.google.javascript.rhino.head.ast.Symbol symbol25 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode10.putSymbol(symbol25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(symbol6);
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "-1\t  SCRIPT 0 1\n" + "'", str19, "-1\t  SCRIPT 0 1\n");
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(189974018, (-552755211));
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet4 = astRoot3.getComments();
        int int5 = astRoot3.getEndLineno();
        com.google.javascript.rhino.head.Node node7 = astRoot3.setType((int) (short) 10);
        astRoot3.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator15 = scriptNode14.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        java.lang.String str23 = comment20.getValue();
        scriptNode14.setParent((com.google.javascript.rhino.head.ast.AstNode) comment20);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray51 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList52 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList52, symbolArray51);
        astRoot25.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList52);
        com.google.javascript.rhino.head.Node node55 = astRoot25.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode56.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode57);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot25, (com.google.javascript.rhino.head.ast.Scope) scriptNode57);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode13, (com.google.javascript.rhino.head.Node) comment20, (com.google.javascript.rhino.head.Node) scriptNode57);
        astRoot3.addComment(comment20);
        com.google.javascript.rhino.head.Node node62 = astRoot3.getLastSibling();
        astRoot3.setPosition(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode(24);
        astRoot3.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode66);
        java.lang.Object obj69 = scriptNode66.getProp((-270991973));
        int int70 = scriptNode66.getRegexpCount();
        scope2.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode66);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor72 = null;
        // The following exception was thrown during execution in test generation
        try {
            scope2.visit(nodeVisitor72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(symbolArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode10.getChildScopes();
        java.lang.String str14 = scriptNode10.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode15.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        scriptNode16.setEncodedSourceEnd(11);
        int int20 = scriptNode10.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        scriptNode2.putProp(8, (java.lang.Object) scriptNode16);
        scriptNode2.setEndLineno(14);
        java.lang.String str24 = scriptNode2.toSource();
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode51 = astRoot25.getParent();
        java.lang.String str52 = astRoot25.debugPrint();
        int int53 = astRoot25.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = astRoot25.getComments();
        astRoot25.setEncodedSourceBounds((-325419474), 136);
        com.google.javascript.rhino.head.ast.AstRoot astRoot58 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet59 = astRoot58.getComments();
        int int60 = astRoot58.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor61 = null;
        astRoot58.visitComments(nodeVisitor61);
        com.google.javascript.rhino.head.Node node63 = astRoot58.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope64 = astRoot58.getEnclosingScope();
        astRoot58.setEncodedSourceStart(23);
        java.lang.String str68 = astRoot58.toSource(95442629);
        com.google.javascript.rhino.head.Token.CommentType commentType71 = null;
        com.google.javascript.rhino.head.ast.Comment comment73 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType71, "hi!");
        java.lang.String str75 = comment73.toSource(5);
        astRoot58.setJsDocNode(comment73);
        java.lang.String str77 = comment73.getValue();
        astRoot25.addComment(comment73);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) astRoot25);
        scriptNode2.setEncodedSourceEnd(626782571);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor82 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode2.visit(nodeVisitor82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 871306895 + "'", int20 == 871306895);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n}\n" + "'", str24, "{\n}\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(astNode51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str52, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(commentSet54);
        org.junit.Assert.assertNull(commentSet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(scope64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "          hi!" + "'", str75, "          hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment(10, (-1721493936), commentType3, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((-777163487));
        java.lang.String str8 = comment5.toStringTree(scriptNode7);
        com.google.javascript.rhino.head.Node node10 = new com.google.javascript.rhino.head.Node((-602720490), (com.google.javascript.rhino.head.Node) scriptNode7, (-837790279));
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scope1.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        scope1.setTop(scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scope1.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        int int14 = comment12.getLineno();
        com.google.javascript.rhino.head.Node node16 = comment12.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        int int23 = comment21.getLineno();
        com.google.javascript.rhino.head.Node node25 = comment21.setType(18);
        comment21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope1, (com.google.javascript.rhino.head.Node) comment12, (com.google.javascript.rhino.head.Node) comment21, 15);
        com.google.javascript.rhino.head.Node node29 = scope1.getFirstChild();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap30 = scope1.getSymbolTable();
        com.google.javascript.rhino.head.ast.AstRoot astRoot31 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator32 = astRoot31.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        boolean boolean44 = comment43.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        java.lang.String str51 = comment49.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray52 = new com.google.javascript.rhino.head.ast.Comment[] { comment37, comment43, comment49 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet53 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet53, commentArray52);
        astRoot31.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet53);
        boolean boolean56 = astRoot31.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray57 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList58 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList58, symbolArray57);
        astRoot31.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList58);
        int int61 = astRoot31.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList65 = scriptNode63.getChildScopes();
        int int66 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.Node node67 = scriptNode63.getLastSibling();
        scriptNode63.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList73 = scriptNode71.getFunctions();
        scriptNode71.setPosition((int) (byte) 10);
        java.lang.String str76 = scriptNode63.toStringTree(scriptNode71);
        int int77 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot31, (com.google.javascript.rhino.head.ast.Scope) scriptNode63);
        java.lang.String str80 = astRoot31.toSource(15);
        com.google.javascript.rhino.head.Token.CommentType commentType83 = null;
        com.google.javascript.rhino.head.ast.Comment comment85 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType83, "");
        java.lang.String str87 = comment85.toSource(100);
        java.lang.String str88 = comment85.getValue();
        boolean boolean89 = comment85.hasSideEffects();
        java.lang.String str90 = comment85.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType91 = comment85.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType92 = null;
        comment85.setCommentType(commentType92);
        astRoot31.setJsDocNode(comment85);
        scope1.addChildrenToBack((com.google.javascript.rhino.head.Node) astRoot31);
        astRoot31.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.Scope scope99 = astRoot31.getDefiningScope("                        {\n                        }\n");
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                                                                                                                        " + "'", str51, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(symbolArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(scopeList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(functionNodeList73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "                                                                                                                                                                                                        " + "'", str87, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNull(commentType91);
        org.junit.Assert.assertNull(scope99);
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        int int5 = comment4.getLength();
        java.lang.String str6 = comment4.getValue();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons7 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory9 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons7, errorReporter8);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList13 = scriptNode11.getFunctions();
        scriptNode11.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node16 = iRFactory9.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode11.getChildScopes();
        java.lang.Object obj18 = scriptNode11.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        int int23 = scriptNode20.getBaseLineno();
        com.google.javascript.rhino.head.Node node24 = scriptNode20.getLastSibling();
        int int25 = scriptNode20.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor26 = scriptNode20.iterator();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator29 = scriptNode28.spliterator();
        scriptNode20.setTop(scriptNode28);
        com.google.javascript.rhino.head.ast.Scope scope31 = new com.google.javascript.rhino.head.ast.Scope();
        int int34 = scope31.getIntProp(16, 22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        int int41 = scriptNode36.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator42 = scriptNode36.new NodeIterator();
        int int43 = scriptNode36.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        scriptNode36.setCompilerData((java.lang.Object) nodeIterator45);
        scope31.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode36);
        com.google.javascript.rhino.head.ast.Scope scope48 = scriptNode36.getParentScope();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = scriptNode36.getTop();
        java.lang.String str51 = comment4.toStringTree(scriptNode36);
        java.lang.String str52 = comment4.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType53 = null;
        comment4.setCommentType(commentType53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNotNull(functionNodeList13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(nodeItor26);
        org.junit.Assert.assertNotNull(nodeSpliterator29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(scope48);
        org.junit.Assert.assertNotNull(scriptNode50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode24.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = astRoot27.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor29 = astRoot27.iterator();
        scriptNode24.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot27);
        java.lang.String str31 = scriptNode24.toString();
        scriptNode17.setCompilerData((java.lang.Object) scriptNode24);
        int int33 = scriptNode17.getAbsolutePosition();
        java.lang.Object obj35 = scriptNode17.getProp(41);
        int int36 = scriptNode17.getEncodedSourceEnd();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray37 = scriptNode17.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(nodeItor29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "136" + "'", str31, "136");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory6 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet9 = astRoot8.getComments();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator15 = scriptNode14.spliterator();
        com.google.javascript.rhino.head.Node node17 = scriptNode14.setType((int) '#');
        boolean boolean18 = scriptNode14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) astRoot8, (com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) scriptNode14);
        com.google.javascript.rhino.head.Node node20 = iRFactory6.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        com.google.javascript.rhino.head.Node node22 = scriptNode11.setType((-213029975));
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType25, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        comment27.setCommentType(commentType28);
        int int32 = comment27.getIntProp((int) (byte) 10, 0);
        comment27.setPosition(161);
        java.lang.String str36 = comment27.toSource((-325419474));
        scriptNode11.setJsDocNode(comment27);
        int int38 = scriptNode11.getEndLineno();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(commentSet9);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = compilerEnvirons0.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser11 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean12 = compilerEnvirons0.isStrictMode();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setWarnTrailingComma(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(errorReporter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        com.google.javascript.rhino.head.Node node30 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        scriptNode36.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList46 = scriptNode44.getFunctions();
        scriptNode44.setPosition((int) (byte) 10);
        java.lang.String str49 = scriptNode36.toStringTree(scriptNode44);
        int int50 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node52 = scriptNode36.setType((int) (byte) -1);
        java.lang.String str53 = astRoot0.toStringTree(scriptNode36);
        java.lang.String str55 = scriptNode36.toSource((-306271829));
        com.google.javascript.rhino.head.ast.AstRoot astRoot56 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet57 = astRoot56.getComments();
        int int58 = astRoot56.getEndLineno();
        com.google.javascript.rhino.head.Node node60 = astRoot56.setType((int) (short) 10);
        scriptNode36.addChildrenToBack((com.google.javascript.rhino.head.Node) astRoot56);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator62 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator63 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator64 = positionComparator62.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator63);
        com.google.javascript.rhino.head.ast.AstRoot astRoot65 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int66 = astRoot65.getBaseLineno();
        java.lang.String str67 = astRoot65.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot68 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator69 = astRoot68.new NodeIterator();
        int int70 = positionComparator63.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot65, (com.google.javascript.rhino.head.ast.AstNode) astRoot68);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator72 = scriptNode71.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator73 = scriptNode71.new NodeIterator();
        astRoot68.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        com.google.javascript.rhino.head.Node node75 = scriptNode71.getNext();
        scriptNode71.setEncodedSourceStart(3);
        astRoot56.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode71);
        java.lang.String str79 = astRoot56.toString();
        com.google.javascript.rhino.head.ast.AstRoot astRoot80 = astRoot56.getAstRoot();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(functionNodeList46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{\n}\n" + "'", str55, "{\n}\n");
        org.junit.Assert.assertNull(commentSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(astNodeComparator64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str67, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator72);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "10" + "'", str79, "10");
        org.junit.Assert.assertNotNull(astRoot80);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(52, 24);
        scope2.setLength(835353046);
        scope2.setPosition(11);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator3 = positionComparator1.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode5.getChildScopes();
        int int8 = scriptNode5.getBaseLineno();
        int int9 = scriptNode5.getParamCount();
        scriptNode5.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope12 = scriptNode5.getEnclosingScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        int int17 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = scriptNode14.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        java.lang.String str24 = scriptNode20.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode14.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode20, (com.google.javascript.rhino.head.Node) scriptNode26);
        scriptNode14.setEncodedSourceEnd(170);
        int int30 = positionComparator2.compare((com.google.javascript.rhino.head.ast.AstNode) scope12, (com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        int int31 = scriptNode14.getType();
        com.google.javascript.rhino.head.Node node32 = scriptNode14.getLastChild();
        com.google.javascript.rhino.head.ast.Scope scope33 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator34 = scope33.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        scope33.setTop(scriptNode36);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor39 = scope33.iterator();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList40 = scope33.getChildScopes();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node((-253374738), (com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) scope33, (-1088649131));
        org.junit.Assert.assertNotNull(astNodeComparator3);
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(scope12);
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 136 + "'", int31 == 136);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertNotNull(nodeItor39);
        org.junit.Assert.assertNull(scopeList40);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = compilerEnvirons0.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser11 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        java.io.Reader reader12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot15 = parser11.parse(reader12, "0\tSCRIPT 0 13\n10\t  EXPR_RESULT 10 2\n10\t    NAME 0 2 hi\n12\t  EXPR_RESULT 12 1\n12\t    NOT 0 1\n12\t      ERROR 0 1\n", (-282781957));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(errorReporter10);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        int int8 = astRoot4.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = astRoot4.getAstRoot();
        int int10 = astRoot4.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope11 = astRoot4.getParentScope();
        com.google.javascript.rhino.head.Node node12 = astRoot4.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = astRoot4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(astRoot9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        comment4.setCommentType(commentType5);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = comment4.iterator();
        boolean boolean8 = nodeItor7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeItor7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        scriptNode1.setBaseLineno(4);
        scriptNode1.setEncodedSource("                                      ");
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot13 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator14 = astRoot13.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        boolean boolean20 = comment19.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        boolean boolean26 = comment25.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray34 = new com.google.javascript.rhino.head.ast.Comment[] { comment19, comment25, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet35 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet35, commentArray34);
        astRoot13.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet35);
        boolean boolean38 = astRoot13.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray39 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList40 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList40, symbolArray39);
        astRoot13.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList40);
        int int43 = astRoot13.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator45 = scriptNode44.spliterator();
        com.google.javascript.rhino.head.Node node47 = scriptNode44.setType((int) '#');
        java.lang.Object obj48 = scriptNode44.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator49 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator50 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator51 = positionComparator49.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator50);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode53.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot56 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator57 = astRoot56.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor58 = astRoot56.iterator();
        scriptNode53.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot56);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode60.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode61);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList63 = scriptNode61.getChildScopes();
        int int64 = positionComparator50.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot56, (com.google.javascript.rhino.head.ast.AstNode) scriptNode61);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot13, (com.google.javascript.rhino.head.Node) scriptNode44, (com.google.javascript.rhino.head.Node) scriptNode61);
        java.lang.String str66 = scriptNode44.toString();
        int int67 = scriptNode44.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator69 = scriptNode68.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType72 = null;
        com.google.javascript.rhino.head.ast.Comment comment74 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType72, "");
        java.lang.String str76 = comment74.toSource(100);
        java.lang.String str77 = comment74.getValue();
        scriptNode68.setParent((com.google.javascript.rhino.head.ast.AstNode) comment74);
        scriptNode44.setJsDocNode(comment74);
        scriptNode44.setRelative((int) (short) -1);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator82 = scriptNode44.new NodeIterator();
        scriptNode1.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode44);
        boolean boolean84 = scriptNode44.hasSideEffects();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(symbolArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(astNodeComparator51);
        org.junit.Assert.assertNotNull(nodeItor58);
        org.junit.Assert.assertNull(scopeList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "35" + "'", str66, "35");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator69);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "                                                                                                                                                                                                        " + "'", str76, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot41 = iRFactory37.parse("0\tSCRIPT 0 1\n", "                                ", 13);
        astRoot41.setPosition(0);
        astRoot41.setInStrictMode(true);
        com.google.javascript.rhino.head.ast.AstNode astNode46 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot41.addChild(astNode46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: arg cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertNotNull(astRoot41);
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(0, 0);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory5 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons3, errorReporter4);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node12 = iRFactory5.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        com.google.javascript.rhino.head.ast.AstNode astNode13 = scriptNode7.getParent();
        com.google.javascript.rhino.head.ast.Scope scope14 = scriptNode7.getEnclosingScope();
        com.google.javascript.rhino.head.ast.Scope.joinScopes(scope2, scope14);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(astNode13);
        org.junit.Assert.assertNotNull(scope14);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        int int9 = astRoot5.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        astRoot5.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot10);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = astRoot10.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }
}

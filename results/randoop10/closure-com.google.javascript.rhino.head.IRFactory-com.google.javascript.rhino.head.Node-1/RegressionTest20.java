import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        int int11 = scriptNode8.getBaseLineno();
        int int12 = scriptNode8.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode14.getFunctions();
        scriptNode14.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode8.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) scope19);
        scriptNode1.setTop(scriptNode8);
        scriptNode8.setEncodedSourceStart((int) (short) 10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = astRoot24.getComments();
        java.lang.String str26 = astRoot24.getSourceName();
        boolean boolean27 = astRoot24.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode28.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode29.getChildScopes();
        int int32 = scriptNode29.getBaseLineno();
        com.google.javascript.rhino.head.Node node33 = scriptNode29.getLastSibling();
        scriptNode29.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList39 = scriptNode37.getFunctions();
        scriptNode37.setPosition((int) (byte) 10);
        java.lang.String str42 = scriptNode29.toStringTree(scriptNode37);
        int int43 = scriptNode29.getBaseLineno();
        boolean boolean44 = scriptNode29.hasConsistentReturnUsage();
        astRoot24.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode29);
        scriptNode8.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot24);
        astRoot24.setBaseLineno(0);
        java.lang.String str50 = astRoot24.toSource((-1));
        astRoot24.setPosition(835353046);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator53 = astRoot24.new NodeIterator();
        boolean boolean54 = astRoot24.isInStrictMode();
        astRoot24.setSourceName("0\tSCRIPT 0 10\n10\t  EXPR_RESULT 10 2\n10\t    NAME 0 2 hi\n12\t  EXPR_RESULT 12 1\n12\t    NOT 0 1\n12\t      ERROR 0 1\n");
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertNull(commentSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(functionNodeList39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        java.lang.String str9 = comment4.makeIndent((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.Node node15 = scriptNode11.getLastSibling();
        int int16 = scriptNode11.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        java.lang.String str23 = scriptNode19.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        scriptNode25.setEncodedSourceEnd(11);
        int int29 = scriptNode19.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        scriptNode11.putProp(8, (java.lang.Object) scriptNode25);
        scriptNode11.setEndLineno(14);
        java.lang.String str33 = scriptNode11.toSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList37 = scriptNode35.getChildScopes();
        int int38 = scriptNode35.getBaseLineno();
        com.google.javascript.rhino.head.Node node39 = scriptNode35.getLastSibling();
        int int40 = scriptNode35.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = scriptNode35.new NodeIterator();
        int int42 = scriptNode35.getLineno();
        scriptNode35.setEncodedSourceEnd((int) (byte) -1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap45 = scriptNode35.getSymbolTable();
        scriptNode11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode35);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        scriptNode47.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        int int52 = scriptNode47.getEndLineno();
        comment4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) scriptNode47);
        com.google.javascript.rhino.head.ast.Comment comment54 = scriptNode11.getJsDocNode();
        com.google.javascript.rhino.head.ast.AstRoot astRoot55 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator56 = astRoot55.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType59 = null;
        com.google.javascript.rhino.head.ast.Comment comment61 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType59, "");
        boolean boolean62 = comment61.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType65 = null;
        com.google.javascript.rhino.head.ast.Comment comment67 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType65, "");
        boolean boolean68 = comment67.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType71 = null;
        com.google.javascript.rhino.head.ast.Comment comment73 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType71, "");
        java.lang.String str75 = comment73.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray76 = new com.google.javascript.rhino.head.ast.Comment[] { comment61, comment67, comment73 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet77 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet77, commentArray76);
        astRoot55.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet77);
        boolean boolean80 = astRoot55.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray81 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList82 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList82, symbolArray81);
        astRoot55.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList82);
        int int85 = astRoot55.getLineno();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(603173706, 0);
        astRoot55.addChildrenToFront(node88);
        java.lang.String str90 = astRoot55.getNextTempName();
        scriptNode11.addChildToBack((com.google.javascript.rhino.head.Node) astRoot55);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(commentType7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "                                                                                                        " + "'", str9, "                                                                                                        ");
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 624377060 + "'", int29 == 624377060);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "{\n}\n" + "'", str33, "{\n}\n");
        org.junit.Assert.assertNull(scopeList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(strMap45);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(comment54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "                                                                                                                                                                                                        " + "'", str75, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(symbolArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "$0" + "'", str90, "$0");
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        boolean boolean12 = compilerEnvirons0.isRecordingComments();
        boolean boolean13 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        int int16 = compilerEnvirons14.getLanguageVersion();
        compilerEnvirons14.setLanguageVersion((int) (byte) 100);
        boolean boolean19 = compilerEnvirons14.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        compilerEnvirons20.setStrictMode(true);
        compilerEnvirons20.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons26 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean27 = compilerEnvirons26.isReservedKeywordAsIdentifier();
        compilerEnvirons26.setStrictMode(true);
        compilerEnvirons26.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons32 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean33 = compilerEnvirons32.isReservedKeywordAsIdentifier();
        boolean boolean34 = compilerEnvirons32.getWarnTrailingComma();
        compilerEnvirons32.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet37 = compilerEnvirons32.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter38 = compilerEnvirons32.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory39 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons26, errorReporter38);
        com.google.javascript.rhino.head.IRFactory iRFactory40 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons20, errorReporter38);
        com.google.javascript.rhino.head.Parser parser41 = new com.google.javascript.rhino.head.Parser(compilerEnvirons14, errorReporter38);
        com.google.javascript.rhino.head.Parser parser42 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter38);
        java.io.Reader reader43 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot46 = parser42.parse(reader43, "                                    {\n                                    }\n", 298081840);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 170 + "'", int16 == 170);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(errorReporter38);
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        astRoot0.putIntProp(170, (int) (short) 0);
        com.google.javascript.rhino.head.Node node29 = astRoot0.getFirstChild();
        astRoot0.setLength(17);
        boolean boolean32 = astRoot0.hasSideEffects();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray33 = astRoot0.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        int int9 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean10 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        boolean boolean12 = compilerEnvirons0.reportWarningAsError();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons13 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean14 = compilerEnvirons13.isReservedKeywordAsIdentifier();
        boolean boolean15 = compilerEnvirons13.getWarnTrailingComma();
        compilerEnvirons13.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet18 = compilerEnvirons13.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons13.getErrorReporter();
        compilerEnvirons13.setReservedKeywordAsIdentifier(false);
        boolean boolean22 = compilerEnvirons13.isGeneratingSource();
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = compilerEnvirons13.getErrorReporter();
        compilerEnvirons0.setErrorReporter(errorReporter23);
        boolean boolean25 = compilerEnvirons0.isIdeMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(errorReporter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getParamCount();
        int int2 = astRoot0.getPosition();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory5 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons3, errorReporter4);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node12 = iRFactory5.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.lang.String str13 = scriptNode7.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator15 = scriptNode14.spliterator();
        com.google.javascript.rhino.head.Node node17 = scriptNode14.setType((int) '#');
        boolean boolean18 = scriptNode14.hasConsistentReturnUsage();
        scriptNode7.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode14);
        com.google.javascript.rhino.head.ast.Symbol symbol21 = scriptNode7.getSymbol("                                      ");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode7);
        boolean boolean23 = scriptNode7.hasSideEffects();
        int int24 = scriptNode7.getEndLineno();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons25 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean26 = compilerEnvirons25.isReservedKeywordAsIdentifier();
        compilerEnvirons25.setStrictMode(true);
        compilerEnvirons25.setXmlAvailable(true);
        compilerEnvirons25.setXmlAvailable(true);
        com.google.javascript.rhino.head.IRFactory iRFactory33 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons25);
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = astRoot34.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor36 = astRoot34.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor37 = null;
        astRoot34.visitComments(nodeVisitor37);
        com.google.javascript.rhino.head.Node node39 = astRoot34.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = iRFactory33.transformTree(astRoot34);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode44.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot47 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet48 = astRoot47.getComments();
        int int49 = astRoot47.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor50 = null;
        astRoot47.visitComments(nodeVisitor50);
        com.google.javascript.rhino.head.Node node52 = astRoot47.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet53 = astRoot47.getComments();
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode44, (com.google.javascript.rhino.head.Node) astRoot47);
        int int55 = scriptNode44.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons56 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory58 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons56, errorReporter57);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode59.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode60);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList62 = scriptNode60.getFunctions();
        scriptNode60.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node65 = iRFactory58.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode60);
        java.lang.String str66 = scriptNode60.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode67.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode68);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList70 = scriptNode68.getChildScopes();
        int int71 = scriptNode68.getBaseLineno();
        com.google.javascript.rhino.head.Node node72 = scriptNode68.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode73.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode74);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList76 = scriptNode74.getChildScopes();
        java.lang.String str78 = scriptNode74.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode68.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode74, (com.google.javascript.rhino.head.Node) scriptNode80);
        java.lang.Object obj83 = scriptNode74.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str86 = scriptNode84.toSource((int) '4');
        java.lang.String str87 = scriptNode74.toStringTree(scriptNode84);
        scriptNode60.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode74);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode44, (com.google.javascript.rhino.head.Node) scriptNode74);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList90 = scriptNode44.getChildScopes();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList91 = scriptNode44.getSymbols();
        scriptNode40.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode44);
        scriptNode7.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode40);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(symbol21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(compilerEnvirons25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(nodeItor36);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertNull(commentSet48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNull(commentSet53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(functionNodeList62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(scopeList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(scopeList76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str86, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(scopeList90);
        org.junit.Assert.assertNotNull(symbolList91);
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean6 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setXmlAvailable(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        int int11 = compilerEnvirons9.getLanguageVersion();
        compilerEnvirons9.setLanguageVersion((int) (byte) 100);
        boolean boolean14 = compilerEnvirons9.isGenerateObserverCount();
        compilerEnvirons9.setStrictMode(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter17 = compilerEnvirons9.getErrorReporter();
        compilerEnvirons0.setErrorReporter(errorReporter17);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter17.error("2;\nSCRIPT;\n2;\n1;\n", "", 15, "35\t  COMMENT 36 2\n", (-1661336167));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 170 + "'", int11 == 170);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(errorReporter17);
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        compilerEnvirons6.setStrictMode(true);
        compilerEnvirons6.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.getWarnTrailingComma();
        compilerEnvirons12.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet17 = compilerEnvirons12.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter18 = compilerEnvirons12.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory19 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6, errorReporter18);
        com.google.javascript.rhino.head.IRFactory iRFactory20 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter18);
        compilerEnvirons0.setLanguageVersion(0);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean24 = compilerEnvirons23.isReservedKeywordAsIdentifier();
        compilerEnvirons23.setStrictMode(true);
        compilerEnvirons23.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons29 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean30 = compilerEnvirons29.isReservedKeywordAsIdentifier();
        compilerEnvirons29.setStrictMode(true);
        compilerEnvirons29.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons35 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean36 = compilerEnvirons35.isReservedKeywordAsIdentifier();
        boolean boolean37 = compilerEnvirons35.getWarnTrailingComma();
        compilerEnvirons35.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet40 = compilerEnvirons35.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter41 = compilerEnvirons35.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory42 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons29, errorReporter41);
        com.google.javascript.rhino.head.IRFactory iRFactory43 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter41);
        compilerEnvirons23.setLanguageVersion(0);
        compilerEnvirons23.setAllowMemberExprAsFunctionName(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons48 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean49 = compilerEnvirons48.isReservedKeywordAsIdentifier();
        boolean boolean50 = compilerEnvirons48.isIdeMode();
        boolean boolean51 = compilerEnvirons48.getWarnTrailingComma();
        compilerEnvirons48.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons54 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean55 = compilerEnvirons54.isReservedKeywordAsIdentifier();
        int int56 = compilerEnvirons54.getLanguageVersion();
        int int57 = compilerEnvirons54.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons58 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean59 = compilerEnvirons58.isReservedKeywordAsIdentifier();
        compilerEnvirons58.setStrictMode(true);
        compilerEnvirons58.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons64 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean65 = compilerEnvirons64.isReservedKeywordAsIdentifier();
        boolean boolean66 = compilerEnvirons64.getWarnTrailingComma();
        compilerEnvirons64.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet69 = compilerEnvirons64.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter70 = compilerEnvirons64.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory71 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons58, errorReporter70);
        com.google.javascript.rhino.head.IRFactory iRFactory72 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons54, errorReporter70);
        com.google.javascript.rhino.head.IRFactory iRFactory73 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons48, errorReporter70);
        compilerEnvirons23.setErrorReporter(errorReporter70);
        com.google.javascript.rhino.head.IRFactory iRFactory75 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter70);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.EvaluatorException evaluatorException81 = errorReporter70.runtimeError("10", "                                                                                                                                                                                                  ", 709071950, "9\t  SCRIPT 10 1\n-1\tSETPROP -1 1\n", 327994914);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(errorReporter18);
        org.junit.Assert.assertNotNull(compilerEnvirons23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(errorReporter41);
        org.junit.Assert.assertNotNull(compilerEnvirons48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 170 + "'", int56 == 170);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 170 + "'", int57 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertNotNull(errorReporter70);
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node node3 = scriptNode0.setType((int) '#');
        java.lang.Object obj4 = scriptNode0.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol6 = scriptNode0.getSymbol("typeof");
        scriptNode0.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray30 = new com.google.javascript.rhino.head.ast.Comment[] { comment15, comment21, comment27 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet31, commentArray30);
        astRoot9.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet31);
        boolean boolean34 = astRoot9.isInStrictMode();
        int int35 = astRoot9.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean37 = astRoot36.hasSideEffects();
        astRoot9.target = astRoot36;
        scriptNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot36);
        astRoot36.flattenSymbolTable(true);
        int int42 = astRoot36.getParamAndVarCount();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet43 = astRoot36.getComments();
        int int44 = astRoot36.getFunctionCount();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList45 = astRoot36.getFunctions();
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(symbol6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(commentSet43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(functionNodeList45);
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setRecordingComments(true);
        compilerEnvirons0.setGenerateObserverCount(true);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setLanguageVersion(875237497);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad language version: 875237497");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot7, (com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList16 = scriptNode12.getSymbols();
        scriptNode12.setSourceName("                                          ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        int int25 = scriptNode22.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode19, (com.google.javascript.rhino.head.ast.Scope) scriptNode22);
        scriptNode12.setTop(scriptNode19);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode19.visit(nodeVisitor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(symbolList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(170);
        int int2 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        com.google.javascript.rhino.head.Token.CommentType commentType8 = comment7.getCommentType();
        java.lang.String str10 = comment7.toSource(21);
        com.google.javascript.rhino.head.Token.CommentType commentType11 = comment7.getCommentType();
        com.google.javascript.rhino.head.Node node12 = comment7.getFirstChild();
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = astRoot14.getFunctions();
        int int16 = astRoot14.getEncodedSourceEnd();
        int int17 = astRoot14.getBaseLineno();
        int int18 = astRoot14.getLineno();
        comment7.addChildrenToBack((com.google.javascript.rhino.head.Node) astRoot14);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        int int23 = scriptNode20.getEndLineno();
        comment7.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode20);
        scriptNode1.setJsDocNode(comment7);
        com.google.javascript.rhino.head.Token.CommentType commentType26 = comment7.getCommentType();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(commentType8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "                                          " + "'", str10, "                                          ");
        org.junit.Assert.assertNull(commentType11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(commentType26);
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.recoverFromErrors();
        com.google.javascript.rhino.head.Parser parser6 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        java.util.Set<java.lang.String> strSet7 = compilerEnvirons0.getActivationNames();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet7);
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        boolean boolean12 = compilerEnvirons0.isXmlAvailable();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet2 = astRoot1.getComments();
        int int3 = astRoot1.getEndLineno();
        com.google.javascript.rhino.head.Node node5 = astRoot1.setType((int) (short) 10);
        astRoot1.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        scriptNode10.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList17 = scriptNode15.getChildScopes();
        int int18 = scriptNode15.getBaseLineno();
        com.google.javascript.rhino.head.Node node19 = scriptNode15.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode21.getChildScopes();
        java.lang.String str25 = scriptNode21.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode15.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode21, (com.google.javascript.rhino.head.Node) scriptNode27);
        int int29 = scriptNode21.getType();
        scriptNode10.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        int int31 = scriptNode21.getParamCount();
        com.google.javascript.rhino.head.Node node32 = scriptNode21.getLastSibling();
        astRoot1.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode21);
        com.google.javascript.rhino.head.ast.Scope scope34 = astRoot1.getEnclosingScope();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = astRoot1.getFunctions();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        java.lang.String str43 = comment40.getValue();
        boolean boolean44 = comment40.hasSideEffects();
        java.lang.String str45 = comment40.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = comment40.getCommentType();
        java.lang.String str47 = comment40.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment(163023072, (int) 'a', commentType50, "-1\tSCRIPT -1 1\n-1\tBITXOR -1 1\n");
        comment40.setJsDocNode(comment52);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(11, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) comment40, 12);
        comment40.setBounds((-366716049), 270991972);
        org.junit.Assert.assertNull(commentSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 136 + "'", int29 == 136);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(scope34);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(commentType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode0.setBaseLineno((int) 'a');
        scriptNode0.setEncodedSourceEnd((int) (short) -1);
        java.lang.Object obj7 = scriptNode0.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol9 = scriptNode0.getSymbol("|");
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = scriptNode0.new NodeIterator();
        boolean boolean11 = nodeIterator10.hasNext();
        boolean boolean12 = nodeIterator10.hasNext();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(symbol9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node((-568490075), (-603115504));
        // The following exception was thrown during execution in test generation
        try {
            node2.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator4 = scriptNode3.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        java.lang.String str11 = comment9.toSource(100);
        java.lang.String str12 = comment9.getValue();
        scriptNode3.setParent((com.google.javascript.rhino.head.ast.AstNode) comment9);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        java.lang.String str34 = comment32.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray35 = new com.google.javascript.rhino.head.ast.Comment[] { comment20, comment26, comment32 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet36, commentArray35);
        astRoot14.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet36);
        boolean boolean39 = astRoot14.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray40 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList41 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList41, symbolArray40);
        astRoot14.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList41);
        com.google.javascript.rhino.head.Node node44 = astRoot14.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot14, (com.google.javascript.rhino.head.ast.Scope) scriptNode46);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) comment9, (com.google.javascript.rhino.head.Node) scriptNode46);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode51.getChildScopes();
        java.lang.String str54 = scriptNode51.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode55.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode56);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList58 = scriptNode56.getChildScopes();
        int int59 = scriptNode56.getBaseLineno();
        com.google.javascript.rhino.head.Node node60 = scriptNode56.getLastSibling();
        int int61 = scriptNode56.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator62 = scriptNode56.new NodeIterator();
        int int63 = scriptNode56.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot64 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator65 = astRoot64.new NodeIterator();
        scriptNode56.setCompilerData((java.lang.Object) nodeIterator65);
        int int67 = scriptNode51.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode56);
        scriptNode56.setLineno(20);
        com.google.javascript.rhino.head.Node node70 = scriptNode56.getLastSibling();
        scriptNode2.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        int int72 = scriptNode56.depth();
        org.junit.Assert.assertNotNull(nodeSpliterator4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "                                                                                                                                                                                                        " + "'", str11, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "                                                                                                                                                                                                        " + "'", str34, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(symbolArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(scopeList58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1497029074) + "'", int67 == (-1497029074));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.Scope scope2 = scriptNode1.getParentScope();
        scriptNode1.setBaseLineno(875237497);
        java.lang.String str5 = scriptNode1.toSource();
        scriptNode1.setEncodedSourceBounds(644758030, (-213029975));
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory11 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons9, errorReporter10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        int int16 = scriptNode13.getBaseLineno();
        int int17 = scriptNode13.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList21 = scriptNode19.getFunctions();
        scriptNode19.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope24 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode13.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scope24);
        scriptNode19.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node28 = iRFactory11.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons29 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory31 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons29, errorReporter30);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        int int36 = scriptNode33.getBaseLineno();
        int int37 = scriptNode33.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode38.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList41 = scriptNode39.getFunctions();
        scriptNode39.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope44 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode33.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode39, (com.google.javascript.rhino.head.Node) scope44);
        scriptNode39.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node48 = iRFactory31.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        scriptNode19.setTop(scriptNode39);
        java.lang.String str50 = scriptNode39.debugPrint();
        java.lang.String str51 = scriptNode39.toSource();
        com.google.javascript.rhino.head.ast.AstRoot astRoot52 = scriptNode39.getAstRoot();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.setLoop((com.google.javascript.rhino.head.ast.Jump) scriptNode39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scope2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{\n}\n" + "'", str5, "{\n}\n");
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(functionNodeList21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(functionNodeList41);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "9\t  SCRIPT 10 1\n" + "'", str50, "9\t  SCRIPT 10 1\n");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{\n}\n" + "'", str51, "{\n}\n");
        org.junit.Assert.assertNull(astRoot52);
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        int int2 = astRoot0.getPosition();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap11 = scriptNode4.getSymbolTable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.isIdeMode();
        compilerEnvirons12.setReservedKeywordAsIdentifier(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray23 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        compilerEnvirons17.setActivationNames((java.util.Set<java.lang.String>) strSet24);
        boolean boolean27 = compilerEnvirons17.isGenerateDebugInfo();
        compilerEnvirons17.setOptimizationLevel((int) (short) 1);
        compilerEnvirons17.setAllowSharpComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter32 = compilerEnvirons17.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory33 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons12, errorReporter32);
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int35 = astRoot34.getParamCount();
        int int36 = astRoot34.getPosition();
        com.google.javascript.rhino.head.Node node37 = astRoot34.target;
        com.google.javascript.rhino.head.Node node38 = iRFactory33.transform((com.google.javascript.rhino.head.ast.AstNode) astRoot34);
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot40 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = astRoot40.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        boolean boolean53 = comment52.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType56 = null;
        com.google.javascript.rhino.head.ast.Comment comment58 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType56, "");
        java.lang.String str60 = comment58.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray61 = new com.google.javascript.rhino.head.ast.Comment[] { comment46, comment52, comment58 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet62 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet62, commentArray61);
        astRoot40.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet62);
        boolean boolean65 = astRoot40.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray66 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList67 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList67, symbolArray66);
        astRoot40.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList67);
        int int70 = astRoot40.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList74 = scriptNode72.getChildScopes();
        int int75 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.Node node76 = scriptNode72.getLastSibling();
        scriptNode72.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList82 = scriptNode80.getFunctions();
        scriptNode80.setPosition((int) (byte) 10);
        java.lang.String str85 = scriptNode72.toStringTree(scriptNode80);
        int int86 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot40, (com.google.javascript.rhino.head.ast.Scope) scriptNode72);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap88 = astRoot40.getSymbolTable();
        scriptNode4.setSymbolTable(strMap88);
        astRoot0.setSymbolTable(strMap88);
        java.lang.Object obj91 = astRoot0.getCompilerData();
        java.lang.String str92 = astRoot0.toString();
        boolean boolean93 = astRoot0.hasChildren();
        astRoot0.setBounds((-1101340812), (-1255639346));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(errorReporter32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "                                                                                                                                                                                                        " + "'", str60, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(symbolArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(scopeList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(functionNodeList82);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "136" + "'", str92, "136");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.lang.String str10 = scriptNode4.getSourceName();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList11 = scriptNode4.getStatements();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList12 = scriptNode4.getStatements();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = scriptNode4.getTop();
        com.google.javascript.rhino.head.Node node15 = com.google.javascript.rhino.head.Node.newString("136");
        node15.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        int int23 = scriptNode20.getBaseLineno();
        com.google.javascript.rhino.head.Node node24 = scriptNode20.getLastSibling();
        int int25 = scriptNode20.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = astRoot29.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        boolean boolean36 = comment35.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType39 = null;
        com.google.javascript.rhino.head.ast.Comment comment41 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType39, "");
        boolean boolean42 = comment41.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        java.lang.String str49 = comment47.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray50 = new com.google.javascript.rhino.head.ast.Comment[] { comment35, comment41, comment47 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet51 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet51, commentArray50);
        astRoot29.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet51);
        boolean boolean54 = astRoot29.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode55 = astRoot29.getParent();
        astRoot29.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode20, (com.google.javascript.rhino.head.Node) scope28, (com.google.javascript.rhino.head.Node) astRoot29, 6);
        java.lang.String str60 = node15.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot29);
        com.google.javascript.rhino.head.ast.Symbol symbol62 = astRoot29.getSymbol("                                ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = astRoot29.getTop();
        scriptNode4.target = scriptNode63;
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(astNodeList11);
        org.junit.Assert.assertNotNull(astNodeList12);
        org.junit.Assert.assertNotNull(scriptNode13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "                                                                                                                                                                                                        " + "'", str49, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(astNode55);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(symbol62);
        org.junit.Assert.assertNotNull(scriptNode63);
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode17.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope20 = scriptNode17.getParentScope();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray23 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList24 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList24, symbolArray23);
        scriptNode22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList24);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int28 = astRoot27.getParamCount();
        int int29 = astRoot27.getRegexpCount();
        scriptNode22.addChildToBack((com.google.javascript.rhino.head.Node) astRoot27);
        java.lang.String str31 = astRoot27.getSourceName();
        astRoot27.setEncodedSourceEnd(5);
        int int34 = scriptNode17.compareTo((com.google.javascript.rhino.head.ast.AstNode) astRoot27);
        com.google.javascript.rhino.head.Node node35 = astRoot27.target;
        astRoot27.setRelative((-505759099));
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons38 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean39 = compilerEnvirons38.isReservedKeywordAsIdentifier();
        boolean boolean40 = compilerEnvirons38.getWarnTrailingComma();
        compilerEnvirons38.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet43 = compilerEnvirons38.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = compilerEnvirons38.getErrorReporter();
        compilerEnvirons38.setReservedKeywordAsIdentifier(false);
        int int47 = compilerEnvirons38.getOptimizationLevel();
        boolean boolean48 = compilerEnvirons38.isGenerateObserverCount();
        compilerEnvirons38.setReservedKeywordAsIdentifier(false);
        astRoot27.setCompilerData((java.lang.Object) compilerEnvirons38);
        java.lang.String str52 = astRoot27.debugPrint();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scope20);
        org.junit.Assert.assertNotNull(symbolArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1124733132) + "'", int34 == (-1124733132));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(compilerEnvirons38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(errorReporter44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "505759098\tSCRIPT 505759098 1\n" + "'", str52, "505759098\tSCRIPT 505759098 1\n");
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean8 = compilerEnvirons0.getWarnTrailingComma();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (byte) 100, 24);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = scope2.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        java.lang.String str26 = comment24.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray27 = new com.google.javascript.rhino.head.ast.Comment[] { comment12, comment18, comment24 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet28 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet28, commentArray27);
        astRoot6.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet28);
        boolean boolean31 = astRoot6.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType34, "hi!");
        astRoot6.addComment(comment36);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode38 = comment36.getEnclosingFunction();
        astRoot0.addComment(comment36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str42 = scriptNode40.toSource((int) '4');
        com.google.javascript.rhino.head.Node node43 = scriptNode40.getFirstChild();
        java.lang.Object obj45 = scriptNode40.getProp(18);
        boolean boolean46 = scriptNode40.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.Comment comment47 = scriptNode40.getJsDocNode();
        scriptNode40.setPosition((int) ' ');
        java.lang.String str50 = scriptNode40.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList54 = scriptNode52.getChildScopes();
        int int55 = scriptNode52.getBaseLineno();
        int int56 = scriptNode52.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode57.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode58);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList60 = scriptNode58.getFunctions();
        scriptNode58.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode52.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode58, (com.google.javascript.rhino.head.Node) scope63);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode65.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode66);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList68 = scriptNode66.getChildScopes();
        int int69 = scriptNode66.getBaseLineno();
        com.google.javascript.rhino.head.Node node70 = scriptNode66.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot71 = scriptNode66.getAstRoot();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode52, (com.google.javascript.rhino.head.ast.Scope) scriptNode66);
        java.lang.String str74 = scriptNode66.makeIndent((int) 'a');
        com.google.javascript.rhino.head.ast.Scope scope76 = scriptNode66.getDefiningScope("");
        scriptNode66.setPosition((-1222715009));
        scriptNode66.removeChildren();
        java.lang.Object obj81 = scriptNode66.getProp(161);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode40, (com.google.javascript.rhino.head.ast.Scope) scriptNode66);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode66);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode84 = scriptNode66.getEnclosingFunction();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                                                                                                                                                                        " + "'", str26, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(functionNode38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str42, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(comment47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "$0" + "'", str50, "$0");
        org.junit.Assert.assertNull(scopeList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(functionNodeList60);
        org.junit.Assert.assertNull(scopeList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(astRoot71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "                                                                                                                                                                                                  " + "'", str74, "                                                                                                                                                                                                  ");
        org.junit.Assert.assertNull(scope76);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertNull(functionNode84);
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setGenerateObserverCount(true);
        boolean boolean14 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setIdeMode(true);
        boolean boolean17 = compilerEnvirons0.getAllowSharpComments();
        int int18 = compilerEnvirons0.getLanguageVersion();
        boolean boolean19 = compilerEnvirons0.isGeneratingSource();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 170 + "'", int18 == 170);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scope12);
        scriptNode7.setEncodedSourceEnd(18);
        java.lang.String str16 = scriptNode7.getJsDoc();
        int int17 = scriptNode7.depth();
        java.lang.String str19 = scriptNode7.toSource(3);
        scriptNode7.setEncodedSourceBounds((int) (short) -1, 22);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode7.getChildScopes();
        java.lang.String str24 = scriptNode7.toSource();
        com.google.javascript.rhino.head.ast.Comment comment25 = scriptNode7.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node26 = scriptNode7.getFinally();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "      {\n      }\n" + "'", str19, "      {\n      }\n");
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n}\n" + "'", str24, "{\n}\n");
        org.junit.Assert.assertNull(comment25);
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(65536);
        scriptNode1.setEncodedSourceEnd(159607986);
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        com.google.javascript.rhino.head.Node node8 = scriptNode4.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode10.getChildScopes();
        java.lang.String str14 = scriptNode10.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scriptNode16);
        java.lang.Object obj19 = scriptNode10.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str22 = scriptNode20.toSource((int) '4');
        java.lang.String str23 = scriptNode10.toStringTree(scriptNode20);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory26 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode28.getChildScopes();
        int int31 = scriptNode28.getBaseLineno();
        int int32 = scriptNode28.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList36 = scriptNode34.getFunctions();
        scriptNode34.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope39 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode28.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode34, (com.google.javascript.rhino.head.Node) scope39);
        scriptNode34.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node43 = iRFactory26.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons44 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory46 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons44, errorReporter45);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode48.getChildScopes();
        int int51 = scriptNode48.getBaseLineno();
        int int52 = scriptNode48.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList56 = scriptNode54.getFunctions();
        scriptNode54.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope59 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode48.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode54, (com.google.javascript.rhino.head.Node) scope59);
        scriptNode54.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node63 = iRFactory46.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        scriptNode34.setTop(scriptNode54);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scriptNode34, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = scriptNode34.getTop();
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) scriptNode67);
        int int69 = scriptNode67.getType();
        com.google.javascript.rhino.head.ast.Scope scope70 = scriptNode67.getEnclosingScope();
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(225099420, (com.google.javascript.rhino.head.Node) scriptNode67, (-51));
        com.google.javascript.rhino.head.Node node74 = node72.setType((-471577498));
        // The following exception was thrown during execution in test generation
        try {
            int int75 = node72.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str22, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(functionNodeList36);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(functionNodeList56);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(scriptNode67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 136 + "'", int69 == 136);
        org.junit.Assert.assertNotNull(scope70);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap7 = scriptNode6.getSymbolTable();
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode6);
        com.google.javascript.rhino.head.ast.Scope scope9 = scriptNode1.getParentScope();
        boolean boolean10 = scriptNode1.hasChildren();
        com.google.javascript.rhino.head.Node node11 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = scriptNode1.addFunction(functionNode12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNull(scope9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = scriptNode1.getAstRoot();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet8 = astRoot7.getComments();
        java.lang.String str9 = astRoot7.getSourceName();
        boolean boolean10 = astRoot7.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        scriptNode12.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList22 = scriptNode20.getFunctions();
        scriptNode20.setPosition((int) (byte) 10);
        java.lang.String str25 = scriptNode12.toStringTree(scriptNode20);
        int int26 = scriptNode12.getBaseLineno();
        boolean boolean27 = scriptNode12.hasConsistentReturnUsage();
        astRoot7.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        scriptNode1.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        int int30 = scriptNode1.getEncodedSourceEnd();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList31 = scriptNode1.getSymbols();
        int int32 = scriptNode1.getFunctionCount();
        java.lang.String str33 = scriptNode1.shortName();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(astRoot6);
        org.junit.Assert.assertNull(commentSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(functionNodeList22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(symbolList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ScriptNode" + "'", str33, "ScriptNode");
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap7 = scriptNode6.getSymbolTable();
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList9 = scriptNode1.getStatements();
        int int10 = scriptNode1.getFunctionCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        int int16 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode13.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        java.lang.String str23 = scriptNode19.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode13.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scriptNode25);
        java.lang.Object obj28 = scriptNode19.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str31 = scriptNode29.toSource((int) '4');
        java.lang.String str32 = scriptNode19.toStringTree(scriptNode29);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons33 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons33, errorReporter34);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode37.getChildScopes();
        int int40 = scriptNode37.getBaseLineno();
        int int41 = scriptNode37.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode42.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode43);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList45 = scriptNode43.getFunctions();
        scriptNode43.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope48 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode37.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode43, (com.google.javascript.rhino.head.Node) scope48);
        scriptNode43.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node52 = iRFactory35.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode43);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons53 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory55 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons53, errorReporter54);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode56.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode57);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode57.getChildScopes();
        int int60 = scriptNode57.getBaseLineno();
        int int61 = scriptNode57.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList65 = scriptNode63.getFunctions();
        scriptNode63.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope68 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode57.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode63, (com.google.javascript.rhino.head.Node) scope68);
        scriptNode63.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node72 = iRFactory55.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        scriptNode43.setTop(scriptNode63);
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scriptNode43, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode19.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode77);
        com.google.javascript.rhino.head.ast.Scope scope80 = scriptNode19.getDefiningScope("                      ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode82.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot85 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator86 = astRoot85.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor87 = astRoot85.iterator();
        scriptNode82.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot85);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor89 = null;
        astRoot85.visitComments(nodeVisitor89);
        astRoot85.setEndLineno(17);
        com.google.javascript.rhino.head.ast.Symbol symbol94 = astRoot85.getSymbol("AstRoot");
        scriptNode19.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot85);
        scriptNode1.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode19);
        java.lang.String str97 = scriptNode1.getEncodedSource();
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(astNodeList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str31, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(functionNodeList45);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(functionNodeList65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(scope80);
        org.junit.Assert.assertNotNull(nodeItor87);
        org.junit.Assert.assertNull(symbol94);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        int int23 = scriptNode17.getLength();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        boolean boolean6 = astRoot0.isInStrictMode();
        java.lang.String str8 = astRoot0.toSource(4);
        astRoot0.setBaseLineno(1016536824);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor11 = astRoot0.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor12 = null;
        astRoot0.visitComments(nodeVisitor12);
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(nodeItor11);
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        java.lang.String str6 = comment4.toSource(0);
        java.lang.String str7 = comment4.shortName();
        boolean boolean8 = comment4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator9 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator10 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator11 = positionComparator9.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int13 = astRoot12.getBaseLineno();
        java.lang.String str14 = astRoot12.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        int int17 = positionComparator10.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot12, (com.google.javascript.rhino.head.ast.AstNode) astRoot15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator19 = scriptNode18.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = scriptNode18.new NodeIterator();
        astRoot15.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        com.google.javascript.rhino.head.Node node22 = scriptNode18.getFirstChild();
        comment4.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode18);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator24 = comment4.new NodeIterator();
        java.lang.String str25 = comment4.getValue();
        com.google.javascript.rhino.head.ast.Comment comment26 = null;
        comment4.setJsDocNode(comment26);
        java.lang.String str28 = comment4.getValue();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Comment" + "'", str7, "Comment");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(astNodeComparator11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str14, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isGeneratingSource();
        boolean boolean7 = compilerEnvirons0.isStrictMode();
        boolean boolean8 = compilerEnvirons0.reportWarningAsError();
        compilerEnvirons0.setXmlAvailable(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType28, "hi!");
        astRoot0.addComment(comment30);
        java.lang.String str32 = comment30.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot33 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator34 = astRoot33.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        boolean boolean40 = comment39.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType43 = null;
        com.google.javascript.rhino.head.ast.Comment comment45 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType43, "");
        boolean boolean46 = comment45.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType49 = null;
        com.google.javascript.rhino.head.ast.Comment comment51 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType49, "");
        java.lang.String str53 = comment51.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray54 = new com.google.javascript.rhino.head.ast.Comment[] { comment39, comment45, comment51 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet55 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet55, commentArray54);
        astRoot33.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet55);
        boolean boolean58 = astRoot33.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType61 = null;
        com.google.javascript.rhino.head.ast.Comment comment63 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType61, "hi!");
        astRoot33.addComment(comment63);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode65 = comment63.getEnclosingFunction();
        comment30.setParent((com.google.javascript.rhino.head.ast.AstNode) functionNode65);
        java.lang.String str68 = comment30.toSource((int) ' ');
        com.google.javascript.rhino.head.Token.CommentType commentType69 = comment30.getCommentType();
        int int70 = comment30.getLength();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "35\t  COMMENT 36 2\n" + "'", str32, "35\t  COMMENT 36 2\n");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "                                                                                                                                                                                                        " + "'", str53, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(functionNode65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "                                                                hi!" + "'", str68, "                                                                hi!");
        org.junit.Assert.assertNull(commentType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        int int42 = astRoot0.getFunctionCount();
        com.google.javascript.rhino.head.ast.Scope scope43 = astRoot0.getParentScope();
        boolean boolean44 = astRoot0.isInStrictMode();
        boolean boolean45 = astRoot0.hasChildren();
        boolean boolean46 = astRoot0.hasConsistentReturnUsage();
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(scope43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory6 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor10 = null;
        astRoot7.visitComments(nodeVisitor10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = iRFactory6.transformTree(astRoot7);
        com.google.javascript.rhino.head.ast.Scope scope13 = astRoot7.getEnclosingScope();
        astRoot7.setEncodedSourceBounds(23, 22);
        astRoot7.checkParentLinks();
        java.lang.String str18 = astRoot7.shortName();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNotNull(scriptNode12);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AstRoot" + "'", str18, "AstRoot");
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap7 = scriptNode6.getSymbolTable();
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode6);
        scriptNode6.setLineno((int) (byte) 1);
        boolean boolean11 = scriptNode6.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode6.getChildScopes();
        com.google.javascript.rhino.head.ast.Jump jump13 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode6.setJumpStatement(jump13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(scopeList12);
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setGenerateObserverCount(true);
        boolean boolean14 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setIdeMode(true);
        com.google.javascript.rhino.head.IRFactory iRFactory17 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode19.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor24 = astRoot22.iterator();
        scriptNode19.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot22);
        int int26 = astRoot22.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = astRoot22.getAstRoot();
        java.lang.String str29 = astRoot22.toSource((int) '4');
        com.google.javascript.rhino.head.ast.AstRoot astRoot30 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = astRoot30.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        boolean boolean43 = comment42.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        java.lang.String str50 = comment48.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray51 = new com.google.javascript.rhino.head.ast.Comment[] { comment36, comment42, comment48 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet52 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet52, commentArray51);
        astRoot30.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet52);
        boolean boolean55 = astRoot30.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray56 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList57 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList57, symbolArray56);
        astRoot30.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList57);
        astRoot30.setInStrictMode(false);
        astRoot30.putIntProp(0, (int) (byte) 100);
        astRoot22.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot30);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = iRFactory17.transformTree(astRoot30);
        com.google.javascript.rhino.head.ast.AstRoot astRoot70 = iRFactory17.parse("                                                                                                                                                                                                                                                                                                                                                    {\n                                                                                                                                                                                                                                                                                                                                                    }\n", "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n1\t  COMMENT 2 0\n", (int) '#');
        java.lang.String str71 = astRoot70.toString();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeItor24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(astRoot27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "                                                                                                                                                                                                        " + "'", str50, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(symbolArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(scriptNode66);
        org.junit.Assert.assertNotNull(astRoot70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "136" + "'", str71, "136");
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        scriptNode1.setBaseLineno(4);
        int int9 = scriptNode1.getRegexpCount();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = scriptNode1.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator10.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        astRoot4.visitComments(nodeVisitor8);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str12 = scriptNode10.toSource((int) '4');
        com.google.javascript.rhino.head.Node node13 = scriptNode10.getFirstChild();
        astRoot4.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode10);
        java.lang.String str15 = astRoot4.getEncodedSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap18 = null;
        scriptNode17.setSymbolTable(strMap18);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList20 = scriptNode17.getSymbols();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = scriptNode17.new NodeIterator();
        astRoot4.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode17);
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str12, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(symbolList20);
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap48 = scriptNode32.getSymbolTable();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode32.getChildScopes();
        scriptNode32.setEncodedSourceEnd(65536);
        java.lang.String str53 = scriptNode32.makeIndent((-837790279));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strMap48);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        boolean boolean38 = compilerEnvirons0.recoverFromErrors();
        compilerEnvirons0.setGenerateDebugInfo(false);
        int int41 = compilerEnvirons0.getOptimizationLevel();
        compilerEnvirons0.setReservedKeywordAsIdentifier(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        java.lang.String str31 = comment29.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray32 = new com.google.javascript.rhino.head.ast.Comment[] { comment17, comment23, comment29 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet33, commentArray32);
        astRoot11.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet33);
        boolean boolean36 = astRoot11.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = astRoot11.getParent();
        astRoot11.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scope10, (com.google.javascript.rhino.head.Node) astRoot11, 6);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode42 = scriptNode2.getEnclosingFunction();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        boolean boolean48 = comment47.hasSideEffects();
        int int49 = comment47.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope50 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator51 = scope50.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        scope50.setTop(scriptNode53);
        comment47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode57 = scriptNode53.getEnclosingFunction();
        int int58 = scriptNode53.getLineno();
        scriptNode2.target = scriptNode53;
        scriptNode2.setEncodedSourceEnd((int) '#');
        scriptNode2.flattenSymbolTable(false);
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(astNode37);
        org.junit.Assert.assertNull(functionNode42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator51);
        org.junit.Assert.assertNull(functionNode57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList7 = scriptNode2.getSymbols();
        int int8 = scriptNode2.getPosition();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) scriptNode2);
        int int10 = scriptNode2.getBaseLineno();
        scriptNode2.setLength(1548187427);
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(symbolList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setRecordingComments(false);
        java.util.Set<java.lang.String> strSet19 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter20 = compilerEnvirons0.getErrorReporter();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(errorReporter20);
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        scriptNode9.setEncodedSourceEnd(11);
        scriptNode9.setSourceName("-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        java.lang.Object obj15 = scriptNode9.getCompilerData();
        int int16 = scriptNode1.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = scriptNode1.addFunction(functionNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.flattenSymbolTable(true);
        com.google.javascript.rhino.head.Node node7 = new com.google.javascript.rhino.head.Node(538062289, (com.google.javascript.rhino.head.Node) scriptNode3, (-603115504));
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = astRoot8.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        java.lang.String str28 = comment26.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray29 = new com.google.javascript.rhino.head.ast.Comment[] { comment14, comment20, comment26 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet30 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet30, commentArray29);
        astRoot8.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet30);
        boolean boolean33 = astRoot8.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray34 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList35 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList35, symbolArray34);
        astRoot8.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList35);
        com.google.javascript.rhino.head.Node node38 = astRoot8.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot8, (com.google.javascript.rhino.head.ast.Scope) scriptNode40);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode43 = scriptNode40.getEnclosingFunction();
        scriptNode40.setEndLineno(6);
        java.lang.Object obj46 = scriptNode40.getCompilerData();
        int int47 = scriptNode40.getRegexpCount();
        com.google.javascript.rhino.head.ast.Scope scope49 = new com.google.javascript.rhino.head.ast.Scope((int) 'a');
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode40, (com.google.javascript.rhino.head.Node) scope49);
        com.google.javascript.rhino.head.ast.Scope scope51 = scriptNode3.getEnclosingScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList55 = scriptNode53.getChildScopes();
        int int56 = scriptNode53.getBaseLineno();
        com.google.javascript.rhino.head.Node node57 = scriptNode53.getLastSibling();
        scriptNode53.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode60.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode61);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList63 = scriptNode61.getFunctions();
        scriptNode61.setPosition((int) (byte) 10);
        java.lang.String str66 = scriptNode53.toStringTree(scriptNode61);
        int int67 = scriptNode53.getBaseLineno();
        com.google.javascript.rhino.head.Node node69 = scriptNode53.setType((int) (byte) -1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor70 = scriptNode53.iterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str73 = scriptNode71.toSource((int) '4');
        scriptNode53.target = scriptNode71;
        scriptNode71.setBounds((-1116244898), (int) (byte) 100);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((-638022123), (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) scriptNode71, 520206471);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "                                                                                                                                                                                                        " + "'", str28, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(symbolArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNull(functionNode43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(scope51);
        org.junit.Assert.assertNull(scopeList55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(functionNodeList63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(nodeItor70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str73, "                                                                                                        {\n                                                                                                        }\n");
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator1 = positionComparator0.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator4 = positionComparator2.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator3);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator6 = astNodeComparator5.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator7 = astNodeComparator6.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator8 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator9 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator10 = positionComparator8.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator9);
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int12 = astRoot11.getBaseLineno();
        java.lang.String str13 = astRoot11.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        int int16 = positionComparator9.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot11, (com.google.javascript.rhino.head.ast.AstNode) astRoot14);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.putIntProp((int) (short) 1, 1);
        java.lang.String str21 = scriptNode17.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator23 = scope22.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        scope22.setTop(scriptNode25);
        scope22.setLineno((int) (short) -1);
        int int30 = positionComparator9.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode17, (com.google.javascript.rhino.head.ast.AstNode) scope22);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator31 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator32 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator33 = positionComparator31.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator32);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator34 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator35 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator36 = positionComparator34.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator35);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator37 = astNodeComparator33.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator34);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator38 = astNodeComparator37.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator39 = positionComparator9.thenComparing(astNodeComparator37);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator40 = astNodeComparator6.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator9);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator41 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator42 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator43 = positionComparator41.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator42);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator44 = positionComparator41.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator45 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator46 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator47 = positionComparator45.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator46);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator48 = astNodeComparator47.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator49 = positionComparator41.thenComparing(astNodeComparator48);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator50 = astNodeComparator48.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator51 = astNodeComparator48.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator52 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator53 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator54 = positionComparator52.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator53);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator55 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator56 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator57 = positionComparator55.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator56);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator58 = astNodeComparator54.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator55);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator59 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator60 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator61 = positionComparator59.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator60);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator62 = positionComparator59.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator63 = astNodeComparator58.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator59);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator64 = astNodeComparator48.thenComparing(astNodeComparator58);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator65 = astNodeComparator64.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator66 = astNodeComparator6.thenComparing(astNodeComparator65);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator67 = astNodeComparator66.reversed();
        org.junit.Assert.assertNotNull(astNodeComparator1);
        org.junit.Assert.assertNotNull(astNodeComparator4);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertNotNull(astNodeComparator6);
        org.junit.Assert.assertNotNull(astNodeComparator7);
        org.junit.Assert.assertNotNull(astNodeComparator10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator33);
        org.junit.Assert.assertNotNull(astNodeComparator36);
        org.junit.Assert.assertNotNull(astNodeComparator37);
        org.junit.Assert.assertNotNull(astNodeComparator38);
        org.junit.Assert.assertNotNull(astNodeComparator39);
        org.junit.Assert.assertNotNull(astNodeComparator40);
        org.junit.Assert.assertNotNull(astNodeComparator43);
        org.junit.Assert.assertNotNull(astNodeComparator44);
        org.junit.Assert.assertNotNull(astNodeComparator47);
        org.junit.Assert.assertNotNull(astNodeComparator48);
        org.junit.Assert.assertNotNull(astNodeComparator49);
        org.junit.Assert.assertNotNull(astNodeComparator50);
        org.junit.Assert.assertNotNull(astNodeComparator51);
        org.junit.Assert.assertNotNull(astNodeComparator54);
        org.junit.Assert.assertNotNull(astNodeComparator57);
        org.junit.Assert.assertNotNull(astNodeComparator58);
        org.junit.Assert.assertNotNull(astNodeComparator61);
        org.junit.Assert.assertNotNull(astNodeComparator62);
        org.junit.Assert.assertNotNull(astNodeComparator63);
        org.junit.Assert.assertNotNull(astNodeComparator64);
        org.junit.Assert.assertNotNull(astNodeComparator65);
        org.junit.Assert.assertNotNull(astNodeComparator66);
        org.junit.Assert.assertNotNull(astNodeComparator67);
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator1 = positionComparator0.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator4 = positionComparator2.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator3);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator6 = astNodeComparator5.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator7 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator8 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator9 = positionComparator7.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator8);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator10 = astNodeComparator9.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator11 = astNodeComparator10.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator12 = astNodeComparator6.thenComparing(astNodeComparator11);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator13 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator14 = positionComparator13.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator15 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator16 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator17 = positionComparator15.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator16);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator18 = positionComparator13.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator15);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator19 = astNodeComparator12.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator15);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator20 = astNodeComparator19.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator21 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator22 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator23 = positionComparator21.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator22);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator24 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator25 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator26 = positionComparator24.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator25);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int28 = astRoot27.getBaseLineno();
        java.lang.String str29 = astRoot27.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot30 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = astRoot30.new NodeIterator();
        int int32 = positionComparator25.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot27, (com.google.javascript.rhino.head.ast.AstNode) astRoot30);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator33 = positionComparator21.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator25);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator34 = astNodeComparator33.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator35 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator36 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator37 = positionComparator35.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator36);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator38 = positionComparator36.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator39 = astNodeComparator33.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator36);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator40 = astNodeComparator19.thenComparing(astNodeComparator33);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator41 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator42 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator43 = positionComparator41.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator42);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator44 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator45 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator46 = positionComparator44.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator45);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator47 = astNodeComparator43.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator44);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator48 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator49 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator50 = positionComparator48.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator49);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator51 = positionComparator48.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator52 = astNodeComparator47.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator48);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator53 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator54 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator55 = positionComparator53.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator54);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator56 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator57 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator58 = positionComparator56.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator57);
        com.google.javascript.rhino.head.ast.AstRoot astRoot59 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int60 = astRoot59.getBaseLineno();
        java.lang.String str61 = astRoot59.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot62 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator63 = astRoot62.new NodeIterator();
        int int64 = positionComparator57.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot59, (com.google.javascript.rhino.head.ast.AstNode) astRoot62);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator65 = positionComparator53.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator57);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode66.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode67);
        int int69 = scriptNode66.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope scope70 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode66.setParentScope(scope70);
        scriptNode66.setLineno((int) '4');
        com.google.javascript.rhino.head.ast.AstRoot astRoot74 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator75 = astRoot74.new NodeIterator();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList76 = astRoot74.getStatements();
        int int77 = positionComparator53.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode66, (com.google.javascript.rhino.head.ast.AstNode) astRoot74);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator78 = positionComparator48.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator53);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator79 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator80 = positionComparator79.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator81 = astNodeComparator80.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator82 = astNodeComparator78.thenComparing(astNodeComparator81);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator83 = astNodeComparator33.thenComparing(astNodeComparator82);
        org.junit.Assert.assertNotNull(astNodeComparator1);
        org.junit.Assert.assertNotNull(astNodeComparator4);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertNotNull(astNodeComparator6);
        org.junit.Assert.assertNotNull(astNodeComparator9);
        org.junit.Assert.assertNotNull(astNodeComparator10);
        org.junit.Assert.assertNotNull(astNodeComparator11);
        org.junit.Assert.assertNotNull(astNodeComparator12);
        org.junit.Assert.assertNotNull(astNodeComparator14);
        org.junit.Assert.assertNotNull(astNodeComparator17);
        org.junit.Assert.assertNotNull(astNodeComparator18);
        org.junit.Assert.assertNotNull(astNodeComparator19);
        org.junit.Assert.assertNotNull(astNodeComparator20);
        org.junit.Assert.assertNotNull(astNodeComparator23);
        org.junit.Assert.assertNotNull(astNodeComparator26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str29, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator33);
        org.junit.Assert.assertNotNull(astNodeComparator34);
        org.junit.Assert.assertNotNull(astNodeComparator37);
        org.junit.Assert.assertNotNull(astNodeComparator38);
        org.junit.Assert.assertNotNull(astNodeComparator39);
        org.junit.Assert.assertNotNull(astNodeComparator40);
        org.junit.Assert.assertNotNull(astNodeComparator43);
        org.junit.Assert.assertNotNull(astNodeComparator46);
        org.junit.Assert.assertNotNull(astNodeComparator47);
        org.junit.Assert.assertNotNull(astNodeComparator50);
        org.junit.Assert.assertNotNull(astNodeComparator51);
        org.junit.Assert.assertNotNull(astNodeComparator52);
        org.junit.Assert.assertNotNull(astNodeComparator55);
        org.junit.Assert.assertNotNull(astNodeComparator58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str61, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(astNodeList76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator78);
        org.junit.Assert.assertNotNull(astNodeComparator80);
        org.junit.Assert.assertNotNull(astNodeComparator81);
        org.junit.Assert.assertNotNull(astNodeComparator82);
        org.junit.Assert.assertNotNull(astNodeComparator83);
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode26 = astRoot0.getParent();
        java.lang.String str27 = astRoot0.debugPrint();
        int int28 = astRoot0.getEncodedSourceStart();
        int int29 = astRoot0.getEncodedSourceEnd();
        java.lang.String str30 = astRoot0.getNextTempName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(astNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str27, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "$0" + "'", str30, "$0");
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor13 = astRoot11.iterator();
        scriptNode8.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        astRoot11.visitComments(nodeVisitor15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        com.google.javascript.rhino.head.Node node20 = scriptNode17.getFirstChild();
        astRoot11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode17);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj26 = scriptNode25.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        int int30 = scriptNode27.getEndLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode25, (com.google.javascript.rhino.head.Node) scriptNode27);
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        java.lang.String str52 = comment50.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray53 = new com.google.javascript.rhino.head.ast.Comment[] { comment38, comment44, comment50 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet54, commentArray53);
        astRoot32.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet54);
        java.lang.String str57 = astRoot32.getEncodedSource();
        com.google.javascript.rhino.head.Node node58 = astRoot32.target;
        scriptNode25.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot32);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode25);
        com.google.javascript.rhino.head.ast.Scope scope62 = new com.google.javascript.rhino.head.ast.Scope(52);
        scriptNode25.setParentScope(scope62);
        com.google.javascript.rhino.head.Node node65 = scriptNode25.setType((-8));
        scriptNode25.flattenSymbolTable(false);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                                                                                                                                                                        " + "'", str52, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scope12);
        scriptNode7.setEncodedSourceEnd(18);
        java.lang.String str16 = scriptNode7.getJsDoc();
        int int17 = scriptNode7.depth();
        java.lang.String str19 = scriptNode7.toSource(3);
        scriptNode7.setEncodedSourceBounds((int) (short) -1, 22);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList23 = scriptNode7.getChildScopes();
        java.lang.String str24 = scriptNode7.toSource();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap25 = scriptNode7.getSymbolTable();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "      {\n      }\n" + "'", str19, "      {\n      }\n");
        org.junit.Assert.assertNull(scopeList23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n}\n" + "'", str24, "{\n}\n");
        org.junit.Assert.assertNull(strMap25);
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean8 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        boolean boolean11 = compilerEnvirons0.reportWarningAsError();
        com.google.javascript.rhino.head.Parser parser12 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setGenerateObserverCount(true);
        compilerEnvirons0.setGenerateDebugInfo(false);
        compilerEnvirons0.setRecoverFromErrors(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean20 = compilerEnvirons19.isReservedKeywordAsIdentifier();
        int int21 = compilerEnvirons19.getLanguageVersion();
        compilerEnvirons19.setLanguageVersion((int) (byte) 100);
        boolean boolean24 = compilerEnvirons19.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons25 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean26 = compilerEnvirons25.isReservedKeywordAsIdentifier();
        compilerEnvirons25.setStrictMode(true);
        compilerEnvirons25.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean32 = compilerEnvirons31.isReservedKeywordAsIdentifier();
        compilerEnvirons31.setStrictMode(true);
        compilerEnvirons31.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons37 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean38 = compilerEnvirons37.isReservedKeywordAsIdentifier();
        boolean boolean39 = compilerEnvirons37.getWarnTrailingComma();
        compilerEnvirons37.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet42 = compilerEnvirons37.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = compilerEnvirons37.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons31, errorReporter43);
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons25, errorReporter43);
        com.google.javascript.rhino.head.Parser parser46 = new com.google.javascript.rhino.head.Parser(compilerEnvirons19, errorReporter43);
        com.google.javascript.rhino.head.IRFactory iRFactory47 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter43);
        compilerEnvirons0.setRecordingComments(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(errorReporter43);
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("136");
        node1.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode41 = astRoot15.getParent();
        astRoot15.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode6, (com.google.javascript.rhino.head.Node) scope14, (com.google.javascript.rhino.head.Node) astRoot15, 6);
        java.lang.String str46 = node1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot15);
        com.google.javascript.rhino.head.ast.Scope scope47 = astRoot15.getEnclosingScope();
        astRoot15.setEncodedSourceEnd((-603115504));
        java.lang.Object obj50 = astRoot15.getCompilerData();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(astNode41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(scope47);
        org.junit.Assert.assertNull(obj50);
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(0, 11, commentType2, "  ");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = comment4.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment4.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        comment4.setLineno((-142964640));
        org.junit.Assert.assertNull(commentType5);
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertNull(commentType7);
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = compilerEnvirons0.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory11 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        boolean boolean12 = compilerEnvirons0.isGeneratingSource();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(errorReporter10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(0, 208008703, commentType2, "        ");
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str2 = scriptNode0.toSource((int) '4');
        com.google.javascript.rhino.head.Node node3 = scriptNode0.getFirstChild();
        java.lang.Object obj5 = scriptNode0.getProp(18);
        boolean boolean6 = scriptNode0.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet8 = astRoot7.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol10 = astRoot7.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType13, "hi!");
        astRoot7.addChildrenToFront((com.google.javascript.rhino.head.Node) comment15);
        astRoot7.setInStrictMode(true);
        java.lang.String str19 = scriptNode0.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot7);
        com.google.javascript.rhino.head.Node node20 = astRoot7.getLastChild();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap21 = astRoot7.getSymbolTable();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        scriptNode22.setBaseLineno((int) 'a');
        scriptNode22.setEncodedSourceEnd((int) (short) -1);
        java.lang.Object obj29 = scriptNode22.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol31 = scriptNode22.getSymbol("|");
        com.google.javascript.rhino.head.Node node32 = scriptNode22.getNext();
        astRoot7.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        int int34 = astRoot7.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot35 = astRoot7.getAstRoot();
        // The following exception was thrown during execution in test generation
        try {
            astRoot35.checkParentLinks();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No parent for node: 161?hi!");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str2, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(commentSet8);
        org.junit.Assert.assertNull(symbol10);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(symbol31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(astRoot35);
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (-240632447));
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node19 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        int int20 = scriptNode10.getParamCount();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode10.setEndLineno((-704784932));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(10, 9);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode5.getChildScopes();
        int int8 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.Node node9 = scriptNode5.getLastSibling();
        scriptNode5.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode13.getFunctions();
        scriptNode13.setPosition((int) (byte) 10);
        java.lang.String str18 = scriptNode5.toStringTree(scriptNode13);
        int int19 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.Node node21 = scriptNode5.setType((int) (byte) -1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor22 = scriptNode5.iterator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator23 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator24 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator25 = positionComparator23.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator24);
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int27 = astRoot26.getBaseLineno();
        java.lang.String str28 = astRoot26.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = astRoot29.new NodeIterator();
        int int31 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot26, (com.google.javascript.rhino.head.ast.AstNode) astRoot29);
        boolean boolean32 = astRoot26.isInStrictMode();
        scriptNode5.addChildToFront((com.google.javascript.rhino.head.Node) astRoot26);
        com.google.javascript.rhino.head.Node node34 = scriptNode5.getNext();
        int int35 = scriptNode5.getFunctionCount();
        scope2.putProp((-1171321573), (java.lang.Object) scriptNode5);
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeItor22);
        org.junit.Assert.assertNotNull(astNodeComparator25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str28, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setXmlAvailable(true);
        com.google.javascript.rhino.head.IRFactory iRFactory8 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor11 = astRoot9.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor12 = null;
        astRoot9.visitComments(nodeVisitor12);
        com.google.javascript.rhino.head.Node node14 = astRoot9.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = iRFactory8.transformTree(astRoot9);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode19.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = astRoot22.getComments();
        int int24 = astRoot22.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor25 = null;
        astRoot22.visitComments(nodeVisitor25);
        com.google.javascript.rhino.head.Node node27 = astRoot22.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet28 = astRoot22.getComments();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) astRoot22);
        int int30 = scriptNode19.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory33 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons31, errorReporter32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList37 = scriptNode35.getFunctions();
        scriptNode35.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node40 = iRFactory33.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        java.lang.String str41 = scriptNode35.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode42.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode43);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList45 = scriptNode43.getChildScopes();
        int int46 = scriptNode43.getBaseLineno();
        com.google.javascript.rhino.head.Node node47 = scriptNode43.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode49.getChildScopes();
        java.lang.String str53 = scriptNode49.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode43.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode49, (com.google.javascript.rhino.head.Node) scriptNode55);
        java.lang.Object obj58 = scriptNode49.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str61 = scriptNode59.toSource((int) '4');
        java.lang.String str62 = scriptNode49.toStringTree(scriptNode59);
        scriptNode35.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList65 = scriptNode19.getChildScopes();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList66 = scriptNode19.getSymbols();
        scriptNode15.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode19);
        com.google.javascript.rhino.head.Node node69 = scriptNode15.setType(1490422031);
        int int72 = node69.getIntProp(452928004, (-317066570));
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(nodeItor11);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertNull(commentSet23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(commentSet28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(functionNodeList37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(scopeList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str61, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(scopeList65);
        org.junit.Assert.assertNotNull(symbolList66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-317066570) + "'", int72 == (-317066570));
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType28, "hi!");
        astRoot0.addComment(comment30);
        astRoot0.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet35 = astRoot34.getComments();
        int int36 = astRoot34.getEndLineno();
        com.google.javascript.rhino.head.Node node38 = astRoot34.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) astRoot34);
        astRoot0.setBaseLineno((int) (byte) 0);
        int int42 = astRoot0.depth();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor43 = astRoot0.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump44 = astRoot0.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(commentSet35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(nodeItor43);
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.recoverFromErrors();
        com.google.javascript.rhino.head.IRFactory iRFactory3 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet5 = astRoot4.getComments();
        int int6 = astRoot4.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor7 = null;
        astRoot4.visitComments(nodeVisitor7);
        com.google.javascript.rhino.head.Node node9 = astRoot4.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope10 = astRoot4.getEnclosingScope();
        astRoot4.setEncodedSourceStart(23);
        java.lang.String str14 = astRoot4.toSource(95442629);
        com.google.javascript.rhino.head.Node node15 = astRoot4.getFirstChild();
        java.lang.String str17 = astRoot4.toSource(129);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        java.lang.String str22 = scriptNode19.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        com.google.javascript.rhino.head.Node node28 = scriptNode24.getLastSibling();
        int int29 = scriptNode24.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = scriptNode24.new NodeIterator();
        int int31 = scriptNode24.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        scriptNode24.setCompilerData((java.lang.Object) nodeIterator33);
        int int35 = scriptNode19.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        scriptNode24.setLineno(20);
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType40, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType43 = null;
        comment42.setCommentType(commentType43);
        int int47 = comment42.getIntProp((int) (byte) 10, 0);
        comment42.setPosition(161);
        scriptNode24.setJsDocNode(comment42);
        astRoot4.addComment(comment42);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = astRoot4.new NodeIterator();
        astRoot4.setEncodedSource("                                                                {\n                                                                }\n");
        java.lang.String str55 = astRoot4.debugPrint();
        boolean boolean56 = astRoot4.isInStrictMode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = iRFactory3.transformTree(astRoot4);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(commentSet5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(scope10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 49767985 + "'", int35 == 49767985);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "-1\tSCRIPT -1 1\n161\t  COMMENT 162 2\n" + "'", str55, "-1\tSCRIPT -1 1\n161\t  COMMENT 162 2\n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(scriptNode57);
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol3 = astRoot0.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType6, "hi!");
        astRoot0.addChildrenToFront((com.google.javascript.rhino.head.Node) comment8);
        boolean boolean10 = astRoot0.hasSideEffects();
        boolean boolean11 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor12 = null;
        astRoot0.visitComments(nodeVisitor12);
        astRoot0.setBaseLineno(1617059566);
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(symbol3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = com.google.javascript.rhino.head.ast.AstNode.operatorToString(604778406);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid operator: 604778406");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        boolean boolean2 = astRoot1.isInStrictMode();
        astRoot1.setEncodedSourceBounds((-325419474), 842975161);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap6 = astRoot1.getSymbolTable();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode10.getChildScopes();
        int int13 = scriptNode10.getBaseLineno();
        com.google.javascript.rhino.head.Node node14 = scriptNode10.getLastSibling();
        int int15 = scriptNode10.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = scriptNode10.new NodeIterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode18.getChildScopes();
        int int21 = scriptNode18.getBaseLineno();
        com.google.javascript.rhino.head.Node node22 = scriptNode18.getLastSibling();
        scriptNode18.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList28 = scriptNode26.getFunctions();
        scriptNode26.setPosition((int) (byte) 10);
        java.lang.String str31 = scriptNode18.toStringTree(scriptNode26);
        int int32 = scriptNode18.getBaseLineno();
        com.google.javascript.rhino.head.Node node34 = scriptNode18.setType((int) (byte) -1);
        com.google.javascript.rhino.head.Node node35 = new com.google.javascript.rhino.head.Node(9, (com.google.javascript.rhino.head.Node) scriptNode10, node34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot37 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int38 = astRoot37.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj42 = scriptNode41.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        int int46 = scriptNode43.getEndLineno();
        com.google.javascript.rhino.head.Node node47 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode41, (com.google.javascript.rhino.head.Node) scriptNode43);
        com.google.javascript.rhino.head.ast.Scope scope49 = new com.google.javascript.rhino.head.ast.Scope(16);
        com.google.javascript.rhino.head.Node node50 = new com.google.javascript.rhino.head.Node((int) 'a', (com.google.javascript.rhino.head.Node) astRoot37, node47, (com.google.javascript.rhino.head.Node) scope49);
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node(644758030, (com.google.javascript.rhino.head.Node) scriptNode10, node47);
        scriptNode10.setSourceName("                                      {\n                                      }\n");
        int int54 = astRoot1.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        scriptNode10.setSourceName("1384960853\tSCRIPT 1384960853 1\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strMap6);
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(functionNodeList28);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean6 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setStrictMode(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        java.lang.String str25 = astRoot0.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet27 = astRoot26.getComments();
        java.lang.String str28 = astRoot26.getSourceName();
        boolean boolean29 = astRoot26.hasChildren();
        int int30 = astRoot26.getLineno();
        astRoot0.addChildrenToBack((com.google.javascript.rhino.head.Node) astRoot26);
        com.google.javascript.rhino.head.Node node32 = astRoot0.target;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str25, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertNull(commentSet27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node32);
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean2 = astRoot1.hasSideEffects();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory5 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons3, errorReporter4);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node12 = iRFactory5.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        astRoot1.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode7);
        scriptNode7.setEncodedSourceStart(20);
        scriptNode7.setEncodedSource("136");
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(52, (com.google.javascript.rhino.head.Node) scriptNode7);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertNotNull(node12);
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope6 = astRoot0.getEnclosingScope();
        java.lang.String str7 = astRoot0.getJsDoc();
        com.google.javascript.rhino.head.ast.Symbol symbol9 = astRoot0.getSymbol("  ");
        java.lang.String str11 = astRoot0.toSource(21);
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(scope6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(symbol9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str3 = astRoot1.toSource((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap6 = null;
        scriptNode5.setSymbolTable(strMap6);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator8 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator9 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator10 = positionComparator8.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator9);
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int12 = astRoot11.getBaseLineno();
        java.lang.String str13 = astRoot11.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        int int16 = positionComparator9.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot11, (com.google.javascript.rhino.head.ast.AstNode) astRoot14);
        java.lang.String str18 = astRoot11.makeIndent(16);
        scriptNode5.addChildrenToBack((com.google.javascript.rhino.head.Node) astRoot11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList23 = scriptNode21.getFunctions();
        scriptNode21.setEncodedSourceStart((int) 'a');
        java.lang.String str26 = scriptNode21.shortName();
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = astRoot27.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        boolean boolean34 = comment33.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        boolean boolean40 = comment39.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType43 = null;
        com.google.javascript.rhino.head.ast.Comment comment45 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType43, "");
        java.lang.String str47 = comment45.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray48 = new com.google.javascript.rhino.head.ast.Comment[] { comment33, comment39, comment45 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet49 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet49, commentArray48);
        astRoot27.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet49);
        boolean boolean52 = astRoot27.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray53 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList54 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList54, symbolArray53);
        astRoot27.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList54);
        java.lang.String str58 = astRoot27.toSource((-1));
        scriptNode21.target = astRoot27;
        astRoot27.setPosition(520206471);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((-1436414259), (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode5, (com.google.javascript.rhino.head.Node) astRoot27);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump63 = scriptNode5.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(astNodeComparator10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str13, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "                                " + "'", str18, "                                ");
        org.junit.Assert.assertNotNull(functionNodeList23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ScriptNode" + "'", str26, "ScriptNode");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "                                                                                                                                                                                                        " + "'", str47, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(symbolArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        compilerEnvirons0.setStrictMode(false);
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean14 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.IRFactory iRFactory15 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        astRoot0.setEncodedSourceStart(270991972);
        java.lang.String str4 = astRoot0.debugPrint();
        java.lang.String str6 = astRoot0.toSource(692787021);
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str4, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode4.getChildScopes();
        java.lang.Object obj11 = scriptNode4.getCompilerData();
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = scriptNode4.getAstRoot();
        scriptNode4.setEncodedSourceBounds(22, 100);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor16 = scriptNode4.iterator();
        boolean boolean17 = scriptNode4.hasSideEffects();
        com.google.javascript.rhino.head.Node node18 = scriptNode4.getLastSibling();
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(astRoot12);
        org.junit.Assert.assertNotNull(nodeItor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot41 = iRFactory37.parse("0\tSCRIPT 0 1\n", "                                ", 13);
        astRoot41.setPosition(0);
        astRoot41.setInStrictMode(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot46 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator47 = astRoot46.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        boolean boolean53 = comment52.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType56 = null;
        com.google.javascript.rhino.head.ast.Comment comment58 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType56, "");
        boolean boolean59 = comment58.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType62 = null;
        com.google.javascript.rhino.head.ast.Comment comment64 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType62, "");
        java.lang.String str66 = comment64.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray67 = new com.google.javascript.rhino.head.ast.Comment[] { comment52, comment58, comment64 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet68 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet68, commentArray67);
        astRoot46.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet68);
        boolean boolean71 = astRoot46.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType74 = null;
        com.google.javascript.rhino.head.ast.Comment comment76 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType74, "hi!");
        astRoot46.addComment(comment76);
        astRoot46.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.AstRoot astRoot80 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet81 = astRoot80.getComments();
        int int82 = astRoot80.getEndLineno();
        com.google.javascript.rhino.head.Node node84 = astRoot80.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot46, (com.google.javascript.rhino.head.ast.Scope) astRoot80);
        astRoot46.setBaseLineno((int) (byte) 0);
        int int88 = astRoot46.depth();
        boolean boolean89 = astRoot46.hasChildren();
        com.google.javascript.rhino.head.ast.Scope scope90 = astRoot46.getParentScope();
        astRoot41.setParentScope(scope90);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertNotNull(astRoot41);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "                                                                                                                                                                                                        " + "'", str66, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(commentSet81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(scope90);
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node node3 = scriptNode0.setType((int) '#');
        int int4 = scriptNode0.getLineno();
        boolean boolean5 = scriptNode0.hasConsistentReturnUsage();
        int int6 = scriptNode0.getBaseLineno();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap7 = scriptNode0.getSymbolTable();
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = astRoot8.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        java.lang.String str28 = comment26.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray29 = new com.google.javascript.rhino.head.ast.Comment[] { comment14, comment20, comment26 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet30 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet30, commentArray29);
        astRoot8.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet30);
        java.lang.String str33 = astRoot8.debugPrint();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList37 = scriptNode35.getChildScopes();
        int int38 = scriptNode35.getBaseLineno();
        int int39 = scriptNode35.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList43 = scriptNode41.getFunctions();
        scriptNode41.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope46 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode35.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode41, (com.google.javascript.rhino.head.Node) scope46);
        int int48 = scriptNode41.getEndLineno();
        scriptNode41.setEncodedSource("hi!");
        int int51 = astRoot8.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator52 = astRoot8.spliterator();
        int int53 = astRoot8.getType();
        boolean boolean54 = astRoot8.isInStrictMode();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor55 = astRoot8.iterator();
        int int56 = astRoot8.getEndLineno();
        scriptNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot8);
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "                                                                                                                                                                                                        " + "'", str28, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str33, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertNull(scopeList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(functionNodeList43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 136 + "'", int53 == 136);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(nodeItor55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        int int12 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean13 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setRecoverFromErrors(true);
        compilerEnvirons0.setRecordingComments(true);
        boolean boolean18 = compilerEnvirons0.isStrictMode();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setLanguageVersion(149284087);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad language version: 149284087");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot((int) 'a');
        java.lang.String str3 = astRoot1.toSource((-923688614));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        int int11 = scriptNode8.getBaseLineno();
        int int12 = scriptNode8.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode14.getFunctions();
        scriptNode14.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode8.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) scope19);
        scriptNode14.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList27 = scriptNode25.getChildScopes();
        int int28 = scriptNode25.getBaseLineno();
        com.google.javascript.rhino.head.Node node29 = scriptNode25.getLastSibling();
        int int30 = scriptNode25.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope33 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = astRoot34.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        java.lang.String str54 = comment52.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray55 = new com.google.javascript.rhino.head.ast.Comment[] { comment40, comment46, comment52 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet56 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet56, commentArray55);
        astRoot34.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet56);
        boolean boolean59 = astRoot34.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode60 = astRoot34.getParent();
        astRoot34.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode25, (com.google.javascript.rhino.head.Node) scope33, (com.google.javascript.rhino.head.Node) astRoot34, 6);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) astRoot34);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(574921099, (com.google.javascript.rhino.head.Node) astRoot34);
        com.google.javascript.rhino.head.Node node67 = new com.google.javascript.rhino.head.Node((int) (short) 100, node66);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode68.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode69);
        scriptNode69.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap75 = scriptNode74.getSymbolTable();
        scriptNode69.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode74);
        int int77 = scriptNode74.getLineno();
        int int78 = scriptNode74.depth();
        node66.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode74);
        int int82 = node66.getIntProp(7, (-975234622));
        astRoot1.target = node66;
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertNull(scopeList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "                                                                                                                                                                                                        " + "'", str54, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(astNode60);
        org.junit.Assert.assertNull(strMap75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-975234622) + "'", int82 == (-975234622));
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.getWarnTrailingComma();
        compilerEnvirons3.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet8 = compilerEnvirons3.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons3.getErrorReporter();
        java.lang.String[] strArray15 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons3.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser20 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter19);
        compilerEnvirons0.setRecordingComments(true);
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons25 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray31 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        compilerEnvirons25.setActivationNames((java.util.Set<java.lang.String>) strSet32);
        boolean boolean35 = compilerEnvirons25.getWarnTrailingComma();
        boolean boolean36 = compilerEnvirons25.isGenerateDebugInfo();
        java.lang.String[] strArray46 = new java.lang.String[] { "$0", "                      ", "                                                                                                                                                                                                        ", "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n", "ScriptNode", "AstRoot", "136" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        compilerEnvirons25.setActivationNames((java.util.Set<java.lang.String>) strSet47);
        compilerEnvirons25.setStrictMode(false);
        com.google.javascript.rhino.head.ErrorReporter errorReporter52 = compilerEnvirons25.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory53 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter52);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter52.warning("", "0\tCOMMENT 0 100\n", 221450998, "23\tBITXOR 23 -22\n25\t  COMMENT 2 0\n", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(errorReporter9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertNotNull(compilerEnvirons25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(errorReporter52);
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        java.lang.String str6 = comment4.toSource(100);
        java.lang.String str7 = comment4.getValue();
        boolean boolean8 = comment4.hasSideEffects();
        java.lang.String str9 = comment4.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = comment4.getCommentType();
        java.lang.String str11 = comment4.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType14 = null;
        com.google.javascript.rhino.head.ast.Comment comment16 = new com.google.javascript.rhino.head.ast.Comment(163023072, (int) 'a', commentType14, "-1\tSCRIPT -1 1\n-1\tBITXOR -1 1\n");
        comment4.setJsDocNode(comment16);
        boolean boolean18 = comment16.hasConsistentReturnUsage();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                                                                                                                                                                                                        " + "'", str6, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(commentType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = scriptNode1.new NodeIterator();
        boolean boolean8 = nodeIterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator7.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot6.visitComments(nodeVisitor13);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList15 = astRoot6.getStatements();
        int int16 = astRoot6.getLength();
        com.google.javascript.rhino.head.Node node18 = astRoot6.setType((-603173706));
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(astNodeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        astRoot0.flattenSymbolTable(false);
        com.google.javascript.rhino.head.Node node8 = astRoot0.getLastChild();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((-371677592));
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType28, "");
        boolean boolean31 = comment30.hasSideEffects();
        int int32 = comment30.getLineno();
        com.google.javascript.rhino.head.Node node34 = comment30.setType(18);
        boolean boolean35 = comment30.hasSideEffects();
        astRoot1.addComment(comment30);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(14, (com.google.javascript.rhino.head.Node) comment30, (-1));
        com.google.javascript.rhino.head.ast.AstRoot astRoot39 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet40 = astRoot39.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol42 = astRoot39.getSymbol("                                                                                                                                                                                                        ");
        node38.addChildToFront((com.google.javascript.rhino.head.Node) astRoot39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean45 = astRoot44.hasSideEffects();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap46 = null;
        astRoot44.setSymbolTable(strMap46);
        boolean boolean48 = astRoot44.isInStrictMode();
        java.lang.String str49 = astRoot44.getEncodedSource();
        astRoot39.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot44);
        boolean boolean51 = astRoot44.hasChildren();
        int int52 = astRoot44.getFunctionCount();
        // The following exception was thrown during execution in test generation
        try {
            astRoot44.setString("-1");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(commentSet40);
        org.junit.Assert.assertNull(symbol42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        boolean boolean38 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons39 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean40 = compilerEnvirons39.isReservedKeywordAsIdentifier();
        boolean boolean41 = compilerEnvirons39.isIdeMode();
        boolean boolean42 = compilerEnvirons39.getWarnTrailingComma();
        compilerEnvirons39.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons39.setAllowSharpComments(true);
        boolean boolean47 = compilerEnvirons39.isRecordingLocalJsDocComments();
        compilerEnvirons39.setRecoverFromErrors(true);
        com.google.javascript.rhino.head.Parser parser50 = new com.google.javascript.rhino.head.Parser(compilerEnvirons39);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons51 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean52 = compilerEnvirons51.isReservedKeywordAsIdentifier();
        boolean boolean53 = compilerEnvirons51.getWarnTrailingComma();
        compilerEnvirons51.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet56 = compilerEnvirons51.getActivationNames();
        boolean boolean57 = compilerEnvirons51.isGeneratingSource();
        com.google.javascript.rhino.head.ErrorReporter errorReporter58 = compilerEnvirons51.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory59 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons39, errorReporter58);
        com.google.javascript.rhino.head.IRFactory iRFactory60 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter58);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter58.error(">", "                                        {\n                                        }\n", 460838794, "      {\n      }\n", 1376136578);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(errorReporter58);
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        astRoot4.visitComments(nodeVisitor8);
        astRoot4.setEndLineno(17);
        com.google.javascript.rhino.head.ast.Symbol symbol13 = astRoot4.getSymbol("AstRoot");
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList14 = astRoot4.getSymbols();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor15 = astRoot4.iterator();
        astRoot4.setLineno(492844799);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray19 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList20 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList20, symbolArray19);
        scriptNode18.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList20);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj26 = scriptNode25.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        int int30 = scriptNode27.getEndLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode25, (com.google.javascript.rhino.head.Node) scriptNode27);
        scriptNode18.setCompilerData((java.lang.Object) scriptNode25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        scriptNode34.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap40 = scriptNode39.getSymbolTable();
        scriptNode34.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode39);
        scriptNode39.setLineno((int) (byte) 1);
        java.lang.String str44 = scriptNode18.toStringTree(scriptNode39);
        // The following exception was thrown during execution in test generation
        try {
            astRoot4.setScope((com.google.javascript.rhino.head.ast.Scope) scriptNode18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertNull(symbol13);
        org.junit.Assert.assertNotNull(symbolList14);
        org.junit.Assert.assertNotNull(nodeItor15);
        org.junit.Assert.assertNotNull(symbolArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(strMap40);
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        com.google.javascript.rhino.head.IRFactory iRFactory14 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot18 = iRFactory14.parse("2\tSCRIPT 2 1\n", "+=", 13);
        int int19 = astRoot18.getEncodedSourceStart();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(astRoot18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = scriptNode1.new NodeIterator();
        boolean boolean8 = nodeIterator7.hasNext();
        boolean boolean9 = nodeIterator7.hasNext();
        boolean boolean10 = nodeIterator7.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node11 = nodeIterator7.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((-1178528397));
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = astRoot2.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType6, "");
        boolean boolean9 = comment8.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray23 = new com.google.javascript.rhino.head.ast.Comment[] { comment8, comment14, comment20 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet24 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet24, commentArray23);
        astRoot2.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet24);
        boolean boolean27 = astRoot2.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode28 = astRoot2.getParent();
        java.lang.String str29 = astRoot2.debugPrint();
        int int30 = astRoot2.getFunctionCount();
        java.lang.String str32 = astRoot2.toSource((int) ' ');
        astRoot2.setEncodedSourceEnd((int) (short) 100);
        astRoot2.setEncodedSource("                                                                                                        {\n                                                                                                        }\n");
        // The following exception was thrown during execution in test generation
        try {
            scope1.removeChild((com.google.javascript.rhino.head.Node) astRoot2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(astNode28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str29, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet2 = astRoot1.getComments();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = scriptNode7.spliterator();
        com.google.javascript.rhino.head.Node node10 = scriptNode7.setType((int) '#');
        boolean boolean11 = scriptNode7.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node12 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode4, (com.google.javascript.rhino.head.Node) scriptNode7);
        scriptNode7.clearParentScope();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray21 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        compilerEnvirons15.setActivationNames((java.util.Set<java.lang.String>) strSet22);
        boolean boolean25 = compilerEnvirons15.isGenerateDebugInfo();
        compilerEnvirons15.setOptimizationLevel((int) (short) 1);
        compilerEnvirons15.setAllowSharpComments(true);
        boolean boolean30 = compilerEnvirons15.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter31 = compilerEnvirons15.getErrorReporter();
        int int32 = compilerEnvirons15.getLanguageVersion();
        com.google.javascript.rhino.head.Parser parser33 = new com.google.javascript.rhino.head.Parser(compilerEnvirons15);
        compilerEnvirons15.setRecordingLocalJsDocComments(true);
        boolean boolean36 = compilerEnvirons15.isRecordingLocalJsDocComments();
        scriptNode7.putProp((-251699444), (java.lang.Object) compilerEnvirons15);
        compilerEnvirons15.setGenerateDebugInfo(false);
        org.junit.Assert.assertNull(commentSet2);
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(errorReporter31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 170 + "'", int32 == 170);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        astRoot0.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.lang.String str20 = comment17.getValue();
        scriptNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) comment17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        com.google.javascript.rhino.head.Node node52 = astRoot22.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot22, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) comment17, (com.google.javascript.rhino.head.Node) scriptNode54);
        astRoot0.addComment(comment17);
        com.google.javascript.rhino.head.Node node59 = astRoot0.getLastSibling();
        astRoot0.setPosition(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode(24);
        astRoot0.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode63);
        int int65 = scriptNode63.getLength();
        com.google.javascript.rhino.head.Node node66 = scriptNode63.getLastChild();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNull(node66);
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot7, (com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList16 = scriptNode12.getSymbols();
        scriptNode12.setSourceName("                                          ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        int int25 = scriptNode22.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode19, (com.google.javascript.rhino.head.ast.Scope) scriptNode22);
        scriptNode12.setTop(scriptNode19);
        int int28 = scriptNode19.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = scriptNode19.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(symbolList16);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getParamCount();
        java.lang.String str2 = astRoot0.getJsDoc();
        java.lang.String str3 = astRoot0.getNextTempName();
        com.google.javascript.rhino.head.ast.Symbol symbol5 = astRoot0.getSymbol("                          ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int7 = astRoot6.getParamCount();
        java.lang.String str8 = astRoot6.getJsDoc();
        java.lang.String str9 = astRoot6.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = astRoot6.getTop();
        boolean boolean11 = astRoot6.isInStrictMode();
        int int12 = astRoot6.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment13 = astRoot6.getJsDocNode();
        java.lang.String str14 = astRoot6.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) astRoot6);
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = astRoot6.getAstRoot();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = astRoot16.iterator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "$0" + "'", str3, "$0");
        org.junit.Assert.assertNull(symbol5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$0" + "'", str9, "$0");
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(comment13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str14, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNotNull(astRoot16);
        org.junit.Assert.assertNotNull(nodeItor17);
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        com.google.javascript.rhino.head.Node node30 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        scriptNode36.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList46 = scriptNode44.getFunctions();
        scriptNode44.setPosition((int) (byte) 10);
        java.lang.String str49 = scriptNode36.toStringTree(scriptNode44);
        int int50 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node52 = scriptNode36.setType((int) (byte) -1);
        java.lang.String str53 = astRoot0.toStringTree(scriptNode36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = scriptNode36.getTop();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode55.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode56);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList58 = scriptNode56.getChildScopes();
        java.lang.String str59 = scriptNode56.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode60.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode61);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList63 = scriptNode61.getChildScopes();
        int int64 = scriptNode61.getBaseLineno();
        com.google.javascript.rhino.head.Node node65 = scriptNode61.getLastSibling();
        int int66 = scriptNode61.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator67 = scriptNode61.new NodeIterator();
        int int68 = scriptNode61.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot69 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator70 = astRoot69.new NodeIterator();
        scriptNode61.setCompilerData((java.lang.Object) nodeIterator70);
        int int72 = scriptNode56.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode61);
        scriptNode56.removeProp(18);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList75 = scriptNode56.getFunctions();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode36.removeChild((com.google.javascript.rhino.head.Node) scriptNode56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(functionNodeList46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(scriptNode54);
        org.junit.Assert.assertNull(scopeList58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(scopeList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-783284334) + "'", int72 == (-783284334));
        org.junit.Assert.assertNotNull(functionNodeList75);
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        com.google.javascript.rhino.head.IRFactory iRFactory14 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot18 = iRFactory14.parse("2\tSCRIPT 2 1\n", "+=", 13);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList19 = astRoot18.getFunctions();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(astRoot18);
        org.junit.Assert.assertNotNull(functionNodeList19);
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        boolean boolean2 = astRoot1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = astRoot3.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        boolean boolean10 = comment9.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        java.lang.String str23 = comment21.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray24 = new com.google.javascript.rhino.head.ast.Comment[] { comment9, comment15, comment21 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet25, commentArray24);
        astRoot3.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet25);
        boolean boolean28 = astRoot3.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode29 = astRoot3.getParent();
        astRoot3.setPosition(14);
        com.google.javascript.rhino.head.Node node32 = astRoot3.getFirstChild();
        com.google.javascript.rhino.head.ast.AstRoot astRoot33 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet34 = astRoot33.getComments();
        int int35 = astRoot33.getEndLineno();
        com.google.javascript.rhino.head.Node node37 = astRoot33.setType((int) (short) 10);
        astRoot33.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        scriptNode42.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        com.google.javascript.rhino.head.Node node51 = scriptNode47.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList55 = scriptNode53.getChildScopes();
        java.lang.String str57 = scriptNode53.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scriptNode59);
        int int61 = scriptNode53.getType();
        scriptNode42.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        int int63 = scriptNode53.getParamCount();
        com.google.javascript.rhino.head.Node node64 = scriptNode53.getLastSibling();
        astRoot33.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode53);
        java.lang.String str66 = scriptNode53.getSourceName();
        astRoot3.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode53);
        astRoot3.checkParentLinks();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator70 = scriptNode69.spliterator();
        scriptNode69.setRelative((int) (byte) 100);
        int int73 = scriptNode69.getRegexpCount();
        com.google.javascript.rhino.head.Token.CommentType commentType76 = null;
        com.google.javascript.rhino.head.ast.Comment comment78 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType76, "");
        java.lang.String str80 = comment78.toSource(100);
        java.lang.String str81 = comment78.getValue();
        astRoot3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode69, (com.google.javascript.rhino.head.Node) comment78);
        astRoot1.setJsDocNode(comment78);
        com.google.javascript.rhino.head.Node node85 = comment78.setType((-587993997));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                                                                                                                                                                                                        " + "'", str23, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(astNode29);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(commentSet34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(scopeList55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 136 + "'", int61 == 136);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(nodeSpliterator70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "                                                                                                                                                                                                        " + "'", str80, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot((-240632447));
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        com.google.javascript.rhino.head.Node node31 = astRoot1.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot1, (com.google.javascript.rhino.head.ast.Scope) scriptNode33);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = scriptNode33.getEnclosingFunction();
        scriptNode33.setEndLineno(6);
        java.lang.Object obj39 = scriptNode33.getCompilerData();
        int int40 = scriptNode33.getFunctionCount();
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(270991972, (com.google.javascript.rhino.head.Node) scriptNode33, 1120706625);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump43 = scriptNode33.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(functionNode36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        boolean boolean4 = compilerEnvirons0.isRecordingComments();
        boolean boolean5 = compilerEnvirons0.reportWarningAsError();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        boolean boolean8 = compilerEnvirons0.isStrictMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode0.setBaseLineno((int) 'a');
        scriptNode0.setEncodedSourceEnd((int) (short) -1);
        java.lang.Object obj7 = scriptNode0.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol9 = scriptNode0.getSymbol("|");
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope((int) ' ', (int) (byte) 10);
        int int13 = scriptNode0.compareTo((com.google.javascript.rhino.head.ast.AstNode) scope12);
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        boolean boolean20 = comment19.hasSideEffects();
        int int21 = comment19.getLineno();
        com.google.javascript.rhino.head.Node node23 = comment19.setType(18);
        boolean boolean24 = comment19.hasSideEffects();
        int int25 = comment19.getType();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons26 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory28 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons26, errorReporter27);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode30.getFunctions();
        scriptNode30.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node35 = iRFactory28.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.lang.String str36 = scriptNode30.toSource();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = scriptNode30.getParent();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType40, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType43 = null;
        comment42.setCommentType(commentType43);
        int int47 = comment42.getIntProp((int) (byte) 10, 0);
        comment42.setPosition(161);
        java.lang.String str51 = comment42.toSource((-325419474));
        comment19.addChildAfter((com.google.javascript.rhino.head.Node) astNode37, (com.google.javascript.rhino.head.Node) comment42);
        scriptNode0.putProp((-9), (java.lang.Object) comment42);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(symbol9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 18 + "'", int25 == 18);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{\n}\n" + "'", str36, "{\n}\n");
        org.junit.Assert.assertNotNull(astNode37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj4 = scriptNode3.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        int int8 = scriptNode5.getEndLineno();
        com.google.javascript.rhino.head.Node node9 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) scriptNode5);
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int12 = astRoot11.getParamCount();
        int int13 = astRoot11.getPosition();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory16 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons14, errorReporter15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList20 = scriptNode18.getFunctions();
        scriptNode18.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node23 = iRFactory16.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        java.lang.String str24 = scriptNode18.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Node node28 = scriptNode25.setType((int) '#');
        boolean boolean29 = scriptNode25.hasConsistentReturnUsage();
        scriptNode18.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode25);
        com.google.javascript.rhino.head.ast.Symbol symbol32 = scriptNode18.getSymbol("                                      ");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot11, (com.google.javascript.rhino.head.ast.Scope) scriptNode18);
        com.google.javascript.rhino.head.ast.AstNode astNode34 = scriptNode18.getParent();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node(100, (com.google.javascript.rhino.head.Node) scriptNode18, 19);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node((-1222715009), (com.google.javascript.rhino.head.Node) scriptNode5, (com.google.javascript.rhino.head.Node) scriptNode18);
        scriptNode18.setEndLineno(624377060);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(symbol32);
        org.junit.Assert.assertNotNull(astNode34);
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope(1028735497);
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        java.lang.String str8 = scriptNode1.shortName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        scriptNode11.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap17 = scriptNode16.getSymbolTable();
        scriptNode11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode16);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList19 = scriptNode11.getStatements();
        com.google.javascript.rhino.head.ast.Scope scope20 = scriptNode11.getEnclosingScope();
        com.google.javascript.rhino.head.Node node21 = new com.google.javascript.rhino.head.Node(15, (com.google.javascript.rhino.head.Node) scope20);
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scope20);
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ScriptNode" + "'", str8, "ScriptNode");
        org.junit.Assert.assertNull(strMap17);
        org.junit.Assert.assertNotNull(astNodeList19);
        org.junit.Assert.assertNotNull(scope20);
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        int int4 = compilerEnvirons0.getOptimizationLevel();
        java.lang.String[] strArray25 = new java.lang.String[] { "-1\tSCRIPT -1 1\n", "                    ", "35\t  COMMENT 36 2\n", "typeof", "$0", "                    ", "Comment", "                    {\n                    }\n", "35\t  COMMENT 36 2\n", "                      ", "                                                                                                        ", "136", "$0", "                    {\n                    }\n", "                                                                                                        ", "{\n}\n", "ScriptNode", "                      ", "                      ", "typeof" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.head.ErrorReporter errorReporter29 = compilerEnvirons0.getErrorReporter();
        boolean boolean30 = compilerEnvirons0.isGenerateDebugInfo();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(errorReporter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        int int12 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean13 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setRecoverFromErrors(true);
        compilerEnvirons0.setRecordingComments(true);
        boolean boolean18 = compilerEnvirons0.reportWarningAsError();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.Context context21 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.initFromContext(context21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(66852059, (-1376398339));
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setLanguageVersion((-17));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Bad language version: -17");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(81398823);
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = comment4.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        comment4.setCommentType(commentType6);
        java.lang.Object obj9 = comment4.getProp(0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int11 = astRoot10.getBaseLineno();
        int int12 = astRoot10.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        int int17 = scriptNode14.getBaseLineno();
        com.google.javascript.rhino.head.Node node18 = scriptNode14.getLastSibling();
        scriptNode14.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode21.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList24 = scriptNode22.getFunctions();
        scriptNode22.setPosition((int) (byte) 10);
        java.lang.String str27 = scriptNode14.toStringTree(scriptNode22);
        int int28 = scriptNode14.getBaseLineno();
        astRoot10.target = scriptNode14;
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        int int36 = comment34.getLineno();
        com.google.javascript.rhino.head.Node node38 = comment34.setType(18);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor39 = node38.iterator();
        int int40 = node38.getLineno();
        scriptNode14.addChildToFront(node38);
        com.google.javascript.rhino.head.ast.Comment comment42 = node38.getJsDocNode();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        boolean boolean48 = comment47.hasSideEffects();
        int int49 = comment47.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope50 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator51 = scope50.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        scope50.setTop(scriptNode53);
        comment47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        comment4.addChildAfter(node38, (com.google.javascript.rhino.head.Node) scriptNode53);
        int int60 = scriptNode53.getIntProp(1936891202, (int) (byte) 100);
        java.lang.String str61 = scriptNode53.toSource();
        scriptNode53.setBaseLineno(66965623);
        org.junit.Assert.assertNull(commentType5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(functionNodeList24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(nodeItor39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNull(comment42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator51);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "{\n}\n" + "'", str61, "{\n}\n");
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        compilerEnvirons0.setRecordingComments(false);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray20 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        compilerEnvirons14.setActivationNames((java.util.Set<java.lang.String>) strSet21);
        boolean boolean24 = compilerEnvirons14.isGenerateDebugInfo();
        compilerEnvirons14.setOptimizationLevel((int) (short) 1);
        compilerEnvirons14.setAllowSharpComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter29 = compilerEnvirons14.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory30 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter29);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean32 = compilerEnvirons31.isReservedKeywordAsIdentifier();
        int int33 = compilerEnvirons31.getLanguageVersion();
        int int34 = compilerEnvirons31.getLanguageVersion();
        compilerEnvirons31.setGenerateObserverCount(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons37 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean38 = compilerEnvirons37.isReservedKeywordAsIdentifier();
        boolean boolean39 = compilerEnvirons37.getWarnTrailingComma();
        compilerEnvirons37.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet42 = compilerEnvirons37.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = compilerEnvirons37.getErrorReporter();
        java.lang.String[] strArray49 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        compilerEnvirons37.setActivationNames((java.util.Set<java.lang.String>) strSet50);
        boolean boolean53 = compilerEnvirons37.isGenerateDebugInfo();
        boolean boolean54 = compilerEnvirons37.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons55 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean56 = compilerEnvirons55.isReservedKeywordAsIdentifier();
        int int57 = compilerEnvirons55.getLanguageVersion();
        int int58 = compilerEnvirons55.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons59 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean60 = compilerEnvirons59.isReservedKeywordAsIdentifier();
        compilerEnvirons59.setStrictMode(true);
        compilerEnvirons59.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons65 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean66 = compilerEnvirons65.isReservedKeywordAsIdentifier();
        boolean boolean67 = compilerEnvirons65.getWarnTrailingComma();
        compilerEnvirons65.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet70 = compilerEnvirons65.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter71 = compilerEnvirons65.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory72 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons59, errorReporter71);
        com.google.javascript.rhino.head.IRFactory iRFactory73 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons55, errorReporter71);
        com.google.javascript.rhino.head.IRFactory iRFactory74 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons37, errorReporter71);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons75 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray81 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet82 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet82, strArray81);
        compilerEnvirons75.setActivationNames((java.util.Set<java.lang.String>) strSet82);
        boolean boolean85 = compilerEnvirons75.isGenerateDebugInfo();
        compilerEnvirons75.setOptimizationLevel((int) (short) 1);
        compilerEnvirons75.setAllowSharpComments(true);
        boolean boolean90 = compilerEnvirons75.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter91 = compilerEnvirons75.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser92 = new com.google.javascript.rhino.head.Parser(compilerEnvirons37, errorReporter91);
        compilerEnvirons31.setErrorReporter(errorReporter91);
        compilerEnvirons0.setErrorReporter(errorReporter91);
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(errorReporter29);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 170 + "'", int33 == 170);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 170 + "'", int34 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(errorReporter43);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 170 + "'", int57 == 170);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 170 + "'", int58 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(strSet70);
        org.junit.Assert.assertNotNull(errorReporter71);
        org.junit.Assert.assertNotNull(compilerEnvirons75);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(errorReporter91);
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope13);
        scriptNode8.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        int int22 = scriptNode19.getBaseLineno();
        com.google.javascript.rhino.head.Node node23 = scriptNode19.getLastSibling();
        int int24 = scriptNode19.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope27 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = astRoot28.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        java.lang.String str48 = comment46.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray49 = new com.google.javascript.rhino.head.ast.Comment[] { comment34, comment40, comment46 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet50 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet50, commentArray49);
        astRoot28.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet50);
        boolean boolean53 = astRoot28.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode54 = astRoot28.getParent();
        astRoot28.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node58 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scope27, (com.google.javascript.rhino.head.Node) astRoot28, 6);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) astRoot28);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor60 = node59.iterator();
        com.google.javascript.rhino.head.Node node61 = nodeItor60.next();
        com.google.javascript.rhino.head.Node node62 = nodeItor60.next();
        // The following exception was thrown during execution in test generation
        try {
            node62.labelId((-1496675853));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "                                                                                                                                                                                                        " + "'", str48, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(astNode54);
        org.junit.Assert.assertNotNull(nodeItor60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (byte) 10);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = node1.new NodeIterator();
        boolean boolean3 = nodeIterator2.hasNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(20);
        scriptNode1.setEncodedSourceEnd(65536);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode7.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet11 = astRoot10.getComments();
        int int12 = astRoot10.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot10.visitComments(nodeVisitor13);
        com.google.javascript.rhino.head.Node node15 = astRoot10.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet16 = astRoot10.getComments();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) astRoot10);
        int int18 = scriptNode7.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory21 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons19, errorReporter20);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList25 = scriptNode23.getFunctions();
        scriptNode23.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node28 = iRFactory21.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        java.lang.String str29 = scriptNode23.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode31);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode31.getChildScopes();
        int int34 = scriptNode31.getBaseLineno();
        com.google.javascript.rhino.head.Node node35 = scriptNode31.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode37.getChildScopes();
        java.lang.String str41 = scriptNode37.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode31.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode37, (com.google.javascript.rhino.head.Node) scriptNode43);
        java.lang.Object obj46 = scriptNode37.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str49 = scriptNode47.toSource((int) '4');
        java.lang.String str50 = scriptNode37.toStringTree(scriptNode47);
        scriptNode23.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode7.getChildScopes();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList54 = scriptNode7.getSymbols();
        scriptNode1.setSymbols(symbolList54);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor56 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.visit(nodeVisitor56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNull(commentSet16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(functionNodeList25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str49, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertNotNull(symbolList54);
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode32.getFunctions();
        scriptNode32.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scope37);
        scriptNode32.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node41 = iRFactory24.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode32.setTop(scriptNode52);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode32, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode66);
        scriptNode8.setEncodedSourceBounds(5, 1499437464);
        java.lang.String str71 = scriptNode8.shortName();
        int int72 = scriptNode8.getLineno();
        scriptNode8.setEncodedSourceBounds((-1721493936), (-163019660));
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ScriptNode" + "'", str71, "ScriptNode");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor2 = astRoot0.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode9.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet13 = astRoot12.getComments();
        int int14 = astRoot12.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        astRoot12.visitComments(nodeVisitor15);
        com.google.javascript.rhino.head.Node node17 = astRoot12.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet18 = astRoot12.getComments();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) astRoot12);
        int int20 = scriptNode9.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory23 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList27 = scriptNode25.getFunctions();
        scriptNode25.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node30 = iRFactory23.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.lang.String str31 = scriptNode25.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        int int36 = scriptNode33.getBaseLineno();
        com.google.javascript.rhino.head.Node node37 = scriptNode33.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode38.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList41 = scriptNode39.getChildScopes();
        java.lang.String str43 = scriptNode39.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode33.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode39, (com.google.javascript.rhino.head.Node) scriptNode45);
        java.lang.Object obj48 = scriptNode39.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str51 = scriptNode49.toSource((int) '4');
        java.lang.String str52 = scriptNode39.toStringTree(scriptNode49);
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        com.google.javascript.rhino.head.Node node54 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode39);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList55 = scriptNode9.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray57 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList58 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList58, symbolArray57);
        scriptNode56.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList58);
        com.google.javascript.rhino.head.ast.AstRoot astRoot61 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int62 = astRoot61.getParamCount();
        int int63 = astRoot61.getRegexpCount();
        scriptNode56.addChildToBack((com.google.javascript.rhino.head.Node) astRoot61);
        scriptNode9.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot61);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode9);
        com.google.javascript.rhino.head.ast.AstRoot astRoot67 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int68 = astRoot67.getBaseLineno();
        int int69 = astRoot67.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode71.getChildScopes();
        int int74 = scriptNode71.getBaseLineno();
        com.google.javascript.rhino.head.Node node75 = scriptNode71.getLastSibling();
        scriptNode71.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode79);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList81 = scriptNode79.getFunctions();
        scriptNode79.setPosition((int) (byte) 10);
        java.lang.String str84 = scriptNode71.toStringTree(scriptNode79);
        int int85 = scriptNode71.getBaseLineno();
        astRoot67.target = scriptNode71;
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet87 = astRoot67.getComments();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList88 = astRoot67.getSymbols();
        scriptNode9.setSymbols(symbolList88);
        int int90 = scriptNode9.getBaseLineno();
        org.junit.Assert.assertNotNull(nodeItor2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(commentSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNull(commentSet18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(functionNodeList27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(scopeList41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str51, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNull(scopeList55);
        org.junit.Assert.assertNotNull(symbolArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(functionNodeList81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(commentSet87);
        org.junit.Assert.assertNotNull(symbolList88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setGenerateObserverCount(false);
        compilerEnvirons0.setGeneratingSource(false);
        compilerEnvirons0.setGenerateObserverCount(false);
        boolean boolean17 = compilerEnvirons0.isStrictMode();
        boolean boolean18 = compilerEnvirons0.isGeneratingSource();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean20 = compilerEnvirons19.isReservedKeywordAsIdentifier();
        boolean boolean21 = compilerEnvirons19.getWarnTrailingComma();
        compilerEnvirons19.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet24 = compilerEnvirons19.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter25 = compilerEnvirons19.getErrorReporter();
        java.lang.String[] strArray31 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        compilerEnvirons19.setActivationNames((java.util.Set<java.lang.String>) strSet32);
        boolean boolean35 = compilerEnvirons19.isGenerateDebugInfo();
        boolean boolean36 = compilerEnvirons19.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons37 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean38 = compilerEnvirons37.isReservedKeywordAsIdentifier();
        int int39 = compilerEnvirons37.getLanguageVersion();
        int int40 = compilerEnvirons37.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons41 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean42 = compilerEnvirons41.isReservedKeywordAsIdentifier();
        compilerEnvirons41.setStrictMode(true);
        compilerEnvirons41.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons47 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean48 = compilerEnvirons47.isReservedKeywordAsIdentifier();
        boolean boolean49 = compilerEnvirons47.getWarnTrailingComma();
        compilerEnvirons47.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet52 = compilerEnvirons47.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter53 = compilerEnvirons47.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory54 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons41, errorReporter53);
        com.google.javascript.rhino.head.IRFactory iRFactory55 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons37, errorReporter53);
        com.google.javascript.rhino.head.IRFactory iRFactory56 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons19, errorReporter53);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons57 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray63 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        compilerEnvirons57.setActivationNames((java.util.Set<java.lang.String>) strSet64);
        boolean boolean67 = compilerEnvirons57.isGenerateDebugInfo();
        compilerEnvirons57.setOptimizationLevel((int) (short) 1);
        compilerEnvirons57.setAllowSharpComments(true);
        boolean boolean72 = compilerEnvirons57.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter73 = compilerEnvirons57.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser74 = new com.google.javascript.rhino.head.Parser(compilerEnvirons19, errorReporter73);
        compilerEnvirons0.setErrorReporter(errorReporter73);
        compilerEnvirons0.setWarnTrailingComma(false);
        boolean boolean78 = compilerEnvirons0.getAllowSharpComments();
        boolean boolean79 = compilerEnvirons0.isRecordingComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(errorReporter25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 170 + "'", int39 == 170);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 170 + "'", int40 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(strSet52);
        org.junit.Assert.assertNotNull(errorReporter53);
        org.junit.Assert.assertNotNull(compilerEnvirons57);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(errorReporter73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        java.lang.String str9 = comment7.toSource(100);
        java.lang.String str10 = comment7.getValue();
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) comment7);
        com.google.javascript.rhino.head.Token.CommentType commentType14 = null;
        com.google.javascript.rhino.head.ast.Comment comment16 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType14, "hi!");
        int int17 = comment16.getLength();
        java.lang.String str18 = comment16.getValue();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(1490422031, (com.google.javascript.rhino.head.Node) scriptNode1, (com.google.javascript.rhino.head.Node) comment16, (-476424842));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode21.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode22.getChildScopes();
        int int25 = scriptNode22.getBaseLineno();
        com.google.javascript.rhino.head.Node node26 = scriptNode22.getLastSibling();
        scriptNode22.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode30.getFunctions();
        scriptNode30.setPosition((int) (byte) 10);
        java.lang.String str35 = scriptNode22.toStringTree(scriptNode30);
        int int36 = scriptNode22.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode38.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope41 = scriptNode38.getParentScope();
        scriptNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList46 = scriptNode44.getChildScopes();
        int int47 = scriptNode44.getBaseLineno();
        com.google.javascript.rhino.head.Node node48 = scriptNode44.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode49.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode50.getChildScopes();
        java.lang.String str54 = scriptNode50.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode44.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode50, (com.google.javascript.rhino.head.Node) scriptNode56);
        java.lang.Object obj59 = scriptNode50.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str62 = scriptNode60.toSource((int) '4');
        java.lang.String str63 = scriptNode50.toStringTree(scriptNode60);
        node20.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode38, (com.google.javascript.rhino.head.Node) scriptNode50);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = scriptNode50.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "                                                                                                                                                                                                        " + "'", str9, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(scope41);
        org.junit.Assert.assertNull(scopeList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str62, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str63);
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str2 = scriptNode0.toSource((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        int int6 = scriptNode3.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode0, (com.google.javascript.rhino.head.ast.Scope) scriptNode3);
        scriptNode0.putIntProp(25, (-1607027223));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str2, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        boolean boolean6 = astRoot0.isInStrictMode();
        java.lang.String str8 = astRoot0.toSource(20);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = astRoot0.getFunctions();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(functionNodeList9);
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        boolean boolean3 = astRoot2.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode5.getChildScopes();
        int int8 = scriptNode5.getBaseLineno();
        int int9 = scriptNode5.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList13 = scriptNode11.getFunctions();
        scriptNode11.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope16 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode5.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) scope16);
        com.google.javascript.rhino.head.ast.Scope scope19 = scope16.getDefiningScope("0\tSCRIPT 0 1\n");
        astRoot2.setParentScope(scope16);
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope(15);
        java.lang.String str23 = scope22.debugPrint();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory26 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList30 = scriptNode28.getFunctions();
        scriptNode28.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node33 = iRFactory26.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.lang.String str34 = scriptNode28.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList44 = scriptNode42.getChildScopes();
        java.lang.String str46 = scriptNode42.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode36.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode42, (com.google.javascript.rhino.head.Node) scriptNode48);
        java.lang.Object obj51 = scriptNode42.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str54 = scriptNode52.toSource((int) '4');
        java.lang.String str55 = scriptNode42.toStringTree(scriptNode52);
        scriptNode28.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        int int57 = scriptNode42.getLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes(scope22, (com.google.javascript.rhino.head.ast.Scope) scriptNode42);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) astRoot2, (com.google.javascript.rhino.head.Node) scriptNode42);
        boolean boolean60 = astRoot2.hasSideEffects();
        java.lang.String str62 = astRoot2.toSource(148564836);
        astRoot2.setEncodedSource("{\n}\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(functionNodeList13);
        org.junit.Assert.assertNull(scope19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "15\tBLOCK 15 1\n" + "'", str23, "15\tBLOCK 15 1\n");
        org.junit.Assert.assertNotNull(functionNodeList30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(scopeList44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str54, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons1 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray7 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        compilerEnvirons1.setActivationNames((java.util.Set<java.lang.String>) strSet8);
        boolean boolean11 = compilerEnvirons1.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter12 = compilerEnvirons1.getErrorReporter();
        boolean boolean13 = compilerEnvirons1.isRecordingComments();
        boolean boolean14 = compilerEnvirons1.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean16 = compilerEnvirons15.isReservedKeywordAsIdentifier();
        int int17 = compilerEnvirons15.getLanguageVersion();
        compilerEnvirons15.setLanguageVersion((int) (byte) 100);
        boolean boolean20 = compilerEnvirons15.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        compilerEnvirons21.setStrictMode(true);
        compilerEnvirons21.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons27 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean28 = compilerEnvirons27.isReservedKeywordAsIdentifier();
        compilerEnvirons27.setStrictMode(true);
        compilerEnvirons27.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons33 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean34 = compilerEnvirons33.isReservedKeywordAsIdentifier();
        boolean boolean35 = compilerEnvirons33.getWarnTrailingComma();
        compilerEnvirons33.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet38 = compilerEnvirons33.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter39 = compilerEnvirons33.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory40 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons27, errorReporter39);
        com.google.javascript.rhino.head.IRFactory iRFactory41 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter39);
        com.google.javascript.rhino.head.Parser parser42 = new com.google.javascript.rhino.head.Parser(compilerEnvirons15, errorReporter39);
        com.google.javascript.rhino.head.Parser parser43 = new com.google.javascript.rhino.head.Parser(compilerEnvirons1, errorReporter39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot47 = parser43.parse("1", "  0;\n  SCRIPT;\n  0;\n  1;\n", 14);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator48 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator49 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator50 = positionComparator48.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator49);
        com.google.javascript.rhino.head.ast.AstRoot astRoot51 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int52 = astRoot51.getBaseLineno();
        java.lang.String str53 = astRoot51.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot54 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = astRoot54.new NodeIterator();
        int int56 = positionComparator49.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot51, (com.google.javascript.rhino.head.ast.AstNode) astRoot54);
        int int57 = astRoot51.getFunctionCount();
        astRoot51.setPosition(1384960853);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(402672405, (com.google.javascript.rhino.head.Node) astRoot47, (com.google.javascript.rhino.head.Node) astRoot51);
        astRoot51.putIntProp(5, (-253374738));
        astRoot51.setSourceName("                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(compilerEnvirons1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(errorReporter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertNotNull(errorReporter39);
        org.junit.Assert.assertNotNull(astRoot47);
        org.junit.Assert.assertNotNull(astNodeComparator50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str53, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node19 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory22 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons20, errorReporter21);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        int int28 = scriptNode24.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode30.getFunctions();
        scriptNode30.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope35 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode24.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) scope35);
        scriptNode30.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node39 = iRFactory22.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        scriptNode10.setTop(scriptNode30);
        int int41 = scriptNode30.getLineno();
        boolean boolean42 = scriptNode30.hasChildren();
        boolean boolean43 = scriptNode30.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode47.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray54 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList55 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList55, symbolArray54);
        scriptNode53.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList55);
        scriptNode50.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList55);
        scriptNode47.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList55);
        scriptNode45.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList55);
        java.lang.String str61 = scriptNode45.debugPrint();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode30.setJumpStatement((com.google.javascript.rhino.head.ast.Jump) scriptNode45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(symbolArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0\tSCRIPT 0 1\n" + "'", str61, "0\tSCRIPT 0 1\n");
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        comment4.setCommentType(commentType5);
        int int9 = comment4.getIntProp((int) (byte) 10, 0);
        boolean boolean10 = comment4.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        comment4.setCommentType(commentType11);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newNumber((double) (-1096410579));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = node1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.NumberLiteral cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet18 = astRoot17.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol20 = astRoot17.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType23, "hi!");
        astRoot17.addChildrenToFront((com.google.javascript.rhino.head.Node) comment25);
        boolean boolean27 = astRoot17.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode28.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode29.getChildScopes();
        int int32 = scriptNode29.getBaseLineno();
        int int33 = scriptNode29.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList34 = scriptNode29.getSymbols();
        int int35 = scriptNode29.getPosition();
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = astRoot36.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        boolean boolean43 = comment42.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        boolean boolean49 = comment48.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        java.lang.String str56 = comment54.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray57 = new com.google.javascript.rhino.head.ast.Comment[] { comment42, comment48, comment54 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet58 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet58, commentArray57);
        astRoot36.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet58);
        boolean boolean61 = astRoot36.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray62 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList63 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList63, symbolArray62);
        astRoot36.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList63);
        com.google.javascript.rhino.head.Node node66 = astRoot36.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode67.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode68);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot36, (com.google.javascript.rhino.head.ast.Scope) scriptNode68);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(19, (com.google.javascript.rhino.head.Node) astRoot17, (com.google.javascript.rhino.head.Node) scriptNode29, (com.google.javascript.rhino.head.Node) astRoot36, (int) (byte) 1);
        scriptNode1.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot36);
        com.google.javascript.rhino.head.ast.Scope scope74 = scriptNode1.getParentScope();
        com.google.javascript.rhino.head.Node node75 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.Token.CommentType commentType78 = null;
        com.google.javascript.rhino.head.ast.Comment comment80 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType78, "");
        boolean boolean81 = comment80.hasSideEffects();
        int int82 = comment80.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType83 = null;
        comment80.setCommentType(commentType83);
        comment80.setPosition(2);
        java.lang.String str87 = comment80.toString();
        scriptNode1.target = comment80;
        com.google.javascript.rhino.head.ast.Comment comment89 = comment80.getJsDocNode();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(commentSet18);
        org.junit.Assert.assertNull(symbol20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(symbolList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "                                                                                                                                                                                                        " + "'", str56, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(symbolArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "161" + "'", str87, "161");
        org.junit.Assert.assertNull(comment89);
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Node node4 = scriptNode1.setType((int) '#');
        int int5 = scriptNode1.getLineno();
        boolean boolean6 = scriptNode1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = scriptNode7.spliterator();
        com.google.javascript.rhino.head.Node node10 = scriptNode7.setType((int) '#');
        java.lang.Object obj11 = scriptNode7.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol13 = scriptNode7.getSymbol("typeof");
        scriptNode7.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet17 = astRoot16.getComments();
        int int18 = astRoot16.getEndLineno();
        com.google.javascript.rhino.head.Node node20 = astRoot16.setType((int) (short) 10);
        astRoot16.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator28 = scriptNode27.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        java.lang.String str36 = comment33.getValue();
        scriptNode27.setParent((com.google.javascript.rhino.head.ast.AstNode) comment33);
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator39 = astRoot38.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        java.lang.String str58 = comment56.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray59 = new com.google.javascript.rhino.head.ast.Comment[] { comment44, comment50, comment56 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet60 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet60, commentArray59);
        astRoot38.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet60);
        boolean boolean63 = astRoot38.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray64 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList65 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList65, symbolArray64);
        astRoot38.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList65);
        com.google.javascript.rhino.head.Node node68 = astRoot38.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode69.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode70);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot38, (com.google.javascript.rhino.head.ast.Scope) scriptNode70);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode26, (com.google.javascript.rhino.head.Node) comment33, (com.google.javascript.rhino.head.Node) scriptNode70);
        astRoot16.addComment(comment33);
        com.google.javascript.rhino.head.Node node75 = astRoot16.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator76 = node75.spliterator();
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(21, (com.google.javascript.rhino.head.Node) scriptNode1, (com.google.javascript.rhino.head.Node) scriptNode7, node75, (int) (byte) 10);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList79 = scriptNode1.getSymbols();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = scriptNode1.getParamOrVarName((-1000485489));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(symbol13);
        org.junit.Assert.assertNull(commentSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "                                                                                                                                                                                                        " + "'", str58, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(symbolArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeSpliterator76);
        org.junit.Assert.assertNotNull(symbolList79);
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("136");
        node1.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode41 = astRoot15.getParent();
        astRoot15.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode6, (com.google.javascript.rhino.head.Node) scope14, (com.google.javascript.rhino.head.Node) astRoot15, 6);
        java.lang.String str46 = node1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot15);
        astRoot15.checkParentLinks();
        java.lang.String str49 = astRoot15.toSource(3);
        boolean boolean50 = astRoot15.hasConsistentReturnUsage();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(astNode41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        java.lang.String str52 = comment50.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray53 = new com.google.javascript.rhino.head.ast.Comment[] { comment38, comment44, comment50 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet54, commentArray53);
        astRoot32.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet54);
        boolean boolean57 = astRoot32.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray58 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList59 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList59, symbolArray58);
        astRoot32.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList59);
        com.google.javascript.rhino.head.Node node62 = astRoot32.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot32, (com.google.javascript.rhino.head.ast.Scope) scriptNode64);
        com.google.javascript.rhino.head.ast.AstRoot astRoot67 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = astRoot67.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor69 = astRoot67.iterator();
        astRoot67.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) astRoot32, (com.google.javascript.rhino.head.Node) astRoot67, (int) (byte) 0);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor74 = astRoot1.iterator();
        astRoot1.setInStrictMode(false);
        java.lang.String str77 = astRoot1.debugPrint();
        astRoot1.setEncodedSource("35\tSCRIPT 35 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = astRoot1.getTop();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                                                                                                                                                                        " + "'", str52, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(symbolArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(nodeItor69);
        org.junit.Assert.assertNotNull(nodeItor74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str77, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertNotNull(scriptNode80);
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        boolean boolean8 = compilerEnvirons0.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        boolean boolean11 = compilerEnvirons9.getWarnTrailingComma();
        compilerEnvirons9.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet14 = compilerEnvirons9.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter15 = compilerEnvirons9.getErrorReporter();
        java.lang.String[] strArray21 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        compilerEnvirons9.setActivationNames((java.util.Set<java.lang.String>) strSet22);
        boolean boolean25 = compilerEnvirons9.isGenerateDebugInfo();
        boolean boolean26 = compilerEnvirons9.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons27 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean28 = compilerEnvirons27.isReservedKeywordAsIdentifier();
        int int29 = compilerEnvirons27.getLanguageVersion();
        int int30 = compilerEnvirons27.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean32 = compilerEnvirons31.isReservedKeywordAsIdentifier();
        compilerEnvirons31.setStrictMode(true);
        compilerEnvirons31.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons37 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean38 = compilerEnvirons37.isReservedKeywordAsIdentifier();
        boolean boolean39 = compilerEnvirons37.getWarnTrailingComma();
        compilerEnvirons37.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet42 = compilerEnvirons37.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = compilerEnvirons37.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons31, errorReporter43);
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons27, errorReporter43);
        com.google.javascript.rhino.head.IRFactory iRFactory46 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons9, errorReporter43);
        boolean boolean47 = compilerEnvirons9.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons48 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean49 = compilerEnvirons48.isReservedKeywordAsIdentifier();
        compilerEnvirons48.setStrictMode(true);
        int int52 = compilerEnvirons48.getOptimizationLevel();
        java.lang.String[] strArray73 = new java.lang.String[] { "-1\tSCRIPT -1 1\n", "                    ", "35\t  COMMENT 36 2\n", "typeof", "$0", "                    ", "Comment", "                    {\n                    }\n", "35\t  COMMENT 36 2\n", "                      ", "                                                                                                        ", "136", "$0", "                    {\n                    }\n", "                                                                                                        ", "{\n}\n", "ScriptNode", "                      ", "                      ", "typeof" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        compilerEnvirons48.setActivationNames((java.util.Set<java.lang.String>) strSet74);
        compilerEnvirons9.setActivationNames((java.util.Set<java.lang.String>) strSet74);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet74);
        compilerEnvirons0.setRecordingComments(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(errorReporter15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 170 + "'", int29 == 170);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 170 + "'", int30 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(errorReporter43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean8 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setRecoverFromErrors(true);
        boolean boolean11 = compilerEnvirons0.isRecordingLocalJsDocComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        java.lang.String str13 = scriptNode9.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        scriptNode15.setEncodedSourceEnd(11);
        int int19 = scriptNode9.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        scriptNode1.putProp(8, (java.lang.Object) scriptNode15);
        scriptNode1.setEndLineno(14);
        java.lang.String str23 = scriptNode1.toSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList27 = scriptNode25.getChildScopes();
        int int28 = scriptNode25.getBaseLineno();
        com.google.javascript.rhino.head.Node node29 = scriptNode25.getLastSibling();
        int int30 = scriptNode25.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = scriptNode25.new NodeIterator();
        int int32 = scriptNode25.getLineno();
        scriptNode25.setEncodedSourceEnd((int) (byte) -1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap35 = scriptNode25.getSymbolTable();
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode25);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump37 = scriptNode1.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1022326544 + "'", int19 == 1022326544);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n}\n" + "'", str23, "{\n}\n");
        org.junit.Assert.assertNull(scopeList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(strMap35);
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setXmlAvailable(false);
        compilerEnvirons0.setXmlAvailable(false);
        com.google.javascript.rhino.head.Parser parser22 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean23 = compilerEnvirons0.isIdeMode();
        boolean boolean24 = compilerEnvirons0.isIdeMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj3 = scriptNode2.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        int int7 = scriptNode4.getEndLineno();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scriptNode4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray30 = new com.google.javascript.rhino.head.ast.Comment[] { comment15, comment21, comment27 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet31, commentArray30);
        astRoot9.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet31);
        java.lang.String str34 = astRoot9.getEncodedSource();
        com.google.javascript.rhino.head.Node node35 = astRoot9.target;
        scriptNode2.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot9);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        scriptNode38.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode42.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode43);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList45 = scriptNode43.getChildScopes();
        int int46 = scriptNode43.getBaseLineno();
        com.google.javascript.rhino.head.Node node47 = scriptNode43.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode49.getChildScopes();
        java.lang.String str53 = scriptNode49.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode43.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode49, (com.google.javascript.rhino.head.Node) scriptNode55);
        int int57 = scriptNode49.getType();
        scriptNode38.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        int int59 = scriptNode49.getParamCount();
        int int60 = scriptNode49.getEndLineno();
        scriptNode49.removeProp(1275261773);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList66 = scriptNode64.getChildScopes();
        int int67 = scriptNode64.getBaseLineno();
        com.google.javascript.rhino.head.Node node68 = scriptNode64.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode69.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode70);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList72 = scriptNode70.getChildScopes();
        java.lang.String str74 = scriptNode70.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode64.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode70, (com.google.javascript.rhino.head.Node) scriptNode76);
        java.lang.Object obj79 = scriptNode70.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str82 = scriptNode80.toSource((int) '4');
        java.lang.String str83 = scriptNode70.toStringTree(scriptNode80);
        scriptNode49.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode80);
        astRoot9.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode80);
        int int88 = scriptNode80.getIntProp((-1049498906), (-87372015));
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(scopeList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 136 + "'", int57 == 136);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(scopeList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(scopeList72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str82, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-87372015) + "'", int88 == (-87372015));
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator3 = positionComparator1.reversed();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        scriptNode5.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap11 = scriptNode10.getSymbolTable();
        scriptNode5.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList13 = scriptNode5.getStatements();
        int int14 = scriptNode5.getFunctionCount();
        java.lang.String str16 = scriptNode5.makeIndent((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode(19);
        int int19 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode5, (com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode20 = scriptNode18.getEnclosingFunction();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = functionNode20.depth();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(astNodeComparator3);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(astNodeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "  " + "'", str16, "  ");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-19) + "'", int19 == (-19));
        org.junit.Assert.assertNull(functionNode20);
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        int int4 = compilerEnvirons0.getOptimizationLevel();
        int int5 = compilerEnvirons0.getLanguageVersion();
        boolean boolean6 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setIdeMode(true);
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 170 + "'", int5 == 170);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment31 = astRoot0.getJsDocNode();
        astRoot0.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = astRoot34.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        java.lang.String str54 = comment52.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray55 = new com.google.javascript.rhino.head.ast.Comment[] { comment40, comment46, comment52 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet56 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet56, commentArray55);
        astRoot34.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet56);
        boolean boolean59 = astRoot34.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray60 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList61 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList61, symbolArray60);
        astRoot34.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList61);
        int int64 = astRoot34.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode65.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode66);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList68 = scriptNode66.getChildScopes();
        int int69 = scriptNode66.getBaseLineno();
        com.google.javascript.rhino.head.Node node70 = scriptNode66.getLastSibling();
        scriptNode66.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode73.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode74);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList76 = scriptNode74.getFunctions();
        scriptNode74.setPosition((int) (byte) 10);
        java.lang.String str79 = scriptNode66.toStringTree(scriptNode74);
        int int80 = scriptNode66.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot34, (com.google.javascript.rhino.head.ast.Scope) scriptNode66);
        astRoot0.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        astRoot0.setEndLineno(15);
        com.google.javascript.rhino.head.ast.AstNode astNode85 = astRoot0.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(comment31);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "                                                                                                                                                                                                        " + "'", str54, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(symbolArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(scopeList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(functionNodeList76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNull(astNode85);
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("136");
        node1.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode41 = astRoot15.getParent();
        astRoot15.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode6, (com.google.javascript.rhino.head.Node) scope14, (com.google.javascript.rhino.head.Node) astRoot15, 6);
        java.lang.String str46 = node1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot15);
        com.google.javascript.rhino.head.ast.Scope scope47 = astRoot15.getEnclosingScope();
        astRoot15.setEncodedSourceEnd((-603115504));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode51.getChildScopes();
        int int54 = scriptNode51.getBaseLineno();
        int int55 = scriptNode51.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList56 = scriptNode51.getSymbols();
        astRoot15.setSymbols(symbolList56);
        astRoot15.setInStrictMode(false);
        com.google.javascript.rhino.head.ast.AstRoot astRoot60 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator61 = astRoot60.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        boolean boolean67 = comment66.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType70 = null;
        com.google.javascript.rhino.head.ast.Comment comment72 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType70, "");
        boolean boolean73 = comment72.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType76 = null;
        com.google.javascript.rhino.head.ast.Comment comment78 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType76, "");
        java.lang.String str80 = comment78.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray81 = new com.google.javascript.rhino.head.ast.Comment[] { comment66, comment72, comment78 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet82 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet82, commentArray81);
        astRoot60.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet82);
        java.lang.String str85 = astRoot60.getEncodedSource();
        java.lang.String str86 = astRoot60.debugPrint();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList87 = astRoot60.getSymbols();
        astRoot15.setSymbols(symbolList87);
        astRoot15.setEncodedSourceStart((int) ' ');
        com.google.javascript.rhino.head.Node node91 = astRoot15.getLastSibling();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(astNode41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(scope47);
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(symbolList56);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "                                                                                                                                                                                                        " + "'", str80, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str86, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertNotNull(symbolList87);
        org.junit.Assert.assertNotNull(node91);
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot((-2));
        int int2 = astRoot1.getLineno();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.reportWarningAsError();
        java.util.Set<java.lang.String> strSet4 = compilerEnvirons0.getActivationNames();
        boolean boolean5 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        boolean boolean8 = compilerEnvirons6.getWarnTrailingComma();
        compilerEnvirons6.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet11 = compilerEnvirons6.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter12 = compilerEnvirons6.getErrorReporter();
        java.lang.String[] strArray18 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        compilerEnvirons6.setActivationNames((java.util.Set<java.lang.String>) strSet19);
        boolean boolean22 = compilerEnvirons6.isGenerateDebugInfo();
        boolean boolean23 = compilerEnvirons6.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        int int26 = compilerEnvirons24.getLanguageVersion();
        int int27 = compilerEnvirons24.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        compilerEnvirons28.setStrictMode(true);
        compilerEnvirons28.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons34 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean35 = compilerEnvirons34.isReservedKeywordAsIdentifier();
        boolean boolean36 = compilerEnvirons34.getWarnTrailingComma();
        compilerEnvirons34.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet39 = compilerEnvirons34.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter40 = compilerEnvirons34.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory41 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons28, errorReporter40);
        com.google.javascript.rhino.head.IRFactory iRFactory42 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter40);
        com.google.javascript.rhino.head.IRFactory iRFactory43 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6, errorReporter40);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons44 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray50 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        compilerEnvirons44.setActivationNames((java.util.Set<java.lang.String>) strSet51);
        boolean boolean54 = compilerEnvirons44.isGenerateDebugInfo();
        compilerEnvirons44.setOptimizationLevel((int) (short) 1);
        compilerEnvirons44.setAllowSharpComments(true);
        boolean boolean59 = compilerEnvirons44.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter60 = compilerEnvirons44.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser61 = new com.google.javascript.rhino.head.Parser(compilerEnvirons6, errorReporter60);
        com.google.javascript.rhino.head.IRFactory iRFactory62 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter60);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.EvaluatorException evaluatorException68 = errorReporter60.runtimeError("                          {\n                          }\n", "", 1548187427, "                  ", 23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(errorReporter12);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 170 + "'", int26 == 170);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 170 + "'", int27 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(errorReporter40);
        org.junit.Assert.assertNotNull(compilerEnvirons44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(errorReporter60);
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        boolean boolean6 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean7 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setReservedKeywordAsIdentifier(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor2 = astRoot0.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        astRoot0.setInStrictMode(false);
        int int7 = astRoot0.getEncodedSourceEnd();
        int int8 = astRoot0.getFunctionCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.Scope scope11 = scriptNode10.getParentScope();
        scriptNode10.setBaseLineno(875237497);
        java.lang.String str14 = scriptNode10.toSource();
        astRoot0.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList16 = astRoot0.getStatements();
        com.google.javascript.rhino.head.Node node17 = astRoot0.getLastChild();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator18 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator19 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator20 = positionComparator18.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator19);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator21 = positionComparator19.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator22 = positionComparator19.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator23 = positionComparator19.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator24 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator25 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator26 = positionComparator24.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator25);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator27 = positionComparator25.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator28 = positionComparator25.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator29 = positionComparator25.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator30 = positionComparator19.thenComparing(astNodeComparator29);
        astRoot0.setCompilerData((java.lang.Object) positionComparator19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray33 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList34 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList34, symbolArray33);
        scriptNode32.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot37 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int38 = astRoot37.getParamCount();
        int int39 = astRoot37.getRegexpCount();
        scriptNode32.addChildToBack((com.google.javascript.rhino.head.Node) astRoot37);
        com.google.javascript.rhino.head.ast.Scope scope42 = scriptNode32.getDefiningScope("136");
        java.lang.String str43 = scriptNode32.toSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = scriptNode32.getTop();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons45 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean46 = compilerEnvirons45.isReservedKeywordAsIdentifier();
        int int47 = compilerEnvirons45.getLanguageVersion();
        boolean boolean48 = compilerEnvirons45.reportWarningAsError();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons49 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean50 = compilerEnvirons49.isReservedKeywordAsIdentifier();
        boolean boolean51 = compilerEnvirons49.getWarnTrailingComma();
        boolean boolean52 = compilerEnvirons49.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter53 = compilerEnvirons49.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory54 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons45, errorReporter53);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode56.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot59 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator60 = astRoot59.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor61 = astRoot59.iterator();
        scriptNode56.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot59);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = iRFactory54.transformTree(astRoot59);
        int int64 = positionComparator19.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode44, (com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        org.junit.Assert.assertNotNull(nodeItor2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(scope11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "{\n}\n" + "'", str14, "{\n}\n");
        org.junit.Assert.assertNotNull(astNodeList16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(astNodeComparator20);
        org.junit.Assert.assertNotNull(astNodeComparator21);
        org.junit.Assert.assertNotNull(astNodeComparator22);
        org.junit.Assert.assertNotNull(astNodeComparator23);
        org.junit.Assert.assertNotNull(astNodeComparator26);
        org.junit.Assert.assertNotNull(astNodeComparator27);
        org.junit.Assert.assertNotNull(astNodeComparator28);
        org.junit.Assert.assertNotNull(astNodeComparator29);
        org.junit.Assert.assertNotNull(astNodeComparator30);
        org.junit.Assert.assertNotNull(symbolArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(scope42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{\n}\n" + "'", str43, "{\n}\n");
        org.junit.Assert.assertNotNull(scriptNode44);
        org.junit.Assert.assertNotNull(compilerEnvirons45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 170 + "'", int47 == 170);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(errorReporter53);
        org.junit.Assert.assertNotNull(nodeItor61);
        org.junit.Assert.assertNotNull(scriptNode63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot((int) '#');
        java.lang.String str2 = astRoot1.debugPrint();
        com.google.javascript.rhino.head.ast.AstNode astNode3 = astRoot1.getParent();
        boolean boolean4 = astRoot1.hasChildren();
        int int5 = astRoot1.getFunctionCount();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "35\tSCRIPT 35 1\n" + "'", str2, "35\tSCRIPT 35 1\n");
        org.junit.Assert.assertNull(astNode3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope(603173706);
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = astRoot2.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType6, "");
        boolean boolean9 = comment8.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray23 = new com.google.javascript.rhino.head.ast.Comment[] { comment8, comment14, comment20 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet24 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet24, commentArray23);
        astRoot2.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet24);
        boolean boolean27 = astRoot2.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType30, "hi!");
        astRoot2.addComment(comment32);
        astRoot2.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = astRoot36.getComments();
        int int38 = astRoot36.getEndLineno();
        com.google.javascript.rhino.head.Node node40 = astRoot36.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot2, (com.google.javascript.rhino.head.ast.Scope) astRoot36);
        astRoot2.setBaseLineno((int) (byte) 0);
        int int44 = astRoot2.depth();
        scope1.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot2);
        int int46 = scope1.getLength();
        scope1.setLength(16);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = scope1.new NodeIterator();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(commentSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-603173706) + "'", int46 == (-603173706));
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType29, "hi!");
        astRoot1.addComment(comment31);
        astRoot1.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.AstRoot astRoot35 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = astRoot35.getComments();
        int int37 = astRoot35.getEndLineno();
        com.google.javascript.rhino.head.Node node39 = astRoot35.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot1, (com.google.javascript.rhino.head.ast.Scope) astRoot35);
        astRoot35.clearParentScope();
        boolean boolean42 = astRoot35.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        scriptNode44.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap50 = scriptNode49.getSymbolTable();
        scriptNode44.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode49);
        int int52 = scriptNode49.getParamCount();
        int int53 = scriptNode49.getBaseLineno();
        astRoot35.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode49);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet55 = astRoot35.getComments();
        com.google.javascript.rhino.head.ast.AstRoot astRoot56 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator57 = astRoot56.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        boolean boolean63 = comment62.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType66 = null;
        com.google.javascript.rhino.head.ast.Comment comment68 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType66, "");
        boolean boolean69 = comment68.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType72 = null;
        com.google.javascript.rhino.head.ast.Comment comment74 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType72, "");
        java.lang.String str76 = comment74.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray77 = new com.google.javascript.rhino.head.ast.Comment[] { comment62, comment68, comment74 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet78 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet78, commentArray77);
        astRoot56.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet78);
        boolean boolean81 = astRoot56.isInStrictMode();
        int int82 = astRoot56.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot83 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean84 = astRoot83.hasSideEffects();
        astRoot56.target = astRoot83;
        astRoot83.checkParentLinks();
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((-552755211), (com.google.javascript.rhino.head.Node) astRoot35, (com.google.javascript.rhino.head.Node) astRoot83, 0);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator89 = astRoot35.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator89.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(commentSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(strMap50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(commentSet55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "                                                                                                                                                                                                        " + "'", str76, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor13 = astRoot11.iterator();
        scriptNode8.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        astRoot11.visitComments(nodeVisitor15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        com.google.javascript.rhino.head.Node node20 = scriptNode17.getFirstChild();
        astRoot11.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode17);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj26 = scriptNode25.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        int int30 = scriptNode27.getEndLineno();
        com.google.javascript.rhino.head.Node node31 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode25, (com.google.javascript.rhino.head.Node) scriptNode27);
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        java.lang.String str52 = comment50.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray53 = new com.google.javascript.rhino.head.ast.Comment[] { comment38, comment44, comment50 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet54, commentArray53);
        astRoot32.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet54);
        java.lang.String str57 = astRoot32.getEncodedSource();
        com.google.javascript.rhino.head.Node node58 = astRoot32.target;
        scriptNode25.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot32);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode25);
        boolean boolean61 = scriptNode25.hasConsistentReturnUsage();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                                                                                                                                                                        " + "'", str52, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setPosition((int) (byte) 10);
        int int6 = scriptNode1.getEncodedSourceEnd();
        scriptNode1.setEncodedSourceStart(7);
        java.lang.String str9 = scriptNode1.debugPrint();
        scriptNode1.setLength((-1092487220));
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "9\t  SCRIPT 10 1\n" + "'", str9, "9\t  SCRIPT 10 1\n");
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        scriptNode0.setEncodedSource("typeof");
        com.google.javascript.rhino.head.Node node6 = scriptNode0.getLastChild();
        scriptNode0.setBaseLineno(13);
        scriptNode0.setLength(23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode((-213029975));
        java.lang.String str13 = scriptNode12.getSourceName();
        scriptNode0.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        // The following exception was thrown during execution in test generation
        try {
            scriptNode12.setBaseLineno((-965553884));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet2 = astRoot1.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol4 = astRoot1.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str7 = scriptNode5.toSource((int) '4');
        com.google.javascript.rhino.head.Node node8 = scriptNode5.getFirstChild();
        java.lang.Object obj10 = scriptNode5.getProp(18);
        boolean boolean11 = scriptNode5.hasConsistentReturnUsage();
        java.lang.String str12 = astRoot1.toStringTree(scriptNode5);
        int int13 = astRoot1.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        int int46 = comment44.getLineno();
        com.google.javascript.rhino.head.Node node48 = comment44.setType(18);
        boolean boolean49 = comment44.hasSideEffects();
        astRoot15.addComment(comment44);
        com.google.javascript.rhino.head.Node node52 = new com.google.javascript.rhino.head.Node(14, (com.google.javascript.rhino.head.Node) comment44, (-1));
        com.google.javascript.rhino.head.ast.AstRoot astRoot53 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = astRoot53.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol56 = astRoot53.getSymbol("                                                                                                                                                                                                        ");
        node52.addChildToFront((com.google.javascript.rhino.head.Node) astRoot53);
        com.google.javascript.rhino.head.ast.Scope scope60 = new com.google.javascript.rhino.head.ast.Scope(136, 538062289);
        astRoot53.addChildToFront((com.google.javascript.rhino.head.Node) scope60);
        com.google.javascript.rhino.head.Node node62 = scope60.getLastSibling();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 1, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scope60, 603173706);
        // The following exception was thrown during execution in test generation
        try {
            astRoot1.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet2);
        org.junit.Assert.assertNull(symbol4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str7, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(commentSet54);
        org.junit.Assert.assertNull(symbol56);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setIdeMode(false);
        boolean boolean9 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean10 = compilerEnvirons0.getAllowSharpComments();
        compilerEnvirons0.setAllowSharpComments(false);
        int int13 = compilerEnvirons0.getOptimizationLevel();
        compilerEnvirons0.setGenerateDebugInfo(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        java.lang.String str52 = comment50.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray53 = new com.google.javascript.rhino.head.ast.Comment[] { comment38, comment44, comment50 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet54, commentArray53);
        astRoot32.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet54);
        boolean boolean57 = astRoot32.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray58 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList59 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList59, symbolArray58);
        astRoot32.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList59);
        com.google.javascript.rhino.head.Node node62 = astRoot32.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot32, (com.google.javascript.rhino.head.ast.Scope) scriptNode64);
        com.google.javascript.rhino.head.ast.AstRoot astRoot67 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = astRoot67.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor69 = astRoot67.iterator();
        astRoot67.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) astRoot32, (com.google.javascript.rhino.head.Node) astRoot67, (int) (byte) 0);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor74 = astRoot1.iterator();
        astRoot1.setInStrictMode(false);
        java.lang.String str77 = astRoot1.debugPrint();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode79 = astRoot1.getFunctionNode(816654735);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                                                                                                                                                                        " + "'", str52, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(symbolArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(nodeItor69);
        org.junit.Assert.assertNotNull(nodeItor74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str77, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setEncodedSourceStart((int) 'a');
        java.lang.String str7 = scriptNode1.makeIndent((int) (byte) -1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode1.getChildScopes();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = scriptNode1.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(scopeList8);
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode26 = astRoot0.getParent();
        java.lang.String str27 = astRoot0.debugPrint();
        int int28 = astRoot0.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet29 = astRoot0.getComments();
        com.google.javascript.rhino.head.ast.Scope scope30 = astRoot0.getParentScope();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(astNode26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str27, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(commentSet29);
        org.junit.Assert.assertNull(scope30);
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        int int4 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons5 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean6 = compilerEnvirons5.isReservedKeywordAsIdentifier();
        int int7 = compilerEnvirons5.getLanguageVersion();
        compilerEnvirons5.setLanguageVersion((int) (byte) 100);
        boolean boolean10 = compilerEnvirons5.isGenerateObserverCount();
        compilerEnvirons5.setXmlAvailable(false);
        scriptNode1.setCompilerData((java.lang.Object) false);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor14 = scriptNode1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeItor14.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 170 + "'", int7 == 170);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeItor14);
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope scope5 = scriptNode1.getEnclosingScope();
        int int6 = scriptNode1.depth();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = scriptNode1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(scope5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        boolean boolean6 = comment5.hasSideEffects();
        int int7 = comment5.getLineno();
        java.lang.String str8 = comment5.debugPrint();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        comment5.setCommentType(commentType9);
        java.lang.String str12 = comment5.toSource((int) (short) 100);
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(4, (com.google.javascript.rhino.head.Node) comment5);
        com.google.javascript.rhino.head.Token.CommentType commentType14 = comment5.getCommentType();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment5.visit(nodeVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1\tCOMMENT 1 0\n" + "'", str8, "1\tCOMMENT 1 0\n");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                                                                                                                                                                        " + "'", str12, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNull(commentType14);
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.isIdeMode();
        compilerEnvirons3.setRecordingLocalJsDocComments(false);
        boolean boolean8 = compilerEnvirons3.isGenerateDebugInfo();
        compilerEnvirons3.setRecordingLocalJsDocComments(true);
        boolean boolean11 = compilerEnvirons3.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.getWarnTrailingComma();
        compilerEnvirons12.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet17 = compilerEnvirons12.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter18 = compilerEnvirons12.getErrorReporter();
        java.lang.String[] strArray24 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        compilerEnvirons12.setActivationNames((java.util.Set<java.lang.String>) strSet25);
        boolean boolean28 = compilerEnvirons12.isGenerateDebugInfo();
        boolean boolean29 = compilerEnvirons12.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons30 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean31 = compilerEnvirons30.isReservedKeywordAsIdentifier();
        int int32 = compilerEnvirons30.getLanguageVersion();
        int int33 = compilerEnvirons30.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons34 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean35 = compilerEnvirons34.isReservedKeywordAsIdentifier();
        compilerEnvirons34.setStrictMode(true);
        compilerEnvirons34.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons40 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean41 = compilerEnvirons40.isReservedKeywordAsIdentifier();
        boolean boolean42 = compilerEnvirons40.getWarnTrailingComma();
        compilerEnvirons40.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet45 = compilerEnvirons40.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter46 = compilerEnvirons40.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory47 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons34, errorReporter46);
        com.google.javascript.rhino.head.IRFactory iRFactory48 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons30, errorReporter46);
        com.google.javascript.rhino.head.IRFactory iRFactory49 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons12, errorReporter46);
        boolean boolean50 = compilerEnvirons12.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons51 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean52 = compilerEnvirons51.isReservedKeywordAsIdentifier();
        compilerEnvirons51.setStrictMode(true);
        int int55 = compilerEnvirons51.getOptimizationLevel();
        java.lang.String[] strArray76 = new java.lang.String[] { "-1\tSCRIPT -1 1\n", "                    ", "35\t  COMMENT 36 2\n", "typeof", "$0", "                    ", "Comment", "                    {\n                    }\n", "35\t  COMMENT 36 2\n", "                      ", "                                                                                                        ", "136", "$0", "                    {\n                    }\n", "                                                                                                        ", "{\n}\n", "ScriptNode", "                      ", "                      ", "typeof" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        compilerEnvirons51.setActivationNames((java.util.Set<java.lang.String>) strSet77);
        compilerEnvirons12.setActivationNames((java.util.Set<java.lang.String>) strSet77);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet77);
        boolean boolean82 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        java.util.Set<java.lang.String> strSet83 = compilerEnvirons3.getActivationNames();
        compilerEnvirons0.setActivationNames(strSet83);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setOptimizationLevel(1224437762);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Optimization level outside [-1..9]: 1224437762");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(errorReporter18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 170 + "'", int32 == 170);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 170 + "'", int33 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(errorReporter46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strSet83);
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        boolean boolean38 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        java.lang.String str2 = astRoot0.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = astRoot3.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        boolean boolean10 = comment9.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        java.lang.String str23 = comment21.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray24 = new com.google.javascript.rhino.head.ast.Comment[] { comment9, comment15, comment21 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet25, commentArray24);
        astRoot3.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet25);
        boolean boolean28 = astRoot3.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType31, "hi!");
        astRoot3.addComment(comment33);
        astRoot0.addComment(comment33);
        int int36 = astRoot0.getPosition();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap37 = astRoot0.getSymbolTable();
        int int38 = astRoot0.getAbsolutePosition();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList42 = scriptNode40.getChildScopes();
        int int43 = scriptNode40.getBaseLineno();
        com.google.javascript.rhino.head.Node node44 = scriptNode40.getLastSibling();
        scriptNode40.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode48.getFunctions();
        scriptNode48.setPosition((int) (byte) 10);
        java.lang.String str53 = scriptNode40.toStringTree(scriptNode48);
        int int54 = scriptNode40.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode56.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope59 = scriptNode56.getParentScope();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode56);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray62 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList63 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList63, symbolArray62);
        scriptNode61.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList63);
        com.google.javascript.rhino.head.ast.AstRoot astRoot66 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int67 = astRoot66.getParamCount();
        int int68 = astRoot66.getRegexpCount();
        scriptNode61.addChildToBack((com.google.javascript.rhino.head.Node) astRoot66);
        java.lang.String str70 = astRoot66.getSourceName();
        astRoot66.setEncodedSourceEnd(5);
        int int73 = scriptNode56.compareTo((com.google.javascript.rhino.head.ast.AstNode) astRoot66);
        astRoot66.setSourceName("24\tSCRIPT 24 1\n");
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.setContinue((com.google.javascript.rhino.head.Node) astRoot66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str2, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                                                                                                                                                                                                        " + "'", str23, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(strMap37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(scopeList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNull(scope59);
        org.junit.Assert.assertNotNull(symbolArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(str70);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 614930239 + "'", int73 == 614930239);
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("!");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setIdeMode(false);
        boolean boolean14 = compilerEnvirons0.isIdeMode();
        boolean boolean15 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        java.util.Set<java.lang.String> strSet18 = compilerEnvirons0.getActivationNames();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setGenerateObserverCount(true);
        boolean boolean14 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setIdeMode(true);
        boolean boolean17 = compilerEnvirons0.getAllowSharpComments();
        int int18 = compilerEnvirons0.getLanguageVersion();
        boolean boolean19 = compilerEnvirons0.getAllowSharpComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 170 + "'", int18 == 170);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope((int) 'a');
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scope1.spliterator();
        com.google.javascript.rhino.head.ast.Scope scope3 = scope1.getParentScope();
        java.lang.Class<?> wildcardClass4 = scope1.getClass();
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(1836062230);
        scriptNode1.putIntProp((-603115504), (-933351410));
        int int5 = scriptNode1.getBaseLineno();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList4 = scriptNode2.getFunctions();
        scriptNode2.setEncodedSourceStart((int) 'a');
        java.lang.String str8 = scriptNode2.makeIndent((int) (byte) -1);
        scriptNode2.setBaseLineno(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        java.lang.String str31 = comment29.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray32 = new com.google.javascript.rhino.head.ast.Comment[] { comment17, comment23, comment29 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet33, commentArray32);
        astRoot11.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet33);
        boolean boolean36 = astRoot11.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray37 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList38 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList38, symbolArray37);
        astRoot11.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList38);
        int int41 = astRoot11.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode42.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode43);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList45 = scriptNode43.getChildScopes();
        int int46 = scriptNode43.getBaseLineno();
        com.google.javascript.rhino.head.Node node47 = scriptNode43.getLastSibling();
        scriptNode43.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList53 = scriptNode51.getFunctions();
        scriptNode51.setPosition((int) (byte) 10);
        java.lang.String str56 = scriptNode43.toStringTree(scriptNode51);
        int int57 = scriptNode43.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot11, (com.google.javascript.rhino.head.ast.Scope) scriptNode43);
        java.lang.String str60 = astRoot11.toSource(15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode61.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode62);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList64 = scriptNode62.getChildScopes();
        int int65 = scriptNode62.getBaseLineno();
        com.google.javascript.rhino.head.Node node66 = scriptNode62.getLastSibling();
        int int67 = scriptNode62.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode68.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode69);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList71 = scriptNode69.getChildScopes();
        int int72 = scriptNode69.getBaseLineno();
        int int73 = scriptNode69.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode74.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode75);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList77 = scriptNode75.getFunctions();
        scriptNode75.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope80 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode69.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode75, (com.google.javascript.rhino.head.Node) scope80);
        scriptNode62.setTop(scriptNode69);
        int int83 = astRoot11.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode62);
        java.lang.String str84 = astRoot11.debugPrint();
        astRoot11.removeProp(0);
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node((-488381886), (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) astRoot11, 0);
        org.junit.Assert.assertNotNull(functionNodeList4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(symbolArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(scopeList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(functionNodeList53);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(scopeList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(scopeList71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(functionNodeList77);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 179066592 + "'", int83 == 179066592);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str84, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory6 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet9 = astRoot8.getComments();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator15 = scriptNode14.spliterator();
        com.google.javascript.rhino.head.Node node17 = scriptNode14.setType((int) '#');
        boolean boolean18 = scriptNode14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) astRoot8, (com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) scriptNode14);
        com.google.javascript.rhino.head.Node node20 = iRFactory6.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        com.google.javascript.rhino.head.Node node22 = scriptNode11.setType((-213029975));
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList29 = scriptNode27.getFunctions();
        scriptNode27.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node32 = iRFactory25.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList33 = scriptNode27.getChildScopes();
        java.lang.Object obj34 = scriptNode27.getCompilerData();
        com.google.javascript.rhino.head.ast.AstRoot astRoot35 = scriptNode27.getAstRoot();
        boolean boolean36 = scriptNode27.hasSideEffects();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = scriptNode27.getParent();
        scriptNode27.setEncodedSourceStart(1490422031);
        scriptNode27.setPosition(35);
        scriptNode11.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode27);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(commentSet9);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(functionNodeList29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(scopeList33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(astRoot35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(astNode37);
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        com.google.javascript.rhino.head.Node node21 = scriptNode17.target;
        java.lang.String str23 = scriptNode17.toSource(10);
        scriptNode17.clearParentScope();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList25 = scriptNode17.getStatements();
        scriptNode17.putIntProp(0, (int) (short) -1);
        com.google.javascript.rhino.head.ast.Symbol symbol30 = scriptNode17.getSymbol("                ");
        scriptNode17.removeProp(2);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator35 = scriptNode34.spliterator();
        com.google.javascript.rhino.head.Node node37 = scriptNode34.setType((int) '#');
        java.lang.Object obj38 = scriptNode34.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol40 = scriptNode34.getSymbol("typeof");
        scriptNode34.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList46 = scriptNode44.getChildScopes();
        int int47 = scriptNode44.getBaseLineno();
        com.google.javascript.rhino.head.Node node48 = scriptNode44.getLastSibling();
        int int49 = scriptNode44.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator50 = scriptNode44.new NodeIterator();
        int int51 = scriptNode44.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope52 = scriptNode44.getParentScope();
        java.lang.String str53 = scriptNode44.debugPrint();
        scriptNode34.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode44);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope(136, 7);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode44, scope57);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node((int) (byte) 1, (com.google.javascript.rhino.head.Node) scriptNode44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode60.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode61);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList63 = scriptNode61.getChildScopes();
        int int64 = scriptNode61.getBaseLineno();
        int int65 = scriptNode61.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode66.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode67);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = scriptNode67.getFunctions();
        scriptNode67.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope72 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode61.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode67, (com.google.javascript.rhino.head.Node) scope72);
        int int74 = scriptNode67.getEndLineno();
        scriptNode67.setEncodedSource("hi!");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray78 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList79 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList79, symbolArray78);
        scriptNode77.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList79);
        com.google.javascript.rhino.head.ast.AstRoot astRoot82 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int83 = astRoot82.getParamCount();
        int int84 = astRoot82.getRegexpCount();
        scriptNode77.addChildToBack((com.google.javascript.rhino.head.Node) astRoot82);
        com.google.javascript.rhino.head.ast.Scope scope87 = scriptNode77.getDefiningScope("136");
        int int88 = scriptNode77.getEndLineno();
        scriptNode77.setSourceName("                                    {\n                                    }\n");
        node59.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode67, (com.google.javascript.rhino.head.Node) scriptNode77);
        java.lang.String str92 = scriptNode67.debugPrint();
        scriptNode17.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode67);
        scriptNode17.setEncodedSourceStart((-1112521022));
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                    {\n                    }\n" + "'", str23, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(astNodeList25);
        org.junit.Assert.assertNull(symbol30);
        org.junit.Assert.assertNotNull(nodeSpliterator35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNull(symbol40);
        org.junit.Assert.assertNull(scopeList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(scope52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1\t  SCRIPT 0 1\n" + "'", str53, "-1\t  SCRIPT 0 1\n");
        org.junit.Assert.assertNull(scopeList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(functionNodeList69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(symbolArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(scope87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "9\t  SCRIPT 10 1\n" + "'", str92, "9\t  SCRIPT 10 1\n");
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        boolean boolean4 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons5 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean6 = compilerEnvirons5.isReservedKeywordAsIdentifier();
        boolean boolean7 = compilerEnvirons5.getWarnTrailingComma();
        compilerEnvirons5.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet10 = compilerEnvirons5.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons5.getErrorReporter();
        compilerEnvirons5.setReservedKeywordAsIdentifier(false);
        boolean boolean14 = compilerEnvirons5.isGeneratingSource();
        compilerEnvirons5.setIdeMode(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean18 = compilerEnvirons17.isReservedKeywordAsIdentifier();
        boolean boolean19 = compilerEnvirons17.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        boolean boolean22 = compilerEnvirons20.getWarnTrailingComma();
        compilerEnvirons20.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet25 = compilerEnvirons20.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter26 = compilerEnvirons20.getErrorReporter();
        java.lang.String[] strArray32 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        compilerEnvirons20.setActivationNames((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.head.ErrorReporter errorReporter36 = compilerEnvirons20.getErrorReporter();
        compilerEnvirons17.setErrorReporter(errorReporter36);
        com.google.javascript.rhino.head.Parser parser38 = new com.google.javascript.rhino.head.Parser(compilerEnvirons5, errorReporter36);
        com.google.javascript.rhino.head.IRFactory iRFactory39 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter36);
        compilerEnvirons0.setIdeMode(false);
        boolean boolean42 = compilerEnvirons0.isStrictMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(errorReporter26);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorReporter36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.Node node7 = scriptNode3.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        java.lang.String str13 = scriptNode9.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.Object obj18 = scriptNode9.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        java.lang.String str22 = scriptNode9.toStringTree(scriptNode19);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        int int31 = scriptNode27.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode33.getFunctions();
        scriptNode33.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode27.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scope38);
        scriptNode33.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node42 = iRFactory25.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons43, errorReporter44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node62 = iRFactory45.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        scriptNode33.setTop(scriptNode53);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode33, 10);
        int int68 = scriptNode9.getIntProp(5, 100);
        com.google.javascript.rhino.head.ast.AstRoot astRoot70 = new com.google.javascript.rhino.head.ast.AstRoot(12);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor71 = null;
        astRoot70.visitComments(nodeVisitor71);
        astRoot70.setEncodedSourceStart(15);
        astRoot70.setEncodedSourceBounds(95442629, (-405371752));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode79);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList81 = scriptNode79.getChildScopes();
        int int82 = scriptNode79.getBaseLineno();
        int int83 = scriptNode79.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode84.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode85);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList87 = scriptNode85.getFunctions();
        scriptNode85.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope90 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode79.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode85, (com.google.javascript.rhino.head.Node) scope90);
        boolean boolean92 = scope90.hasChildren();
        java.lang.String str93 = scope90.shortName();
        com.google.javascript.rhino.head.Node node95 = new com.google.javascript.rhino.head.Node(65536, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) astRoot70, (com.google.javascript.rhino.head.Node) scope90, 816654735);
        int int96 = scriptNode9.getBaseLineno();
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNull(scopeList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(functionNodeList87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Scope" + "'", str93, "Scope");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(1, (int) 'a');
        com.google.javascript.rhino.head.ast.Symbol symbol4 = scope2.getSymbol("        {\n        }\n");
        int int5 = scope2.getLength();
        com.google.javascript.rhino.head.Token.CommentType commentType8 = null;
        com.google.javascript.rhino.head.ast.Comment comment10 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType8, "hi!");
        scope2.setJsDocNode(comment10);
        scope2.setBounds(14, (-361648642));
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            scope2.visit(nodeVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(symbol4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray10 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList11 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList11, symbolArray10);
        scriptNode9.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList11);
        scriptNode6.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList11);
        scriptNode3.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList11);
        scriptNode1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList11);
        java.lang.String str17 = scriptNode1.debugPrint();
        boolean boolean18 = scriptNode1.hasChildren();
        org.junit.Assert.assertNotNull(symbolArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0\tSCRIPT 0 1\n" + "'", str17, "0\tSCRIPT 0 1\n");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        scriptNode2.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap8 = scriptNode7.getSymbolTable();
        scriptNode2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList10 = scriptNode2.getStatements();
        com.google.javascript.rhino.head.ast.Scope scope11 = scriptNode2.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int13 = astRoot12.getBaseLineno();
        java.lang.String str14 = astRoot12.debugPrint();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList15 = astRoot12.getSymbols();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scope11, (com.google.javascript.rhino.head.Node) astRoot12, 0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot18 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int19 = astRoot18.getParamCount();
        int int20 = astRoot18.getPosition();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory23 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter22);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList27 = scriptNode25.getFunctions();
        scriptNode25.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node30 = iRFactory23.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.lang.String str31 = scriptNode25.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator33 = scriptNode32.spliterator();
        com.google.javascript.rhino.head.Node node35 = scriptNode32.setType((int) '#');
        boolean boolean36 = scriptNode32.hasConsistentReturnUsage();
        scriptNode25.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode32);
        com.google.javascript.rhino.head.ast.Symbol symbol39 = scriptNode25.getSymbol("                                      ");
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot18, (com.google.javascript.rhino.head.ast.Scope) scriptNode25);
        com.google.javascript.rhino.head.ast.AstNode astNode41 = scriptNode25.getParent();
        com.google.javascript.rhino.head.Node node42 = scriptNode25.target;
        com.google.javascript.rhino.head.Node node43 = node17.getChildBefore(node42);
        boolean boolean44 = node43.hasChildren();
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(astNodeList10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str14, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNotNull(symbolList15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(nodeSpliterator33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(symbol39);
        org.junit.Assert.assertNotNull(astNode41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        com.google.javascript.rhino.head.Node node21 = scriptNode17.target;
        java.lang.String str23 = scriptNode17.toSource(10);
        scriptNode17.clearParentScope();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor25 = scriptNode17.iterator();
        com.google.javascript.rhino.head.Node node26 = scriptNode17.getLastSibling();
        node26.setLineno(36);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                    {\n                    }\n" + "'", str23, "                    {\n                    }\n");
        org.junit.Assert.assertNotNull(nodeItor25);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = scriptNode1.new NodeIterator();
        java.lang.String str4 = scriptNode1.getNextTempName();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor5 = scriptNode1.iterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor8 = astRoot6.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor9 = null;
        astRoot6.visitComments(nodeVisitor9);
        astRoot6.setInStrictMode(false);
        int int13 = astRoot6.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) astRoot6);
        int int17 = astRoot6.getIntProp(14, 20);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        int int21 = scriptNode18.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode18.setParentScope(scope22);
        java.lang.String str24 = scriptNode18.debugPrint();
        java.lang.String str25 = scriptNode18.getSourceName();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType28, "hi!");
        java.lang.String str32 = comment30.toSource(0);
        java.lang.String str33 = comment30.shortName();
        boolean boolean34 = comment30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator35 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator36 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator37 = positionComparator35.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator36);
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int39 = astRoot38.getBaseLineno();
        java.lang.String str40 = astRoot38.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot41 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator42 = astRoot41.new NodeIterator();
        int int43 = positionComparator36.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot38, (com.google.javascript.rhino.head.ast.AstNode) astRoot41);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator45 = scriptNode44.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = scriptNode44.new NodeIterator();
        astRoot41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        com.google.javascript.rhino.head.Node node48 = scriptNode44.getFirstChild();
        comment30.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = scriptNode44.getTop();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((-17), (com.google.javascript.rhino.head.Node) astRoot6, (com.google.javascript.rhino.head.Node) scriptNode18, (com.google.javascript.rhino.head.Node) scriptNode50);
        scriptNode18.setLineno((-447184571));
        java.lang.String str55 = scriptNode18.toSource(10);
        boolean boolean56 = scriptNode18.hasChildren();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList57 = scriptNode18.getFunctions();
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$0" + "'", str4, "$0");
        org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1\tSCRIPT -1 1\n-1\t  SCRIPT 0 1\n" + "'", str24, "-1\tSCRIPT -1 1\n-1\t  SCRIPT 0 1\n");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Comment" + "'", str33, "Comment");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(astNodeComparator37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str40, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(scriptNode50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "                    {\n                      {\n                      }\n                    }\n" + "'", str55, "                    {\n                      {\n                      }\n                    }\n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(functionNodeList57);
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet2 = astRoot1.getComments();
        int int3 = astRoot1.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor4 = null;
        astRoot1.visitComments(nodeVisitor4);
        com.google.javascript.rhino.head.Node node6 = astRoot1.getFirstChild();
        java.lang.String str7 = astRoot1.debugPrint();
        com.google.javascript.rhino.head.ast.Scope scope9 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scope9.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        scope9.setTop(scriptNode12);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor15 = scope9.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        int int22 = comment20.getLineno();
        com.google.javascript.rhino.head.Node node24 = comment20.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        boolean boolean30 = comment29.hasSideEffects();
        int int31 = comment29.getLineno();
        com.google.javascript.rhino.head.Node node33 = comment29.setType(18);
        comment29.removeChildren();
        com.google.javascript.rhino.head.Node node36 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope9, (com.google.javascript.rhino.head.Node) comment20, (com.google.javascript.rhino.head.Node) comment29, 15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot37 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator38 = astRoot37.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        boolean boolean44 = comment43.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        boolean boolean50 = comment49.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType53 = null;
        com.google.javascript.rhino.head.ast.Comment comment55 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType53, "");
        java.lang.String str57 = comment55.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray58 = new com.google.javascript.rhino.head.ast.Comment[] { comment43, comment49, comment55 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet59 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet59, commentArray58);
        astRoot37.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet59);
        boolean boolean62 = astRoot37.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType65 = null;
        com.google.javascript.rhino.head.ast.Comment comment67 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType65, "hi!");
        astRoot37.addComment(comment67);
        scope9.setJsDocNode(comment67);
        com.google.javascript.rhino.head.Token.CommentType commentType70 = comment67.getCommentType();
        astRoot1.addComment(comment67);
        java.lang.Object obj73 = astRoot1.getProp(0);
        com.google.javascript.rhino.head.ast.Scope scope74 = astRoot1.getParentScope();
        com.google.javascript.rhino.head.Node node76 = new com.google.javascript.rhino.head.Node(221450998, (com.google.javascript.rhino.head.Node) astRoot1, (-213029975));
        com.google.javascript.rhino.head.Node node77 = astRoot1.getFirstChild();
        java.lang.String str78 = astRoot1.toSource();
        org.junit.Assert.assertNull(commentSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str7, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(nodeItor15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "                                                                                                                                                                                                        " + "'", str57, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(commentType70);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNull(scope74);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator33 = scriptNode32.spliterator();
        com.google.javascript.rhino.head.Node node35 = scriptNode32.setType((int) '#');
        java.lang.Object obj36 = scriptNode32.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator37 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator38 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator39 = positionComparator37.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator38);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode41.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor46 = astRoot44.iterator();
        scriptNode41.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode49.getChildScopes();
        int int52 = positionComparator38.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot44, (com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scriptNode49);
        java.lang.String str54 = scriptNode32.toString();
        com.google.javascript.rhino.head.Node node56 = scriptNode32.setType(1275261773);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = scriptNode32.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(astNodeComparator39);
        org.junit.Assert.assertNotNull(nodeItor46);
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "35" + "'", str54, "35");
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setWarnTrailingComma(true);
        int int6 = compilerEnvirons0.getOptimizationLevel();
        compilerEnvirons0.setRecoverFromErrors(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node19 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory22 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons20, errorReporter21);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        int int28 = scriptNode24.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList32 = scriptNode30.getFunctions();
        scriptNode30.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope35 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode24.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) scope35);
        scriptNode30.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node39 = iRFactory22.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        scriptNode10.setTop(scriptNode30);
        int int41 = scriptNode30.getLineno();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode30.getFunctions();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump43 = scriptNode30.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(functionNodeList32);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList42);
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        com.google.javascript.rhino.head.Node node21 = scriptNode17.target;
        java.lang.String str23 = scriptNode17.toSource(10);
        scriptNode17.clearParentScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode51 = astRoot25.getParent();
        java.lang.String str52 = astRoot25.debugPrint();
        int int53 = astRoot25.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = astRoot25.getComments();
        astRoot25.checkParentLinks();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot25);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet57 = astRoot25.getComments();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                    {\n                    }\n" + "'", str23, "                    {\n                    }\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(astNode51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str52, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(commentSet54);
        org.junit.Assert.assertNotNull(commentSet57);
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = new com.google.javascript.rhino.head.CompilerEnvirons();
        com.google.javascript.rhino.head.IRFactory iRFactory1 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        java.lang.String str6 = scriptNode3.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        int int11 = scriptNode8.getBaseLineno();
        com.google.javascript.rhino.head.Node node12 = scriptNode8.getLastSibling();
        int int13 = scriptNode8.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator14 = scriptNode8.new NodeIterator();
        int int15 = scriptNode8.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = astRoot16.new NodeIterator();
        scriptNode8.setCompilerData((java.lang.Object) nodeIterator17);
        int int19 = scriptNode3.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        int int20 = scriptNode8.getEncodedSourceStart();
        int int21 = scriptNode8.getParamCount();
        com.google.javascript.rhino.head.Node node22 = iRFactory1.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        com.google.javascript.rhino.head.ast.Scope scope24 = scriptNode8.getDefiningScope("        {\n        }\n");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = scope24.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 682141400 + "'", int19 == 682141400);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(scope24);
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode32.getFunctions();
        scriptNode32.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scope37);
        scriptNode32.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node41 = iRFactory24.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode32.setTop(scriptNode52);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode32, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode66);
        com.google.javascript.rhino.head.Node node68 = scriptNode8.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode71.getChildScopes();
        int int74 = scriptNode71.getBaseLineno();
        com.google.javascript.rhino.head.Node node75 = scriptNode71.getLastSibling();
        scriptNode71.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode79);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList81 = scriptNode79.getFunctions();
        scriptNode79.setPosition((int) (byte) 10);
        java.lang.String str84 = scriptNode71.toStringTree(scriptNode79);
        int int85 = scriptNode71.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode87.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope90 = scriptNode87.getParentScope();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode87);
        java.lang.Object obj92 = scriptNode87.getCompilerData();
        scriptNode8.putProp(12, (java.lang.Object) scriptNode87);
        scriptNode8.setLineno((int) (byte) 100);
        int int96 = scriptNode8.getLength();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int98 = scriptNode8.addFunction(functionNode97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(functionNodeList81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(scope90);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(11);
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        com.google.javascript.rhino.head.IRFactory iRFactory10 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean12 = compilerEnvirons11.isReservedKeywordAsIdentifier();
        boolean boolean13 = compilerEnvirons11.getWarnTrailingComma();
        compilerEnvirons11.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet16 = compilerEnvirons11.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter17 = compilerEnvirons11.getErrorReporter();
        boolean boolean18 = compilerEnvirons11.isRecordingComments();
        compilerEnvirons11.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        int int23 = compilerEnvirons21.getLanguageVersion();
        compilerEnvirons21.setLanguageVersion((int) (byte) 100);
        boolean boolean26 = compilerEnvirons21.isAllowMemberExprAsFunctionName();
        compilerEnvirons21.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons29 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray35 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        compilerEnvirons29.setActivationNames((java.util.Set<java.lang.String>) strSet36);
        boolean boolean39 = compilerEnvirons29.isGenerateDebugInfo();
        compilerEnvirons29.setOptimizationLevel((int) (short) 1);
        compilerEnvirons29.setAllowSharpComments(true);
        boolean boolean44 = compilerEnvirons29.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter45 = compilerEnvirons29.getErrorReporter();
        compilerEnvirons21.setErrorReporter(errorReporter45);
        compilerEnvirons11.setErrorReporter(errorReporter45);
        com.google.javascript.rhino.head.IRFactory iRFactory48 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter45);
        boolean boolean49 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean50 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(errorReporter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 170 + "'", int23 == 170);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(errorReporter45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        astRoot4.visitComments(nodeVisitor8);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str12 = scriptNode10.toSource((int) '4');
        com.google.javascript.rhino.head.Node node13 = scriptNode10.getFirstChild();
        astRoot4.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode10);
        com.google.javascript.rhino.head.ast.Scope scope15 = scriptNode10.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot((-213029975));
        java.lang.String str18 = astRoot17.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot19 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = astRoot19.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        boolean boolean26 = comment25.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        java.lang.String str39 = comment37.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray40 = new com.google.javascript.rhino.head.ast.Comment[] { comment25, comment31, comment37 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet41 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet41, commentArray40);
        astRoot19.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet41);
        boolean boolean44 = astRoot19.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray45 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList46 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList46, symbolArray45);
        astRoot19.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList46);
        com.google.javascript.rhino.head.Node node49 = astRoot19.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot19, (com.google.javascript.rhino.head.ast.Scope) scriptNode51);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode54 = scriptNode51.getEnclosingFunction();
        scriptNode51.setEndLineno(6);
        int int57 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot17, (com.google.javascript.rhino.head.ast.Scope) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList59 = scriptNode51.getSymbols();
        scriptNode10.setSymbols(symbolList59);
        scriptNode10.clearParentScope();
        java.lang.String str62 = scriptNode10.getJsDoc();
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str12, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(scope15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "-213029975\tSCRIPT -213029975 1\n" + "'", str18, "-213029975\tSCRIPT -213029975 1\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "                                                                                                                                                                                                        " + "'", str39, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(symbolArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNull(functionNode54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(symbolList59);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.lang.String str11 = scriptNode4.makeIndent(12);
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = astRoot12.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        boolean boolean25 = comment24.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType28, "");
        java.lang.String str32 = comment30.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray33 = new com.google.javascript.rhino.head.ast.Comment[] { comment18, comment24, comment30 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet34 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet34, commentArray33);
        astRoot12.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet34);
        boolean boolean37 = astRoot12.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray38 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList39 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList39, symbolArray38);
        astRoot12.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList39);
        scriptNode4.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList39);
        scriptNode4.setBounds(25, 25);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList46 = scriptNode4.getStatements();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = scriptNode4.getTop();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor48 = scriptNode4.iterator();
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "                        " + "'", str11, "                        ");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                                                                                                                                                                                                        " + "'", str32, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(symbolArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(astNodeList46);
        org.junit.Assert.assertNotNull(scriptNode47);
        org.junit.Assert.assertNotNull(nodeItor48);
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isGeneratingSource();
        boolean boolean7 = compilerEnvirons0.isStrictMode();
        boolean boolean8 = compilerEnvirons0.recoverFromErrors();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons1 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean2 = compilerEnvirons1.isReservedKeywordAsIdentifier();
        boolean boolean3 = compilerEnvirons1.getWarnTrailingComma();
        compilerEnvirons1.setXmlAvailable(true);
        boolean boolean6 = compilerEnvirons1.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory7 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet10 = astRoot9.getComments();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator16 = scriptNode15.spliterator();
        com.google.javascript.rhino.head.Node node18 = scriptNode15.setType((int) '#');
        boolean boolean19 = scriptNode15.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node20 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) astRoot9, (com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scriptNode15);
        com.google.javascript.rhino.head.Node node21 = iRFactory7.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        com.google.javascript.rhino.head.Node node23 = scriptNode12.setType((-213029975));
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType26, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        comment28.setCommentType(commentType29);
        int int33 = comment28.getIntProp((int) (byte) 10, 0);
        comment28.setPosition(161);
        java.lang.String str37 = comment28.toSource((-325419474));
        scriptNode12.setJsDocNode(comment28);
        com.google.javascript.rhino.head.ast.AstRoot astRoot39 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int40 = astRoot39.getBaseLineno();
        java.lang.String str41 = astRoot39.debugPrint();
        astRoot39.setEncodedSourceBounds((int) (byte) -1, 18);
        astRoot39.clearParentScope();
        com.google.javascript.rhino.head.ast.Scope scope47 = new com.google.javascript.rhino.head.ast.Scope(18);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = scope47.getTop();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode50.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot53 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator54 = astRoot53.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor55 = astRoot53.iterator();
        scriptNode50.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot53);
        scope47.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode50);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj60 = scriptNode59.getCompilerData();
        com.google.javascript.rhino.head.ast.Scope scope61 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator62 = scope61.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        scope61.setTop(scriptNode64);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode59, (com.google.javascript.rhino.head.ast.Scope) scriptNode64);
        java.lang.String str68 = scope47.toStringTree(scriptNode59);
        int int69 = scriptNode59.getEncodedSourceEnd();
        astRoot39.setCompilerData((java.lang.Object) int69);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(41, (com.google.javascript.rhino.head.Node) comment28, (com.google.javascript.rhino.head.Node) astRoot39, 9);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump73 = astRoot39.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(commentSet10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertNotNull(nodeSpliterator16);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str41, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(scriptNode48);
        org.junit.Assert.assertNotNull(nodeItor55);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(nodeSpliterator62);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode1.setType((int) (byte) -1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor18 = scriptNode1.iterator();
        int int19 = scriptNode1.getType();
        com.google.javascript.rhino.head.ast.Comment comment20 = scriptNode1.getJsDocNode();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeItor18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(comment20);
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.Node node7 = scriptNode3.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        java.lang.String str13 = scriptNode9.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.Object obj18 = scriptNode9.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        java.lang.String str22 = scriptNode9.toStringTree(scriptNode19);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        int int31 = scriptNode27.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode33.getFunctions();
        scriptNode33.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode27.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scope38);
        scriptNode33.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node42 = iRFactory25.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons43, errorReporter44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node62 = iRFactory45.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        scriptNode33.setTop(scriptNode53);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode33, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode9.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode67);
        com.google.javascript.rhino.head.Node node69 = scriptNode9.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList74 = scriptNode72.getChildScopes();
        int int75 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.Node node76 = scriptNode72.getLastSibling();
        scriptNode72.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList82 = scriptNode80.getFunctions();
        scriptNode80.setPosition((int) (byte) 10);
        java.lang.String str85 = scriptNode72.toStringTree(scriptNode80);
        int int86 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode88 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode88.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope91 = scriptNode88.getParentScope();
        scriptNode72.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode88);
        java.lang.Object obj93 = scriptNode88.getCompilerData();
        scriptNode9.putProp(12, (java.lang.Object) scriptNode88);
        com.google.javascript.rhino.head.Node node96 = new com.google.javascript.rhino.head.Node(17, (com.google.javascript.rhino.head.Node) scriptNode9, 15);
        int int97 = scriptNode9.getAbsolutePosition();
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(scopeList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(functionNodeList82);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(scope91);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node node3 = scriptNode0.setType((int) '#');
        java.lang.Object obj4 = scriptNode0.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol6 = scriptNode0.getSymbol("typeof");
        scriptNode0.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray30 = new com.google.javascript.rhino.head.ast.Comment[] { comment15, comment21, comment27 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet31, commentArray30);
        astRoot9.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet31);
        boolean boolean34 = astRoot9.isInStrictMode();
        int int35 = astRoot9.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean37 = astRoot36.hasSideEffects();
        astRoot9.target = astRoot36;
        scriptNode0.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot36);
        astRoot36.flattenSymbolTable(true);
        astRoot36.flattenSymbolTable(false);
        int int44 = astRoot36.getParamCount();
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(symbol6);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        int int11 = scriptNode8.getBaseLineno();
        int int12 = scriptNode8.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode14.getFunctions();
        scriptNode14.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope19 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode8.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) scope19);
        scriptNode1.setTop(scriptNode8);
        scriptNode8.setEncodedSourceStart((int) (short) 10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = astRoot24.getComments();
        java.lang.String str26 = astRoot24.getSourceName();
        boolean boolean27 = astRoot24.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode28.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode29.getChildScopes();
        int int32 = scriptNode29.getBaseLineno();
        com.google.javascript.rhino.head.Node node33 = scriptNode29.getLastSibling();
        scriptNode29.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList39 = scriptNode37.getFunctions();
        scriptNode37.setPosition((int) (byte) 10);
        java.lang.String str42 = scriptNode29.toStringTree(scriptNode37);
        int int43 = scriptNode29.getBaseLineno();
        boolean boolean44 = scriptNode29.hasConsistentReturnUsage();
        astRoot24.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode29);
        scriptNode8.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot24);
        astRoot24.setBaseLineno(0);
        java.lang.String str50 = astRoot24.toSource((-1));
        astRoot24.setPosition(835353046);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator53 = astRoot24.new NodeIterator();
        boolean boolean54 = nodeIterator53.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            nodeIterator53.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertNull(commentSet25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(functionNodeList39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setXmlAvailable(false);
        compilerEnvirons0.setXmlAvailable(false);
        com.google.javascript.rhino.head.Parser parser22 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean23 = compilerEnvirons0.recoverFromErrors();
        java.util.Set<java.lang.String> strSet24 = compilerEnvirons0.getActivationNames();
        boolean boolean25 = compilerEnvirons0.isRecordingLocalJsDocComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        int int10 = scriptNode6.depth();
        scriptNode6.setEncodedSourceStart(100);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray13 = scriptNode6.getParamAndVarConst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope13);
        int int15 = scriptNode8.getEndLineno();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(1936891202, (com.google.javascript.rhino.head.Node) scriptNode8, (-929928321));
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray18 = scriptNode8.getParamAndVarConst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((-306271829), 492844799);
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("                                                                                                        {\n                                                                                                        }\n");
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Name cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        compilerEnvirons0.setRecordingComments(false);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        compilerEnvirons0.setRecordingComments(true);
        java.util.Set<java.lang.String> strSet16 = compilerEnvirons0.getActivationNames();
        boolean boolean17 = compilerEnvirons0.isIdeMode();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons2 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory4 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons2, errorReporter3);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList8 = scriptNode6.getFunctions();
        scriptNode6.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node11 = iRFactory4.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.lang.String str13 = scriptNode6.makeIndent(12);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        java.lang.String str34 = comment32.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray35 = new com.google.javascript.rhino.head.ast.Comment[] { comment20, comment26, comment32 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet36, commentArray35);
        astRoot14.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet36);
        boolean boolean39 = astRoot14.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray40 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList41 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList41, symbolArray40);
        astRoot14.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList41);
        scriptNode6.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList41);
        scriptNode6.setBounds(25, 25);
        com.google.javascript.rhino.head.ast.AstNode astNode48 = scriptNode6.getParent();
        com.google.javascript.rhino.head.ast.AstNode astNode49 = scriptNode6.getParent();
        astRoot0.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap51 = scriptNode6.getSymbolTable();
        int int52 = scriptNode6.getFunctionCount();
        java.lang.String str53 = scriptNode6.toSource();
        org.junit.Assert.assertNotNull(functionNodeList8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                        " + "'", str13, "                        ");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "                                                                                                                                                                                                        " + "'", str34, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(symbolArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(astNode48);
        org.junit.Assert.assertNotNull(astNode49);
        org.junit.Assert.assertNull(strMap51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{\n}\n" + "'", str53, "{\n}\n");
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode26 = astRoot0.getParent();
        astRoot0.setPosition(14);
        com.google.javascript.rhino.head.Node node29 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.AstRoot astRoot30 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = astRoot30.getComments();
        int int32 = astRoot30.getEndLineno();
        com.google.javascript.rhino.head.Node node34 = astRoot30.setType((int) (short) 10);
        astRoot30.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode38.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        scriptNode39.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList46 = scriptNode44.getChildScopes();
        int int47 = scriptNode44.getBaseLineno();
        com.google.javascript.rhino.head.Node node48 = scriptNode44.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode49.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode50.getChildScopes();
        java.lang.String str54 = scriptNode50.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode44.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode50, (com.google.javascript.rhino.head.Node) scriptNode56);
        int int58 = scriptNode50.getType();
        scriptNode39.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        int int60 = scriptNode50.getParamCount();
        com.google.javascript.rhino.head.Node node61 = scriptNode50.getLastSibling();
        astRoot30.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode50);
        java.lang.String str63 = scriptNode50.getSourceName();
        astRoot0.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode50);
        astRoot0.checkParentLinks();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator67 = scriptNode66.spliterator();
        scriptNode66.setRelative((int) (byte) 100);
        int int70 = scriptNode66.getRegexpCount();
        com.google.javascript.rhino.head.Token.CommentType commentType73 = null;
        com.google.javascript.rhino.head.ast.Comment comment75 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType73, "");
        java.lang.String str77 = comment75.toSource(100);
        java.lang.String str78 = comment75.getValue();
        astRoot0.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode66, (com.google.javascript.rhino.head.Node) comment75);
        java.lang.String str80 = comment75.toString();
        java.lang.String str82 = comment75.toSource((-1662832286));
        java.lang.String str84 = comment75.makeIndent((-1607027223));
        comment75.removeProp((-1121952777));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(astNode26);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(commentSet31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(scopeList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 136 + "'", int58 == 136);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(nodeSpliterator67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "                                                                                                                                                                                                        " + "'", str77, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "161" + "'", str80, "161");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet18 = astRoot17.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol20 = astRoot17.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType23, "hi!");
        astRoot17.addChildrenToFront((com.google.javascript.rhino.head.Node) comment25);
        boolean boolean27 = astRoot17.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode28.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode29.getChildScopes();
        int int32 = scriptNode29.getBaseLineno();
        int int33 = scriptNode29.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList34 = scriptNode29.getSymbols();
        int int35 = scriptNode29.getPosition();
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = astRoot36.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        boolean boolean43 = comment42.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        boolean boolean49 = comment48.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        java.lang.String str56 = comment54.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray57 = new com.google.javascript.rhino.head.ast.Comment[] { comment42, comment48, comment54 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet58 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet58, commentArray57);
        astRoot36.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet58);
        boolean boolean61 = astRoot36.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray62 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList63 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList63, symbolArray62);
        astRoot36.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList63);
        com.google.javascript.rhino.head.Node node66 = astRoot36.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode68 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode67.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode68);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot36, (com.google.javascript.rhino.head.ast.Scope) scriptNode68);
        com.google.javascript.rhino.head.Node node72 = new com.google.javascript.rhino.head.Node(19, (com.google.javascript.rhino.head.Node) astRoot17, (com.google.javascript.rhino.head.Node) scriptNode29, (com.google.javascript.rhino.head.Node) astRoot36, (int) (byte) 1);
        scriptNode1.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot36);
        com.google.javascript.rhino.head.ast.Scope scope74 = scriptNode1.getParentScope();
        com.google.javascript.rhino.head.Node node75 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.Token.CommentType commentType78 = null;
        com.google.javascript.rhino.head.ast.Comment comment80 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType78, "");
        boolean boolean81 = comment80.hasSideEffects();
        int int82 = comment80.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType83 = null;
        comment80.setCommentType(commentType83);
        comment80.setPosition(2);
        java.lang.String str87 = comment80.toString();
        scriptNode1.target = comment80;
        com.google.javascript.rhino.head.Node node89 = scriptNode1.target;
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(commentSet18);
        org.junit.Assert.assertNull(symbol20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(symbolList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "                                                                                                                                                                                                        " + "'", str56, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(symbolArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(scope74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "161" + "'", str87, "161");
        org.junit.Assert.assertNotNull(node89);
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getParamCount();
        java.lang.String str2 = astRoot0.getNextTempName();
        int int3 = astRoot0.getEncodedSourceStart();
        java.lang.String str4 = astRoot0.shortName();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet5 = astRoot0.getComments();
        astRoot0.setEncodedSourceEnd((int) (byte) 100);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator8 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator9 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator10 = positionComparator8.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator9);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode12.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = astRoot15.iterator();
        scriptNode12.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        int int23 = positionComparator9.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot15, (com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList24 = scriptNode20.getSymbols();
        scriptNode20.setSourceName("                                          ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str29 = scriptNode27.toSource((int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode30.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode31);
        int int33 = scriptNode30.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode27, (com.google.javascript.rhino.head.ast.Scope) scriptNode30);
        scriptNode20.setTop(scriptNode27);
        astRoot0.setTop(scriptNode20);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node37 = astRoot0.getFinally();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "$0" + "'", str2, "$0");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "AstRoot" + "'", str4, "AstRoot");
        org.junit.Assert.assertNull(commentSet5);
        org.junit.Assert.assertNotNull(astNodeComparator10);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(symbolList24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str29, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        com.google.javascript.rhino.head.Node node9 = astRoot5.target;
        astRoot5.setEncodedSource("9\t  SCRIPT 10 -9\n-2\t    SCRIPT -11 1\n");
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor12 = null;
        astRoot5.visitComments(nodeVisitor12);
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        java.lang.String str5 = scriptNode2.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        int int10 = scriptNode7.getBaseLineno();
        com.google.javascript.rhino.head.Node node11 = scriptNode7.getLastSibling();
        int int12 = scriptNode7.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = scriptNode7.new NodeIterator();
        int int14 = scriptNode7.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        scriptNode7.setCompilerData((java.lang.Object) nodeIterator16);
        int int18 = scriptNode2.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        scriptNode7.setLineno(20);
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType23, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        comment25.setCommentType(commentType26);
        int int30 = comment25.getIntProp((int) (byte) 10, 0);
        comment25.setPosition(161);
        scriptNode7.setJsDocNode(comment25);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons34 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean35 = compilerEnvirons34.isReservedKeywordAsIdentifier();
        int int36 = compilerEnvirons34.getLanguageVersion();
        int int37 = compilerEnvirons34.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons38 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean39 = compilerEnvirons38.isReservedKeywordAsIdentifier();
        compilerEnvirons38.setStrictMode(true);
        compilerEnvirons38.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons44 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean45 = compilerEnvirons44.isReservedKeywordAsIdentifier();
        boolean boolean46 = compilerEnvirons44.getWarnTrailingComma();
        compilerEnvirons44.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet49 = compilerEnvirons44.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter50 = compilerEnvirons44.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory51 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons38, errorReporter50);
        com.google.javascript.rhino.head.IRFactory iRFactory52 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons34, errorReporter50);
        com.google.javascript.rhino.head.ast.AstRoot astRoot53 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int54 = astRoot53.getParamCount();
        java.lang.String str55 = astRoot53.getJsDoc();
        java.lang.String str56 = astRoot53.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = iRFactory52.transformTree(astRoot53);
        int int58 = astRoot53.getParamCount();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator59 = astRoot53.spliterator();
        java.lang.String str60 = comment25.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot53);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor61 = null;
        astRoot53.visitComments(nodeVisitor61);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(667127547, (com.google.javascript.rhino.head.Node) astRoot53, 1384960853);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor65 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot53.visitAll(nodeVisitor65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 28338836 + "'", int18 == 28338836);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 170 + "'", int36 == 170);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 170 + "'", int37 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(errorReporter50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "$0" + "'", str56, "$0");
        org.junit.Assert.assertNotNull(scriptNode57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator59);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        int int8 = compilerEnvirons6.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        boolean boolean11 = compilerEnvirons9.isIdeMode();
        compilerEnvirons9.setRecordingLocalJsDocComments(false);
        boolean boolean14 = compilerEnvirons9.isGenerateDebugInfo();
        compilerEnvirons9.setRecordingLocalJsDocComments(true);
        boolean boolean17 = compilerEnvirons9.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        boolean boolean20 = compilerEnvirons18.getWarnTrailingComma();
        boolean boolean21 = compilerEnvirons18.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = compilerEnvirons18.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser23 = new com.google.javascript.rhino.head.Parser(compilerEnvirons9, errorReporter22);
        compilerEnvirons6.setErrorReporter(errorReporter22);
        compilerEnvirons0.setErrorReporter(errorReporter22);
        compilerEnvirons0.setRecoverFromErrors(false);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        boolean boolean30 = compilerEnvirons0.isGeneratingSource();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean32 = compilerEnvirons31.isReservedKeywordAsIdentifier();
        boolean boolean33 = compilerEnvirons31.isStrictMode();
        boolean boolean34 = compilerEnvirons31.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons35 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean36 = compilerEnvirons35.isReservedKeywordAsIdentifier();
        boolean boolean37 = compilerEnvirons35.getWarnTrailingComma();
        compilerEnvirons35.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet40 = compilerEnvirons35.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter41 = compilerEnvirons35.getErrorReporter();
        java.lang.String[] strArray47 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        compilerEnvirons35.setActivationNames((java.util.Set<java.lang.String>) strSet48);
        compilerEnvirons31.setActivationNames((java.util.Set<java.lang.String>) strSet48);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet48);
        com.google.javascript.rhino.head.ErrorReporter errorReporter53 = compilerEnvirons0.getErrorReporter();
        boolean boolean54 = compilerEnvirons0.isXmlAvailable();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 170 + "'", int8 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(errorReporter22);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(errorReporter41);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(errorReporter53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        com.google.javascript.rhino.head.Parser parser18 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean19 = compilerEnvirons0.isRecordingComments();
        boolean boolean20 = compilerEnvirons0.getAllowSharpComments();
        compilerEnvirons0.setRecoverFromErrors(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        compilerEnvirons0.setGenerateDebugInfo(false);
        compilerEnvirons0.setIdeMode(true);
        compilerEnvirons0.setStrictMode(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        scriptNode2.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope9 = scriptNode2.getEnclosingScope();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode10 = scriptNode2.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray13 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList14 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList14, symbolArray13);
        scriptNode12.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList14);
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int18 = astRoot17.getParamCount();
        int int19 = astRoot17.getRegexpCount();
        scriptNode12.addChildToBack((com.google.javascript.rhino.head.Node) astRoot17);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator21 = astRoot17.spliterator();
        scriptNode2.putProp((-777163487), (java.lang.Object) astRoot17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode25 = scriptNode24.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator27 = astRoot26.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        boolean boolean33 = comment32.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        java.lang.String str46 = comment44.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray47 = new com.google.javascript.rhino.head.ast.Comment[] { comment32, comment38, comment44 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet48 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet48, commentArray47);
        astRoot26.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet48);
        boolean boolean51 = astRoot26.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray52 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList53 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList53, symbolArray52);
        astRoot26.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList53);
        int int56 = astRoot26.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment57 = astRoot26.getJsDocNode();
        astRoot26.setInStrictMode(false);
        scriptNode24.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot26);
        boolean boolean61 = scriptNode24.hasSideEffects();
        scriptNode24.setBounds((int) (byte) 1, 65536);
        scriptNode24.setRelative((-476424842));
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(338455453, (com.google.javascript.rhino.head.Node) scriptNode24, (-1254326248));
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node((-1085822132), (com.google.javascript.rhino.head.Node) astRoot17, (com.google.javascript.rhino.head.Node) scriptNode24);
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(scope9);
        org.junit.Assert.assertNull(functionNode10);
        org.junit.Assert.assertNotNull(symbolArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator21);
        org.junit.Assert.assertNull(functionNode25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "                                                                                                                                                                                                        " + "'", str46, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(symbolArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(comment57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = scriptNode0.new NodeIterator();
        java.lang.String str3 = scriptNode0.getNextTempName();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = scriptNode0.iterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = astRoot5.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = astRoot5.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        astRoot5.visitComments(nodeVisitor8);
        astRoot5.setInStrictMode(false);
        int int12 = astRoot5.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode0, (com.google.javascript.rhino.head.ast.Scope) astRoot5);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray15 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList16 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList16, symbolArray15);
        scriptNode14.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList16);
        com.google.javascript.rhino.head.ast.AstRoot astRoot19 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int20 = astRoot19.getParamCount();
        int int21 = astRoot19.getRegexpCount();
        scriptNode14.addChildToBack((com.google.javascript.rhino.head.Node) astRoot19);
        int int23 = astRoot19.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = new com.google.javascript.rhino.head.ast.AstRoot();
        astRoot19.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot24);
        com.google.javascript.rhino.head.ast.Comment comment26 = astRoot24.getJsDocNode();
        astRoot5.target = comment26;
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "$0" + "'", str3, "$0");
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(symbolArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(comment26);
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        int int12 = scriptNode9.getBaseLineno();
        int int13 = scriptNode9.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList17 = scriptNode15.getFunctions();
        scriptNode15.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode9.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode15, (com.google.javascript.rhino.head.Node) scope20);
        scriptNode15.setEncodedSourceEnd(18);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = scriptNode15.getAstRoot();
        int int28 = scriptNode15.getIntProp((-923688614), 338455453);
        int int29 = scriptNode15.getBaseLineno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump30 = scriptNode15.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(commentType7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(functionNodeList17);
        org.junit.Assert.assertNull(astRoot25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 338455453 + "'", int28 == 338455453);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        com.google.javascript.rhino.head.IRFactory iRFactory10 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean12 = compilerEnvirons11.isReservedKeywordAsIdentifier();
        boolean boolean13 = compilerEnvirons11.getWarnTrailingComma();
        compilerEnvirons11.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet16 = compilerEnvirons11.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter17 = compilerEnvirons11.getErrorReporter();
        boolean boolean18 = compilerEnvirons11.isRecordingComments();
        compilerEnvirons11.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        int int23 = compilerEnvirons21.getLanguageVersion();
        compilerEnvirons21.setLanguageVersion((int) (byte) 100);
        boolean boolean26 = compilerEnvirons21.isAllowMemberExprAsFunctionName();
        compilerEnvirons21.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons29 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray35 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        compilerEnvirons29.setActivationNames((java.util.Set<java.lang.String>) strSet36);
        boolean boolean39 = compilerEnvirons29.isGenerateDebugInfo();
        compilerEnvirons29.setOptimizationLevel((int) (short) 1);
        compilerEnvirons29.setAllowSharpComments(true);
        boolean boolean44 = compilerEnvirons29.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter45 = compilerEnvirons29.getErrorReporter();
        compilerEnvirons21.setErrorReporter(errorReporter45);
        compilerEnvirons11.setErrorReporter(errorReporter45);
        com.google.javascript.rhino.head.IRFactory iRFactory48 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter45);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons49 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean50 = compilerEnvirons49.isReservedKeywordAsIdentifier();
        compilerEnvirons49.setStrictMode(true);
        compilerEnvirons49.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons55 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean56 = compilerEnvirons55.isReservedKeywordAsIdentifier();
        compilerEnvirons55.setStrictMode(true);
        compilerEnvirons55.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons61 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean62 = compilerEnvirons61.isReservedKeywordAsIdentifier();
        boolean boolean63 = compilerEnvirons61.getWarnTrailingComma();
        compilerEnvirons61.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet66 = compilerEnvirons61.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter67 = compilerEnvirons61.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory68 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons55, errorReporter67);
        com.google.javascript.rhino.head.IRFactory iRFactory69 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons49, errorReporter67);
        com.google.javascript.rhino.head.ast.AstRoot astRoot73 = iRFactory69.parse("2\tSCRIPT 2 1\n", "35", 100);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = iRFactory48.transformTree(astRoot73);
        java.lang.String str75 = scriptNode74.getEncodedSource();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(errorReporter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 170 + "'", int23 == 170);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(errorReporter45);
        org.junit.Assert.assertNotNull(compilerEnvirons49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(strSet66);
        org.junit.Assert.assertNotNull(errorReporter67);
        org.junit.Assert.assertNotNull(astRoot73);
        org.junit.Assert.assertNotNull(scriptNode74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\210(S\002R\001'\006SCRIPTR\001(S\002R\001(S\001R\001" + "'", str75, "\210(S\002R\001'\006SCRIPTR\001(S\002R\001(S\001R\001");
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        com.google.javascript.rhino.head.Node node21 = scriptNode17.target;
        scriptNode17.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int25 = astRoot24.getBaseLineno();
        java.lang.String str26 = astRoot24.debugPrint();
        astRoot24.setEncodedSourceBounds((int) (byte) -1, 18);
        astRoot24.clearParentScope();
        scriptNode17.addChildToBack((com.google.javascript.rhino.head.Node) astRoot24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode33 = scriptNode32.getEnclosingFunction();
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = astRoot34.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        java.lang.String str54 = comment52.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray55 = new com.google.javascript.rhino.head.ast.Comment[] { comment40, comment46, comment52 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet56 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet56, commentArray55);
        astRoot34.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet56);
        boolean boolean59 = astRoot34.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray60 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList61 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList61, symbolArray60);
        astRoot34.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList61);
        int int64 = astRoot34.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment65 = astRoot34.getJsDocNode();
        astRoot34.setInStrictMode(false);
        scriptNode32.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        astRoot34.setEndLineno(988431572);
        scriptNode17.setTop((com.google.javascript.rhino.head.ast.ScriptNode) astRoot34);
        astRoot34.checkParentLinks();
        com.google.javascript.rhino.head.Node node73 = astRoot34.target;
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(functionNode33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "                                                                                                                                                                                                        " + "'", str54, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(symbolArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(comment65);
        org.junit.Assert.assertNull(node73);
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setAllowSharpComments(true);
        compilerEnvirons0.setGenerateObserverCount(true);
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        boolean boolean13 = compilerEnvirons0.isGenerateObserverCount();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        scriptNode2.setBaseLineno(18);
        scriptNode2.setEndLineno(26);
        com.google.javascript.rhino.head.Node node9 = scriptNode2.getLastSibling();
        java.lang.String str10 = scriptNode2.getEncodedSource();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator11 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator12 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator13 = positionComparator11.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator12);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int15 = astRoot14.getBaseLineno();
        java.lang.String str16 = astRoot14.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = astRoot17.new NodeIterator();
        int int19 = positionComparator12.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot14, (com.google.javascript.rhino.head.ast.AstNode) astRoot17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.putIntProp((int) (short) 1, 1);
        java.lang.String str24 = scriptNode20.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope25 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scope25.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        scope25.setTop(scriptNode28);
        scope25.setLineno((int) (short) -1);
        int int33 = positionComparator12.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode20, (com.google.javascript.rhino.head.ast.AstNode) scope25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList37 = scriptNode35.getChildScopes();
        int int38 = scriptNode35.getBaseLineno();
        int int39 = scriptNode35.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList43 = scriptNode41.getFunctions();
        scriptNode41.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope46 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode35.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode41, (com.google.javascript.rhino.head.Node) scope46);
        scriptNode41.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str50 = scriptNode20.toStringTree(scriptNode41);
        int int51 = scriptNode20.getAbsolutePosition();
        scriptNode20.setEncodedSource("136");
        scriptNode2.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        int int55 = scriptNode20.getBaseLineno();
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(204947058, (com.google.javascript.rhino.head.Node) scriptNode20, 23);
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(astNodeComparator13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str16, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(scopeList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(functionNodeList43);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        boolean boolean16 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean17 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.ErrorReporter errorReporter18 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        compilerEnvirons0.setWarnTrailingComma(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(errorReporter18);
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        boolean boolean14 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean15 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean16 = compilerEnvirons0.recoverFromErrors();
        boolean boolean17 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        boolean boolean20 = compilerEnvirons18.getWarnTrailingComma();
        boolean boolean21 = compilerEnvirons18.isRecordingComments();
        boolean boolean22 = compilerEnvirons18.getWarnTrailingComma();
        boolean boolean23 = compilerEnvirons18.isRecordingLocalJsDocComments();
        boolean boolean24 = compilerEnvirons18.isIdeMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons25 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray31 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        compilerEnvirons25.setActivationNames((java.util.Set<java.lang.String>) strSet32);
        compilerEnvirons18.setActivationNames((java.util.Set<java.lang.String>) strSet32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons36 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons36.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons39 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean40 = compilerEnvirons39.isReservedKeywordAsIdentifier();
        boolean boolean41 = compilerEnvirons39.getWarnTrailingComma();
        compilerEnvirons39.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet44 = compilerEnvirons39.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter45 = compilerEnvirons39.getErrorReporter();
        java.lang.String[] strArray51 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        compilerEnvirons39.setActivationNames((java.util.Set<java.lang.String>) strSet52);
        com.google.javascript.rhino.head.ErrorReporter errorReporter55 = compilerEnvirons39.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser56 = new com.google.javascript.rhino.head.Parser(compilerEnvirons36, errorReporter55);
        compilerEnvirons36.setRecordingComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter59 = compilerEnvirons36.getErrorReporter();
        compilerEnvirons18.setErrorReporter(errorReporter59);
        com.google.javascript.rhino.head.Parser parser61 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter59);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons25);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons36);
        org.junit.Assert.assertNotNull(compilerEnvirons39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(errorReporter45);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(errorReporter55);
        org.junit.Assert.assertNotNull(errorReporter59);
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        boolean boolean8 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setRecoverFromErrors(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode27 = astRoot1.getParent();
        java.lang.String str28 = astRoot1.debugPrint();
        int int29 = astRoot1.getEncodedSourceStart();
        int int30 = astRoot1.getEncodedSourceEnd();
        astRoot1.checkParentLinks();
        astRoot1.setPosition((int) (short) 100);
        com.google.javascript.rhino.head.ast.Scope scope34 = astRoot1.getEnclosingScope();
        java.lang.String str35 = astRoot1.shortName();
        int int36 = astRoot1.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot37 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int38 = astRoot37.getParamCount();
        java.lang.String str39 = astRoot37.getNextTempName();
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node((-1094142582), (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) astRoot37, (int) '#');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode(272088821);
        astRoot37.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode43);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(astNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str28, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scope34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AstRoot" + "'", str35, "AstRoot");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "$0" + "'", str39, "$0");
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.lang.String str49 = astRoot0.toSource(15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot50 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = astRoot50.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor52 = astRoot50.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor53 = null;
        astRoot50.visitComments(nodeVisitor53);
        com.google.javascript.rhino.head.Node node55 = astRoot50.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = astRoot50.getTop();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator59 = scriptNode58.spliterator();
        com.google.javascript.rhino.head.Node node61 = scriptNode58.setType((int) '#');
        java.lang.Object obj62 = scriptNode58.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol64 = scriptNode58.getSymbol("typeof");
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor65 = scriptNode58.iterator();
        scriptNode56.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode58);
        java.lang.Object obj68 = scriptNode58.getProp(574921099);
        int int69 = scriptNode58.getPosition();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(nodeItor52);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(scriptNode56);
        org.junit.Assert.assertNotNull(nodeSpliterator59);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertNull(symbol64);
        org.junit.Assert.assertNotNull(nodeItor65);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        boolean boolean42 = astRoot0.hasSideEffects();
        astRoot0.setPosition(2);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet45 = astRoot0.getComments();
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(commentSet45);
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = new com.google.javascript.rhino.head.CompilerEnvirons();
        int int1 = compilerEnvirons0.getLanguageVersion();
        boolean boolean2 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean3 = compilerEnvirons0.isXmlAvailable();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter4 = compilerEnvirons0.getErrorReporter();
        boolean boolean5 = compilerEnvirons0.isIdeMode();
        boolean boolean6 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setGenerateObserverCount(true);
        boolean boolean9 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        int int10 = compilerEnvirons0.getOptimizationLevel();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(errorReporter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setIdeMode(false);
        boolean boolean9 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray16 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        compilerEnvirons10.setActivationNames((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = compilerEnvirons10.getWarnTrailingComma();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        boolean boolean23 = compilerEnvirons21.getWarnTrailingComma();
        compilerEnvirons21.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet26 = compilerEnvirons21.getActivationNames();
        compilerEnvirons21.setGenerateDebugInfo(true);
        compilerEnvirons21.setGenerateDebugInfo(true);
        boolean boolean31 = compilerEnvirons21.getWarnTrailingComma();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons32 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray38 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        compilerEnvirons32.setActivationNames((java.util.Set<java.lang.String>) strSet39);
        boolean boolean42 = compilerEnvirons32.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = compilerEnvirons32.getErrorReporter();
        compilerEnvirons32.setGenerateObserverCount(true);
        compilerEnvirons32.setIdeMode(false);
        java.util.Set<java.lang.String> strSet48 = compilerEnvirons32.getActivationNames();
        compilerEnvirons21.setActivationNames(strSet48);
        compilerEnvirons10.setActivationNames(strSet48);
        compilerEnvirons0.setActivationNames(strSet48);
        boolean boolean52 = compilerEnvirons0.isIdeMode();
        boolean boolean53 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons32);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(errorReporter43);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList12 = scriptNode10.getChildScopes();
        java.lang.String str14 = scriptNode10.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode15.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        scriptNode16.setEncodedSourceEnd(11);
        int int20 = scriptNode10.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        scriptNode2.putProp(8, (java.lang.Object) scriptNode16);
        scriptNode2.setEndLineno(14);
        java.lang.String str24 = scriptNode2.toSource();
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode51 = astRoot25.getParent();
        java.lang.String str52 = astRoot25.debugPrint();
        int int53 = astRoot25.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = astRoot25.getComments();
        astRoot25.setEncodedSourceBounds((-325419474), 136);
        com.google.javascript.rhino.head.ast.AstRoot astRoot58 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet59 = astRoot58.getComments();
        int int60 = astRoot58.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor61 = null;
        astRoot58.visitComments(nodeVisitor61);
        com.google.javascript.rhino.head.Node node63 = astRoot58.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope64 = astRoot58.getEnclosingScope();
        astRoot58.setEncodedSourceStart(23);
        java.lang.String str68 = astRoot58.toSource(95442629);
        com.google.javascript.rhino.head.Token.CommentType commentType71 = null;
        com.google.javascript.rhino.head.ast.Comment comment73 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType71, "hi!");
        java.lang.String str75 = comment73.toSource(5);
        astRoot58.setJsDocNode(comment73);
        java.lang.String str77 = comment73.getValue();
        astRoot25.addComment(comment73);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) astRoot25);
        int int80 = astRoot25.getAbsolutePosition();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(scopeList12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1561285379) + "'", int20 == (-1561285379));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{\n}\n" + "'", str24, "{\n}\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(astNode51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str52, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(commentSet54);
        org.junit.Assert.assertNull(commentSet59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNull(scope64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "          hi!" + "'", str75, "          hi!");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        scriptNode2.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap8 = scriptNode7.getSymbolTable();
        scriptNode2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.Node node15 = scriptNode11.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode17.getChildScopes();
        java.lang.String str21 = scriptNode17.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode11.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode17, (com.google.javascript.rhino.head.Node) scriptNode23);
        scriptNode2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode11);
        scriptNode11.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot(12);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor30 = null;
        astRoot29.visitComments(nodeVisitor30);
        astRoot29.setEncodedSourceStart(15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        scriptNode34.setBaseLineno((int) 'a');
        java.lang.String str39 = scriptNode34.getSourceName();
        scriptNode34.removeProp(988431572);
        com.google.javascript.rhino.head.Node node43 = new com.google.javascript.rhino.head.Node((-837790279), (com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) astRoot29, (com.google.javascript.rhino.head.Node) scriptNode34, 3);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str45 = astRoot44.getJsDoc();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet46 = astRoot44.getComments();
        java.lang.String str47 = astRoot44.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot48 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str50 = astRoot48.toSource((int) '4');
        astRoot48.setPosition(100);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray54 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList55 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList55, symbolArray54);
        scriptNode53.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList55);
        astRoot48.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList55);
        node43.addChildAfter((com.google.javascript.rhino.head.Node) astRoot44, (com.google.javascript.rhino.head.Node) astRoot48);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Scope scope61 = scriptNode60.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator62 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator63 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator64 = positionComparator62.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator63);
        com.google.javascript.rhino.head.ast.AstRoot astRoot65 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int66 = astRoot65.getBaseLineno();
        java.lang.String str67 = astRoot65.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot68 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator69 = astRoot68.new NodeIterator();
        int int70 = positionComparator63.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot65, (com.google.javascript.rhino.head.ast.AstNode) astRoot68);
        java.lang.String str71 = astRoot68.debugPrint();
        com.google.javascript.rhino.head.ast.AstNode astNode72 = astRoot68.getParent();
        com.google.javascript.rhino.head.ast.AstRoot astRoot73 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet74 = astRoot73.getComments();
        java.lang.String str75 = astRoot73.getSourceName();
        boolean boolean76 = astRoot73.hasChildren();
        com.google.javascript.rhino.head.Node node77 = astRoot73.getLastSibling();
        com.google.javascript.rhino.head.Node node78 = null;
        astRoot68.addChildBefore((com.google.javascript.rhino.head.Node) astRoot73, node78);
        com.google.javascript.rhino.head.Node node80 = astRoot73.target;
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode60, (com.google.javascript.rhino.head.ast.Scope) astRoot73);
        astRoot48.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode60);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(commentSet46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str47, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(symbolArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(scope61);
        org.junit.Assert.assertNotNull(astNodeComparator64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str67, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str71, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode72);
        org.junit.Assert.assertNull(commentSet74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        java.lang.String str10 = astRoot3.makeIndent(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        java.lang.String str18 = scriptNode12.toSource((int) (short) -1);
        astRoot3.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode12);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = astRoot3.getExistingIntProp(1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "                                " + "'", str10, "                                ");
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{\n}\n" + "'", str18, "{\n}\n");
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = astRoot4.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor6 = astRoot4.iterator();
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot4);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet8 = astRoot4.getComments();
        int int9 = astRoot4.getLineno();
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertNull(commentSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = scriptNode0.new NodeIterator();
        java.lang.String str3 = scriptNode0.getNextTempName();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor4 = scriptNode0.iterator();
        java.lang.String str5 = scriptNode0.toSource();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = new com.google.javascript.rhino.head.CompilerEnvirons();
        com.google.javascript.rhino.head.IRFactory iRFactory7 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6);
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = astRoot8.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        java.lang.String str28 = comment26.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray29 = new com.google.javascript.rhino.head.ast.Comment[] { comment14, comment20, comment26 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet30 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet30, commentArray29);
        astRoot8.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet30);
        boolean boolean33 = astRoot8.isInStrictMode();
        int int34 = astRoot8.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot35 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean36 = astRoot35.hasSideEffects();
        astRoot8.target = astRoot35;
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = iRFactory7.transformTree(astRoot35);
        com.google.javascript.rhino.head.ast.AstNode astNode39 = null;
        astRoot35.setParent(astNode39);
        scriptNode0.setCompilerData((java.lang.Object) astRoot35);
        astRoot35.setPosition((-163019660));
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "$0" + "'", str3, "$0");
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{\n}\n" + "'", str5, "{\n}\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "                                                                                                                                                                                                        " + "'", str28, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(scriptNode38);
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setWarnTrailingComma(true);
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        compilerEnvirons0.setRecoverFromErrors(true);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        astRoot1.setRelative((int) (short) 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode29.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode30);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList32 = scriptNode30.getChildScopes();
        java.lang.String str33 = scriptNode30.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList37 = scriptNode35.getChildScopes();
        int int38 = scriptNode35.getBaseLineno();
        com.google.javascript.rhino.head.Node node39 = scriptNode35.getLastSibling();
        int int40 = scriptNode35.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = scriptNode35.new NodeIterator();
        int int42 = scriptNode35.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot43 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator44 = astRoot43.new NodeIterator();
        scriptNode35.setCompilerData((java.lang.Object) nodeIterator44);
        int int46 = scriptNode30.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        scriptNode35.setLineno(20);
        com.google.javascript.rhino.head.Token.CommentType commentType51 = null;
        com.google.javascript.rhino.head.ast.Comment comment53 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType51, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        comment53.setCommentType(commentType54);
        int int58 = comment53.getIntProp((int) (byte) 10, 0);
        comment53.setPosition(161);
        scriptNode35.setJsDocNode(comment53);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons62 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean63 = compilerEnvirons62.isReservedKeywordAsIdentifier();
        int int64 = compilerEnvirons62.getLanguageVersion();
        int int65 = compilerEnvirons62.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons66 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean67 = compilerEnvirons66.isReservedKeywordAsIdentifier();
        compilerEnvirons66.setStrictMode(true);
        compilerEnvirons66.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons72 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean73 = compilerEnvirons72.isReservedKeywordAsIdentifier();
        boolean boolean74 = compilerEnvirons72.getWarnTrailingComma();
        compilerEnvirons72.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet77 = compilerEnvirons72.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter78 = compilerEnvirons72.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory79 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons66, errorReporter78);
        com.google.javascript.rhino.head.IRFactory iRFactory80 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons62, errorReporter78);
        com.google.javascript.rhino.head.ast.AstRoot astRoot81 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int82 = astRoot81.getParamCount();
        java.lang.String str83 = astRoot81.getJsDoc();
        java.lang.String str84 = astRoot81.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = iRFactory80.transformTree(astRoot81);
        int int86 = astRoot81.getParamCount();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator87 = astRoot81.spliterator();
        java.lang.String str88 = comment53.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot81);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor89 = null;
        astRoot81.visitComments(nodeVisitor89);
        com.google.javascript.rhino.head.Node node91 = new com.google.javascript.rhino.head.Node((-251699444), (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) astRoot81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = astRoot81.getParamOrVarName((-251699444));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(scopeList32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(scopeList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-925919144) + "'", int46 == (-925919144));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 170 + "'", int64 == 170);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 170 + "'", int65 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertNotNull(errorReporter78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "$0" + "'", str84, "$0");
        org.junit.Assert.assertNotNull(scriptNode85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator87);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(1010889788);
        java.lang.String str2 = scriptNode1.getNextTempName();
        scriptNode1.setLineno(0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "$0" + "'", str2, "$0");
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType29, "hi!");
        astRoot1.addComment(comment31);
        astRoot1.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        scriptNode36.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode41.getChildScopes();
        int int44 = scriptNode41.getBaseLineno();
        com.google.javascript.rhino.head.Node node45 = scriptNode41.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        java.lang.String str51 = scriptNode47.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode41.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode47, (com.google.javascript.rhino.head.Node) scriptNode53);
        int int55 = scriptNode47.getType();
        scriptNode36.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        int int57 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray59 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList60 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList60, symbolArray59);
        scriptNode58.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList60);
        int int63 = scriptNode58.getEndLineno();
        boolean boolean64 = scriptNode58.hasSideEffects();
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode47, (com.google.javascript.rhino.head.Node) scriptNode58);
        scriptNode58.setEncodedSourceBounds(11, (int) '4');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode(19);
        scriptNode70.setRelative(1275261773);
        int int73 = scriptNode58.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode70);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node74 = scriptNode58.getFinally();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 136 + "'", int55 == 136);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(symbolArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        boolean boolean11 = compilerEnvirons9.getWarnTrailingComma();
        compilerEnvirons9.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet14 = compilerEnvirons9.getActivationNames();
        boolean boolean15 = compilerEnvirons9.isRecordingComments();
        compilerEnvirons9.setIdeMode(false);
        boolean boolean18 = compilerEnvirons9.isAllowMemberExprAsFunctionName();
        boolean boolean19 = compilerEnvirons9.getAllowSharpComments();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        compilerEnvirons20.setStrictMode(true);
        compilerEnvirons20.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons26 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean27 = compilerEnvirons26.isReservedKeywordAsIdentifier();
        compilerEnvirons26.setStrictMode(true);
        compilerEnvirons26.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons32 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean33 = compilerEnvirons32.isReservedKeywordAsIdentifier();
        boolean boolean34 = compilerEnvirons32.getWarnTrailingComma();
        compilerEnvirons32.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet37 = compilerEnvirons32.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter38 = compilerEnvirons32.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory39 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons26, errorReporter38);
        com.google.javascript.rhino.head.IRFactory iRFactory40 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons20, errorReporter38);
        com.google.javascript.rhino.head.IRFactory iRFactory41 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons9, errorReporter38);
        com.google.javascript.rhino.head.IRFactory iRFactory42 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter38);
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.setOptimizationLevel((-361648642));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Optimization level outside [-1..9]: -361648642");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(errorReporter38);
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((-35053676), 0, commentType2, "                                                                                                                                                                                                                                                                                                                                                    {\n                                                                                                                                                                                                                                                                                                                                                    }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        int int10 = scriptNode6.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList14 = scriptNode12.getFunctions();
        scriptNode12.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope17 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scope17);
        scriptNode12.setEncodedSourceEnd(18);
        java.lang.String str21 = scriptNode12.getJsDoc();
        int int22 = scriptNode12.depth();
        java.lang.String str24 = scriptNode12.toSource(3);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        com.google.javascript.rhino.head.Node node30 = scriptNode26.getLastSibling();
        int int31 = scriptNode26.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator32 = scriptNode26.new NodeIterator();
        int int33 = scriptNode26.getLineno();
        scriptNode26.clearParentScope();
        int int35 = scriptNode26.depth();
        scriptNode26.setRelative(626782571);
        scriptNode12.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode26);
        comment4.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode12);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(functionNodeList14);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "      {\n      }\n" + "'", str24, "      {\n      }\n");
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        java.lang.String str5 = scriptNode1.makeIndent((int) (byte) -1);
        int int6 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.RegExpLiteral regExpLiteral7 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.addRegExp(regExpLiteral7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        scriptNode1.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope8 = scriptNode1.getEnclosingScope();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode9 = scriptNode1.getEnclosingFunction();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode1.getFunctions();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray12 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList13 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList13, symbolArray12);
        scriptNode11.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList13);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj19 = scriptNode18.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        int int23 = scriptNode20.getEndLineno();
        com.google.javascript.rhino.head.Node node24 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode18, (com.google.javascript.rhino.head.Node) scriptNode20);
        scriptNode11.setCompilerData((java.lang.Object) scriptNode18);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = scriptNode27.getLastSibling();
        scriptNode27.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList37 = scriptNode35.getFunctions();
        scriptNode35.setPosition((int) (byte) 10);
        java.lang.String str40 = scriptNode27.toStringTree(scriptNode35);
        int int41 = scriptNode27.getBaseLineno();
        com.google.javascript.rhino.head.Node node43 = scriptNode27.setType((int) (byte) -1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor44 = scriptNode27.iterator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator45 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator46 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator47 = positionComparator45.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator46);
        com.google.javascript.rhino.head.ast.AstRoot astRoot48 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int49 = astRoot48.getBaseLineno();
        java.lang.String str50 = astRoot48.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot51 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = astRoot51.new NodeIterator();
        int int53 = positionComparator46.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot48, (com.google.javascript.rhino.head.ast.AstNode) astRoot51);
        boolean boolean54 = astRoot48.isInStrictMode();
        scriptNode27.addChildToFront((com.google.javascript.rhino.head.Node) astRoot48);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode11, (com.google.javascript.rhino.head.ast.Scope) astRoot48);
        int int59 = scriptNode11.getIntProp(23, (int) (byte) 0);
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode11);
        scriptNode11.removeProp(1144873595);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(scope8);
        org.junit.Assert.assertNull(functionNode9);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertNotNull(symbolArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(functionNodeList37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeItor44);
        org.junit.Assert.assertNotNull(astNodeComparator47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str50, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        scriptNode0.setRelative((int) (byte) 100);
        int int4 = scriptNode0.getRegexpCount();
        int int5 = scriptNode0.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = scriptNode0.getTop();
        com.google.javascript.rhino.head.ast.AstNode astNode7 = scriptNode6.getParent();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = scriptNode6.getTop();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = scriptNode6.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNull(astNode7);
        org.junit.Assert.assertNotNull(scriptNode8);
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope(221450998);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList5 = scriptNode2.getStatements();
        scriptNode2.setLineno((-777447127));
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray30 = new com.google.javascript.rhino.head.ast.Comment[] { comment15, comment21, comment27 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet31, commentArray30);
        astRoot9.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet31);
        boolean boolean34 = astRoot9.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray35 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList36 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList36, symbolArray35);
        astRoot9.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList36);
        com.google.javascript.rhino.head.Node node39 = astRoot9.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot9, (com.google.javascript.rhino.head.ast.Scope) scriptNode41);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        java.lang.String str64 = comment62.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray65 = new com.google.javascript.rhino.head.ast.Comment[] { comment50, comment56, comment62 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet66 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet66, commentArray65);
        astRoot44.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet66);
        boolean boolean69 = astRoot44.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray70 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList71 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList71, symbolArray70);
        astRoot44.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList71);
        int int74 = astRoot44.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment75 = astRoot44.getJsDocNode();
        astRoot44.setBaseLineno((int) '4');
        scriptNode41.target = astRoot44;
        com.google.javascript.rhino.head.Node node81 = com.google.javascript.rhino.head.Node.newString((int) '#', "$0");
        com.google.javascript.rhino.head.Token.CommentType commentType84 = null;
        com.google.javascript.rhino.head.ast.Comment comment86 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType84, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType87 = null;
        comment86.setCommentType(commentType87);
        boolean boolean89 = comment86.hasSideEffects();
        node81.setJsDocNode(comment86);
        astRoot44.addComment(comment86);
        com.google.javascript.rhino.head.Token.CommentType commentType92 = comment86.getCommentType();
        com.google.javascript.rhino.head.Node node93 = new com.google.javascript.rhino.head.Node(637760744, (com.google.javascript.rhino.head.Node) comment86);
        // The following exception was thrown during execution in test generation
        try {
            scope1.replaceChild((com.google.javascript.rhino.head.Node) scriptNode2, node93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeList5);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(symbolArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "                                                                                                                                                                                                        " + "'", str64, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(symbolArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNull(comment75);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(commentType92);
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        boolean boolean2 = nodeIterator1.hasNext();
        boolean boolean3 = nodeIterator1.hasNext();
        boolean boolean4 = nodeIterator1.hasNext();
        boolean boolean5 = nodeIterator1.hasNext();
        boolean boolean6 = nodeIterator1.hasNext();
        boolean boolean7 = nodeIterator1.hasNext();
        boolean boolean8 = nodeIterator1.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node9 = nodeIterator1.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator3 = positionComparator1.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int5 = astRoot4.getBaseLineno();
        java.lang.String str6 = astRoot4.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        int int9 = positionComparator2.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot4, (com.google.javascript.rhino.head.ast.AstNode) astRoot7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = scriptNode10.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = scriptNode10.new NodeIterator();
        astRoot7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor14 = null;
        astRoot7.visitComments(nodeVisitor14);
        com.google.javascript.rhino.head.ast.AstRoot astRoot17 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator18 = astRoot17.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        boolean boolean30 = comment29.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        java.lang.String str37 = comment35.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray38 = new com.google.javascript.rhino.head.ast.Comment[] { comment23, comment29, comment35 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet39 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet39, commentArray38);
        astRoot17.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet39);
        boolean boolean42 = astRoot17.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray43 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList44 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList44, symbolArray43);
        astRoot17.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList44);
        int int47 = astRoot17.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot48 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator49 = astRoot48.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        boolean boolean55 = comment54.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        boolean boolean61 = comment60.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        java.lang.String str68 = comment66.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray69 = new com.google.javascript.rhino.head.ast.Comment[] { comment54, comment60, comment66 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet70 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet70, commentArray69);
        astRoot48.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet70);
        boolean boolean73 = astRoot48.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray74 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList75 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList75, symbolArray74);
        astRoot48.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList75);
        com.google.javascript.rhino.head.Node node78 = astRoot48.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot48, (com.google.javascript.rhino.head.ast.Scope) scriptNode80);
        com.google.javascript.rhino.head.ast.AstRoot astRoot83 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator84 = astRoot83.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor85 = astRoot83.iterator();
        astRoot83.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node89 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) astRoot17, (com.google.javascript.rhino.head.Node) astRoot48, (com.google.javascript.rhino.head.Node) astRoot83, (int) (byte) 0);
        astRoot48.setEncodedSource("                                ");
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) astRoot7, (com.google.javascript.rhino.head.Node) astRoot48);
        int int93 = astRoot48.getLength();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList94 = astRoot48.getChildScopes();
        // The following exception was thrown during execution in test generation
        try {
            int int95 = astRoot48.getParamAndVarCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str6, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "                                                                                                                                                                                                        " + "'", str37, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(symbolArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "                                                                                                                                                                                                        " + "'", str68, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(symbolArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertNotNull(nodeItor85);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNull(scopeList94);
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(51850316, (-253374738), commentType2, "-1");
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.recoverFromErrors();
        compilerEnvirons0.setRecoverFromErrors(false);
        boolean boolean6 = compilerEnvirons0.reportWarningAsError();
        boolean boolean7 = compilerEnvirons0.recoverFromErrors();
        int int8 = compilerEnvirons0.getOptimizationLevel();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray17 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        compilerEnvirons11.setActivationNames((java.util.Set<java.lang.String>) strSet18);
        boolean boolean21 = compilerEnvirons11.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = compilerEnvirons11.getErrorReporter();
        compilerEnvirons11.setGenerateObserverCount(true);
        boolean boolean25 = compilerEnvirons11.isRecordingLocalJsDocComments();
        boolean boolean26 = compilerEnvirons11.isGenerateDebugInfo();
        java.util.Set<java.lang.String> strSet27 = compilerEnvirons11.getActivationNames();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray34 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        compilerEnvirons28.setActivationNames((java.util.Set<java.lang.String>) strSet35);
        boolean boolean38 = compilerEnvirons28.isGenerateDebugInfo();
        boolean boolean39 = compilerEnvirons28.isGeneratingSource();
        int int40 = compilerEnvirons28.getOptimizationLevel();
        boolean boolean41 = compilerEnvirons28.getWarnTrailingComma();
        boolean boolean42 = compilerEnvirons28.isRecordingComments();
        boolean boolean43 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setGeneratingSource(true);
        compilerEnvirons28.setRecordingComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter48 = compilerEnvirons28.getErrorReporter();
        compilerEnvirons11.setErrorReporter(errorReporter48);
        com.google.javascript.rhino.head.Parser parser50 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter48);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(errorReporter22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(errorReporter48);
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        int int7 = scriptNode3.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scope14);
        scriptNode9.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        int int23 = scriptNode20.getBaseLineno();
        com.google.javascript.rhino.head.Node node24 = scriptNode20.getLastSibling();
        int int25 = scriptNode20.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = astRoot29.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        boolean boolean36 = comment35.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType39 = null;
        com.google.javascript.rhino.head.ast.Comment comment41 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType39, "");
        boolean boolean42 = comment41.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        java.lang.String str49 = comment47.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray50 = new com.google.javascript.rhino.head.ast.Comment[] { comment35, comment41, comment47 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet51 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet51, commentArray50);
        astRoot29.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet51);
        boolean boolean54 = astRoot29.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode55 = astRoot29.getParent();
        astRoot29.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode20, (com.google.javascript.rhino.head.Node) scope28, (com.google.javascript.rhino.head.Node) astRoot29, 6);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) astRoot29);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(574921099, (com.google.javascript.rhino.head.Node) astRoot29);
        int int64 = astRoot29.getIntProp((-1496675853), (-568490075));
        int int65 = astRoot29.getPosition();
        com.google.javascript.rhino.head.Node node66 = astRoot29.getLastSibling();
        com.google.javascript.rhino.head.Node node68 = astRoot29.setType((-328046526));
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "                                                                                                                                                                                                        " + "'", str49, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(astNode55);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-568490075) + "'", int64 == (-568490075));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setEncodedSourceStart((int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = scriptNode1.getTop();
        java.lang.String str7 = scriptNode1.debugPrint();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons8 = new com.google.javascript.rhino.head.CompilerEnvirons();
        com.google.javascript.rhino.head.IRFactory iRFactory9 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons8);
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = astRoot10.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType14 = null;
        com.google.javascript.rhino.head.ast.Comment comment16 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType14, "");
        boolean boolean17 = comment16.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType20, "");
        boolean boolean23 = comment22.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        java.lang.String str30 = comment28.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray31 = new com.google.javascript.rhino.head.ast.Comment[] { comment16, comment22, comment28 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet32 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet32, commentArray31);
        astRoot10.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet32);
        boolean boolean35 = astRoot10.isInStrictMode();
        int int36 = astRoot10.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot37 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean38 = astRoot37.hasSideEffects();
        astRoot10.target = astRoot37;
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = iRFactory9.transformTree(astRoot37);
        com.google.javascript.rhino.head.Token.CommentType commentType43 = null;
        com.google.javascript.rhino.head.ast.Comment comment45 = new com.google.javascript.rhino.head.ast.Comment((int) '4', (int) (byte) 1, commentType43, "                                                                                                                                                                                                  ");
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        comment45.setCommentType(commentType46);
        com.google.javascript.rhino.head.Token.CommentType commentType48 = comment45.getCommentType();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode40, (com.google.javascript.rhino.head.Node) comment45);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode40.getChildScopes();
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-1\t  SCRIPT 0 1\n" + "'", str7, "-1\t  SCRIPT 0 1\n");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                                                                                                                                                                                                        " + "'", str30, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(scriptNode40);
        org.junit.Assert.assertNull(commentType48);
        org.junit.Assert.assertNull(scopeList50);
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator3 = scope2.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        scope2.setTop(scriptNode5);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor8 = scope2.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        int int15 = comment13.getLineno();
        com.google.javascript.rhino.head.Node node17 = comment13.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType20, "");
        boolean boolean23 = comment22.hasSideEffects();
        int int24 = comment22.getLineno();
        com.google.javascript.rhino.head.Node node26 = comment22.setType(18);
        comment22.removeChildren();
        com.google.javascript.rhino.head.Node node29 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope2, (com.google.javascript.rhino.head.Node) comment13, (com.google.javascript.rhino.head.Node) comment22, 15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot30 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = astRoot30.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType34, "");
        boolean boolean37 = comment36.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        boolean boolean43 = comment42.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        java.lang.String str50 = comment48.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray51 = new com.google.javascript.rhino.head.ast.Comment[] { comment36, comment42, comment48 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet52 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet52, commentArray51);
        astRoot30.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet52);
        boolean boolean55 = astRoot30.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType58, "hi!");
        astRoot30.addComment(comment60);
        scope2.setJsDocNode(comment60);
        com.google.javascript.rhino.head.Token.CommentType commentType63 = comment60.getCommentType();
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(100, (int) (byte) 1);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(36, (com.google.javascript.rhino.head.Node) comment60, node66, (-325419474));
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator69 = comment60.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType72 = null;
        com.google.javascript.rhino.head.ast.Comment comment74 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType72, "");
        com.google.javascript.rhino.head.Token.CommentType commentType75 = comment74.getCommentType();
        java.lang.String str77 = comment74.toSource(21);
        java.lang.String str78 = comment74.getValue();
        comment60.addChildrenToFront((com.google.javascript.rhino.head.Node) comment74);
        com.google.javascript.rhino.head.Node node81 = comment74.setType((-1497029074));
        org.junit.Assert.assertNotNull(nodeSpliterator3);
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "                                                                                                                                                                                                        " + "'", str50, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(commentType63);
        org.junit.Assert.assertNotNull(nodeSpliterator69);
        org.junit.Assert.assertNull(commentType75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "                                          " + "'", str77, "                                          ");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean1 = astRoot0.hasSideEffects();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap2 = null;
        astRoot0.setSymbolTable(strMap2);
        boolean boolean4 = astRoot0.isInStrictMode();
        java.lang.String str5 = astRoot0.getEncodedSource();
        astRoot0.checkParentLinks();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(10, 9);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap3 = scope2.getSymbolTable();
        java.lang.String str5 = scope2.toSource((int) (byte) -1);
        scope2.setLineno((-117418037));
        scope2.removeChildren();
        org.junit.Assert.assertNull(strMap3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{\n}\n" + "'", str5, "{\n}\n");
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setStrictMode(false);
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getRegexpCount();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = scriptNode1.labelId();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        java.lang.String str6 = comment4.toSource(0);
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment4.visit(nodeVisitor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(commentType7);
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        astRoot0.setInStrictMode(false);
        astRoot0.removeProp(14);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        boolean boolean5 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        compilerEnvirons0.setGeneratingSource(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        java.lang.String str16 = scriptNode12.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scriptNode18);
        int int20 = scriptNode12.getType();
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        int int22 = scriptNode12.getParamCount();
        com.google.javascript.rhino.head.Node node23 = scriptNode12.getLastSibling();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons25 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean26 = compilerEnvirons25.isReservedKeywordAsIdentifier();
        boolean boolean27 = compilerEnvirons25.getWarnTrailingComma();
        compilerEnvirons25.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet30 = compilerEnvirons25.getActivationNames();
        boolean boolean31 = compilerEnvirons25.isGeneratingSource();
        node23.putProp(65536, (java.lang.Object) boolean31);
        // The following exception was thrown during execution in test generation
        try {
            node23.labelId((-213029975));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 136 + "'", int20 == 136);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(compilerEnvirons25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList4 = scriptNode2.getFunctions();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, 8);
        int int7 = scriptNode2.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet9 = astRoot8.getComments();
        java.lang.String str10 = astRoot8.getSourceName();
        boolean boolean11 = astRoot8.hasChildren();
        int int12 = astRoot8.getLineno();
        astRoot8.setEncodedSourceBounds((int) (byte) 10, (int) (short) 100);
        com.google.javascript.rhino.head.ast.Comment comment16 = astRoot8.getJsDocNode();
        scriptNode2.setTop((com.google.javascript.rhino.head.ast.ScriptNode) astRoot8);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons18.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        boolean boolean23 = compilerEnvirons21.getWarnTrailingComma();
        compilerEnvirons21.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet26 = compilerEnvirons21.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter27 = compilerEnvirons21.getErrorReporter();
        java.lang.String[] strArray33 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        compilerEnvirons21.setActivationNames((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.head.ErrorReporter errorReporter37 = compilerEnvirons21.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser38 = new com.google.javascript.rhino.head.Parser(compilerEnvirons18, errorReporter37);
        com.google.javascript.rhino.head.ast.AstRoot astRoot42 = parser38.parse("          hi!", "hi!", 2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot43 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator44 = astRoot43.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        boolean boolean50 = comment49.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType53 = null;
        com.google.javascript.rhino.head.ast.Comment comment55 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType53, "");
        boolean boolean56 = comment55.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType59 = null;
        com.google.javascript.rhino.head.ast.Comment comment61 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType59, "");
        java.lang.String str63 = comment61.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray64 = new com.google.javascript.rhino.head.ast.Comment[] { comment49, comment55, comment61 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet65 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet65, commentArray64);
        astRoot43.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet65);
        boolean boolean68 = astRoot43.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray69 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList70 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList70, symbolArray69);
        astRoot43.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList70);
        int int73 = astRoot43.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment74 = astRoot43.getJsDocNode();
        astRoot43.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.Token.CommentType commentType79 = null;
        com.google.javascript.rhino.head.ast.Comment comment81 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType79, "");
        com.google.javascript.rhino.head.Token.CommentType commentType82 = null;
        comment81.setCommentType(commentType82);
        astRoot43.setJsDocNode(comment81);
        astRoot42.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot43);
        astRoot8.addChildToBack((com.google.javascript.rhino.head.Node) astRoot43);
        java.lang.String str87 = astRoot8.shortName();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator88 = astRoot8.spliterator();
        org.junit.Assert.assertNotNull(functionNodeList4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(commentSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(errorReporter27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(errorReporter37);
        org.junit.Assert.assertNotNull(astRoot42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "                                                                                                                                                                                                        " + "'", str63, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(symbolArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNull(comment74);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "AstRoot" + "'", str87, "AstRoot");
        org.junit.Assert.assertNotNull(nodeSpliterator88);
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        java.lang.String str16 = scriptNode12.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scriptNode18);
        int int20 = scriptNode12.getType();
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.lang.Object obj22 = scriptNode12.getCompilerData();
        com.google.javascript.rhino.head.ast.Comment comment23 = scriptNode12.getJsDocNode();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode12.setString("                                  {\n                                  }\n");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 136 + "'", int20 == 136);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(comment23);
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        java.util.Set<java.lang.String> strSet18 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        boolean boolean21 = compilerEnvirons0.recoverFromErrors();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        boolean boolean24 = compilerEnvirons22.getWarnTrailingComma();
        compilerEnvirons22.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet27 = compilerEnvirons22.getActivationNames();
        boolean boolean28 = compilerEnvirons22.isGeneratingSource();
        com.google.javascript.rhino.head.ErrorReporter errorReporter29 = compilerEnvirons22.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser30 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter29);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.EvaluatorException evaluatorException36 = errorReporter29.runtimeError("", "", (-1728226312), "18", 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorReporter29);
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot41 = iRFactory37.parse("0\tSCRIPT 0 1\n", "                                ", 13);
        astRoot41.setPosition(0);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator44 = astRoot41.new NodeIterator();
        com.google.javascript.rhino.head.Node node45 = nodeIterator44.next();
        com.google.javascript.rhino.head.Node node46 = nodeIterator44.next();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertNotNull(astRoot41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        java.util.Set<java.lang.String> strSet18 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setStrictMode(false);
        boolean boolean21 = compilerEnvirons0.isStrictMode();
        boolean boolean22 = compilerEnvirons0.getAllowSharpComments();
        compilerEnvirons0.setAllowSharpComments(false);
        compilerEnvirons0.setRecoverFromErrors(true);
        compilerEnvirons0.setRecoverFromErrors(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        int int9 = astRoot5.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        astRoot5.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot10);
        astRoot5.putIntProp((-218159225), 626782571);
        com.google.javascript.rhino.head.ast.Scope scope15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot5, scope15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str2 = astRoot0.toSource((int) '4');
        astRoot0.setPosition(100);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray6 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList7 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList7, symbolArray6);
        scriptNode5.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList7);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = astRoot0.getTop();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = scriptNode11.getExistingIntProp((-81010705));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(symbolArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(scriptNode11);
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        boolean boolean38 = compilerEnvirons0.recoverFromErrors();
        compilerEnvirons0.setGenerateDebugInfo(false);
        compilerEnvirons0.setIdeMode(false);
        boolean boolean43 = compilerEnvirons0.isGenerateObserverCount();
        compilerEnvirons0.setGenerateDebugInfo(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        int int2 = astRoot0.getPosition();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap11 = scriptNode4.getSymbolTable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.isIdeMode();
        compilerEnvirons12.setReservedKeywordAsIdentifier(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray23 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        compilerEnvirons17.setActivationNames((java.util.Set<java.lang.String>) strSet24);
        boolean boolean27 = compilerEnvirons17.isGenerateDebugInfo();
        compilerEnvirons17.setOptimizationLevel((int) (short) 1);
        compilerEnvirons17.setAllowSharpComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter32 = compilerEnvirons17.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory33 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons12, errorReporter32);
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int35 = astRoot34.getParamCount();
        int int36 = astRoot34.getPosition();
        com.google.javascript.rhino.head.Node node37 = astRoot34.target;
        com.google.javascript.rhino.head.Node node38 = iRFactory33.transform((com.google.javascript.rhino.head.ast.AstNode) astRoot34);
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot40 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = astRoot40.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        boolean boolean53 = comment52.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType56 = null;
        com.google.javascript.rhino.head.ast.Comment comment58 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType56, "");
        java.lang.String str60 = comment58.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray61 = new com.google.javascript.rhino.head.ast.Comment[] { comment46, comment52, comment58 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet62 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet62, commentArray61);
        astRoot40.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet62);
        boolean boolean65 = astRoot40.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray66 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList67 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList67, symbolArray66);
        astRoot40.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList67);
        int int70 = astRoot40.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList74 = scriptNode72.getChildScopes();
        int int75 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.Node node76 = scriptNode72.getLastSibling();
        scriptNode72.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList82 = scriptNode80.getFunctions();
        scriptNode80.setPosition((int) (byte) 10);
        java.lang.String str85 = scriptNode72.toStringTree(scriptNode80);
        int int86 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot40, (com.google.javascript.rhino.head.ast.Scope) scriptNode72);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap88 = astRoot40.getSymbolTable();
        scriptNode4.setSymbolTable(strMap88);
        astRoot0.setSymbolTable(strMap88);
        java.lang.Object obj91 = astRoot0.getCompilerData();
        com.google.javascript.rhino.head.Node node92 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor93 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.visitAll(nodeVisitor93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(errorReporter32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "                                                                                                                                                                                                        " + "'", str60, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(symbolArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(scopeList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(functionNodeList82);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNull(obj91);
        org.junit.Assert.assertNull(node92);
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator3.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator6 = astNodeComparator2.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator3);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator7 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator8 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator9 = positionComparator7.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator8);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator10 = positionComparator7.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator11 = astNodeComparator6.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        int int16 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode13.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        java.lang.String str23 = scriptNode19.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode13.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scriptNode25);
        java.lang.Object obj28 = scriptNode19.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str31 = scriptNode29.toSource((int) '4');
        java.lang.String str32 = scriptNode19.toStringTree(scriptNode29);
        scriptNode29.setLength((-1));
        com.google.javascript.rhino.head.Node node35 = scriptNode29.getLastSibling();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator36 = scriptNode29.new NodeIterator();
        com.google.javascript.rhino.head.Node node37 = scriptNode29.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope39 = new com.google.javascript.rhino.head.ast.Scope(21);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap40 = scope39.getSymbolTable();
        int int41 = positionComparator7.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode29, (com.google.javascript.rhino.head.ast.AstNode) scope39);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator42 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator43 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator44 = positionComparator42.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator43);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator45 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator46 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator47 = positionComparator45.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator46);
        com.google.javascript.rhino.head.ast.AstRoot astRoot48 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int49 = astRoot48.getBaseLineno();
        java.lang.String str50 = astRoot48.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot51 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator52 = astRoot51.new NodeIterator();
        int int53 = positionComparator46.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot48, (com.google.javascript.rhino.head.ast.AstNode) astRoot51);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator54 = positionComparator42.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator46);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator55 = positionComparator42.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator56 = astNodeComparator55.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator57 = astNodeComparator56.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator58 = positionComparator7.thenComparing(astNodeComparator56);
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertNotNull(astNodeComparator6);
        org.junit.Assert.assertNotNull(astNodeComparator9);
        org.junit.Assert.assertNotNull(astNodeComparator10);
        org.junit.Assert.assertNotNull(astNodeComparator11);
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str31, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(strMap40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-22) + "'", int41 == (-22));
        org.junit.Assert.assertNotNull(astNodeComparator44);
        org.junit.Assert.assertNotNull(astNodeComparator47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str50, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator54);
        org.junit.Assert.assertNotNull(astNodeComparator55);
        org.junit.Assert.assertNotNull(astNodeComparator56);
        org.junit.Assert.assertNotNull(astNodeComparator57);
        org.junit.Assert.assertNotNull(astNodeComparator58);
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setRecoverFromErrors(false);
        boolean boolean13 = compilerEnvirons0.isXmlAvailable();
        compilerEnvirons0.setRecoverFromErrors(true);
        boolean boolean16 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean17 = compilerEnvirons0.isStrictMode();
        compilerEnvirons0.setIdeMode(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        com.google.javascript.rhino.head.ast.Scope scope3 = new com.google.javascript.rhino.head.ast.Scope(644758030, (-1020608546));
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator5 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator6 = positionComparator4.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator5);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int8 = astRoot7.getBaseLineno();
        java.lang.String str9 = astRoot7.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = astRoot10.new NodeIterator();
        int int12 = positionComparator5.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot7, (com.google.javascript.rhino.head.ast.AstNode) astRoot10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator14 = scriptNode13.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = scriptNode13.new NodeIterator();
        astRoot10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        int int17 = scriptNode13.getRegexpCount();
        boolean boolean18 = scriptNode13.hasChildren();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor19 = scriptNode13.iterator();
        boolean boolean20 = scriptNode13.hasSideEffects();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(605628279, (com.google.javascript.rhino.head.Node) scope3, (com.google.javascript.rhino.head.Node) scriptNode13, 603173706);
        boolean boolean23 = scope3.hasSideEffects();
        java.lang.Object obj25 = scope3.getProp(148564836);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scope3.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            scope3.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str9, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor2 = astRoot0.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = astRoot0.getTop();
        java.lang.Object obj8 = scriptNode6.getProp((int) (short) 0);
        java.lang.Object obj9 = scriptNode6.getCompilerData();
        org.junit.Assert.assertNotNull(nodeItor2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        boolean boolean30 = comment29.hasSideEffects();
        int int31 = comment29.getLineno();
        com.google.javascript.rhino.head.Node node33 = comment29.setType(18);
        boolean boolean34 = comment29.hasSideEffects();
        astRoot0.addComment(comment29);
        com.google.javascript.rhino.head.Node node36 = astRoot0.target;
        astRoot0.setEncodedSourceBounds(1879633086, 1560112722);
        com.google.javascript.rhino.head.Node node40 = astRoot0.getLastChild();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        compilerEnvirons0.setGeneratingSource(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setAllowSharpComments(true);
        compilerEnvirons0.setWarnTrailingComma(true);
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setGenerateDebugInfo(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean11 = compilerEnvirons0.getAllowSharpComments();
        boolean boolean12 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons13 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean14 = compilerEnvirons13.isReservedKeywordAsIdentifier();
        boolean boolean15 = compilerEnvirons13.isIdeMode();
        compilerEnvirons13.setRecordingLocalJsDocComments(false);
        boolean boolean18 = compilerEnvirons13.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean20 = compilerEnvirons19.isReservedKeywordAsIdentifier();
        int int21 = compilerEnvirons19.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        boolean boolean24 = compilerEnvirons22.isIdeMode();
        compilerEnvirons22.setRecordingLocalJsDocComments(false);
        boolean boolean27 = compilerEnvirons22.isGenerateDebugInfo();
        compilerEnvirons22.setRecordingLocalJsDocComments(true);
        boolean boolean30 = compilerEnvirons22.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean32 = compilerEnvirons31.isReservedKeywordAsIdentifier();
        boolean boolean33 = compilerEnvirons31.getWarnTrailingComma();
        boolean boolean34 = compilerEnvirons31.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter35 = compilerEnvirons31.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser36 = new com.google.javascript.rhino.head.Parser(compilerEnvirons22, errorReporter35);
        compilerEnvirons19.setErrorReporter(errorReporter35);
        compilerEnvirons13.setErrorReporter(errorReporter35);
        com.google.javascript.rhino.head.Parser parser39 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter35);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.EvaluatorException evaluatorException45 = errorReporter35.runtimeError("            {\n            }\n", "ScriptNode", (-1088649131), "                      {\n                      }\n", (-3137945));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(errorReporter35);
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.Parser parser4 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setAllowSharpComments(false);
        compilerEnvirons0.setRecordingComments(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        boolean boolean14 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean15 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean16 = compilerEnvirons0.recoverFromErrors();
        boolean boolean17 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setStrictMode(false);
        com.google.javascript.rhino.head.Context context20 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.initFromContext(context20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        boolean boolean9 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setIdeMode(false);
        boolean boolean12 = compilerEnvirons0.isIdeMode();
        int int13 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setRecoverFromErrors(false);
        compilerEnvirons0.setGenerateDebugInfo(true);
        int int18 = compilerEnvirons0.getLanguageVersion();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 170 + "'", int13 == 170);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 170 + "'", int18 == 170);
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setPosition((int) (byte) 10);
        int int6 = scriptNode1.getEncodedSourceEnd();
        int int7 = scriptNode1.getLineno();
        scriptNode1.removeProp((int) (short) 0);
        com.google.javascript.rhino.head.ast.Comment comment10 = scriptNode1.getJsDocNode();
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(comment10);
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        java.lang.String str26 = comment24.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray27 = new com.google.javascript.rhino.head.ast.Comment[] { comment12, comment18, comment24 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet28 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet28, commentArray27);
        astRoot6.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet28);
        boolean boolean31 = astRoot6.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType34, "hi!");
        astRoot6.addComment(comment36);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode38 = comment36.getEnclosingFunction();
        astRoot0.addComment(comment36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode41.getChildScopes();
        int int44 = scriptNode41.getBaseLineno();
        com.google.javascript.rhino.head.Node node45 = scriptNode41.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        java.lang.String str51 = scriptNode47.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode41.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode47, (com.google.javascript.rhino.head.Node) scriptNode53);
        com.google.javascript.rhino.head.ast.AstRoot astRoot55 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int56 = astRoot55.getBaseLineno();
        int int57 = astRoot55.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList61 = scriptNode59.getChildScopes();
        int int62 = scriptNode59.getBaseLineno();
        com.google.javascript.rhino.head.Node node63 = scriptNode59.getLastSibling();
        scriptNode59.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode66.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode67);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = scriptNode67.getFunctions();
        scriptNode67.setPosition((int) (byte) 10);
        java.lang.String str72 = scriptNode59.toStringTree(scriptNode67);
        int int73 = scriptNode59.getBaseLineno();
        astRoot55.target = scriptNode59;
        scriptNode47.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode59);
        astRoot0.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode59);
        int int77 = astRoot0.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator78 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator79 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator80 = positionComparator78.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator79);
        com.google.javascript.rhino.head.ast.AstRoot astRoot81 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int82 = astRoot81.getBaseLineno();
        java.lang.String str83 = astRoot81.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot84 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator85 = astRoot84.new NodeIterator();
        int int86 = positionComparator79.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot81, (com.google.javascript.rhino.head.ast.AstNode) astRoot84);
        java.lang.String str87 = astRoot84.debugPrint();
        com.google.javascript.rhino.head.ast.AstNode astNode88 = astRoot84.getParent();
        com.google.javascript.rhino.head.ast.AstRoot astRoot89 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet90 = astRoot89.getComments();
        java.lang.String str91 = astRoot89.getSourceName();
        boolean boolean92 = astRoot89.hasChildren();
        com.google.javascript.rhino.head.Node node93 = astRoot89.getLastSibling();
        com.google.javascript.rhino.head.Node node94 = null;
        astRoot84.addChildBefore((com.google.javascript.rhino.head.Node) astRoot89, node94);
        // The following exception was thrown during execution in test generation
        try {
            astRoot0.setLoop((com.google.javascript.rhino.head.ast.Jump) astRoot84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                                                                                                                                                                        " + "'", str26, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(functionNode38);
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNull(scopeList61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(functionNodeList69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(astNodeComparator80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str83, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str87, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(astNode88);
        org.junit.Assert.assertNull(commentSet90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((-361648642));
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump2 = scriptNode1.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = comment4.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        comment4.setCommentType(commentType6);
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator9 = astRoot8.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        java.lang.String str28 = comment26.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray29 = new com.google.javascript.rhino.head.ast.Comment[] { comment14, comment20, comment26 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet30 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet30, commentArray29);
        astRoot8.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet30);
        boolean boolean33 = astRoot8.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode34 = astRoot8.getParent();
        astRoot8.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = astRoot8.getTop();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons38 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory40 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons38, errorReporter39);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList44 = scriptNode42.getChildScopes();
        int int45 = scriptNode42.getBaseLineno();
        int int46 = scriptNode42.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList50 = scriptNode48.getFunctions();
        scriptNode48.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope53 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode42.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode48, (com.google.javascript.rhino.head.Node) scope53);
        scriptNode48.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node57 = iRFactory40.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        int int58 = scriptNode48.getRegexpCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot59 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator60 = astRoot59.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType63 = null;
        com.google.javascript.rhino.head.ast.Comment comment65 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType63, "");
        boolean boolean66 = comment65.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType69 = null;
        com.google.javascript.rhino.head.ast.Comment comment71 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType69, "");
        boolean boolean72 = comment71.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType75 = null;
        com.google.javascript.rhino.head.ast.Comment comment77 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType75, "");
        java.lang.String str79 = comment77.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray80 = new com.google.javascript.rhino.head.ast.Comment[] { comment65, comment71, comment77 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet81 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet81, commentArray80);
        astRoot59.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet81);
        boolean boolean84 = astRoot59.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode85 = astRoot59.getParent();
        astRoot59.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.ast.AstNode astNode88 = astRoot59.getParent();
        java.lang.String str89 = scriptNode48.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot59);
        scriptNode37.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode48);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        // The following exception was thrown during execution in test generation
        try {
            double double92 = comment4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Comment cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType5);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "                                                                                                                                                                                                        " + "'", str28, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(astNode34);
        org.junit.Assert.assertNotNull(scriptNode37);
        org.junit.Assert.assertNull(scopeList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(functionNodeList50);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "                                                                                                                                                                                                        " + "'", str79, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(astNode85);
        org.junit.Assert.assertNull(astNode88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol3 = astRoot0.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str6 = scriptNode4.toSource((int) '4');
        com.google.javascript.rhino.head.Node node7 = scriptNode4.getFirstChild();
        java.lang.Object obj9 = scriptNode4.getProp(18);
        boolean boolean10 = scriptNode4.hasConsistentReturnUsage();
        java.lang.String str11 = astRoot0.toStringTree(scriptNode4);
        int int12 = astRoot0.getEncodedSourceEnd();
        astRoot0.setBounds(1384960853, (-405371752));
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap16 = astRoot0.getSymbolTable();
        com.google.javascript.rhino.head.Node node17 = astRoot0.getLastSibling();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(symbol3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str6, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        int int2 = astRoot0.getPosition();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode4.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot7);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap11 = scriptNode4.getSymbolTable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.isIdeMode();
        compilerEnvirons12.setReservedKeywordAsIdentifier(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray23 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        compilerEnvirons17.setActivationNames((java.util.Set<java.lang.String>) strSet24);
        boolean boolean27 = compilerEnvirons17.isGenerateDebugInfo();
        compilerEnvirons17.setOptimizationLevel((int) (short) 1);
        compilerEnvirons17.setAllowSharpComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter32 = compilerEnvirons17.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory33 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons12, errorReporter32);
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int35 = astRoot34.getParamCount();
        int int36 = astRoot34.getPosition();
        com.google.javascript.rhino.head.Node node37 = astRoot34.target;
        com.google.javascript.rhino.head.Node node38 = iRFactory33.transform((com.google.javascript.rhino.head.ast.AstNode) astRoot34);
        scriptNode4.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        com.google.javascript.rhino.head.ast.AstRoot astRoot40 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = astRoot40.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        boolean boolean53 = comment52.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType56 = null;
        com.google.javascript.rhino.head.ast.Comment comment58 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType56, "");
        java.lang.String str60 = comment58.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray61 = new com.google.javascript.rhino.head.ast.Comment[] { comment46, comment52, comment58 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet62 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet62, commentArray61);
        astRoot40.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet62);
        boolean boolean65 = astRoot40.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray66 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList67 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList67, symbolArray66);
        astRoot40.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList67);
        int int70 = astRoot40.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode72);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList74 = scriptNode72.getChildScopes();
        int int75 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.Node node76 = scriptNode72.getLastSibling();
        scriptNode72.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList82 = scriptNode80.getFunctions();
        scriptNode80.setPosition((int) (byte) 10);
        java.lang.String str85 = scriptNode72.toStringTree(scriptNode80);
        int int86 = scriptNode72.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot40, (com.google.javascript.rhino.head.ast.Scope) scriptNode72);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap88 = astRoot40.getSymbolTable();
        scriptNode4.setSymbolTable(strMap88);
        astRoot0.setSymbolTable(strMap88);
        java.lang.Object obj91 = astRoot0.getCompilerData();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = astRoot0.getParamOrVarName(1201723167);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNull(strMap11);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(errorReporter32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "                                                                                                                                                                                                        " + "'", str60, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(symbolArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(scopeList74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(functionNodeList82);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(strMap88);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet3 = astRoot2.getComments();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode5.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator9 = scriptNode8.spliterator();
        com.google.javascript.rhino.head.Node node11 = scriptNode8.setType((int) '#');
        boolean boolean12 = scriptNode8.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) astRoot2, (com.google.javascript.rhino.head.Node) scriptNode5, (com.google.javascript.rhino.head.Node) scriptNode8);
        com.google.javascript.rhino.head.Node node14 = new com.google.javascript.rhino.head.Node(51850316, node13);
        org.junit.Assert.assertNull(commentSet3);
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int7 = astRoot6.getBaseLineno();
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) astRoot6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = astRoot6.getChildScopes();
        com.google.javascript.rhino.head.Node node10 = astRoot6.getNext();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor11 = null;
        astRoot6.visitComments(nodeVisitor11);
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope13);
        int int15 = scriptNode8.getEndLineno();
        scriptNode8.setEncodedSource("hi!");
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode8, (int) (byte) 0);
        boolean boolean20 = scriptNode8.hasSideEffects();
        boolean boolean21 = scriptNode8.hasSideEffects();
        scriptNode8.flattenSymbolTable(false);
        com.google.javascript.rhino.head.ast.AstNode astNode24 = scriptNode8.getParent();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(astNode24);
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(2);
        boolean boolean2 = astRoot1.hasConsistentReturnUsage();
        java.lang.String str4 = astRoot1.toSource(95442629);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = astRoot1.getAstRoot();
        com.google.javascript.rhino.head.ast.AstNode astNode6 = astRoot5.getParent();
        com.google.javascript.rhino.head.ast.Scope scope9 = new com.google.javascript.rhino.head.ast.Scope(6, (int) (short) -1);
        java.lang.String str11 = scope9.toSource(3);
        // The following exception was thrown during execution in test generation
        try {
            astNode6.setScope(scope9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(astRoot5);
        org.junit.Assert.assertNull(astNode6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "      {\n      }\n" + "'", str11, "      {\n      }\n");
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean1 = astRoot0.hasSideEffects();
        astRoot0.setInStrictMode(false);
        astRoot0.setEndLineno(100);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet6 = astRoot0.getComments();
        java.lang.Object obj7 = astRoot0.getCompilerData();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(commentSet6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter4 = compilerEnvirons0.getErrorReporter();
        int int5 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean6 = compilerEnvirons0.isGenerateObserverCount();
        compilerEnvirons0.setStrictMode(true);
        java.util.Set<java.lang.String> strSet9 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = compilerEnvirons0.getErrorReporter();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(errorReporter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(errorReporter10);
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType2, "hi!");
        java.lang.String str6 = comment4.toSource(0);
        // The following exception was thrown during execution in test generation
        try {
            comment4.setString("52\tSCRIPT 52 1\n");
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Comment cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment(149284087, (-253374738), commentType2, "                                                    hi!");
        com.google.javascript.rhino.head.Node node5 = comment4.getNext();
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        com.google.javascript.rhino.head.Node node2 = new com.google.javascript.rhino.head.Node(574921099, 159607986);
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.getWarnTrailingComma();
        compilerEnvirons3.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet8 = compilerEnvirons3.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons3.getErrorReporter();
        java.lang.String[] strArray15 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons3.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser20 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter19);
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = parser20.parse("          hi!", "hi!", 2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray51 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList52 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList52, symbolArray51);
        astRoot25.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList52);
        int int55 = astRoot25.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment56 = astRoot25.getJsDocNode();
        astRoot25.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.Token.CommentType commentType61 = null;
        com.google.javascript.rhino.head.ast.Comment comment63 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType61, "");
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        comment63.setCommentType(commentType64);
        astRoot25.setJsDocNode(comment63);
        astRoot24.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot25);
        java.lang.String str68 = astRoot25.getNextTempName();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator69 = astRoot25.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator70 = astRoot25.spliterator();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(errorReporter9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertNotNull(astRoot24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(symbolArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(comment56);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "$0" + "'", str68, "$0");
        org.junit.Assert.assertNotNull(nodeSpliterator69);
        org.junit.Assert.assertNotNull(nodeSpliterator70);
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node19 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        int int20 = scriptNode10.getRegexpCount();
        scriptNode10.setEncodedSourceBounds(52, 0);
        int int24 = scriptNode10.getEndLineno();
        com.google.javascript.rhino.head.ast.Symbol symbol26 = scriptNode10.getSymbol("Comment");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode28.getChildScopes();
        java.lang.String str31 = scriptNode28.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        int int36 = scriptNode33.getBaseLineno();
        com.google.javascript.rhino.head.Node node37 = scriptNode33.getLastSibling();
        int int38 = scriptNode33.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator39 = scriptNode33.new NodeIterator();
        int int40 = scriptNode33.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot41 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator42 = astRoot41.new NodeIterator();
        scriptNode33.setCompilerData((java.lang.Object) nodeIterator42);
        int int44 = scriptNode28.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        scriptNode33.setLineno(20);
        com.google.javascript.rhino.head.Token.CommentType commentType49 = null;
        com.google.javascript.rhino.head.ast.Comment comment51 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType49, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        comment51.setCommentType(commentType52);
        int int56 = comment51.getIntProp((int) (byte) 10, 0);
        comment51.setPosition(161);
        scriptNode33.setJsDocNode(comment51);
        scriptNode10.setTop(scriptNode33);
        com.google.javascript.rhino.head.ast.AstNode astNode61 = null;
        scriptNode10.setParent(astNode61);
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(symbol26);
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1134665303 + "'", int44 == 1134665303);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory6 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor9 = astRoot7.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor10 = null;
        astRoot7.visitComments(nodeVisitor10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = iRFactory6.transformTree(astRoot7);
        java.lang.String str13 = astRoot7.toSource();
        int int14 = astRoot7.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot7.visit(nodeVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNotNull(scriptNode12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scope12);
        scriptNode7.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = astRoot16.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType20, "");
        boolean boolean23 = comment22.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        java.lang.String str36 = comment34.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray37 = new com.google.javascript.rhino.head.ast.Comment[] { comment22, comment28, comment34 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet38 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet38, commentArray37);
        astRoot16.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet38);
        boolean boolean41 = astRoot16.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode42 = astRoot16.getParent();
        astRoot16.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = astRoot16.getTop();
        scriptNode7.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode45);
        scriptNode7.setEncodedSourceEnd(1410155489);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode7.getChildScopes();
        com.google.javascript.rhino.head.ast.Symbol symbol51 = scriptNode7.getSymbol("505759098\tSCRIPT 505759098 1\n");
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "                                                                                                                                                                                                        " + "'", str36, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(astNode42);
        org.junit.Assert.assertNotNull(scriptNode45);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertNull(symbol51);
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode1.setType((int) (byte) -1);
        scriptNode1.setSourceName("typeof");
        com.google.javascript.rhino.head.Node node20 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.Node node21 = node20.getLastSibling();
        com.google.javascript.rhino.head.Node node23 = node21.setType((-1112521022));
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        boolean boolean38 = compilerEnvirons0.isGenerateDebugInfo();
        int int39 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setAllowSharpComments(false);
        compilerEnvirons0.setOptimizationLevel(0);
        boolean boolean44 = compilerEnvirons0.isRecordingLocalJsDocComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 170 + "'", int39 == 170);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setRecoverFromErrors(false);
        com.google.javascript.rhino.head.Parser parser13 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setRecoverFromErrors(false);
        compilerEnvirons0.setAllowSharpComments(false);
        compilerEnvirons0.setGenerateDebugInfo(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        boolean boolean7 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean8 = compilerEnvirons0.isRecordingComments();
        boolean boolean9 = compilerEnvirons0.isGeneratingSource();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        boolean boolean12 = compilerEnvirons10.getWarnTrailingComma();
        compilerEnvirons10.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet15 = compilerEnvirons10.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons10.getErrorReporter();
        boolean boolean17 = compilerEnvirons10.isRecordingComments();
        compilerEnvirons10.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        int int22 = compilerEnvirons20.getLanguageVersion();
        int int23 = compilerEnvirons20.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        compilerEnvirons24.setStrictMode(true);
        compilerEnvirons24.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons30 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean31 = compilerEnvirons30.isReservedKeywordAsIdentifier();
        boolean boolean32 = compilerEnvirons30.getWarnTrailingComma();
        compilerEnvirons30.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet35 = compilerEnvirons30.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter36 = compilerEnvirons30.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter36);
        com.google.javascript.rhino.head.IRFactory iRFactory38 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons20, errorReporter36);
        com.google.javascript.rhino.head.IRFactory iRFactory39 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10, errorReporter36);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons40 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray46 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        compilerEnvirons40.setActivationNames((java.util.Set<java.lang.String>) strSet47);
        boolean boolean50 = compilerEnvirons40.getWarnTrailingComma();
        com.google.javascript.rhino.head.ErrorReporter errorReporter51 = compilerEnvirons40.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser52 = new com.google.javascript.rhino.head.Parser(compilerEnvirons10, errorReporter51);
        compilerEnvirons0.setErrorReporter(errorReporter51);
        compilerEnvirons0.setGeneratingSource(false);
        boolean boolean56 = compilerEnvirons0.isGenerateObserverCount();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 170 + "'", int22 == 170);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 170 + "'", int23 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(errorReporter36);
        org.junit.Assert.assertNotNull(compilerEnvirons40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(errorReporter51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str2 = astRoot0.toSource((int) '4');
        com.google.javascript.rhino.head.Node node3 = astRoot0.getLastSibling();
        astRoot0.removeProp(112065469);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator3.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int7 = astRoot6.getBaseLineno();
        java.lang.String str8 = astRoot6.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        int int11 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot6, (com.google.javascript.rhino.head.ast.AstNode) astRoot9);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator12 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        int int16 = scriptNode13.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope scope17 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode13.setParentScope(scope17);
        scriptNode13.setLineno((int) '4');
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator22 = astRoot21.new NodeIterator();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList23 = astRoot21.getStatements();
        int int24 = positionComparator0.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode13, (com.google.javascript.rhino.head.ast.AstNode) astRoot21);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap25 = astRoot21.getSymbolTable();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str28 = scriptNode26.toSource((int) '4');
        com.google.javascript.rhino.head.Node node29 = scriptNode26.getFirstChild();
        java.lang.Object obj31 = scriptNode26.getProp(18);
        boolean boolean32 = scriptNode26.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.AstRoot astRoot33 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet34 = astRoot33.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol36 = astRoot33.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType39 = null;
        com.google.javascript.rhino.head.ast.Comment comment41 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType39, "hi!");
        astRoot33.addChildrenToFront((com.google.javascript.rhino.head.Node) comment41);
        astRoot33.setInStrictMode(true);
        java.lang.String str45 = scriptNode26.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot33);
        astRoot21.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot33);
        com.google.javascript.rhino.head.Token.CommentType commentType49 = null;
        com.google.javascript.rhino.head.ast.Comment comment51 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType49, "");
        boolean boolean52 = comment51.hasSideEffects();
        int int53 = comment51.getLineno();
        com.google.javascript.rhino.head.Node node55 = comment51.setType(18);
        boolean boolean56 = comment51.hasSideEffects();
        int int57 = comment51.getType();
        java.lang.String str58 = comment51.getValue();
        astRoot33.addComment(comment51);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet60 = astRoot33.getComments();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str8, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(astNodeList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(strMap25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str28, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(commentSet34);
        org.junit.Assert.assertNull(symbol36);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 18 + "'", int57 == 18);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(commentSet60);
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean8 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setRecoverFromErrors(true);
        boolean boolean11 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.getWarnTrailingComma();
        compilerEnvirons12.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet17 = compilerEnvirons12.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter18 = compilerEnvirons12.getErrorReporter();
        java.lang.String[] strArray24 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        compilerEnvirons12.setActivationNames((java.util.Set<java.lang.String>) strSet25);
        boolean boolean28 = compilerEnvirons12.isGenerateDebugInfo();
        boolean boolean29 = compilerEnvirons12.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons30 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean31 = compilerEnvirons30.isReservedKeywordAsIdentifier();
        int int32 = compilerEnvirons30.getLanguageVersion();
        int int33 = compilerEnvirons30.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons34 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean35 = compilerEnvirons34.isReservedKeywordAsIdentifier();
        compilerEnvirons34.setStrictMode(true);
        compilerEnvirons34.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons40 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean41 = compilerEnvirons40.isReservedKeywordAsIdentifier();
        boolean boolean42 = compilerEnvirons40.getWarnTrailingComma();
        compilerEnvirons40.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet45 = compilerEnvirons40.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter46 = compilerEnvirons40.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory47 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons34, errorReporter46);
        com.google.javascript.rhino.head.IRFactory iRFactory48 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons30, errorReporter46);
        com.google.javascript.rhino.head.IRFactory iRFactory49 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons12, errorReporter46);
        com.google.javascript.rhino.head.IRFactory iRFactory50 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter46);
        compilerEnvirons0.setGenerateDebugInfo(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(errorReporter18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 170 + "'", int32 == 170);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 170 + "'", int33 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertNotNull(errorReporter46);
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        boolean boolean10 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.Parser parser11 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean12 = compilerEnvirons0.isRecordingComments();
        boolean boolean13 = compilerEnvirons0.isGenerateObserverCount();
        compilerEnvirons0.setWarnTrailingComma(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        boolean boolean18 = compilerEnvirons0.isGenerateObserverCount();
        compilerEnvirons0.setStrictMode(true);
        com.google.javascript.rhino.head.Parser parser21 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean22 = compilerEnvirons0.isIdeMode();
        int int23 = compilerEnvirons0.getOptimizationLevel();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scope12);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList14 = scriptNode7.getFunctions();
        java.lang.String str15 = scriptNode7.debugPrint();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode7.setBaseLineno((-35053676));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertNotNull(functionNodeList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "9\t  SCRIPT 10 1\n" + "'", str15, "9\t  SCRIPT 10 1\n");
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        com.google.javascript.rhino.head.Node node6 = comment4.getFirstChild();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        com.google.javascript.rhino.head.Token.CommentType commentType12 = comment11.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        int int17 = scriptNode14.getBaseLineno();
        int int18 = scriptNode14.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList22 = scriptNode20.getFunctions();
        scriptNode20.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope25 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode14.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode20, (com.google.javascript.rhino.head.Node) scope25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode28.getChildScopes();
        int int31 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node32 = scriptNode28.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot33 = scriptNode28.getAstRoot();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode14, (com.google.javascript.rhino.head.ast.Scope) scriptNode28);
        comment11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode36 = comment11.getEnclosingFunction();
        comment4.setJsDocNode(comment11);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope38 = comment11.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Comment cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNull(commentType12);
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(functionNodeList22);
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(astRoot33);
        org.junit.Assert.assertNull(functionNode36);
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setPosition((int) (byte) 10);
        int int6 = scriptNode1.getEncodedSourceEnd();
        int int7 = scriptNode1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        int int12 = scriptNode9.getBaseLineno();
        com.google.javascript.rhino.head.Node node13 = scriptNode9.getLastSibling();
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        com.google.javascript.rhino.head.ast.AstNode astNode15 = scriptNode1.getParent();
        com.google.javascript.rhino.head.ast.Scope scope17 = scriptNode1.getDefiningScope("2\t  COMMENT 3 0\n");
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(astNode15);
        org.junit.Assert.assertNull(scope17);
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setLanguageVersion((int) (byte) 100);
        compilerEnvirons0.setOptimizationLevel(0);
        compilerEnvirons0.setWarnTrailingComma(false);
        int int9 = compilerEnvirons0.getLanguageVersion();
        boolean boolean10 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean11 = compilerEnvirons0.isRecordingLocalJsDocComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons38 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray44 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        compilerEnvirons38.setActivationNames((java.util.Set<java.lang.String>) strSet45);
        boolean boolean48 = compilerEnvirons38.isGenerateDebugInfo();
        compilerEnvirons38.setOptimizationLevel((int) (short) 1);
        compilerEnvirons38.setAllowSharpComments(true);
        boolean boolean53 = compilerEnvirons38.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter54 = compilerEnvirons38.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser55 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter54);
        com.google.javascript.rhino.head.Parser parser56 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        compilerEnvirons0.setGenerateObserverCount(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertNotNull(compilerEnvirons38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(errorReporter54);
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot((-213029975));
        java.lang.String str2 = astRoot1.debugPrint();
        int int3 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator6 = astRoot5.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        java.lang.String str25 = comment23.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray26 = new com.google.javascript.rhino.head.ast.Comment[] { comment11, comment17, comment23 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet27 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet27, commentArray26);
        astRoot5.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet27);
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        int int36 = comment34.getLineno();
        com.google.javascript.rhino.head.Node node38 = comment34.setType(18);
        boolean boolean39 = comment34.hasSideEffects();
        astRoot5.addComment(comment34);
        com.google.javascript.rhino.head.Node node42 = new com.google.javascript.rhino.head.Node(14, (com.google.javascript.rhino.head.Node) comment34, (-1));
        com.google.javascript.rhino.head.ast.AstRoot astRoot43 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = astRoot43.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol46 = astRoot43.getSymbol("                                                                                                                                                                                                        ");
        node42.addChildToFront((com.google.javascript.rhino.head.Node) astRoot43);
        com.google.javascript.rhino.head.ast.Scope scope50 = new com.google.javascript.rhino.head.ast.Scope(136, 538062289);
        astRoot43.addChildToFront((com.google.javascript.rhino.head.Node) scope50);
        com.google.javascript.rhino.head.Node node52 = scope50.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            astRoot1.setLoop((com.google.javascript.rhino.head.ast.Jump) scope50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "-213029975\tSCRIPT -213029975 1\n" + "'", str2, "-213029975\tSCRIPT -213029975 1\n");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "                                                                                                                                                                                                        " + "'", str25, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(commentSet44);
        org.junit.Assert.assertNull(symbol46);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        com.google.javascript.rhino.head.ast.Scope scope1 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scope1.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        scope1.setTop(scriptNode4);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scope1.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        int int14 = comment12.getLineno();
        com.google.javascript.rhino.head.Node node16 = comment12.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        int int23 = comment21.getLineno();
        com.google.javascript.rhino.head.Node node25 = comment21.setType(18);
        comment21.removeChildren();
        com.google.javascript.rhino.head.Node node28 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope1, (com.google.javascript.rhino.head.Node) comment12, (com.google.javascript.rhino.head.Node) comment21, 15);
        com.google.javascript.rhino.head.Node node29 = scope1.getFirstChild();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap30 = scope1.getSymbolTable();
        com.google.javascript.rhino.head.ast.AstRoot astRoot31 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator32 = astRoot31.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        boolean boolean44 = comment43.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        java.lang.String str51 = comment49.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray52 = new com.google.javascript.rhino.head.ast.Comment[] { comment37, comment43, comment49 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet53 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet53, commentArray52);
        astRoot31.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet53);
        boolean boolean56 = astRoot31.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray57 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList58 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList58, symbolArray57);
        astRoot31.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList58);
        int int61 = astRoot31.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList65 = scriptNode63.getChildScopes();
        int int66 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.Node node67 = scriptNode63.getLastSibling();
        scriptNode63.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList73 = scriptNode71.getFunctions();
        scriptNode71.setPosition((int) (byte) 10);
        java.lang.String str76 = scriptNode63.toStringTree(scriptNode71);
        int int77 = scriptNode63.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot31, (com.google.javascript.rhino.head.ast.Scope) scriptNode63);
        java.lang.String str80 = astRoot31.toSource(15);
        com.google.javascript.rhino.head.Token.CommentType commentType83 = null;
        com.google.javascript.rhino.head.ast.Comment comment85 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType83, "");
        java.lang.String str87 = comment85.toSource(100);
        java.lang.String str88 = comment85.getValue();
        boolean boolean89 = comment85.hasSideEffects();
        java.lang.String str90 = comment85.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType91 = comment85.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType92 = null;
        comment85.setCommentType(commentType92);
        astRoot31.setJsDocNode(comment85);
        scope1.addChildrenToBack((com.google.javascript.rhino.head.Node) astRoot31);
        astRoot31.flattenSymbolTable(false);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap98 = astRoot31.getSymbolTable();
        java.lang.String str99 = astRoot31.getJsDoc();
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(strMap30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                                                                                                                        " + "'", str51, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(symbolArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(scopeList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(functionNodeList73);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "                                                                                                                                                                                                        " + "'", str87, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNull(commentType91);
        org.junit.Assert.assertNotNull(strMap98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = scope7.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        scope7.setTop(scriptNode10);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        scriptNode10.setBaseLineno(835353046);
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType18, "hi!");
        java.lang.String str22 = comment20.toSource(5);
        java.lang.String str24 = comment20.makeIndent(3);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = scriptNode27.getLastSibling();
        int int32 = scriptNode27.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope35 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = astRoot36.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        boolean boolean43 = comment42.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        boolean boolean49 = comment48.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        java.lang.String str56 = comment54.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray57 = new com.google.javascript.rhino.head.ast.Comment[] { comment42, comment48, comment54 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet58 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet58, commentArray57);
        astRoot36.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet58);
        boolean boolean61 = astRoot36.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode62 = astRoot36.getParent();
        astRoot36.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode27, (com.google.javascript.rhino.head.Node) scope35, (com.google.javascript.rhino.head.Node) astRoot36, 6);
        astRoot36.setLineno((int) '#');
        com.google.javascript.rhino.head.Token.CommentType commentType71 = null;
        com.google.javascript.rhino.head.ast.Comment comment73 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType71, "");
        com.google.javascript.rhino.head.Token.CommentType commentType74 = comment73.getCommentType();
        int int75 = comment73.depth();
        astRoot36.addComment(comment73);
        com.google.javascript.rhino.head.Token.CommentType commentType77 = null;
        comment73.setCommentType(commentType77);
        comment20.setJsDocNode(comment73);
        com.google.javascript.rhino.head.Token.CommentType commentType80 = null;
        comment20.setCommentType(commentType80);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons82 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean83 = compilerEnvirons82.isReservedKeywordAsIdentifier();
        boolean boolean84 = compilerEnvirons82.getWarnTrailingComma();
        compilerEnvirons82.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet87 = compilerEnvirons82.getActivationNames();
        compilerEnvirons82.setGenerateDebugInfo(true);
        compilerEnvirons82.setReservedKeywordAsIdentifier(false);
        com.google.javascript.rhino.head.IRFactory iRFactory92 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons82);
        com.google.javascript.rhino.head.ast.AstRoot astRoot96 = iRFactory92.parse("-1\tSCRIPT -1 1\n", "  {\n  }\n", 8);
        java.lang.String str97 = comment20.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot96);
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) comment20);
        java.lang.String str99 = comment20.shortName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "          hi!" + "'", str22, "          hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "      " + "'", str24, "      ");
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "                                                                                                                                                                                                        " + "'", str56, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(astNode62);
        org.junit.Assert.assertNull(commentType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(strSet87);
        org.junit.Assert.assertNotNull(astRoot96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "Comment" + "'", str99, "Comment");
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet2 = astRoot1.getComments();
        java.lang.String str3 = astRoot1.getSourceName();
        boolean boolean4 = astRoot1.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        scriptNode6.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode14.getFunctions();
        scriptNode14.setPosition((int) (byte) 10);
        java.lang.String str19 = scriptNode6.toStringTree(scriptNode14);
        int int20 = scriptNode6.getBaseLineno();
        boolean boolean21 = scriptNode6.hasConsistentReturnUsage();
        astRoot1.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode6);
        astRoot1.setBaseLineno(14);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = astRoot1.getComments();
        astRoot1.clearParentScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.putIntProp((int) (short) 1, 1);
        scriptNode27.setEncodedSource("typeof");
        com.google.javascript.rhino.head.Node node33 = scriptNode27.getLastChild();
        scriptNode27.setBaseLineno(13);
        com.google.javascript.rhino.head.Node node37 = new com.google.javascript.rhino.head.Node(875237497, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode27, 1344201075);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons38 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean39 = compilerEnvirons38.isReservedKeywordAsIdentifier();
        boolean boolean40 = compilerEnvirons38.getWarnTrailingComma();
        compilerEnvirons38.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet43 = compilerEnvirons38.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = compilerEnvirons38.getErrorReporter();
        java.lang.String[] strArray50 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        compilerEnvirons38.setActivationNames((java.util.Set<java.lang.String>) strSet51);
        boolean boolean54 = compilerEnvirons38.isGenerateDebugInfo();
        boolean boolean55 = compilerEnvirons38.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons56 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean57 = compilerEnvirons56.isReservedKeywordAsIdentifier();
        int int58 = compilerEnvirons56.getLanguageVersion();
        int int59 = compilerEnvirons56.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons60 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean61 = compilerEnvirons60.isReservedKeywordAsIdentifier();
        compilerEnvirons60.setStrictMode(true);
        compilerEnvirons60.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons66 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean67 = compilerEnvirons66.isReservedKeywordAsIdentifier();
        boolean boolean68 = compilerEnvirons66.getWarnTrailingComma();
        compilerEnvirons66.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet71 = compilerEnvirons66.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter72 = compilerEnvirons66.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory73 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons60, errorReporter72);
        com.google.javascript.rhino.head.IRFactory iRFactory74 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons56, errorReporter72);
        com.google.javascript.rhino.head.IRFactory iRFactory75 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons38, errorReporter72);
        com.google.javascript.rhino.head.ast.AstRoot astRoot79 = iRFactory75.parse("0\tSCRIPT 0 1\n", "                                ", 13);
        boolean boolean80 = astRoot79.hasChildren();
        com.google.javascript.rhino.head.ast.Scope scope81 = astRoot79.getParentScope();
        java.lang.Object obj83 = astRoot79.getProp(1836062230);
        int int84 = astRoot79.getEndLineno();
        // The following exception was thrown during execution in test generation
        try {
            int int85 = scriptNode27.getIndexForNameNode((com.google.javascript.rhino.head.Node) astRoot79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(commentSet25);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(compilerEnvirons38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(errorReporter44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 170 + "'", int58 == 170);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 170 + "'", int59 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(strSet71);
        org.junit.Assert.assertNotNull(errorReporter72);
        org.junit.Assert.assertNotNull(astRoot79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(scope81);
        org.junit.Assert.assertNull(obj83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 13 + "'", int84 == 13);
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator33 = scriptNode32.spliterator();
        com.google.javascript.rhino.head.Node node35 = scriptNode32.setType((int) '#');
        java.lang.Object obj36 = scriptNode32.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator37 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator38 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator39 = positionComparator37.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator38);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode41.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor46 = astRoot44.iterator();
        scriptNode41.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode49.getChildScopes();
        int int52 = positionComparator38.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot44, (com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scriptNode49);
        java.lang.String str54 = scriptNode32.toString();
        int int55 = scriptNode32.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator57 = scriptNode56.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        java.lang.String str64 = comment62.toSource(100);
        java.lang.String str65 = comment62.getValue();
        scriptNode56.setParent((com.google.javascript.rhino.head.ast.AstNode) comment62);
        scriptNode32.setJsDocNode(comment62);
        com.google.javascript.rhino.head.Node node68 = scriptNode32.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator69 = node68.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode72 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode72.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot75 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet76 = astRoot75.getComments();
        int int77 = astRoot75.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor78 = null;
        astRoot75.visitComments(nodeVisitor78);
        com.google.javascript.rhino.head.Node node80 = astRoot75.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet81 = astRoot75.getComments();
        com.google.javascript.rhino.head.Node node82 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode72, (com.google.javascript.rhino.head.Node) astRoot75);
        int int83 = scriptNode72.getLength();
        node68.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode72);
        java.lang.String str85 = scriptNode72.debugPrint();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(astNodeComparator39);
        org.junit.Assert.assertNotNull(nodeItor46);
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "35" + "'", str54, "35");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator57);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "                                                                                                                                                                                                        " + "'", str64, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeSpliterator69);
        org.junit.Assert.assertNull(commentSet76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNull(commentSet81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "0\tSCRIPT 0 1\n" + "'", str85, "0\tSCRIPT 0 1\n");
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope6 = astRoot0.getEnclosingScope();
        astRoot0.setEncodedSourceStart(23);
        java.lang.String str10 = astRoot0.toSource(95442629);
        com.google.javascript.rhino.head.Node node11 = astRoot0.getFirstChild();
        java.lang.String str13 = astRoot0.toSource(129);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        boolean boolean16 = compilerEnvirons14.getWarnTrailingComma();
        compilerEnvirons14.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet19 = compilerEnvirons14.getActivationNames();
        compilerEnvirons14.setGenerateDebugInfo(true);
        compilerEnvirons14.setReservedKeywordAsIdentifier(false);
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons14);
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = iRFactory24.parse("-1\tSCRIPT -1 1\n", "  {\n  }\n", 8);
        astRoot0.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot28);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator30 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator31 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator32 = positionComparator30.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator31);
        com.google.javascript.rhino.head.ast.AstRoot astRoot33 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int34 = astRoot33.getBaseLineno();
        java.lang.String str35 = astRoot33.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = astRoot36.new NodeIterator();
        int int38 = positionComparator31.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot33, (com.google.javascript.rhino.head.ast.AstNode) astRoot36);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator40 = scriptNode39.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator41 = scriptNode39.new NodeIterator();
        astRoot36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor43 = null;
        astRoot36.visitComments(nodeVisitor43);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList45 = astRoot36.getStatements();
        java.lang.String str47 = astRoot36.makeIndent(0);
        astRoot0.addChildrenToBack((com.google.javascript.rhino.head.Node) astRoot36);
        astRoot36.setInStrictMode(false);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor51 = astRoot36.iterator();
        int int52 = astRoot36.getRegexpCount();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(scope6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(astRoot28);
        org.junit.Assert.assertNotNull(astNodeComparator32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str35, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator40);
        org.junit.Assert.assertNotNull(astNodeList45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(nodeItor51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.isGenerateObserverCount();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        compilerEnvirons0.setGenerateDebugInfo(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        java.lang.String str25 = astRoot0.getEncodedSource();
        java.lang.String str26 = astRoot0.debugPrint();
        astRoot0.setRelative(25);
        int int29 = astRoot0.getAbsolutePosition();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str26, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-26) + "'", int29 == (-26));
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot6.visitComments(nodeVisitor13);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList15 = astRoot6.getStatements();
        java.lang.String str16 = astRoot6.toString();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = astRoot6.new NodeIterator();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertNotNull(astNodeList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "136" + "'", str16, "136");
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(1467292695);
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.getWarnTrailingComma();
        compilerEnvirons3.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet8 = compilerEnvirons3.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons3.getErrorReporter();
        java.lang.String[] strArray15 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons3.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser20 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter19);
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = parser20.parse("          hi!", "hi!", 2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray51 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList52 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList52, symbolArray51);
        astRoot25.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList52);
        int int55 = astRoot25.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment56 = astRoot25.getJsDocNode();
        astRoot25.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.Token.CommentType commentType61 = null;
        com.google.javascript.rhino.head.ast.Comment comment63 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType61, "");
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        comment63.setCommentType(commentType64);
        astRoot25.setJsDocNode(comment63);
        astRoot24.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot25);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet68 = astRoot24.getComments();
        astRoot24.setLineno(3);
        astRoot24.setSourceName("                                                                                                        ");
        com.google.javascript.rhino.head.Node node73 = astRoot24.getLastSibling();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(errorReporter9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertNotNull(astRoot24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(symbolArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(comment56);
        org.junit.Assert.assertNull(commentSet68);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope7 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = scope7.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        scope7.setTop(scriptNode10);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = scriptNode10.getEnclosingFunction();
        int int15 = scriptNode10.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator17 = astRoot16.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType20 = null;
        com.google.javascript.rhino.head.ast.Comment comment22 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType20, "");
        boolean boolean23 = comment22.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        java.lang.String str36 = comment34.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray37 = new com.google.javascript.rhino.head.ast.Comment[] { comment22, comment28, comment34 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet38 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet38, commentArray37);
        astRoot16.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet38);
        boolean boolean41 = astRoot16.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray42 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList43 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList43, symbolArray42);
        astRoot16.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList43);
        com.google.javascript.rhino.head.Node node46 = astRoot16.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot16, (com.google.javascript.rhino.head.ast.Scope) scriptNode48);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList54 = scriptNode52.getChildScopes();
        int int55 = scriptNode52.getBaseLineno();
        com.google.javascript.rhino.head.Node node56 = scriptNode52.getLastSibling();
        scriptNode52.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode59.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode60);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList62 = scriptNode60.getFunctions();
        scriptNode60.setPosition((int) (byte) 10);
        java.lang.String str65 = scriptNode52.toStringTree(scriptNode60);
        int int66 = scriptNode52.getBaseLineno();
        com.google.javascript.rhino.head.Node node68 = scriptNode52.setType((int) (byte) -1);
        java.lang.String str69 = astRoot16.toStringTree(scriptNode52);
        scriptNode10.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode52);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor71 = scriptNode10.iterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj75 = scriptNode74.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode76.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode77);
        int int79 = scriptNode76.getEndLineno();
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode74, (com.google.javascript.rhino.head.Node) scriptNode76);
        scriptNode10.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = scriptNode74.getRegexpString(423587025);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNull(functionNode14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "                                                                                                                                                                                                        " + "'", str36, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(symbolArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNull(scopeList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(functionNodeList62);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(nodeItor71);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(842975161);
        com.google.javascript.rhino.head.ast.Scope scope3 = scriptNode1.getDefiningScope("        ");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = scope3.toSource(451476227);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scope3);
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.getWarnTrailingComma();
        compilerEnvirons3.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet8 = compilerEnvirons3.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons3.getErrorReporter();
        java.lang.String[] strArray15 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons3.getErrorReporter();
        compilerEnvirons0.setErrorReporter(errorReporter19);
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean25 = compilerEnvirons0.reportWarningAsError();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(errorReporter9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        astRoot0.putIntProp(24, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int9 = astRoot0.getExistingIntProp(898837166);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        com.google.javascript.rhino.head.Node node30 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        scriptNode36.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList46 = scriptNode44.getFunctions();
        scriptNode44.setPosition((int) (byte) 10);
        java.lang.String str49 = scriptNode36.toStringTree(scriptNode44);
        int int50 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node52 = scriptNode36.setType((int) (byte) -1);
        java.lang.String str53 = astRoot0.toStringTree(scriptNode36);
        java.lang.String str55 = scriptNode36.toSource((-306271829));
        com.google.javascript.rhino.head.ast.AstRoot astRoot56 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet57 = astRoot56.getComments();
        int int58 = astRoot56.getEndLineno();
        com.google.javascript.rhino.head.Node node60 = astRoot56.setType((int) (short) 10);
        scriptNode36.addChildrenToBack((com.google.javascript.rhino.head.Node) astRoot56);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator62 = scriptNode36.new NodeIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump63 = scriptNode36.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(functionNodeList46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "{\n}\n" + "'", str55, "{\n}\n");
        org.junit.Assert.assertNull(commentSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        scriptNode2.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap8 = scriptNode7.getSymbolTable();
        scriptNode2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList10 = scriptNode2.getStatements();
        com.google.javascript.rhino.head.ast.Scope scope11 = scriptNode2.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int13 = astRoot12.getBaseLineno();
        java.lang.String str14 = astRoot12.debugPrint();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList15 = astRoot12.getSymbols();
        com.google.javascript.rhino.head.Node node17 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scope11, (com.google.javascript.rhino.head.Node) astRoot12, 0);
        java.lang.String str18 = astRoot12.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        int int23 = scriptNode20.getBaseLineno();
        int int24 = scriptNode20.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList28 = scriptNode26.getFunctions();
        scriptNode26.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope31 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode20.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode26, (com.google.javascript.rhino.head.Node) scope31);
        scriptNode26.setEncodedSourceEnd(18);
        java.lang.String str35 = scriptNode26.getJsDoc();
        int int36 = scriptNode26.depth();
        astRoot12.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.lang.String str38 = astRoot12.debugPrint();
        com.google.javascript.rhino.head.ast.Scope scope39 = null;
        astRoot12.setParentScope(scope39);
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNotNull(astNodeList10);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str14, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNotNull(symbolList15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(functionNodeList28);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "-2\t    SCRIPT -11 1\n" + "'", str38, "-2\t    SCRIPT -11 1\n");
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray30 = new com.google.javascript.rhino.head.ast.Comment[] { comment15, comment21, comment27 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet31, commentArray30);
        astRoot9.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet31);
        boolean boolean34 = astRoot9.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray35 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList36 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList36, symbolArray35);
        astRoot9.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList36);
        com.google.javascript.rhino.head.Node node39 = astRoot9.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot9, (com.google.javascript.rhino.head.ast.Scope) scriptNode41);
        int int44 = astRoot9.depth();
        com.google.javascript.rhino.head.ast.Comment comment45 = astRoot9.getJsDocNode();
        astRoot5.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot9);
        astRoot5.checkParentLinks();
        boolean boolean48 = astRoot5.isInStrictMode();
        astRoot5.setInStrictMode(true);
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(symbolArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(comment45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node(888899372);
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        java.util.Set<java.lang.String> strSet18 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setStrictMode(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        boolean boolean23 = compilerEnvirons21.getWarnTrailingComma();
        compilerEnvirons21.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet26 = compilerEnvirons21.getActivationNames();
        compilerEnvirons21.setGenerateDebugInfo(true);
        compilerEnvirons21.setGenerateDebugInfo(true);
        com.google.javascript.rhino.head.IRFactory iRFactory31 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons32 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean33 = compilerEnvirons32.isReservedKeywordAsIdentifier();
        boolean boolean34 = compilerEnvirons32.getWarnTrailingComma();
        compilerEnvirons32.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet37 = compilerEnvirons32.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter38 = compilerEnvirons32.getErrorReporter();
        boolean boolean39 = compilerEnvirons32.isRecordingComments();
        compilerEnvirons32.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean43 = compilerEnvirons42.isReservedKeywordAsIdentifier();
        int int44 = compilerEnvirons42.getLanguageVersion();
        compilerEnvirons42.setLanguageVersion((int) (byte) 100);
        boolean boolean47 = compilerEnvirons42.isAllowMemberExprAsFunctionName();
        compilerEnvirons42.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons50 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray56 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        compilerEnvirons50.setActivationNames((java.util.Set<java.lang.String>) strSet57);
        boolean boolean60 = compilerEnvirons50.isGenerateDebugInfo();
        compilerEnvirons50.setOptimizationLevel((int) (short) 1);
        compilerEnvirons50.setAllowSharpComments(true);
        boolean boolean65 = compilerEnvirons50.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter66 = compilerEnvirons50.getErrorReporter();
        compilerEnvirons42.setErrorReporter(errorReporter66);
        compilerEnvirons32.setErrorReporter(errorReporter66);
        com.google.javascript.rhino.head.IRFactory iRFactory69 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter66);
        com.google.javascript.rhino.head.IRFactory iRFactory70 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter66);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter66.warning("                    ", "$1", (-602720490), "0\tCOMMENT 0 100\n", (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(compilerEnvirons32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(errorReporter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 170 + "'", int44 == 170);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons50);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(errorReporter66);
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        com.google.javascript.rhino.head.ErrorReporter errorReporter4 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory5 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter4);
        boolean boolean6 = compilerEnvirons0.isRecordingComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        int int4 = compilerEnvirons0.getOptimizationLevel();
        int int5 = compilerEnvirons0.getLanguageVersion();
        boolean boolean6 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setIdeMode(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        compilerEnvirons9.setStrictMode(true);
        int int13 = compilerEnvirons9.getOptimizationLevel();
        int int14 = compilerEnvirons9.getLanguageVersion();
        compilerEnvirons9.setXmlAvailable(true);
        boolean boolean17 = compilerEnvirons9.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        compilerEnvirons18.setStrictMode(true);
        compilerEnvirons18.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        boolean boolean26 = compilerEnvirons24.getWarnTrailingComma();
        compilerEnvirons24.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet29 = compilerEnvirons24.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter30 = compilerEnvirons24.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory31 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter30);
        compilerEnvirons9.setErrorReporter(errorReporter30);
        com.google.javascript.rhino.head.Parser parser33 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter30);
        // The following exception was thrown during execution in test generation
        try {
            errorReporter30.error("        ", "                              {\n                              }\n", 22, "", 7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 170 + "'", int5 == 170);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 170 + "'", int14 == 170);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(errorReporter30);
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        boolean boolean8 = compilerEnvirons0.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        boolean boolean11 = compilerEnvirons9.getWarnTrailingComma();
        compilerEnvirons9.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet14 = compilerEnvirons9.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter15 = compilerEnvirons9.getErrorReporter();
        java.lang.String[] strArray21 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        compilerEnvirons9.setActivationNames((java.util.Set<java.lang.String>) strSet22);
        boolean boolean25 = compilerEnvirons9.isGenerateDebugInfo();
        boolean boolean26 = compilerEnvirons9.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons27 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean28 = compilerEnvirons27.isReservedKeywordAsIdentifier();
        int int29 = compilerEnvirons27.getLanguageVersion();
        int int30 = compilerEnvirons27.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean32 = compilerEnvirons31.isReservedKeywordAsIdentifier();
        compilerEnvirons31.setStrictMode(true);
        compilerEnvirons31.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons37 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean38 = compilerEnvirons37.isReservedKeywordAsIdentifier();
        boolean boolean39 = compilerEnvirons37.getWarnTrailingComma();
        compilerEnvirons37.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet42 = compilerEnvirons37.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = compilerEnvirons37.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons31, errorReporter43);
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons27, errorReporter43);
        com.google.javascript.rhino.head.IRFactory iRFactory46 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons9, errorReporter43);
        boolean boolean47 = compilerEnvirons9.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons48 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean49 = compilerEnvirons48.isReservedKeywordAsIdentifier();
        compilerEnvirons48.setStrictMode(true);
        int int52 = compilerEnvirons48.getOptimizationLevel();
        java.lang.String[] strArray73 = new java.lang.String[] { "-1\tSCRIPT -1 1\n", "                    ", "35\t  COMMENT 36 2\n", "typeof", "$0", "                    ", "Comment", "                    {\n                    }\n", "35\t  COMMENT 36 2\n", "                      ", "                                                                                                        ", "136", "$0", "                    {\n                    }\n", "                                                                                                        ", "{\n}\n", "ScriptNode", "                      ", "                      ", "typeof" };
        java.util.LinkedHashSet<java.lang.String> strSet74 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet74, strArray73);
        compilerEnvirons48.setActivationNames((java.util.Set<java.lang.String>) strSet74);
        compilerEnvirons9.setActivationNames((java.util.Set<java.lang.String>) strSet74);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet74);
        compilerEnvirons0.setGeneratingSource(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(errorReporter15);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 170 + "'", int29 == 170);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 170 + "'", int30 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(errorReporter43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean12 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons13 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray19 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        compilerEnvirons13.setActivationNames((java.util.Set<java.lang.String>) strSet20);
        boolean boolean23 = compilerEnvirons13.isGenerateDebugInfo();
        boolean boolean24 = compilerEnvirons13.isGeneratingSource();
        compilerEnvirons13.setIdeMode(false);
        java.util.Set<java.lang.String> strSet27 = compilerEnvirons13.getActivationNames();
        compilerEnvirons0.setActivationNames(strSet27);
        boolean boolean29 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons0.isGenerateDebugInfo();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        int int4 = compilerEnvirons0.getOptimizationLevel();
        int int5 = compilerEnvirons0.getLanguageVersion();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean8 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        compilerEnvirons9.setStrictMode(true);
        compilerEnvirons9.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean16 = compilerEnvirons15.isReservedKeywordAsIdentifier();
        boolean boolean17 = compilerEnvirons15.getWarnTrailingComma();
        compilerEnvirons15.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet20 = compilerEnvirons15.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter21 = compilerEnvirons15.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory22 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons9, errorReporter21);
        compilerEnvirons0.setErrorReporter(errorReporter21);
        compilerEnvirons0.setWarnTrailingComma(true);
        compilerEnvirons0.setGenerateDebugInfo(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 170 + "'", int5 == 170);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(errorReporter21);
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        java.util.Set<java.lang.String> strSet18 = compilerEnvirons0.getActivationNames();
        boolean boolean19 = compilerEnvirons0.isRecordingComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory6 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet9 = astRoot8.getComments();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator15 = scriptNode14.spliterator();
        com.google.javascript.rhino.head.Node node17 = scriptNode14.setType((int) '#');
        boolean boolean18 = scriptNode14.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.Node node19 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) astRoot8, (com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) scriptNode14);
        com.google.javascript.rhino.head.Node node20 = iRFactory6.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        int int21 = scriptNode11.getEndLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        com.google.javascript.rhino.head.Node node28 = scriptNode24.getLastSibling();
        int int29 = scriptNode24.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = scriptNode24.new NodeIterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node48 = scriptNode32.setType((int) (byte) -1);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(9, (com.google.javascript.rhino.head.Node) scriptNode24, node48);
        scriptNode24.setEncodedSourceStart(100);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode11, (com.google.javascript.rhino.head.ast.Scope) scriptNode24);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator53 = scriptNode11.new NodeIterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot54 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator55 = astRoot54.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        boolean boolean61 = comment60.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        boolean boolean67 = comment66.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType70 = null;
        com.google.javascript.rhino.head.ast.Comment comment72 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType70, "");
        java.lang.String str74 = comment72.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray75 = new com.google.javascript.rhino.head.ast.Comment[] { comment60, comment66, comment72 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet76 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet76, commentArray75);
        astRoot54.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet76);
        boolean boolean79 = astRoot54.isInStrictMode();
        scriptNode11.target = astRoot54;
        scriptNode11.putIntProp((-866282510), (-1497029074));
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(commentSet9);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "                                                                                                                                                                                                        " + "'", str74, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        boolean boolean7 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean8 = compilerEnvirons0.isRecordingComments();
        boolean boolean9 = compilerEnvirons0.isGeneratingSource();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        boolean boolean12 = compilerEnvirons10.getWarnTrailingComma();
        compilerEnvirons10.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet15 = compilerEnvirons10.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons10.getErrorReporter();
        boolean boolean17 = compilerEnvirons10.isRecordingComments();
        compilerEnvirons10.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        int int22 = compilerEnvirons20.getLanguageVersion();
        int int23 = compilerEnvirons20.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        compilerEnvirons24.setStrictMode(true);
        compilerEnvirons24.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons30 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean31 = compilerEnvirons30.isReservedKeywordAsIdentifier();
        boolean boolean32 = compilerEnvirons30.getWarnTrailingComma();
        compilerEnvirons30.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet35 = compilerEnvirons30.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter36 = compilerEnvirons30.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter36);
        com.google.javascript.rhino.head.IRFactory iRFactory38 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons20, errorReporter36);
        com.google.javascript.rhino.head.IRFactory iRFactory39 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10, errorReporter36);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons40 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray46 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        compilerEnvirons40.setActivationNames((java.util.Set<java.lang.String>) strSet47);
        boolean boolean50 = compilerEnvirons40.getWarnTrailingComma();
        com.google.javascript.rhino.head.ErrorReporter errorReporter51 = compilerEnvirons40.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser52 = new com.google.javascript.rhino.head.Parser(compilerEnvirons10, errorReporter51);
        compilerEnvirons0.setErrorReporter(errorReporter51);
        compilerEnvirons0.setGeneratingSource(false);
        compilerEnvirons0.setGenerateDebugInfo(true);
        com.google.javascript.rhino.head.IRFactory iRFactory58 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 170 + "'", int22 == 170);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 170 + "'", int23 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(errorReporter36);
        org.junit.Assert.assertNotNull(compilerEnvirons40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(errorReporter51);
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        scriptNode4.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope11 = scriptNode4.getEnclosingScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        int int16 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode13.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        java.lang.String str23 = scriptNode19.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode13.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode19, (com.google.javascript.rhino.head.Node) scriptNode25);
        scriptNode13.setEncodedSourceEnd(170);
        int int29 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) scope11, (com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.lang.String str30 = scriptNode13.getNextTempName();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(scope11);
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "$0" + "'", str30, "$0");
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        com.google.javascript.rhino.head.Node node2 = com.google.javascript.rhino.head.Node.newNumber((double) (-954561564));
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot(1499437464);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator7 = scriptNode6.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = scriptNode6.new NodeIterator();
        java.lang.String str9 = scriptNode6.getNextTempName();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor10 = scriptNode6.iterator();
        com.google.javascript.rhino.head.Node node11 = new com.google.javascript.rhino.head.Node(21, (com.google.javascript.rhino.head.Node) astRoot5, (com.google.javascript.rhino.head.Node) scriptNode6);
        node2.addChildrenToFront(node11);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        java.lang.String str34 = comment32.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray35 = new com.google.javascript.rhino.head.ast.Comment[] { comment20, comment26, comment32 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet36, commentArray35);
        astRoot14.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet36);
        boolean boolean39 = astRoot14.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray40 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList41 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList41, symbolArray40);
        astRoot14.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList41);
        int int44 = astRoot14.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator46 = scriptNode45.spliterator();
        com.google.javascript.rhino.head.Node node48 = scriptNode45.setType((int) '#');
        java.lang.Object obj49 = scriptNode45.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator50 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator51 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator52 = positionComparator50.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator51);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode54.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot57 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator58 = astRoot57.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor59 = astRoot57.iterator();
        scriptNode54.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot57);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode61 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode61.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode62);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList64 = scriptNode62.getChildScopes();
        int int65 = positionComparator51.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot57, (com.google.javascript.rhino.head.ast.AstNode) scriptNode62);
        com.google.javascript.rhino.head.Node node66 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot14, (com.google.javascript.rhino.head.Node) scriptNode45, (com.google.javascript.rhino.head.Node) scriptNode62);
        com.google.javascript.rhino.head.Node node68 = scriptNode45.setType((-110742292));
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node((-1222715009), node11, node68, (-929928321));
        node68.removeProp((-954561564));
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeSpliterator7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$0" + "'", str9, "$0");
        org.junit.Assert.assertNotNull(nodeItor10);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "                                                                                                                                                                                                        " + "'", str34, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(symbolArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator46);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(astNodeComparator52);
        org.junit.Assert.assertNotNull(nodeItor59);
        org.junit.Assert.assertNull(scopeList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        com.google.javascript.rhino.head.IRFactory iRFactory10 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean12 = compilerEnvirons11.isReservedKeywordAsIdentifier();
        boolean boolean13 = compilerEnvirons11.getWarnTrailingComma();
        compilerEnvirons11.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet16 = compilerEnvirons11.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter17 = compilerEnvirons11.getErrorReporter();
        boolean boolean18 = compilerEnvirons11.isRecordingComments();
        compilerEnvirons11.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        int int23 = compilerEnvirons21.getLanguageVersion();
        compilerEnvirons21.setLanguageVersion((int) (byte) 100);
        boolean boolean26 = compilerEnvirons21.isAllowMemberExprAsFunctionName();
        compilerEnvirons21.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons29 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray35 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        compilerEnvirons29.setActivationNames((java.util.Set<java.lang.String>) strSet36);
        boolean boolean39 = compilerEnvirons29.isGenerateDebugInfo();
        compilerEnvirons29.setOptimizationLevel((int) (short) 1);
        compilerEnvirons29.setAllowSharpComments(true);
        boolean boolean44 = compilerEnvirons29.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter45 = compilerEnvirons29.getErrorReporter();
        compilerEnvirons21.setErrorReporter(errorReporter45);
        compilerEnvirons11.setErrorReporter(errorReporter45);
        com.google.javascript.rhino.head.IRFactory iRFactory48 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter45);
        boolean boolean49 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean50 = compilerEnvirons0.isRecordingLocalJsDocComments();
        boolean boolean51 = compilerEnvirons0.reportWarningAsError();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(errorReporter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 170 + "'", int23 == 170);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(errorReporter45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator3 = positionComparator1.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int5 = astRoot4.getBaseLineno();
        java.lang.String str6 = astRoot4.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        int int9 = positionComparator2.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot4, (com.google.javascript.rhino.head.ast.AstNode) astRoot7);
        java.lang.String str11 = astRoot4.makeIndent(16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        int int16 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode13.getLastSibling();
        java.lang.String str19 = scriptNode13.toSource((int) (short) -1);
        astRoot4.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        com.google.javascript.rhino.head.ast.Scope scope21 = scriptNode13.getEnclosingScope();
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        astRoot22.setInStrictMode(false);
        astRoot22.putIntProp(0, (int) (byte) 100);
        scope21.addChild((com.google.javascript.rhino.head.ast.AstNode) astRoot22);
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator58 = scope21.new NodeIterator();
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scope21);
        com.google.javascript.rhino.head.ast.AstRoot astRoot60 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator61 = astRoot60.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType64 = null;
        com.google.javascript.rhino.head.ast.Comment comment66 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType64, "");
        boolean boolean67 = comment66.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType70 = null;
        com.google.javascript.rhino.head.ast.Comment comment72 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType70, "");
        boolean boolean73 = comment72.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType76 = null;
        com.google.javascript.rhino.head.ast.Comment comment78 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType76, "");
        java.lang.String str80 = comment78.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray81 = new com.google.javascript.rhino.head.ast.Comment[] { comment66, comment72, comment78 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet82 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet82, commentArray81);
        astRoot60.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet82);
        boolean boolean85 = astRoot60.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode86 = astRoot60.getParent();
        java.lang.String str87 = astRoot60.debugPrint();
        // The following exception was thrown during execution in test generation
        try {
            scope21.setJumpStatement((com.google.javascript.rhino.head.ast.Jump) astRoot60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str6, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "                                " + "'", str11, "                                ");
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "{\n}\n" + "'", str19, "{\n}\n");
        org.junit.Assert.assertNotNull(scope21);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "                                                                                                                                                                                                        " + "'", str80, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(astNode86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str87, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.getWarnTrailingComma();
        compilerEnvirons3.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet8 = compilerEnvirons3.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons3.getErrorReporter();
        java.lang.String[] strArray15 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons3.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser20 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter19);
        compilerEnvirons0.setRecordingComments(true);
        compilerEnvirons0.setGenerateObserverCount(true);
        boolean boolean25 = compilerEnvirons0.recoverFromErrors();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(errorReporter9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList34 = scriptNode32.getFunctions();
        scriptNode32.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode26.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scope37);
        scriptNode32.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node41 = iRFactory24.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory44 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons42, errorReporter43);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        int int49 = scriptNode46.getBaseLineno();
        int int50 = scriptNode46.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList54 = scriptNode52.getFunctions();
        scriptNode52.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope57 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode46.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode52, (com.google.javascript.rhino.head.Node) scope57);
        scriptNode52.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node61 = iRFactory44.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        scriptNode32.setTop(scriptNode52);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode32, 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode66);
        com.google.javascript.rhino.head.Node node68 = scriptNode8.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode70.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList73 = scriptNode71.getChildScopes();
        int int74 = scriptNode71.getBaseLineno();
        com.google.javascript.rhino.head.Node node75 = scriptNode71.getLastSibling();
        scriptNode71.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode79);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList81 = scriptNode79.getFunctions();
        scriptNode79.setPosition((int) (byte) 10);
        java.lang.String str84 = scriptNode71.toStringTree(scriptNode79);
        int int85 = scriptNode71.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode87.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope90 = scriptNode87.getParentScope();
        scriptNode71.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode87);
        java.lang.Object obj92 = scriptNode87.getCompilerData();
        scriptNode8.putProp(12, (java.lang.Object) scriptNode87);
        int int94 = scriptNode87.getBaseLineno();
        int int95 = scriptNode87.depth();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator96 = scriptNode87.new NodeIterator();
        java.lang.Class<?> wildcardClass97 = nodeIterator96.getClass();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(functionNodeList34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(functionNodeList54);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(scopeList73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(functionNodeList81);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(scope90);
        org.junit.Assert.assertNull(obj92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = scriptNode1.new NodeIterator();
        java.lang.String str4 = scriptNode1.getNextTempName();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor5 = scriptNode1.iterator();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor8 = astRoot6.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor9 = null;
        astRoot6.visitComments(nodeVisitor9);
        astRoot6.setInStrictMode(false);
        int int13 = astRoot6.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode1, (com.google.javascript.rhino.head.ast.Scope) astRoot6);
        int int17 = astRoot6.getIntProp(14, 20);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        int int21 = scriptNode18.getEndLineno();
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode18.setParentScope(scope22);
        java.lang.String str24 = scriptNode18.debugPrint();
        java.lang.String str25 = scriptNode18.getSourceName();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType28, "hi!");
        java.lang.String str32 = comment30.toSource(0);
        java.lang.String str33 = comment30.shortName();
        boolean boolean34 = comment30.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator35 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator36 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator37 = positionComparator35.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator36);
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int39 = astRoot38.getBaseLineno();
        java.lang.String str40 = astRoot38.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot41 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator42 = astRoot41.new NodeIterator();
        int int43 = positionComparator36.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot38, (com.google.javascript.rhino.head.ast.AstNode) astRoot41);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator45 = scriptNode44.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = scriptNode44.new NodeIterator();
        astRoot41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        com.google.javascript.rhino.head.Node node48 = scriptNode44.getFirstChild();
        comment30.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = scriptNode44.getTop();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((-17), (com.google.javascript.rhino.head.Node) astRoot6, (com.google.javascript.rhino.head.Node) scriptNode18, (com.google.javascript.rhino.head.Node) scriptNode50);
        scriptNode18.setLineno((-447184571));
        java.lang.String str55 = scriptNode18.toSource(10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode56.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode57);
        scriptNode57.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap63 = scriptNode62.getSymbolTable();
        scriptNode57.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode62);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList65 = scriptNode57.getStatements();
        int int66 = scriptNode57.getFunctionCount();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode18.setJumpStatement((com.google.javascript.rhino.head.ast.Jump) scriptNode57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "$0" + "'", str4, "$0");
        org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "-1\tSCRIPT -1 1\n-1\t  SCRIPT 0 1\n" + "'", str24, "-1\tSCRIPT -1 1\n-1\t  SCRIPT 0 1\n");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Comment" + "'", str33, "Comment");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(astNodeComparator37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str40, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator45);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(scriptNode50);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "                    {\n                      {\n                      }\n                    }\n" + "'", str55, "                    {\n                      {\n                      }\n                    }\n");
        org.junit.Assert.assertNull(strMap63);
        org.junit.Assert.assertNotNull(astNodeList65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getParamCount();
        java.lang.String str2 = astRoot0.getJsDoc();
        java.lang.String str3 = astRoot0.getNextTempName();
        com.google.javascript.rhino.head.ast.Symbol symbol5 = astRoot0.getSymbol("                          ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int7 = astRoot6.getParamCount();
        java.lang.String str8 = astRoot6.getJsDoc();
        java.lang.String str9 = astRoot6.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = astRoot6.getTop();
        boolean boolean11 = astRoot6.isInStrictMode();
        int int12 = astRoot6.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment13 = astRoot6.getJsDocNode();
        java.lang.String str14 = astRoot6.debugPrint();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) astRoot6);
        astRoot6.setSourceName("-1\tSCRIPT -1 1\n1\t  LSH 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "$0" + "'", str3, "$0");
        org.junit.Assert.assertNull(symbol5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "$0" + "'", str9, "$0");
        org.junit.Assert.assertNotNull(scriptNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(comment13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str14, "-1\tSCRIPT -1 1\n");
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        java.lang.String str16 = scriptNode12.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode6.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode12, (com.google.javascript.rhino.head.Node) scriptNode18);
        int int20 = scriptNode12.getType();
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        int int22 = scriptNode12.getEncodedSourceEnd();
        scriptNode12.clearParentScope();
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 136 + "'", int20 == 136);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        java.lang.String str7 = scriptNode1.toSource((int) (short) -1);
        int int8 = scriptNode1.getLength();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = scriptNode1.getTop();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        int int15 = scriptNode11.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList19 = scriptNode17.getFunctions();
        scriptNode17.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope22 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode11.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode17, (com.google.javascript.rhino.head.Node) scope22);
        scriptNode17.setEncodedSourceEnd(18);
        java.lang.String str26 = scriptNode17.getJsDoc();
        int int27 = scriptNode17.getParamCount();
        scriptNode9.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode17);
        com.google.javascript.rhino.head.ast.Scope scope29 = scriptNode17.getParentScope();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{\n}\n" + "'", str7, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(scriptNode9);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(functionNodeList19);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(scope29);
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setEncodedSourceStart((int) 'a');
        java.lang.String str6 = scriptNode1.shortName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        scriptNode9.setBaseLineno(18);
        scriptNode9.setEndLineno(26);
        com.google.javascript.rhino.head.Node node16 = scriptNode9.getLastSibling();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(1275261773, (com.google.javascript.rhino.head.Node) scriptNode9, 4);
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        int int20 = scriptNode1.getLineno();
        scriptNode1.setRelative(13);
        com.google.javascript.rhino.head.ast.AstRoot astRoot23 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str25 = astRoot23.toSource((int) '4');
        int int28 = astRoot23.getIntProp(133136743, 1024831035);
        scriptNode1.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot23);
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ScriptNode" + "'", str6, "ScriptNode");
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 18 + "'", int20 == 18);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1024831035 + "'", int28 == 1024831035);
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.hasChildren();
        int int26 = astRoot0.getRegexpCount();
        astRoot0.checkParentLinks();
        java.lang.String str28 = astRoot0.getEncodedSource();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        int int7 = scriptNode2.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope10 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        boolean boolean18 = comment17.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        com.google.javascript.rhino.head.ast.Comment comment23 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType21, "");
        boolean boolean24 = comment23.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType27 = null;
        com.google.javascript.rhino.head.ast.Comment comment29 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType27, "");
        java.lang.String str31 = comment29.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray32 = new com.google.javascript.rhino.head.ast.Comment[] { comment17, comment23, comment29 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet33 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet33, commentArray32);
        astRoot11.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet33);
        boolean boolean36 = astRoot11.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode37 = astRoot11.getParent();
        astRoot11.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node41 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) scope10, (com.google.javascript.rhino.head.Node) astRoot11, 6);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode2.visit(nodeVisitor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "                                                                                                                                                                                                        " + "'", str31, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(astNode37);
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.lang.String str48 = astRoot0.getSourceName();
        int int49 = astRoot0.getFunctionCount();
        int int50 = astRoot0.getLineno();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        com.google.javascript.rhino.head.Node node23 = scriptNode17.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode24.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList27 = scriptNode25.getChildScopes();
        int int28 = scriptNode25.getBaseLineno();
        com.google.javascript.rhino.head.Node node29 = scriptNode25.getLastSibling();
        scriptNode25.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode33.getFunctions();
        scriptNode33.setPosition((int) (byte) 10);
        java.lang.String str38 = scriptNode25.toStringTree(scriptNode33);
        int int39 = scriptNode25.getBaseLineno();
        com.google.javascript.rhino.head.Node node41 = scriptNode25.setType((int) (byte) -1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor42 = scriptNode25.iterator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator43 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator44 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator45 = positionComparator43.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator44);
        com.google.javascript.rhino.head.ast.AstRoot astRoot46 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int47 = astRoot46.getBaseLineno();
        java.lang.String str48 = astRoot46.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot49 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator50 = astRoot49.new NodeIterator();
        int int51 = positionComparator44.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot46, (com.google.javascript.rhino.head.ast.AstNode) astRoot49);
        boolean boolean52 = astRoot46.isInStrictMode();
        scriptNode25.addChildToFront((com.google.javascript.rhino.head.Node) astRoot46);
        com.google.javascript.rhino.head.Node node54 = scriptNode25.getNext();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode56.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode57);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList59 = scriptNode57.getChildScopes();
        int int60 = scriptNode57.getBaseLineno();
        com.google.javascript.rhino.head.Node node61 = scriptNode57.getLastSibling();
        scriptNode57.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode64.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode65);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList67 = scriptNode65.getFunctions();
        scriptNode65.setPosition((int) (byte) 10);
        java.lang.String str70 = scriptNode57.toStringTree(scriptNode65);
        int int71 = scriptNode57.getBaseLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode73.removeProp(10);
        com.google.javascript.rhino.head.ast.Scope scope76 = scriptNode73.getParentScope();
        scriptNode57.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode73);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray79 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList80 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList80, symbolArray79);
        scriptNode78.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList80);
        com.google.javascript.rhino.head.ast.AstRoot astRoot83 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int84 = astRoot83.getParamCount();
        int int85 = astRoot83.getRegexpCount();
        scriptNode78.addChildToBack((com.google.javascript.rhino.head.Node) astRoot83);
        java.lang.String str87 = astRoot83.getSourceName();
        astRoot83.setEncodedSourceEnd(5);
        int int90 = scriptNode73.compareTo((com.google.javascript.rhino.head.ast.AstNode) astRoot83);
        com.google.javascript.rhino.head.Node node91 = astRoot83.target;
        astRoot83.setRelative((-505759099));
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList94 = astRoot83.getSymbols();
        boolean boolean95 = astRoot83.isInStrictMode();
        int int96 = astRoot83.getLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode17, (com.google.javascript.rhino.head.ast.Scope) astRoot83);
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(scopeList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeItor42);
        org.junit.Assert.assertNotNull(astNodeComparator45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str48, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(scopeList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(functionNodeList67);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNull(scope76);
        org.junit.Assert.assertNotNull(symbolArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(str87);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1604554507 + "'", int90 == 1604554507);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNotNull(symbolList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator33 = scriptNode32.spliterator();
        com.google.javascript.rhino.head.Node node35 = scriptNode32.setType((int) '#');
        java.lang.Object obj36 = scriptNode32.getCompilerData();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator37 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator38 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator39 = positionComparator37.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator38);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode41.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor46 = astRoot44.iterator();
        scriptNode41.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode48.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList51 = scriptNode49.getChildScopes();
        int int52 = positionComparator38.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot44, (com.google.javascript.rhino.head.ast.AstNode) scriptNode49);
        com.google.javascript.rhino.head.Node node53 = new com.google.javascript.rhino.head.Node(3, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) scriptNode49);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode54.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode55);
        scriptNode55.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap61 = scriptNode60.getSymbolTable();
        scriptNode55.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode60);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList63 = scriptNode55.getStatements();
        int int64 = scriptNode55.getFunctionCount();
        int int65 = scriptNode55.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode32, (com.google.javascript.rhino.head.ast.Scope) scriptNode55);
        scriptNode32.clearParentScope();
        com.google.javascript.rhino.head.Node node68 = scriptNode32.getLastSibling();
        java.lang.String str70 = scriptNode32.toSource(0);
        int int71 = scriptNode32.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Token.CommentType commentType74 = null;
        com.google.javascript.rhino.head.ast.Comment comment76 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType74, "");
        boolean boolean77 = comment76.hasSideEffects();
        int int78 = comment76.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType79 = comment76.getCommentType();
        java.lang.String str81 = comment76.toSource((int) (short) 100);
        int int82 = scriptNode32.compareTo((com.google.javascript.rhino.head.ast.AstNode) comment76);
        boolean boolean83 = comment76.hasSideEffects();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator33);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(astNodeComparator39);
        org.junit.Assert.assertNotNull(nodeItor46);
        org.junit.Assert.assertNull(scopeList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNull(strMap61);
        org.junit.Assert.assertNotNull(astNodeList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "{\n}\n" + "'", str70, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNull(commentType79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "                                                                                                                                                                                                        " + "'", str81, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = scriptNode1.new NodeIterator();
        int int8 = scriptNode1.getLineno();
        scriptNode1.setEncodedSourceEnd((int) (byte) -1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap11 = scriptNode1.getSymbolTable();
        scriptNode1.setEncodedSource("typeof");
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(strMap11);
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType28, "hi!");
        astRoot0.addComment(comment30);
        astRoot0.setEncodedSource("typeof");
        java.lang.String str35 = astRoot0.toSource(37212131);
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = astRoot36.getComments();
        int int38 = astRoot36.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor39 = null;
        astRoot36.visitComments(nodeVisitor39);
        com.google.javascript.rhino.head.Node node41 = astRoot36.getFirstChild();
        com.google.javascript.rhino.head.ast.AstRoot astRoot42 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        com.google.javascript.rhino.head.Token.CommentType commentType48 = comment47.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = null;
        com.google.javascript.rhino.head.ast.Comment comment53 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType51, "");
        boolean boolean54 = comment53.hasSideEffects();
        int int55 = comment53.getLineno();
        com.google.javascript.rhino.head.Node node57 = comment53.setType(18);
        comment53.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType61 = null;
        com.google.javascript.rhino.head.ast.Comment comment63 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType61, "");
        boolean boolean64 = comment63.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType65 = null;
        comment63.setCommentType(commentType65);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator68 = scriptNode67.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType71 = null;
        com.google.javascript.rhino.head.ast.Comment comment73 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType71, "");
        java.lang.String str75 = comment73.toSource(100);
        java.lang.String str76 = comment73.getValue();
        scriptNode67.setParent((com.google.javascript.rhino.head.ast.AstNode) comment73);
        com.google.javascript.rhino.head.ast.Comment[] commentArray78 = new com.google.javascript.rhino.head.ast.Comment[] { comment47, comment53, comment63, comment73 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet79 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet79, commentArray78);
        astRoot42.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet79);
        astRoot36.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet79);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet79);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = astRoot0.getParamOrVarName((-685090541));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(commentSet37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(commentType48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator68);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "                                                                                                                                                                                                        " + "'", str75, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(commentArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol3 = astRoot0.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType6, "hi!");
        astRoot0.addChildrenToFront((com.google.javascript.rhino.head.Node) comment8);
        boolean boolean10 = astRoot0.hasSideEffects();
        boolean boolean11 = astRoot0.isInStrictMode();
        java.lang.String str13 = astRoot0.toSource(26);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet15 = astRoot14.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol17 = astRoot14.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot19 = new com.google.javascript.rhino.head.ast.AstRoot((int) '4');
        astRoot14.setCompilerData((java.lang.Object) astRoot19);
        astRoot19.setBaseLineno(574921099);
        astRoot0.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot19);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = astRoot0.getTop();
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet26 = astRoot25.getComments();
        java.lang.String str27 = astRoot25.getSourceName();
        boolean boolean28 = astRoot25.hasChildren();
        com.google.javascript.rhino.head.Node node29 = astRoot25.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment30 = node29.getJsDocNode();
        astRoot0.target = comment30;
        int int32 = astRoot0.getParamCount();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(symbol3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "                                                    hi!" + "'", str13, "                                                    hi!");
        org.junit.Assert.assertNull(commentSet15);
        org.junit.Assert.assertNull(symbol17);
        org.junit.Assert.assertNotNull(scriptNode24);
        org.junit.Assert.assertNull(commentSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(comment30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList2 = scriptNode1.getFunctions();
        org.junit.Assert.assertNotNull(functionNodeList2);
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        int int8 = compilerEnvirons6.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        boolean boolean11 = compilerEnvirons9.isIdeMode();
        compilerEnvirons9.setRecordingLocalJsDocComments(false);
        boolean boolean14 = compilerEnvirons9.isGenerateDebugInfo();
        compilerEnvirons9.setRecordingLocalJsDocComments(true);
        boolean boolean17 = compilerEnvirons9.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        boolean boolean20 = compilerEnvirons18.getWarnTrailingComma();
        boolean boolean21 = compilerEnvirons18.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = compilerEnvirons18.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser23 = new com.google.javascript.rhino.head.Parser(compilerEnvirons9, errorReporter22);
        compilerEnvirons6.setErrorReporter(errorReporter22);
        compilerEnvirons0.setErrorReporter(errorReporter22);
        int int26 = compilerEnvirons0.getOptimizationLevel();
        compilerEnvirons0.setStrictMode(true);
        compilerEnvirons0.setWarnTrailingComma(false);
        boolean boolean31 = compilerEnvirons0.getWarnTrailingComma();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 170 + "'", int8 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(errorReporter22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        com.google.javascript.rhino.head.ast.Scope scope3 = new com.google.javascript.rhino.head.ast.Scope((-1), 11);
        com.google.javascript.rhino.head.ast.AstRoot astRoot4 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet5 = astRoot4.getComments();
        java.lang.String str6 = astRoot4.getSourceName();
        boolean boolean7 = astRoot4.hasChildren();
        int int8 = astRoot4.getLineno();
        astRoot4.setEncodedSourceBounds((int) (byte) 10, (int) (short) 100);
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator13 = astRoot12.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        boolean boolean25 = comment24.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType28 = null;
        com.google.javascript.rhino.head.ast.Comment comment30 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType28, "");
        java.lang.String str32 = comment30.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray33 = new com.google.javascript.rhino.head.ast.Comment[] { comment18, comment24, comment30 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet34 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet34, commentArray33);
        astRoot12.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet34);
        boolean boolean37 = astRoot12.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray38 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList39 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList39, symbolArray38);
        astRoot12.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList39);
        int int42 = astRoot12.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.AstRoot astRoot43 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator44 = astRoot43.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        boolean boolean50 = comment49.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType53 = null;
        com.google.javascript.rhino.head.ast.Comment comment55 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType53, "");
        boolean boolean56 = comment55.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType59 = null;
        com.google.javascript.rhino.head.ast.Comment comment61 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType59, "");
        java.lang.String str63 = comment61.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray64 = new com.google.javascript.rhino.head.ast.Comment[] { comment49, comment55, comment61 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet65 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet65, commentArray64);
        astRoot43.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet65);
        boolean boolean68 = astRoot43.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType71 = null;
        com.google.javascript.rhino.head.ast.Comment comment73 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType71, "hi!");
        astRoot43.addComment(comment73);
        astRoot12.addComment(comment73);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode77 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode77.removeProp(10);
        astRoot12.setTop(scriptNode77);
        int int81 = scriptNode77.getType();
        astRoot4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode77);
        com.google.javascript.rhino.head.Node node83 = new com.google.javascript.rhino.head.Node(161, (com.google.javascript.rhino.head.Node) scope3, (com.google.javascript.rhino.head.Node) astRoot4);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor84 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot4.visitAll(nodeVisitor84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "                                                                                                                                                                                                        " + "'", str32, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(symbolArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "                                                                                                                                                                                                        " + "'", str63, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 136 + "'", int81 == 136);
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setIdeMode(true);
        boolean boolean5 = compilerEnvirons0.isXmlAvailable();
        boolean boolean6 = compilerEnvirons0.isStrictMode();
        compilerEnvirons0.setStrictMode(false);
        boolean boolean9 = compilerEnvirons0.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray16 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        compilerEnvirons10.setActivationNames((java.util.Set<java.lang.String>) strSet17);
        boolean boolean20 = compilerEnvirons10.isGenerateDebugInfo();
        compilerEnvirons10.setOptimizationLevel((int) (short) 1);
        compilerEnvirons10.setAllowSharpComments(true);
        boolean boolean25 = compilerEnvirons10.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter26 = compilerEnvirons10.getErrorReporter();
        int int27 = compilerEnvirons10.getLanguageVersion();
        compilerEnvirons10.setXmlAvailable(false);
        compilerEnvirons10.setXmlAvailable(false);
        com.google.javascript.rhino.head.Parser parser32 = new com.google.javascript.rhino.head.Parser(compilerEnvirons10);
        boolean boolean33 = compilerEnvirons10.recoverFromErrors();
        java.util.Set<java.lang.String> strSet34 = compilerEnvirons10.getActivationNames();
        compilerEnvirons0.setActivationNames(strSet34);
        compilerEnvirons0.setWarnTrailingComma(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons38 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean39 = compilerEnvirons38.isReservedKeywordAsIdentifier();
        boolean boolean40 = compilerEnvirons38.getWarnTrailingComma();
        compilerEnvirons38.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet43 = compilerEnvirons38.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = compilerEnvirons38.getErrorReporter();
        compilerEnvirons38.setReservedKeywordAsIdentifier(false);
        int int47 = compilerEnvirons38.getOptimizationLevel();
        boolean boolean48 = compilerEnvirons38.isGenerateObserverCount();
        boolean boolean49 = compilerEnvirons38.isGeneratingSource();
        boolean boolean50 = compilerEnvirons38.reportWarningAsError();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons51 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean52 = compilerEnvirons51.isReservedKeywordAsIdentifier();
        boolean boolean53 = compilerEnvirons51.getWarnTrailingComma();
        compilerEnvirons51.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet56 = compilerEnvirons51.getActivationNames();
        boolean boolean57 = compilerEnvirons51.isGeneratingSource();
        compilerEnvirons51.setAllowSharpComments(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons60 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean61 = compilerEnvirons60.isReservedKeywordAsIdentifier();
        boolean boolean62 = compilerEnvirons60.isIdeMode();
        compilerEnvirons60.setRecordingLocalJsDocComments(false);
        boolean boolean65 = compilerEnvirons60.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons66 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean67 = compilerEnvirons66.isReservedKeywordAsIdentifier();
        int int68 = compilerEnvirons66.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons69 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean70 = compilerEnvirons69.isReservedKeywordAsIdentifier();
        boolean boolean71 = compilerEnvirons69.isIdeMode();
        compilerEnvirons69.setRecordingLocalJsDocComments(false);
        boolean boolean74 = compilerEnvirons69.isGenerateDebugInfo();
        compilerEnvirons69.setRecordingLocalJsDocComments(true);
        boolean boolean77 = compilerEnvirons69.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons78 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean79 = compilerEnvirons78.isReservedKeywordAsIdentifier();
        boolean boolean80 = compilerEnvirons78.getWarnTrailingComma();
        boolean boolean81 = compilerEnvirons78.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter82 = compilerEnvirons78.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser83 = new com.google.javascript.rhino.head.Parser(compilerEnvirons69, errorReporter82);
        compilerEnvirons66.setErrorReporter(errorReporter82);
        compilerEnvirons60.setErrorReporter(errorReporter82);
        com.google.javascript.rhino.head.Parser parser86 = new com.google.javascript.rhino.head.Parser(compilerEnvirons51, errorReporter82);
        compilerEnvirons38.setErrorReporter(errorReporter82);
        com.google.javascript.rhino.head.Parser parser88 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter82);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(errorReporter26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 170 + "'", int27 == 170);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(compilerEnvirons38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(errorReporter44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 170 + "'", int68 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(errorReporter82);
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.lang.String str48 = astRoot0.getNextTempName();
        java.lang.String str49 = astRoot0.shortName();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList50 = astRoot0.getStatements();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "$0" + "'", str48, "$0");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "AstRoot" + "'", str49, "AstRoot");
        org.junit.Assert.assertNotNull(astNodeList50);
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isStrictMode();
        boolean boolean3 = compilerEnvirons0.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons4 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean5 = compilerEnvirons4.isReservedKeywordAsIdentifier();
        boolean boolean6 = compilerEnvirons4.getWarnTrailingComma();
        compilerEnvirons4.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet9 = compilerEnvirons4.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter10 = compilerEnvirons4.getErrorReporter();
        java.lang.String[] strArray16 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        compilerEnvirons4.setActivationNames((java.util.Set<java.lang.String>) strSet17);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet17);
        compilerEnvirons0.setGeneratingSource(false);
        boolean boolean23 = compilerEnvirons0.isStrictMode();
        compilerEnvirons0.setGenerateDebugInfo(true);
        int int26 = compilerEnvirons0.getOptimizationLevel();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNotNull(errorReporter10);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setRecordingLocalJsDocComments(false);
        boolean boolean5 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setRecordingComments(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        boolean boolean12 = compilerEnvirons10.getWarnTrailingComma();
        compilerEnvirons10.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet15 = compilerEnvirons10.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons10.getErrorReporter();
        boolean boolean17 = compilerEnvirons10.isRecordingComments();
        compilerEnvirons10.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        int int22 = compilerEnvirons20.getLanguageVersion();
        int int23 = compilerEnvirons20.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        compilerEnvirons24.setStrictMode(true);
        compilerEnvirons24.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons30 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean31 = compilerEnvirons30.isReservedKeywordAsIdentifier();
        boolean boolean32 = compilerEnvirons30.getWarnTrailingComma();
        compilerEnvirons30.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet35 = compilerEnvirons30.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter36 = compilerEnvirons30.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons24, errorReporter36);
        com.google.javascript.rhino.head.IRFactory iRFactory38 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons20, errorReporter36);
        com.google.javascript.rhino.head.IRFactory iRFactory39 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10, errorReporter36);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons40 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray46 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        compilerEnvirons40.setActivationNames((java.util.Set<java.lang.String>) strSet47);
        boolean boolean50 = compilerEnvirons40.getWarnTrailingComma();
        com.google.javascript.rhino.head.ErrorReporter errorReporter51 = compilerEnvirons40.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser52 = new com.google.javascript.rhino.head.Parser(compilerEnvirons10, errorReporter51);
        com.google.javascript.rhino.head.IRFactory iRFactory53 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter51);
        compilerEnvirons0.setGenerateDebugInfo(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 170 + "'", int22 == 170);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 170 + "'", int23 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(errorReporter36);
        org.junit.Assert.assertNotNull(compilerEnvirons40);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(errorReporter51);
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(14, (int) '4');
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator4 = astRoot3.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        boolean boolean10 = comment9.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        java.lang.String str23 = comment21.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray24 = new com.google.javascript.rhino.head.ast.Comment[] { comment9, comment15, comment21 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet25 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet25, commentArray24);
        astRoot3.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet25);
        boolean boolean28 = astRoot3.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray29 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList30 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList30, symbolArray29);
        astRoot3.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList30);
        com.google.javascript.rhino.head.Node node33 = astRoot3.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode34.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode35);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot3, (com.google.javascript.rhino.head.ast.Scope) scriptNode35);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode38.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode39);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList41 = scriptNode39.getChildScopes();
        int int42 = scriptNode39.getBaseLineno();
        com.google.javascript.rhino.head.Node node43 = scriptNode39.getLastSibling();
        scriptNode39.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList49 = scriptNode47.getFunctions();
        scriptNode47.setPosition((int) (byte) 10);
        java.lang.String str52 = scriptNode39.toStringTree(scriptNode47);
        int int53 = scriptNode39.getBaseLineno();
        com.google.javascript.rhino.head.Node node55 = scriptNode39.setType((int) (byte) -1);
        java.lang.String str56 = astRoot3.toStringTree(scriptNode39);
        scope2.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode39);
        int int58 = scope2.getPosition();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "                                                                                                                                                                                                        " + "'", str23, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(symbolArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(scopeList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(functionNodeList49);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 14 + "'", int58 == 14);
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean17 = compilerEnvirons0.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        int int20 = compilerEnvirons18.getLanguageVersion();
        int int21 = compilerEnvirons18.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons22 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean23 = compilerEnvirons22.isReservedKeywordAsIdentifier();
        compilerEnvirons22.setStrictMode(true);
        compilerEnvirons22.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean29 = compilerEnvirons28.isReservedKeywordAsIdentifier();
        boolean boolean30 = compilerEnvirons28.getWarnTrailingComma();
        compilerEnvirons28.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet33 = compilerEnvirons28.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons28.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons22, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons18, errorReporter34);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter34);
        java.io.Reader reader38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot41 = iRFactory37.parse(reader38, "{\n{\n}\n}\n", 1278095946);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 170 + "'", int20 == 170);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(strSet33);
        org.junit.Assert.assertNotNull(errorReporter34);
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        java.lang.String str2 = astRoot0.getSourceName();
        boolean boolean3 = astRoot0.hasChildren();
        int int4 = astRoot0.getLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor5 = null;
        astRoot0.visitComments(nodeVisitor5);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons7 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean8 = compilerEnvirons7.isReservedKeywordAsIdentifier();
        boolean boolean9 = compilerEnvirons7.isIdeMode();
        boolean boolean10 = compilerEnvirons7.getWarnTrailingComma();
        compilerEnvirons7.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons13 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean14 = compilerEnvirons13.isReservedKeywordAsIdentifier();
        int int15 = compilerEnvirons13.getLanguageVersion();
        int int16 = compilerEnvirons13.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons17 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean18 = compilerEnvirons17.isReservedKeywordAsIdentifier();
        compilerEnvirons17.setStrictMode(true);
        compilerEnvirons17.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean24 = compilerEnvirons23.isReservedKeywordAsIdentifier();
        boolean boolean25 = compilerEnvirons23.getWarnTrailingComma();
        compilerEnvirons23.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet28 = compilerEnvirons23.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter29 = compilerEnvirons23.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory30 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons17, errorReporter29);
        com.google.javascript.rhino.head.IRFactory iRFactory31 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons13, errorReporter29);
        com.google.javascript.rhino.head.IRFactory iRFactory32 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons7, errorReporter29);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons33 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory35 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons33, errorReporter34);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList39 = scriptNode37.getFunctions();
        scriptNode37.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node42 = iRFactory35.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.lang.String str43 = scriptNode37.getSourceName();
        int int44 = scriptNode37.getRegexpCount();
        java.lang.Object obj45 = scriptNode37.getCompilerData();
        java.lang.String str46 = scriptNode37.getSourceName();
        com.google.javascript.rhino.head.Node node47 = iRFactory32.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        astRoot0.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode37);
        int int49 = scriptNode37.getEncodedSourceStart();
        java.lang.String str50 = scriptNode37.shortName();
        scriptNode37.setLineno(13);
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(compilerEnvirons7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 170 + "'", int15 == 170);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 170 + "'", int16 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(errorReporter29);
        org.junit.Assert.assertNotNull(functionNodeList39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ScriptNode" + "'", str50, "ScriptNode");
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        int int5 = compilerEnvirons3.getLanguageVersion();
        boolean boolean6 = compilerEnvirons3.isGenerateObserverCount();
        com.google.javascript.rhino.head.Parser parser7 = new com.google.javascript.rhino.head.Parser(compilerEnvirons3);
        com.google.javascript.rhino.head.ErrorReporter errorReporter8 = compilerEnvirons3.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser9 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter8);
        com.google.javascript.rhino.head.ast.AstRoot astRoot13 = parser9.parse("100\tSCRIPT 100 1\n", "1", 15);
        astRoot13.checkParentLinks();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        scriptNode17.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode21.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode22.getChildScopes();
        int int25 = scriptNode22.getBaseLineno();
        com.google.javascript.rhino.head.Node node26 = scriptNode22.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode28.getChildScopes();
        java.lang.String str32 = scriptNode28.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode22.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode28, (com.google.javascript.rhino.head.Node) scriptNode34);
        int int36 = scriptNode28.getType();
        scriptNode17.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        int int38 = scriptNode28.getParamCount();
        int int39 = scriptNode28.getEndLineno();
        int int40 = scriptNode28.getType();
        astRoot13.putProp((-17528999), (java.lang.Object) int40);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 170 + "'", int5 == 170);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(errorReporter8);
        org.junit.Assert.assertNotNull(astRoot13);
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 136 + "'", int36 == 136);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 136 + "'", int40 == 136);
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getEndLineno();
        scriptNode1.setBaseLineno(4);
        scriptNode1.setEncodedSource("                                      ");
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator11 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.ast.AstNode astNode12 = scriptNode1.getParent();
        int int13 = scriptNode1.getEncodedSourceEnd();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator11);
        org.junit.Assert.assertNotNull(astNode12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setIdeMode(false);
        boolean boolean14 = compilerEnvirons0.isIdeMode();
        boolean boolean15 = compilerEnvirons0.isRecordingComments();
        boolean boolean16 = compilerEnvirons0.reportWarningAsError();
        compilerEnvirons0.setGeneratingSource(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        boolean boolean6 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        com.google.javascript.rhino.head.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory8 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter7);
        compilerEnvirons0.setStrictMode(false);
        compilerEnvirons0.setReservedKeywordAsIdentifier(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter13 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setGenerateObserverCount(false);
        boolean boolean16 = compilerEnvirons0.isGenerateDebugInfo();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(errorReporter13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(79491444);
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.lang.String str10 = scriptNode4.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode18.getChildScopes();
        java.lang.String str22 = scriptNode18.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode12.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode18, (com.google.javascript.rhino.head.Node) scriptNode24);
        java.lang.Object obj27 = scriptNode18.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str30 = scriptNode28.toSource((int) '4');
        java.lang.String str31 = scriptNode18.toStringTree(scriptNode28);
        scriptNode4.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        int int33 = scriptNode4.getEncodedSourceStart();
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str30, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        com.google.javascript.rhino.head.Node node6 = scriptNode2.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        java.lang.String str12 = scriptNode8.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode14);
        java.lang.Object obj17 = scriptNode8.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str20 = scriptNode18.toSource((int) '4');
        java.lang.String str21 = scriptNode8.toStringTree(scriptNode18);
        com.google.javascript.rhino.head.Node node22 = scriptNode18.target;
        java.lang.String str23 = scriptNode18.getSourceName();
        int int24 = scriptNode18.getFunctionCount();
        com.google.javascript.rhino.head.Node node25 = new com.google.javascript.rhino.head.Node((-1343149577), (com.google.javascript.rhino.head.Node) scriptNode18);
        java.lang.String str26 = scriptNode18.debugPrint();
        com.google.javascript.rhino.head.ast.Scope scope27 = scriptNode18.getParentScope();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str20, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str26, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertNull(scope27);
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        compilerEnvirons0.setRecoverFromErrors(true);
        boolean boolean10 = compilerEnvirons0.isRecordingComments();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons11.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        boolean boolean16 = compilerEnvirons14.getWarnTrailingComma();
        compilerEnvirons14.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet19 = compilerEnvirons14.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter20 = compilerEnvirons14.getErrorReporter();
        java.lang.String[] strArray26 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        compilerEnvirons14.setActivationNames((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.head.ErrorReporter errorReporter30 = compilerEnvirons14.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser31 = new com.google.javascript.rhino.head.Parser(compilerEnvirons11, errorReporter30);
        com.google.javascript.rhino.head.IRFactory iRFactory32 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter30);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons33 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray39 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        compilerEnvirons33.setActivationNames((java.util.Set<java.lang.String>) strSet40);
        boolean boolean43 = compilerEnvirons33.getWarnTrailingComma();
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = compilerEnvirons33.getErrorReporter();
        compilerEnvirons0.setErrorReporter(errorReporter44);
        boolean boolean46 = compilerEnvirons0.reportWarningAsError();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(errorReporter20);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(errorReporter30);
        org.junit.Assert.assertNotNull(compilerEnvirons33);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(errorReporter44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        scriptNode6.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.Node node15 = scriptNode11.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode17.getChildScopes();
        java.lang.String str21 = scriptNode17.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode11.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode17, (com.google.javascript.rhino.head.Node) scriptNode23);
        int int25 = scriptNode17.getType();
        scriptNode6.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode28.getChildScopes();
        int int31 = scriptNode28.getBaseLineno();
        com.google.javascript.rhino.head.Node node32 = scriptNode28.getLastSibling();
        scriptNode28.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList38 = scriptNode36.getFunctions();
        scriptNode36.setPosition((int) (byte) 10);
        java.lang.String str41 = scriptNode28.toStringTree(scriptNode36);
        int int42 = scriptNode28.getBaseLineno();
        scriptNode28.setEncodedSourceStart((int) '4');
        scriptNode17.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode28);
        scriptNode1.setCompilerData((java.lang.Object) scriptNode28);
        java.lang.String str47 = scriptNode1.getJsDoc();
        java.lang.Object obj49 = scriptNode1.getProp((-748307395));
        com.google.javascript.rhino.head.Node node51 = scriptNode1.setType(65536);
        scriptNode1.flattenSymbolTable(true);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 136 + "'", int25 == 136);
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(functionNodeList38);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        boolean boolean6 = comment5.hasSideEffects();
        int int7 = comment5.getLineno();
        com.google.javascript.rhino.head.Node node9 = comment5.setType(18);
        comment5.removeChildren();
        comment5.setLineno(19);
        boolean boolean13 = comment5.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope scope14 = comment5.getEnclosingScope();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean16 = compilerEnvirons15.isReservedKeywordAsIdentifier();
        boolean boolean17 = compilerEnvirons15.getWarnTrailingComma();
        compilerEnvirons15.setXmlAvailable(true);
        boolean boolean20 = compilerEnvirons15.isRecordingLocalJsDocComments();
        com.google.javascript.rhino.head.IRFactory iRFactory21 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor24 = astRoot22.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor25 = null;
        astRoot22.visitComments(nodeVisitor25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = iRFactory21.transformTree(astRoot22);
        java.lang.String str28 = astRoot22.toSource();
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        com.google.javascript.rhino.head.Token.CommentType commentType35 = comment34.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        int int42 = comment40.getLineno();
        com.google.javascript.rhino.head.Node node44 = comment40.setType(18);
        comment40.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        comment50.setCommentType(commentType52);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator55 = scriptNode54.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        java.lang.String str62 = comment60.toSource(100);
        java.lang.String str63 = comment60.getValue();
        scriptNode54.setParent((com.google.javascript.rhino.head.ast.AstNode) comment60);
        com.google.javascript.rhino.head.ast.Comment[] commentArray65 = new com.google.javascript.rhino.head.ast.Comment[] { comment34, comment40, comment50, comment60 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet66 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet66, commentArray65);
        astRoot29.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet66);
        astRoot29.setEncodedSourceStart((-603115504));
        astRoot29.removeChildren();
        java.lang.String str72 = astRoot29.debugPrint();
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(163023072, (com.google.javascript.rhino.head.Node) comment5, (com.google.javascript.rhino.head.Node) astRoot22, (com.google.javascript.rhino.head.Node) astRoot29, 0);
        com.google.javascript.rhino.head.Node node75 = node74.getLastSibling();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNotNull(compilerEnvirons15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeItor24);
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(commentType35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator55);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "                                                                                                                                                                                                        " + "'", str62, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(commentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n" + "'", str72, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n");
        org.junit.Assert.assertNotNull(node75);
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        scriptNode2.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap8 = scriptNode7.getSymbolTable();
        scriptNode2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode7);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList13 = scriptNode11.getChildScopes();
        int int14 = scriptNode11.getBaseLineno();
        com.google.javascript.rhino.head.Node node15 = scriptNode11.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode17.getChildScopes();
        java.lang.String str21 = scriptNode17.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode11.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode17, (com.google.javascript.rhino.head.Node) scriptNode23);
        scriptNode2.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList26 = scriptNode2.getSymbols();
        java.lang.String str27 = scriptNode2.getEncodedSource();
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet29 = astRoot28.getComments();
        int int30 = astRoot28.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor31 = null;
        astRoot28.visitComments(nodeVisitor31);
        com.google.javascript.rhino.head.Node node33 = astRoot28.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope34 = astRoot28.getEnclosingScope();
        astRoot28.setEncodedSourceStart(23);
        java.lang.String str38 = astRoot28.toSource(95442629);
        int int39 = astRoot28.getAbsolutePosition();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList40 = astRoot28.getFunctions();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray42 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList43 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList43, symbolArray42);
        scriptNode41.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList43);
        com.google.javascript.rhino.head.ast.AstRoot astRoot46 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int47 = astRoot46.getParamCount();
        int int48 = astRoot46.getRegexpCount();
        scriptNode41.addChildToBack((com.google.javascript.rhino.head.Node) astRoot46);
        com.google.javascript.rhino.head.ast.AstRoot astRoot50 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = astRoot50.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        boolean boolean63 = comment62.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType66 = null;
        com.google.javascript.rhino.head.ast.Comment comment68 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType66, "");
        java.lang.String str70 = comment68.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray71 = new com.google.javascript.rhino.head.ast.Comment[] { comment56, comment62, comment68 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet72 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet72, commentArray71);
        astRoot50.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet72);
        boolean boolean75 = astRoot50.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray76 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList77 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList77, symbolArray76);
        astRoot50.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList77);
        com.google.javascript.rhino.head.Node node80 = astRoot50.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode81 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode82 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode81.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode82);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot50, (com.google.javascript.rhino.head.ast.Scope) scriptNode82);
        int int85 = astRoot50.depth();
        com.google.javascript.rhino.head.ast.Comment comment86 = astRoot50.getJsDocNode();
        astRoot46.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot50);
        astRoot46.checkParentLinks();
        boolean boolean89 = astRoot46.isInStrictMode();
        java.lang.String str90 = astRoot46.shortName();
        com.google.javascript.rhino.head.Node node92 = new com.google.javascript.rhino.head.Node(8, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) astRoot28, (com.google.javascript.rhino.head.Node) astRoot46, 209601021);
        astRoot46.setInStrictMode(true);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump95 = astRoot46.getJumpStatement();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strMap8);
        org.junit.Assert.assertNull(scopeList13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(symbolList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(commentSet29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNull(scope34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList40);
        org.junit.Assert.assertNotNull(symbolArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "                                                                                                                                                                                                        " + "'", str70, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(symbolArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(comment86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "AstRoot" + "'", str90, "AstRoot");
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        boolean boolean9 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setIdeMode(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.isStrictMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean16 = compilerEnvirons15.isReservedKeywordAsIdentifier();
        boolean boolean17 = compilerEnvirons15.getWarnTrailingComma();
        compilerEnvirons15.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet20 = compilerEnvirons15.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter21 = compilerEnvirons15.getErrorReporter();
        java.lang.String[] strArray27 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        compilerEnvirons15.setActivationNames((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.head.ErrorReporter errorReporter31 = compilerEnvirons15.getErrorReporter();
        compilerEnvirons12.setErrorReporter(errorReporter31);
        com.google.javascript.rhino.head.Parser parser33 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter31);
        boolean boolean34 = compilerEnvirons0.recoverFromErrors();
        com.google.javascript.rhino.head.Parser parser35 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(errorReporter21);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(errorReporter31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        int int42 = astRoot0.getParamCount();
        astRoot0.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot45 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator46 = astRoot45.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType49 = null;
        com.google.javascript.rhino.head.ast.Comment comment51 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType49, "");
        boolean boolean52 = comment51.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType55 = null;
        com.google.javascript.rhino.head.ast.Comment comment57 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType55, "");
        boolean boolean58 = comment57.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType61 = null;
        com.google.javascript.rhino.head.ast.Comment comment63 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType61, "");
        java.lang.String str65 = comment63.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray66 = new com.google.javascript.rhino.head.ast.Comment[] { comment51, comment57, comment63 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet67 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet67, commentArray66);
        astRoot45.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet67);
        boolean boolean70 = astRoot45.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType73 = null;
        com.google.javascript.rhino.head.ast.Comment comment75 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType73, "hi!");
        astRoot45.addComment(comment75);
        astRoot45.setEncodedSource("typeof");
        com.google.javascript.rhino.head.ast.AstRoot astRoot79 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet80 = astRoot79.getComments();
        int int81 = astRoot79.getEndLineno();
        com.google.javascript.rhino.head.Node node83 = astRoot79.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot45, (com.google.javascript.rhino.head.ast.Scope) astRoot79);
        astRoot79.clearParentScope();
        com.google.javascript.rhino.head.Token.CommentType commentType88 = null;
        com.google.javascript.rhino.head.ast.Comment comment90 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType88, "");
        java.lang.String str92 = comment90.toSource(100);
        com.google.javascript.rhino.head.Token.CommentType commentType93 = null;
        comment90.setCommentType(commentType93);
        astRoot79.addChildToBack((com.google.javascript.rhino.head.Node) comment90);
        astRoot0.addChild((com.google.javascript.rhino.head.ast.AstNode) comment90);
        com.google.javascript.rhino.head.ast.Scope scope97 = astRoot0.getEnclosingScope();
        boolean boolean98 = astRoot0.hasChildren();
        astRoot0.removeChildren();
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "                                                                                                                                                                                                        " + "'", str65, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(commentSet80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "                                                                                                                                                                                                        " + "'", str92, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNull(scope97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        int int6 = scriptNode1.getLineno();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scriptNode1.iterator();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons8 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean9 = compilerEnvirons8.isReservedKeywordAsIdentifier();
        boolean boolean10 = compilerEnvirons8.isIdeMode();
        int int11 = compilerEnvirons8.getOptimizationLevel();
        scriptNode1.setCompilerData((java.lang.Object) compilerEnvirons8);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.putIntProp((int) (short) 1, 1);
        scriptNode13.setEncodedSource("typeof");
        com.google.javascript.rhino.head.Node node19 = scriptNode13.getLastChild();
        scriptNode1.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode13);
        int int21 = scriptNode13.getPosition();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap22 = scriptNode13.getSymbolTable();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNotNull(compilerEnvirons8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(strMap22);
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator3.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int7 = astRoot6.getBaseLineno();
        java.lang.String str8 = astRoot6.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        int int11 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot6, (com.google.javascript.rhino.head.ast.AstNode) astRoot9);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator12 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor20 = comment17.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        comment17.setCommentType(commentType21);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator23 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator24 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator25 = positionComparator23.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator24);
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int27 = astRoot26.getBaseLineno();
        java.lang.String str28 = astRoot26.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = astRoot29.new NodeIterator();
        int int31 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot26, (com.google.javascript.rhino.head.ast.AstNode) astRoot29);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.putIntProp((int) (short) 1, 1);
        java.lang.String str36 = scriptNode32.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator38 = scope37.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        scope37.setTop(scriptNode40);
        scope37.setLineno((int) (short) -1);
        int int45 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode32, (com.google.javascript.rhino.head.ast.AstNode) scope37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str62 = scriptNode32.toStringTree(scriptNode53);
        int int63 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) comment17, (com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        int int64 = comment17.getLength();
        boolean boolean65 = comment17.hasConsistentReturnUsage();
        java.lang.String str66 = comment17.getValue();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor67 = null;
        // The following exception was thrown during execution in test generation
        try {
            comment17.visit(nodeVisitor67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str8, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(astNodeComparator25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str28, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot(1499437464);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator4 = scriptNode3.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator5 = scriptNode3.new NodeIterator();
        java.lang.String str6 = scriptNode3.getNextTempName();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor7 = scriptNode3.iterator();
        com.google.javascript.rhino.head.Node node8 = new com.google.javascript.rhino.head.Node(21, (com.google.javascript.rhino.head.Node) astRoot2, (com.google.javascript.rhino.head.Node) scriptNode3);
        com.google.javascript.rhino.head.ast.Scope scope10 = scriptNode3.getDefiningScope("9\t  SCRIPT 10 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        scriptNode11.setRelative((int) (byte) 100);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode3, (com.google.javascript.rhino.head.ast.Scope) scriptNode11);
        com.google.javascript.rhino.head.ast.Comment comment16 = scriptNode3.getJsDocNode();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor17 = scriptNode3.iterator();
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope(10, 9);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap21 = scope20.getSymbolTable();
        boolean boolean22 = scope20.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList26 = scriptNode24.getChildScopes();
        int int27 = scriptNode24.getBaseLineno();
        com.google.javascript.rhino.head.Node node28 = scriptNode24.getLastSibling();
        int int29 = scriptNode24.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        java.lang.String str36 = scriptNode32.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        scriptNode38.setEncodedSourceEnd(11);
        int int42 = scriptNode32.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        scriptNode24.putProp(8, (java.lang.Object) scriptNode38);
        scriptNode24.setEndLineno(14);
        java.lang.String str46 = scriptNode24.toSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode47.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList50 = scriptNode48.getChildScopes();
        int int51 = scriptNode48.getBaseLineno();
        com.google.javascript.rhino.head.Node node52 = scriptNode48.getLastSibling();
        int int53 = scriptNode48.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator54 = scriptNode48.new NodeIterator();
        int int55 = scriptNode48.getLineno();
        scriptNode48.setEncodedSourceEnd((int) (byte) -1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap58 = scriptNode48.getSymbolTable();
        scriptNode24.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode48);
        int int60 = scope20.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode48);
        scriptNode3.addChildToFront((com.google.javascript.rhino.head.Node) scriptNode48);
        com.google.javascript.rhino.head.ast.AstRoot astRoot62 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet63 = astRoot62.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol65 = astRoot62.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot67 = new com.google.javascript.rhino.head.ast.AstRoot((int) '4');
        astRoot62.setCompilerData((java.lang.Object) astRoot67);
        astRoot67.setBaseLineno(574921099);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode71 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode71.putIntProp((int) (short) 1, 1);
        com.google.javascript.rhino.head.Node node76 = scriptNode71.setType((int) 'a');
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList77 = scriptNode71.getStatements();
        astRoot67.setCompilerData((java.lang.Object) scriptNode71);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList79 = astRoot67.getSymbols();
        java.lang.String str80 = astRoot67.getEncodedSource();
        java.lang.String str81 = astRoot67.getEncodedSource();
        java.lang.String str82 = scriptNode3.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot67);
        scriptNode3.flattenSymbolTable(true);
        org.junit.Assert.assertNotNull(nodeSpliterator4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "$0" + "'", str6, "$0");
        org.junit.Assert.assertNotNull(nodeItor7);
        org.junit.Assert.assertNull(scope10);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(nodeItor17);
        org.junit.Assert.assertNull(strMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(scopeList26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 48102594 + "'", int42 == 48102594);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{\n}\n" + "'", str46, "{\n}\n");
        org.junit.Assert.assertNull(scopeList50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(strMap58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(commentSet63);
        org.junit.Assert.assertNull(symbol65);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(astNodeList77);
        org.junit.Assert.assertNotNull(symbolList79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node19 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        int int20 = scriptNode10.getRegexpCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator22 = astRoot21.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        boolean boolean34 = comment33.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray42 = new com.google.javascript.rhino.head.ast.Comment[] { comment27, comment33, comment39 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet43 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet43, commentArray42);
        astRoot21.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet43);
        boolean boolean46 = astRoot21.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode47 = astRoot21.getParent();
        astRoot21.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.ast.AstNode astNode50 = astRoot21.getParent();
        java.lang.String str51 = scriptNode10.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot21);
        com.google.javascript.rhino.head.ast.Scope scope52 = null;
        scriptNode10.setParentScope(scope52);
        int int54 = scriptNode10.getEndLineno();
        java.lang.String str56 = scriptNode10.toSource((-1561285379));
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(astNode47);
        org.junit.Assert.assertNull(astNode50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "{\n}\n" + "'", str56, "{\n}\n");
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = astRoot2.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType6, "");
        boolean boolean9 = comment8.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray23 = new com.google.javascript.rhino.head.ast.Comment[] { comment8, comment14, comment20 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet24 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet24, commentArray23);
        astRoot2.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet24);
        boolean boolean27 = astRoot2.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray28 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList29 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList29, symbolArray28);
        astRoot2.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList29);
        com.google.javascript.rhino.head.Node node32 = astRoot2.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot2, (com.google.javascript.rhino.head.ast.Scope) scriptNode34);
        com.google.javascript.rhino.head.Node node38 = new com.google.javascript.rhino.head.Node(4, (com.google.javascript.rhino.head.Node) astRoot2, 129);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet39 = astRoot2.getComments();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList43 = scriptNode41.getFunctions();
        scriptNode41.setPosition((int) (byte) 10);
        astRoot2.target = scriptNode41;
        int int47 = scriptNode41.getType();
        com.google.javascript.rhino.head.Node node48 = null;
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode51.getChildScopes();
        int int54 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.Node node55 = scriptNode51.getLastSibling();
        int int56 = scriptNode51.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope(16);
        scriptNode51.addChildToBack((com.google.javascript.rhino.head.Node) scope58);
        scriptNode51.setRelative((-476424842));
        java.lang.String str63 = scriptNode51.toSource((-597242177));
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator64 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator65 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator66 = positionComparator64.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator65);
        com.google.javascript.rhino.head.ast.AstRoot astRoot67 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int68 = astRoot67.getBaseLineno();
        java.lang.String str69 = astRoot67.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot70 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator71 = astRoot70.new NodeIterator();
        int int72 = positionComparator65.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot67, (com.google.javascript.rhino.head.ast.AstNode) astRoot70);
        boolean boolean73 = astRoot67.isInStrictMode();
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-777163487), (com.google.javascript.rhino.head.Node) scriptNode51, (com.google.javascript.rhino.head.Node) astRoot67, 844680003);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(1384960853, (com.google.javascript.rhino.head.Node) scriptNode41, node48, node75, 221450998);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(symbolArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(commentSet39);
        org.junit.Assert.assertNotNull(functionNodeList43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 136 + "'", int47 == 136);
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "{\n{\n}\n}\n" + "'", str63, "{\n{\n}\n}\n");
        org.junit.Assert.assertNotNull(astNodeComparator66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str69, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        java.lang.String[] strArray12 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet13);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons16 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean17 = compilerEnvirons16.isReservedKeywordAsIdentifier();
        boolean boolean18 = compilerEnvirons16.isIdeMode();
        compilerEnvirons16.setRecordingLocalJsDocComments(false);
        boolean boolean21 = compilerEnvirons16.isGenerateDebugInfo();
        compilerEnvirons16.setRecordingLocalJsDocComments(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons24 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean25 = compilerEnvirons24.isReservedKeywordAsIdentifier();
        boolean boolean26 = compilerEnvirons24.getWarnTrailingComma();
        boolean boolean27 = compilerEnvirons24.isRecordingComments();
        boolean boolean28 = compilerEnvirons24.getWarnTrailingComma();
        boolean boolean29 = compilerEnvirons24.isRecordingLocalJsDocComments();
        boolean boolean30 = compilerEnvirons24.isIdeMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray37 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        compilerEnvirons31.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons24.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons16.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet38);
        compilerEnvirons0.setAllowSharpComments(true);
        com.google.javascript.rhino.head.IRFactory iRFactory46 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.AstRoot astRoot50 = iRFactory46.parse("-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "", 850021394);
        java.lang.Object obj51 = astRoot50.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode(11);
        com.google.javascript.rhino.head.Token.CommentType commentType56 = null;
        com.google.javascript.rhino.head.ast.Comment comment58 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType56, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType59 = null;
        comment58.setCommentType(commentType59);
        java.lang.String str61 = comment58.getValue();
        com.google.javascript.rhino.head.Token.CommentType commentType62 = null;
        comment58.setCommentType(commentType62);
        scriptNode53.addChildToFront((com.google.javascript.rhino.head.Node) comment58);
        int int65 = scriptNode53.depth();
        astRoot50.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode53);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(astRoot50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator9 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator10 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator11 = positionComparator9.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator10);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator12 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator13 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator14 = positionComparator12.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator13);
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int16 = astRoot15.getBaseLineno();
        java.lang.String str17 = astRoot15.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot18 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator19 = astRoot18.new NodeIterator();
        int int20 = positionComparator13.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot15, (com.google.javascript.rhino.head.ast.AstNode) astRoot18);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator21 = positionComparator9.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator13);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator22 = positionComparator1.thenComparing(astNodeComparator21);
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        int int29 = comment27.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = comment27.getCommentType();
        com.google.javascript.rhino.head.ast.AstRoot astRoot31 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator32 = astRoot31.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        boolean boolean44 = comment43.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        java.lang.String str51 = comment49.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray52 = new com.google.javascript.rhino.head.ast.Comment[] { comment37, comment43, comment49 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet53 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet53, commentArray52);
        astRoot31.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet53);
        boolean boolean56 = astRoot31.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray57 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList58 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList58, symbolArray57);
        astRoot31.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList58);
        int int61 = astRoot31.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator64 = scope63.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode65.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode66);
        scope63.setTop(scriptNode66);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor69 = scope63.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType72 = null;
        com.google.javascript.rhino.head.ast.Comment comment74 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType72, "");
        boolean boolean75 = comment74.hasSideEffects();
        int int76 = comment74.getLineno();
        com.google.javascript.rhino.head.Node node78 = comment74.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType81 = null;
        com.google.javascript.rhino.head.ast.Comment comment83 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType81, "");
        boolean boolean84 = comment83.hasSideEffects();
        int int85 = comment83.getLineno();
        com.google.javascript.rhino.head.Node node87 = comment83.setType(18);
        comment83.removeChildren();
        com.google.javascript.rhino.head.Node node90 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope63, (com.google.javascript.rhino.head.Node) comment74, (com.google.javascript.rhino.head.Node) comment83, 15);
        astRoot31.addComment(comment74);
        int int92 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) comment27, (com.google.javascript.rhino.head.ast.AstNode) astRoot31);
        com.google.javascript.rhino.head.Node node93 = astRoot31.getLastSibling();
        com.google.javascript.rhino.head.ast.Comment comment94 = astRoot31.getJsDocNode();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator11);
        org.junit.Assert.assertNotNull(astNodeComparator14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str17, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator21);
        org.junit.Assert.assertNotNull(astNodeComparator22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(commentType30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                                                                                                                        " + "'", str51, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(symbolArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator64);
        org.junit.Assert.assertNotNull(nodeItor69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(comment94);
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((-87298254));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = scriptNode1.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        int int9 = astRoot5.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode11.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode12);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList14 = scriptNode12.getChildScopes();
        int int15 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node16 = scriptNode12.getLastSibling();
        scriptNode12.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList22 = scriptNode20.getFunctions();
        scriptNode20.setPosition((int) (byte) 10);
        java.lang.String str25 = scriptNode12.toStringTree(scriptNode20);
        int int26 = scriptNode12.getBaseLineno();
        com.google.javascript.rhino.head.Node node28 = scriptNode12.setType((int) (byte) -1);
        scriptNode12.setSourceName("typeof");
        scriptNode12.setEncodedSource("                                                                                                        {\n                                                                                                        }\n");
        astRoot5.putProp((-929928321), (java.lang.Object) "                                                                                                        {\n                                                                                                        }\n");
        java.lang.String str34 = astRoot5.shortName();
        com.google.javascript.rhino.head.Node node36 = com.google.javascript.rhino.head.Node.newString("136");
        node36.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode41.getChildScopes();
        int int44 = scriptNode41.getBaseLineno();
        com.google.javascript.rhino.head.Node node45 = scriptNode41.getLastSibling();
        int int46 = scriptNode41.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope49 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot50 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator51 = astRoot50.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        boolean boolean63 = comment62.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType66 = null;
        com.google.javascript.rhino.head.ast.Comment comment68 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType66, "");
        java.lang.String str70 = comment68.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray71 = new com.google.javascript.rhino.head.ast.Comment[] { comment56, comment62, comment68 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet72 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet72, commentArray71);
        astRoot50.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet72);
        boolean boolean75 = astRoot50.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode76 = astRoot50.getParent();
        astRoot50.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node80 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode41, (com.google.javascript.rhino.head.Node) scope49, (com.google.javascript.rhino.head.Node) astRoot50, 6);
        java.lang.String str81 = node36.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot50);
        astRoot50.checkParentLinks();
        astRoot50.checkParentLinks();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList84 = astRoot50.getFunctions();
        astRoot50.setEncodedSourceEnd((-449082186));
        java.lang.Object obj88 = astRoot50.getProp(1);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot5, (com.google.javascript.rhino.head.ast.Scope) astRoot50);
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(scopeList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(functionNodeList22);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AstRoot" + "'", str34, "AstRoot");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "                                                                                                                                                                                                        " + "'", str70, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(astNode76);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(functionNodeList84);
        org.junit.Assert.assertNull(obj88);
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        compilerEnvirons0.setOptimizationLevel((int) (short) 1);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean15 = compilerEnvirons0.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons0.getErrorReporter();
        int int17 = compilerEnvirons0.getLanguageVersion();
        boolean boolean18 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray25 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        compilerEnvirons19.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.head.IRFactory iRFactory30 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setRecoverFromErrors(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(65536);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.Node node7 = scriptNode3.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        java.lang.String str13 = scriptNode9.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.Object obj18 = scriptNode9.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        java.lang.String str22 = scriptNode9.toStringTree(scriptNode19);
        scriptNode19.setLength((-1));
        com.google.javascript.rhino.head.Node node25 = scriptNode19.getLastSibling();
        scriptNode1.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode19);
        com.google.javascript.rhino.head.ast.Symbol symbol28 = scriptNode1.getSymbol("hi;\n!;\n");
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(symbol28);
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode4.getChildScopes();
        java.lang.Object obj11 = scriptNode4.getCompilerData();
        int int12 = scriptNode4.getType();
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray13 = scriptNode4.getParamAndVarConst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 136 + "'", int12 == 136);
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.lang.String str49 = astRoot0.toSource(15);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode50.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList53 = scriptNode51.getChildScopes();
        int int54 = scriptNode51.getBaseLineno();
        com.google.javascript.rhino.head.Node node55 = scriptNode51.getLastSibling();
        int int56 = scriptNode51.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode57.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode58);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList60 = scriptNode58.getChildScopes();
        int int61 = scriptNode58.getBaseLineno();
        int int62 = scriptNode58.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList66 = scriptNode64.getFunctions();
        scriptNode64.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope69 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode58.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode64, (com.google.javascript.rhino.head.Node) scope69);
        scriptNode51.setTop(scriptNode58);
        int int72 = astRoot0.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode51);
        java.lang.String str73 = astRoot0.debugPrint();
        astRoot0.setSourceName("35\tSCRIPT 35 1\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(scopeList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(scopeList60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(functionNodeList66);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-905675306) + "'", int72 == (-905675306));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str73, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(22);
        scriptNode1.setBaseLineno(1397279810);
        com.google.javascript.rhino.head.ast.Comment comment4 = scriptNode1.getJsDocNode();
        org.junit.Assert.assertNull(comment4);
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        boolean boolean10 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray17 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        compilerEnvirons11.setActivationNames((java.util.Set<java.lang.String>) strSet18);
        compilerEnvirons11.setRecordingComments(false);
        compilerEnvirons11.setRecordingLocalJsDocComments(true);
        compilerEnvirons11.setRecordingComments(true);
        java.util.Set<java.lang.String> strSet27 = compilerEnvirons11.getActivationNames();
        compilerEnvirons0.setActivationNames(strSet27);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strSet27);
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList4 = scriptNode2.getChildScopes();
        int int5 = scriptNode2.getBaseLineno();
        int int6 = scriptNode2.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList10 = scriptNode8.getFunctions();
        scriptNode8.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope13 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode2.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scope13);
        scriptNode8.setEncodedSourceEnd(18);
        java.lang.String str17 = scriptNode8.getJsDoc();
        int int18 = scriptNode8.getParamCount();
        scriptNode8.clearParentScope();
        int int20 = scriptNode8.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode22.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode23);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList25 = scriptNode23.getFunctions();
        com.google.javascript.rhino.head.Node node27 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode23, 8);
        java.lang.String str29 = scriptNode23.toSource((-282781957));
        com.google.javascript.rhino.head.ast.AstRoot astRoot31 = new com.google.javascript.rhino.head.ast.AstRoot(1936891202);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons32 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory34 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons32, errorReporter33);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList38 = scriptNode36.getFunctions();
        scriptNode36.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node41 = iRFactory34.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.lang.String str42 = scriptNode36.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList46 = scriptNode44.getChildScopes();
        int int47 = scriptNode44.getBaseLineno();
        com.google.javascript.rhino.head.Node node48 = scriptNode44.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode49.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList52 = scriptNode50.getChildScopes();
        java.lang.String str54 = scriptNode50.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode44.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode50, (com.google.javascript.rhino.head.Node) scriptNode56);
        java.lang.Object obj59 = scriptNode50.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode60 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str62 = scriptNode60.toSource((int) '4');
        java.lang.String str63 = scriptNode50.toStringTree(scriptNode60);
        scriptNode36.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        int int65 = scriptNode50.getLineno();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator66 = scriptNode50.new NodeIterator();
        astRoot31.setCompilerData((java.lang.Object) scriptNode50);
        com.google.javascript.rhino.head.Node node69 = new com.google.javascript.rhino.head.Node(966622072, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) scriptNode23, (com.google.javascript.rhino.head.Node) scriptNode50, 18);
        boolean boolean70 = scriptNode50.hasChildren();
        org.junit.Assert.assertNull(scopeList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(functionNodeList10);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "{\n}\n" + "'", str29, "{\n}\n");
        org.junit.Assert.assertNotNull(functionNodeList38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(scopeList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(scopeList52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str62, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.Node node36 = scriptNode32.getLastSibling();
        scriptNode32.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList42 = scriptNode40.getFunctions();
        scriptNode40.setPosition((int) (byte) 10);
        java.lang.String str45 = scriptNode32.toStringTree(scriptNode40);
        int int46 = scriptNode32.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = astRoot0.getChildScopes();
        astRoot0.clearParentScope();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList50 = astRoot0.getStatements();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode52 = astRoot0.getFunctionNode(1152923454);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(functionNodeList42);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertNotNull(astNodeList50);
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        int int13 = astRoot6.getParamCount();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor14 = null;
        astRoot6.visitComments(nodeVisitor14);
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        scriptNode1.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        java.lang.String str14 = scriptNode1.toStringTree(scriptNode9);
        int int15 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode1.setType((int) (byte) -1);
        scriptNode1.setSourceName("typeof");
        java.lang.Object obj21 = null;
        scriptNode1.putProp(481479666, obj21);
        int int23 = scriptNode1.getBaseLineno();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser7 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean8 = compilerEnvirons0.getWarnTrailingComma();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList6 = scriptNode1.getSymbols();
        scriptNode1.flattenSymbolTable(false);
        java.lang.String str10 = scriptNode1.makeIndent(4);
        java.lang.String str11 = scriptNode1.getEncodedSource();
        int int14 = scriptNode1.getIntProp((-954561564), 37212131);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = scriptNode1.getTop();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap18 = null;
        scriptNode17.setSymbolTable(strMap18);
        scriptNode17.clearParentScope();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList21 = scriptNode17.getFunctions();
        java.lang.String str22 = scriptNode15.toStringTree(scriptNode17);
        com.google.javascript.rhino.head.Node node23 = scriptNode17.getLastSibling();
        com.google.javascript.rhino.head.ast.Symbol symbol25 = scriptNode17.getSymbol("0\tBLOCK 0 0\n");
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(symbolList6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "        " + "'", str10, "        ");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37212131 + "'", int14 == 37212131);
        org.junit.Assert.assertNotNull(scriptNode15);
        org.junit.Assert.assertNotNull(functionNodeList21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(symbol25);
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        com.google.javascript.rhino.head.Node node5 = scriptNode0.setType((int) 'a');
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        java.lang.String str26 = comment24.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray27 = new com.google.javascript.rhino.head.ast.Comment[] { comment12, comment18, comment24 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet28 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet28, commentArray27);
        astRoot6.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet28);
        boolean boolean31 = astRoot6.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode32 = astRoot6.getParent();
        java.lang.String str33 = astRoot6.debugPrint();
        int int34 = astRoot6.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet35 = astRoot6.getComments();
        astRoot6.checkParentLinks();
        astRoot6.setEndLineno(842975161);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode42.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode48 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray49 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList50 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList50, symbolArray49);
        scriptNode48.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList50);
        scriptNode45.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList50);
        scriptNode42.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList50);
        scriptNode40.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList50);
        node5.addChildAfter((com.google.javascript.rhino.head.Node) astRoot6, (com.google.javascript.rhino.head.Node) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList57 = astRoot6.getFunctions();
        astRoot6.setBounds((-855334), (int) '4');
        astRoot6.removeProp(1936891202);
        com.google.javascript.rhino.head.ast.AstRoot astRoot63 = astRoot6.getAstRoot();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                                                                                                                                                                        " + "'", str26, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(astNode32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str33, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(commentSet35);
        org.junit.Assert.assertNotNull(symbolArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(functionNodeList57);
        org.junit.Assert.assertNotNull(astRoot63);
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator4 = scriptNode3.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = null;
        com.google.javascript.rhino.head.ast.Comment comment9 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType7, "");
        java.lang.String str11 = comment9.toSource(100);
        java.lang.String str12 = comment9.getValue();
        scriptNode3.setParent((com.google.javascript.rhino.head.ast.AstNode) comment9);
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        boolean boolean21 = comment20.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        java.lang.String str34 = comment32.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray35 = new com.google.javascript.rhino.head.ast.Comment[] { comment20, comment26, comment32 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet36, commentArray35);
        astRoot14.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet36);
        boolean boolean39 = astRoot14.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray40 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList41 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList41, symbolArray40);
        astRoot14.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList41);
        com.google.javascript.rhino.head.Node node44 = astRoot14.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot14, (com.google.javascript.rhino.head.ast.Scope) scriptNode46);
        com.google.javascript.rhino.head.Node node49 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) comment9, (com.google.javascript.rhino.head.Node) scriptNode46);
        java.lang.Object obj51 = comment9.getProp((int) '4');
        int int52 = comment9.getType();
        comment9.setBounds((int) (byte) 100, 23);
        com.google.javascript.rhino.head.ast.Scope scope56 = comment9.getEnclosingScope();
        // The following exception was thrown during execution in test generation
        try {
            scope56.setDouble((double) (-325419474));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "                                                                                                                                                                                                        " + "'", str11, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "                                                                                                                                                                                                        " + "'", str34, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(symbolArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 161 + "'", int52 == 161);
        org.junit.Assert.assertNull(scope56);
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        compilerEnvirons0.setRecordingComments(false);
        compilerEnvirons0.setIdeMode(false);
        compilerEnvirons0.setGenerateObserverCount(true);
        compilerEnvirons0.setRecordingLocalJsDocComments(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(20);
        int int2 = scriptNode1.getLength();
        boolean boolean3 = scriptNode1.hasSideEffects();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode5.getChildScopes();
        int int8 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.Node node9 = scriptNode5.getLastSibling();
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = scriptNode5.getAstRoot();
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet12 = astRoot11.getComments();
        java.lang.String str13 = astRoot11.getSourceName();
        boolean boolean14 = astRoot11.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode15.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList18 = scriptNode16.getChildScopes();
        int int19 = scriptNode16.getBaseLineno();
        com.google.javascript.rhino.head.Node node20 = scriptNode16.getLastSibling();
        scriptNode16.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode23 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode23.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode24);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList26 = scriptNode24.getFunctions();
        scriptNode24.setPosition((int) (byte) 10);
        java.lang.String str29 = scriptNode16.toStringTree(scriptNode24);
        int int30 = scriptNode16.getBaseLineno();
        boolean boolean31 = scriptNode16.hasConsistentReturnUsage();
        astRoot11.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode16);
        scriptNode5.addChildScope((com.google.javascript.rhino.head.ast.Scope) scriptNode16);
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.setFinally((com.google.javascript.rhino.head.Node) scriptNode5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(astRoot10);
        org.junit.Assert.assertNull(commentSet12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(scopeList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(functionNodeList26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        int int4 = compilerEnvirons0.getOptimizationLevel();
        java.lang.String[] strArray25 = new java.lang.String[] { "-1\tSCRIPT -1 1\n", "                    ", "35\t  COMMENT 36 2\n", "typeof", "$0", "                    ", "Comment", "                    {\n                    }\n", "35\t  COMMENT 36 2\n", "                      ", "                                                                                                        ", "136", "$0", "                    {\n                    }\n", "                                                                                                        ", "{\n}\n", "ScriptNode", "                      ", "                      ", "typeof" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet26);
        compilerEnvirons0.setGeneratingSource(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter31 = compilerEnvirons0.getErrorReporter();
        boolean boolean32 = compilerEnvirons0.getAllowSharpComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(errorReporter31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList6 = scriptNode4.getChildScopes();
        int int7 = scriptNode4.getBaseLineno();
        int int8 = scriptNode4.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode9.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList12 = scriptNode10.getFunctions();
        scriptNode10.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope15 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode4.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) scope15);
        scriptNode10.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node19 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode10);
        int int20 = scriptNode10.getRegexpCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot21 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator22 = astRoot21.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        boolean boolean34 = comment33.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray42 = new com.google.javascript.rhino.head.ast.Comment[] { comment27, comment33, comment39 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet43 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet43, commentArray42);
        astRoot21.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet43);
        boolean boolean46 = astRoot21.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode47 = astRoot21.getParent();
        astRoot21.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.ast.AstNode astNode50 = astRoot21.getParent();
        java.lang.String str51 = scriptNode10.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot21);
        boolean boolean52 = scriptNode10.hasSideEffects();
        com.google.javascript.rhino.head.ast.Scope scope53 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator54 = scope53.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode55 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode55.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode56);
        scope53.setTop(scriptNode56);
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator59 = scope53.spliterator();
        int int60 = scope53.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope61 = scope53.getEnclosingScope();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node62 = scriptNode10.getChildBefore((com.google.javascript.rhino.head.Node) scope53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(functionNodeList12);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(astNode47);
        org.junit.Assert.assertNull(astNode50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator54);
        org.junit.Assert.assertNotNull(nodeSpliterator59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(scope61);
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int1 = astRoot0.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int3 = astRoot2.getBaseLineno();
        int int4 = astRoot2.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        scriptNode6.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList16 = scriptNode14.getFunctions();
        scriptNode14.setPosition((int) (byte) 10);
        java.lang.String str19 = scriptNode6.toStringTree(scriptNode14);
        int int20 = scriptNode6.getBaseLineno();
        astRoot2.target = scriptNode6;
        int int22 = astRoot0.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        com.google.javascript.rhino.head.ast.Scope scope24 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator25 = scope24.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        scope24.setTop(scriptNode27);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor30 = scope24.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        boolean boolean36 = comment35.hasSideEffects();
        int int37 = comment35.getLineno();
        com.google.javascript.rhino.head.Node node39 = comment35.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        int int46 = comment44.getLineno();
        com.google.javascript.rhino.head.Node node48 = comment44.setType(18);
        comment44.removeChildren();
        com.google.javascript.rhino.head.Node node51 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope24, (com.google.javascript.rhino.head.Node) comment35, (com.google.javascript.rhino.head.Node) comment44, 15);
        comment44.setRelative(24);
        scriptNode6.setJsDocNode(comment44);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons55 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory57 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons55, errorReporter56);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList61 = scriptNode59.getFunctions();
        scriptNode59.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node64 = iRFactory57.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        com.google.javascript.rhino.head.ast.AstNode astNode65 = scriptNode59.getParent();
        int int66 = scriptNode59.getAbsolutePosition();
        int int67 = scriptNode59.getRegexpCount();
        int int68 = scriptNode6.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        int int69 = scriptNode6.getAbsolutePosition();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(functionNodeList16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(nodeSpliterator25);
        org.junit.Assert.assertNotNull(nodeItor30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(functionNodeList61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(astNode65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 23 + "'", int69 == 23);
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode5.getChildScopes();
        int int8 = scriptNode5.getBaseLineno();
        int int9 = scriptNode5.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode11);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList13 = scriptNode11.getFunctions();
        scriptNode11.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope16 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode5.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) scope16);
        scriptNode11.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode22 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode21.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode22);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList24 = scriptNode22.getChildScopes();
        int int25 = scriptNode22.getBaseLineno();
        com.google.javascript.rhino.head.Node node26 = scriptNode22.getLastSibling();
        int int27 = scriptNode22.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope30 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot31 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator32 = astRoot31.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        boolean boolean44 = comment43.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        java.lang.String str51 = comment49.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray52 = new com.google.javascript.rhino.head.ast.Comment[] { comment37, comment43, comment49 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet53 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet53, commentArray52);
        astRoot31.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet53);
        boolean boolean56 = astRoot31.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode57 = astRoot31.getParent();
        astRoot31.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode22, (com.google.javascript.rhino.head.Node) scope30, (com.google.javascript.rhino.head.Node) astRoot31, 6);
        com.google.javascript.rhino.head.Node node62 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode11, (com.google.javascript.rhino.head.Node) astRoot31);
        com.google.javascript.rhino.head.Node node63 = new com.google.javascript.rhino.head.Node(574921099, (com.google.javascript.rhino.head.Node) astRoot31);
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node((int) (short) 100, node63);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode65.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode66);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList68 = scriptNode66.getChildScopes();
        int int69 = scriptNode66.getBaseLineno();
        com.google.javascript.rhino.head.Node node70 = scriptNode66.getLastSibling();
        int int71 = scriptNode66.getLineno();
        scriptNode66.setEncodedSourceEnd((-1395402336));
        com.google.javascript.rhino.head.Node node75 = new com.google.javascript.rhino.head.Node((-866282510), node63, (com.google.javascript.rhino.head.Node) scriptNode66, 603173706);
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(functionNodeList13);
        org.junit.Assert.assertNull(scopeList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "                                                                                                                                                                                                        " + "'", str51, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(astNode57);
        org.junit.Assert.assertNull(scopeList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        scriptNode0.setEncodedSource("typeof");
        java.lang.Object obj7 = scriptNode0.getProp(2);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList8 = scriptNode0.getStatements();
        java.lang.String str9 = scriptNode0.toSource();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = new com.google.javascript.rhino.head.CompilerEnvirons();
        com.google.javascript.rhino.head.IRFactory iRFactory11 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        java.lang.String str16 = scriptNode13.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode17.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList20 = scriptNode18.getChildScopes();
        int int21 = scriptNode18.getBaseLineno();
        com.google.javascript.rhino.head.Node node22 = scriptNode18.getLastSibling();
        int int23 = scriptNode18.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator24 = scriptNode18.new NodeIterator();
        int int25 = scriptNode18.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator27 = astRoot26.new NodeIterator();
        scriptNode18.setCompilerData((java.lang.Object) nodeIterator27);
        int int29 = scriptNode13.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        int int30 = scriptNode18.getEncodedSourceStart();
        int int31 = scriptNode18.getParamCount();
        com.google.javascript.rhino.head.Node node32 = iRFactory11.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode18);
        com.google.javascript.rhino.head.ast.Scope scope33 = scriptNode18.getEnclosingScope();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode0, (com.google.javascript.rhino.head.ast.Scope) scriptNode18);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList35 = scriptNode18.getStatements();
        com.google.javascript.rhino.head.ast.AstRoot astRoot36 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator37 = astRoot36.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType40 = null;
        com.google.javascript.rhino.head.ast.Comment comment42 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType40, "");
        boolean boolean43 = comment42.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        boolean boolean49 = comment48.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        java.lang.String str56 = comment54.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray57 = new com.google.javascript.rhino.head.ast.Comment[] { comment42, comment48, comment54 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet58 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet58, commentArray57);
        astRoot36.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet58);
        java.lang.String str61 = astRoot36.debugPrint();
        com.google.javascript.rhino.head.Node node62 = astRoot36.getLastChild();
        int int63 = astRoot36.getAbsolutePosition();
        com.google.javascript.rhino.head.ast.AstRoot astRoot64 = astRoot36.getAstRoot();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode18.setLoop((com.google.javascript.rhino.head.ast.Jump) astRoot36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(astNodeList8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{\n}\n" + "'", str9, "{\n}\n");
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(scopeList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1338884196) + "'", int29 == (-1338884196));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(scope33);
        org.junit.Assert.assertNotNull(astNodeList35);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "                                                                                                                                                                                                        " + "'", str56, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str61, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(astRoot64);
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType2, "");
        boolean boolean5 = comment4.hasSideEffects();
        int int6 = comment4.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType7 = comment4.getCommentType();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        int int12 = scriptNode9.getBaseLineno();
        int int13 = scriptNode9.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode14.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList17 = scriptNode15.getFunctions();
        scriptNode15.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope20 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode9.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode15, (com.google.javascript.rhino.head.Node) scope20);
        scriptNode15.setEncodedSourceEnd(18);
        comment4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = scriptNode15.getAstRoot();
        int int26 = scriptNode15.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = scriptNode15.getTop();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode28.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode29);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList31 = scriptNode29.getChildScopes();
        int int32 = scriptNode29.getBaseLineno();
        com.google.javascript.rhino.head.Node node33 = scriptNode29.getLastSibling();
        java.lang.String str35 = scriptNode29.toSource((int) (short) -1);
        int int36 = scriptNode29.getLength();
        boolean boolean37 = scriptNode29.hasChildren();
        scriptNode27.addChildrenToFront((com.google.javascript.rhino.head.Node) scriptNode29);
        int int39 = scriptNode29.getBaseLineno();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNull(commentType7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(functionNodeList17);
        org.junit.Assert.assertNull(astRoot25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 18 + "'", int26 == 18);
        org.junit.Assert.assertNotNull(scriptNode27);
        org.junit.Assert.assertNull(scopeList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{\n}\n" + "'", str35, "{\n}\n");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((-87298254));
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Jump jump2 = scriptNode1.getLoop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        com.google.javascript.rhino.head.Node node1 = new com.google.javascript.rhino.head.Node((-352975493));
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator1 = positionComparator0.reversed();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator2 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator4 = positionComparator2.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator3);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator2);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        int int10 = scriptNode7.getBaseLineno();
        com.google.javascript.rhino.head.Node node11 = scriptNode7.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        java.lang.String str17 = scriptNode13.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode7.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode13, (com.google.javascript.rhino.head.Node) scriptNode19);
        int int21 = scriptNode13.getType();
        java.lang.String str22 = scriptNode13.getSourceName();
        java.lang.String str23 = scriptNode13.toSource();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        int int30 = scriptNode26.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList31 = scriptNode26.getSymbols();
        int int32 = scriptNode26.getPosition();
        com.google.javascript.rhino.head.Node node33 = new com.google.javascript.rhino.head.Node(538062289, (com.google.javascript.rhino.head.Node) scriptNode26);
        int int34 = positionComparator0.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode13, (com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        scriptNode13.flattenSymbolTable(false);
        org.junit.Assert.assertNotNull(astNodeComparator1);
        org.junit.Assert.assertNotNull(astNodeComparator4);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 136 + "'", int21 == 136);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{\n}\n" + "'", str23, "{\n}\n");
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(symbolList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = scriptNode9.new NodeIterator();
        astRoot6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor13 = null;
        astRoot6.visitComments(nodeVisitor13);
        int int15 = astRoot6.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode16.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode17);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList19 = scriptNode17.getChildScopes();
        int int20 = scriptNode17.getBaseLineno();
        com.google.javascript.rhino.head.Node node21 = scriptNode17.getLastSibling();
        int int22 = scriptNode17.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = scriptNode17.new NodeIterator();
        int int24 = scriptNode17.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        scriptNode17.setCompilerData((java.lang.Object) nodeIterator26);
        astRoot6.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode17);
        scriptNode17.setSourceName("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.Node node31 = scriptNode17.getNext();
        java.lang.String str32 = scriptNode17.getNextTempName();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(scopeList19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "$0" + "'", str32, "$0");
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        compilerEnvirons0.setAllowSharpComments(true);
        boolean boolean8 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        boolean boolean11 = compilerEnvirons0.reportWarningAsError();
        com.google.javascript.rhino.head.Parser parser12 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons13 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean14 = compilerEnvirons13.isReservedKeywordAsIdentifier();
        boolean boolean15 = compilerEnvirons13.isIdeMode();
        boolean boolean16 = compilerEnvirons13.getWarnTrailingComma();
        compilerEnvirons13.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean20 = compilerEnvirons19.isReservedKeywordAsIdentifier();
        int int21 = compilerEnvirons19.getLanguageVersion();
        int int22 = compilerEnvirons19.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean24 = compilerEnvirons23.isReservedKeywordAsIdentifier();
        compilerEnvirons23.setStrictMode(true);
        compilerEnvirons23.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons29 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean30 = compilerEnvirons29.isReservedKeywordAsIdentifier();
        boolean boolean31 = compilerEnvirons29.getWarnTrailingComma();
        compilerEnvirons29.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet34 = compilerEnvirons29.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter35 = compilerEnvirons29.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory36 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter35);
        com.google.javascript.rhino.head.IRFactory iRFactory37 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons19, errorReporter35);
        com.google.javascript.rhino.head.IRFactory iRFactory38 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons13, errorReporter35);
        com.google.javascript.rhino.head.IRFactory iRFactory39 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter35);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode40.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList43 = scriptNode41.getChildScopes();
        scriptNode41.setBaseLineno(18);
        scriptNode41.setEndLineno(26);
        com.google.javascript.rhino.head.Node node48 = scriptNode41.getLastSibling();
        java.lang.String str49 = scriptNode41.getEncodedSource();
        com.google.javascript.rhino.head.Node node50 = iRFactory39.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode41);
        com.google.javascript.rhino.head.ast.Scope scope53 = new com.google.javascript.rhino.head.ast.Scope(0, 0);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList54 = scope53.getStatements();
        com.google.javascript.rhino.head.Node node55 = iRFactory39.transform((com.google.javascript.rhino.head.ast.AstNode) scope53);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 170 + "'", int21 == 170);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 170 + "'", int22 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNotNull(errorReporter35);
        org.junit.Assert.assertNull(scopeList43);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(astNodeList54);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10, 100);
        boolean boolean3 = scope2.hasSideEffects();
        java.lang.String str4 = scope2.shortName();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = scope2.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.Scope cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Scope" + "'", str4, "Scope");
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.lang.String str2 = astRoot0.toSource((int) '4');
        astRoot0.setEncodedSourceEnd(100);
        int int5 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = astRoot0.addFunction(functionNode6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Scope scope1 = scriptNode0.getEnclosingScope();
        com.google.javascript.rhino.head.ast.FunctionNode functionNode2 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = scriptNode0.addFunction(functionNode2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scope1);
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator2 = scriptNode1.spliterator();
        com.google.javascript.rhino.head.Node node4 = scriptNode1.setType((int) '#');
        int int5 = scriptNode1.getLineno();
        boolean boolean6 = scriptNode1.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator8 = scriptNode7.spliterator();
        com.google.javascript.rhino.head.Node node10 = scriptNode7.setType((int) '#');
        java.lang.Object obj11 = scriptNode7.getCompilerData();
        com.google.javascript.rhino.head.ast.Symbol symbol13 = scriptNode7.getSymbol("typeof");
        scriptNode7.setEncodedSource("{\n}\n");
        com.google.javascript.rhino.head.ast.AstRoot astRoot16 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet17 = astRoot16.getComments();
        int int18 = astRoot16.getEndLineno();
        com.google.javascript.rhino.head.Node node20 = astRoot16.setType((int) (short) 10);
        astRoot16.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator28 = scriptNode27.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        java.lang.String str36 = comment33.getValue();
        scriptNode27.setParent((com.google.javascript.rhino.head.ast.AstNode) comment33);
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator39 = astRoot38.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        java.lang.String str58 = comment56.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray59 = new com.google.javascript.rhino.head.ast.Comment[] { comment44, comment50, comment56 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet60 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet60, commentArray59);
        astRoot38.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet60);
        boolean boolean63 = astRoot38.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray64 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList65 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList65, symbolArray64);
        astRoot38.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList65);
        com.google.javascript.rhino.head.Node node68 = astRoot38.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode69 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode70 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode69.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode70);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot38, (com.google.javascript.rhino.head.ast.Scope) scriptNode70);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode26, (com.google.javascript.rhino.head.Node) comment33, (com.google.javascript.rhino.head.Node) scriptNode70);
        astRoot16.addComment(comment33);
        com.google.javascript.rhino.head.Node node75 = astRoot16.getLastSibling();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator76 = node75.spliterator();
        com.google.javascript.rhino.head.Node node78 = new com.google.javascript.rhino.head.Node(21, (com.google.javascript.rhino.head.Node) scriptNode1, (com.google.javascript.rhino.head.Node) scriptNode7, node75, (int) (byte) 10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot80 = new com.google.javascript.rhino.head.ast.AstRoot(12);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor81 = null;
        astRoot80.visitComments(nodeVisitor81);
        astRoot80.setEncodedSourceStart(15);
        com.google.javascript.rhino.head.Token.CommentType commentType87 = null;
        com.google.javascript.rhino.head.ast.Comment comment89 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType87, "");
        astRoot80.addChild((com.google.javascript.rhino.head.ast.AstNode) comment89);
        scriptNode1.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot80);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = scriptNode1.getParamOrVarName(36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeSpliterator2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(nodeSpliterator8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(symbol13);
        org.junit.Assert.assertNull(commentSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeSpliterator28);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "                                                                                                                                                                                                        " + "'", str58, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(symbolArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeSpliterator76);
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode(15);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList2 = scriptNode1.getChildScopes();
        org.junit.Assert.assertNull(scopeList2);
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.ErrorReporter errorReporter11 = compilerEnvirons0.getErrorReporter();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons12 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean13 = compilerEnvirons12.isReservedKeywordAsIdentifier();
        boolean boolean14 = compilerEnvirons12.isIdeMode();
        compilerEnvirons12.setRecordingLocalJsDocComments(false);
        boolean boolean17 = compilerEnvirons12.isGenerateDebugInfo();
        compilerEnvirons12.setRecordingLocalJsDocComments(true);
        boolean boolean20 = compilerEnvirons12.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        boolean boolean23 = compilerEnvirons21.getWarnTrailingComma();
        compilerEnvirons21.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet26 = compilerEnvirons21.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter27 = compilerEnvirons21.getErrorReporter();
        java.lang.String[] strArray33 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        compilerEnvirons21.setActivationNames((java.util.Set<java.lang.String>) strSet34);
        boolean boolean37 = compilerEnvirons21.isGenerateDebugInfo();
        boolean boolean38 = compilerEnvirons21.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons39 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean40 = compilerEnvirons39.isReservedKeywordAsIdentifier();
        int int41 = compilerEnvirons39.getLanguageVersion();
        int int42 = compilerEnvirons39.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean44 = compilerEnvirons43.isReservedKeywordAsIdentifier();
        compilerEnvirons43.setStrictMode(true);
        compilerEnvirons43.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons49 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean50 = compilerEnvirons49.isReservedKeywordAsIdentifier();
        boolean boolean51 = compilerEnvirons49.getWarnTrailingComma();
        compilerEnvirons49.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet54 = compilerEnvirons49.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter55 = compilerEnvirons49.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory56 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons43, errorReporter55);
        com.google.javascript.rhino.head.IRFactory iRFactory57 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons39, errorReporter55);
        com.google.javascript.rhino.head.IRFactory iRFactory58 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter55);
        boolean boolean59 = compilerEnvirons21.isGenerateDebugInfo();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons60 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean61 = compilerEnvirons60.isReservedKeywordAsIdentifier();
        compilerEnvirons60.setStrictMode(true);
        int int64 = compilerEnvirons60.getOptimizationLevel();
        java.lang.String[] strArray85 = new java.lang.String[] { "-1\tSCRIPT -1 1\n", "                    ", "35\t  COMMENT 36 2\n", "typeof", "$0", "                    ", "Comment", "                    {\n                    }\n", "35\t  COMMENT 36 2\n", "                      ", "                                                                                                        ", "136", "$0", "                    {\n                    }\n", "                                                                                                        ", "{\n}\n", "ScriptNode", "                      ", "                      ", "typeof" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        compilerEnvirons60.setActivationNames((java.util.Set<java.lang.String>) strSet86);
        compilerEnvirons21.setActivationNames((java.util.Set<java.lang.String>) strSet86);
        compilerEnvirons12.setActivationNames((java.util.Set<java.lang.String>) strSet86);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons91 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean92 = compilerEnvirons91.isReservedKeywordAsIdentifier();
        int int93 = compilerEnvirons91.getLanguageVersion();
        boolean boolean94 = compilerEnvirons91.isGenerateObserverCount();
        com.google.javascript.rhino.head.IRFactory iRFactory95 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons91);
        com.google.javascript.rhino.head.ErrorReporter errorReporter96 = compilerEnvirons91.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser97 = new com.google.javascript.rhino.head.Parser(compilerEnvirons12, errorReporter96);
        compilerEnvirons0.setErrorReporter(errorReporter96);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(errorReporter11);
        org.junit.Assert.assertNotNull(compilerEnvirons12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(errorReporter27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 170 + "'", int41 == 170);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 170 + "'", int42 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertNotNull(errorReporter55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 170 + "'", int93 == 170);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(errorReporter96);
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        int int9 = astRoot5.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode11.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope14 = scriptNode11.getEnclosingScope();
        java.lang.String str15 = scriptNode11.getEncodedSource();
        java.lang.String str16 = scriptNode11.getJsDoc();
        astRoot5.setParentScope((com.google.javascript.rhino.head.ast.Scope) scriptNode11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList21 = scriptNode19.getChildScopes();
        int int22 = scriptNode19.getBaseLineno();
        com.google.javascript.rhino.head.Node node23 = scriptNode19.getLastSibling();
        int int24 = scriptNode19.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        com.google.javascript.rhino.head.Node node30 = scriptNode26.getLastSibling();
        scriptNode26.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList36 = scriptNode34.getFunctions();
        scriptNode34.setPosition((int) (byte) 10);
        java.lang.String str39 = scriptNode26.toStringTree(scriptNode34);
        int int40 = scriptNode26.getBaseLineno();
        com.google.javascript.rhino.head.Node node42 = scriptNode26.setType((int) (byte) -1);
        scriptNode19.target = scriptNode26;
        com.google.javascript.rhino.head.ast.Scope scope46 = new com.google.javascript.rhino.head.ast.Scope(6, (int) (short) -1);
        scriptNode26.addChildrenToFront((com.google.javascript.rhino.head.Node) scope46);
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList48 = scriptNode26.getSymbols();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = scriptNode26.getTop();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode11.setScope((com.google.javascript.rhino.head.ast.Scope) scriptNode49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(scope14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(scopeList21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(functionNodeList36);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(symbolList48);
        org.junit.Assert.assertNotNull(scriptNode49);
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str15 = scriptNode1.getSourceName();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) 0, commentType18, "hi!");
        scriptNode1.setJsDocNode(comment20);
        com.google.javascript.rhino.head.Token.CommentType commentType22 = comment20.getCommentType();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = comment20.getExistingIntProp((-1096410579));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(commentType22);
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol3 = astRoot0.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot((int) '4');
        astRoot0.setCompilerData((java.lang.Object) astRoot5);
        com.google.javascript.rhino.head.ast.Scope scope11 = new com.google.javascript.rhino.head.ast.Scope(0, 0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList15 = scriptNode13.getChildScopes();
        int int16 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.Node node17 = scriptNode13.getLastSibling();
        scriptNode13.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode21 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode20.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode21);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList23 = scriptNode21.getFunctions();
        scriptNode21.setPosition((int) (byte) 10);
        java.lang.String str26 = scriptNode13.toStringTree(scriptNode21);
        int int27 = scriptNode13.getBaseLineno();
        com.google.javascript.rhino.head.Node node29 = scriptNode13.setType((int) (byte) -1);
        scriptNode13.setSourceName("typeof");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList36 = scriptNode34.getChildScopes();
        int int37 = scriptNode34.getBaseLineno();
        com.google.javascript.rhino.head.Node node38 = scriptNode34.getLastSibling();
        int int39 = scriptNode34.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator40 = scriptNode34.new NodeIterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList44 = scriptNode42.getChildScopes();
        int int45 = scriptNode42.getBaseLineno();
        com.google.javascript.rhino.head.Node node46 = scriptNode42.getLastSibling();
        scriptNode42.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode50 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode49.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode50);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList52 = scriptNode50.getFunctions();
        scriptNode50.setPosition((int) (byte) 10);
        java.lang.String str55 = scriptNode42.toStringTree(scriptNode50);
        int int56 = scriptNode42.getBaseLineno();
        com.google.javascript.rhino.head.Node node58 = scriptNode42.setType((int) (byte) -1);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(9, (com.google.javascript.rhino.head.Node) scriptNode34, node58);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node((int) (short) 0, (com.google.javascript.rhino.head.Node) scope11, (com.google.javascript.rhino.head.Node) scriptNode13, node59, 17);
        astRoot5.putProp(5, (java.lang.Object) node59);
        astRoot5.setEncodedSourceStart((int) (short) -1);
        int int65 = astRoot5.getParamCount();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor66 = null;
        astRoot5.visitComments(nodeVisitor66);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet68 = astRoot5.getComments();
        com.google.javascript.rhino.head.ast.Scope scope69 = astRoot5.getParentScope();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(symbol3);
        org.junit.Assert.assertNull(scopeList15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(functionNodeList23);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(scopeList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(scopeList44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(functionNodeList52);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(commentSet68);
        org.junit.Assert.assertNull(scope69);
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        scriptNode7.setSourceName("-1\tSCRIPT -1 1\n");
        boolean boolean19 = scriptNode7.hasSideEffects();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator20 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator21 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator22 = positionComparator20.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator21);
        com.google.javascript.rhino.head.ast.AstRoot astRoot23 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int24 = astRoot23.getBaseLineno();
        java.lang.String str25 = astRoot23.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator27 = astRoot26.new NodeIterator();
        int int28 = positionComparator21.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot23, (com.google.javascript.rhino.head.ast.AstNode) astRoot26);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode29 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator30 = scriptNode29.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator31 = scriptNode29.new NodeIterator();
        astRoot26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode29);
        astRoot26.setInStrictMode(true);
        java.lang.String str35 = astRoot26.debugPrint();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        int int42 = comment40.getLineno();
        com.google.javascript.rhino.head.Token.CommentType commentType43 = comment40.getCommentType();
        java.lang.String str45 = comment40.makeIndent((int) '4');
        astRoot26.setJsDocNode(comment40);
        scriptNode7.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot26);
        int int48 = scriptNode7.getEndLineno();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap49 = scriptNode7.getSymbolTable();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(astNodeComparator22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str25, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator30);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1\tSCRIPT -1 1\n-1\t  SCRIPT 0 1\n" + "'", str35, "-1\tSCRIPT -1 1\n-1\t  SCRIPT 0 1\n");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(commentType43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                        " + "'", str45, "                                                                                                        ");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNull(strMap49);
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        int int30 = astRoot0.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment31 = astRoot0.getJsDocNode();
        astRoot0.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.ast.AstRoot astRoot34 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator35 = astRoot34.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        boolean boolean41 = comment40.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType44 = null;
        com.google.javascript.rhino.head.ast.Comment comment46 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType44, "");
        boolean boolean47 = comment46.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType50 = null;
        com.google.javascript.rhino.head.ast.Comment comment52 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType50, "");
        java.lang.String str54 = comment52.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray55 = new com.google.javascript.rhino.head.ast.Comment[] { comment40, comment46, comment52 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet56 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet56, commentArray55);
        astRoot34.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet56);
        boolean boolean59 = astRoot34.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray60 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList61 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList61, symbolArray60);
        astRoot34.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList61);
        int int64 = astRoot34.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode65 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode65.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode66);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList68 = scriptNode66.getChildScopes();
        int int69 = scriptNode66.getBaseLineno();
        com.google.javascript.rhino.head.Node node70 = scriptNode66.getLastSibling();
        scriptNode66.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode73.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode74);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList76 = scriptNode74.getFunctions();
        scriptNode74.setPosition((int) (byte) 10);
        java.lang.String str79 = scriptNode66.toStringTree(scriptNode74);
        int int80 = scriptNode66.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot34, (com.google.javascript.rhino.head.ast.Scope) scriptNode66);
        astRoot0.setParentScope((com.google.javascript.rhino.head.ast.Scope) astRoot34);
        astRoot0.setEndLineno(15);
        astRoot0.setEncodedSource("      ");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode88 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode87.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode88);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList90 = scriptNode88.getFunctions();
        scriptNode88.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot93 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int94 = astRoot93.getBaseLineno();
        scriptNode88.addChildToBack((com.google.javascript.rhino.head.Node) astRoot93);
        astRoot0.setParent((com.google.javascript.rhino.head.ast.AstNode) astRoot93);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNull(comment31);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "                                                                                                                                                                                                        " + "'", str54, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(symbolArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(scopeList68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(functionNodeList76);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(functionNodeList90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        boolean boolean7 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setGeneratingSource(false);
        int int10 = compilerEnvirons0.getOptimizationLevel();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean12 = compilerEnvirons11.isReservedKeywordAsIdentifier();
        boolean boolean13 = compilerEnvirons11.isIdeMode();
        compilerEnvirons11.setRecordingLocalJsDocComments(false);
        boolean boolean16 = compilerEnvirons11.isGenerateDebugInfo();
        java.lang.String[] strArray58 = new java.lang.String[] { "                                            ", "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                          ", "      {\n      }\n", "136", "136", "-1\tSCRIPT -1 1\n-1\t  SCRIPT 0 1\n", "                                                                hi!", "                    {\n                    }\n", "1\tCOMMENT 1 0\n", "+=", "  {\n  }\n", "-213029975\tSCRIPT -213029975 1\n", "        ", "23\tBITXOR 23 -22\n25\t  COMMENT 2 0\n", "23\tBITXOR 23 -22\n25\t  COMMENT 2 0\n", "        {\n        }\n", "                                                                                                                                                                                                                                                                                                                                                    ", "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  LSH 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "23\tBITXOR 23 -22\n25\t  COMMENT 2 0\n", "              ", "", "35\t  COMMENT 36 2\n", "                                                                                                                                                                                                                                                                                hi!", "9\t  SCRIPT 8 1\n", "                                                    hi!", "35", "        ", "-1\t  SCRIPT 0 1\n", "                                          ", "      {\n      }\n", "  0;\n  SCRIPT;\n  0;\n  1;\n", "              ", "9\t  SCRIPT 10 1\n", "161", "                                                                                                                                                                                                                                                    ", "  0;\n  SCRIPT;\n  0;\n  1;\n", "-1\tSETPROP -1 1\n", "0\tBLOCK 0 0\n", "                                          ", "52\tSCRIPT 52 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        compilerEnvirons11.setActivationNames((java.util.Set<java.lang.String>) strSet59);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet59);
        boolean boolean63 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean64 = compilerEnvirons0.getAllowSharpComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        int int7 = scriptNode3.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList11 = scriptNode9.getFunctions();
        scriptNode9.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scope14);
        scriptNode9.setEncodedSource("-1\tSCRIPT -1 1\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode19.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode20);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList22 = scriptNode20.getChildScopes();
        int int23 = scriptNode20.getBaseLineno();
        com.google.javascript.rhino.head.Node node24 = scriptNode20.getLastSibling();
        int int25 = scriptNode20.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope28 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = astRoot29.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType33 = null;
        com.google.javascript.rhino.head.ast.Comment comment35 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType33, "");
        boolean boolean36 = comment35.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType39 = null;
        com.google.javascript.rhino.head.ast.Comment comment41 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType39, "");
        boolean boolean42 = comment41.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        java.lang.String str49 = comment47.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray50 = new com.google.javascript.rhino.head.ast.Comment[] { comment35, comment41, comment47 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet51 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet51, commentArray50);
        astRoot29.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet51);
        boolean boolean54 = astRoot29.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode55 = astRoot29.getParent();
        astRoot29.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node59 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode20, (com.google.javascript.rhino.head.Node) scope28, (com.google.javascript.rhino.head.Node) astRoot29, 6);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node((int) (byte) 10, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) astRoot29);
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(574921099, (com.google.javascript.rhino.head.Node) astRoot29);
        int int64 = astRoot29.getIntProp((-1496675853), (-568490075));
        int int65 = astRoot29.getPosition();
        com.google.javascript.rhino.head.ast.Scope scope66 = astRoot29.getParentScope();
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(functionNodeList11);
        org.junit.Assert.assertNull(scopeList22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "                                                                                                                                                                                                        " + "'", str49, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(astNode55);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-568490075) + "'", int64 == (-568490075));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(scope66);
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope(1617059566, 0);
        com.google.javascript.rhino.head.ast.Comment comment3 = scope2.getJsDocNode();
        org.junit.Assert.assertNull(comment3);
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        com.google.javascript.rhino.head.ast.Symbol symbol3 = astRoot0.getSymbol("                                                                                                                                                                                                        ");
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot((int) '4');
        astRoot0.setCompilerData((java.lang.Object) astRoot5);
        com.google.javascript.rhino.head.Node node8 = astRoot5.setType(25);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        boolean boolean16 = comment15.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        java.lang.String str29 = comment27.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray30 = new com.google.javascript.rhino.head.ast.Comment[] { comment15, comment21, comment27 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet31 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet31, commentArray30);
        astRoot9.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet31);
        boolean boolean34 = astRoot9.isInStrictMode();
        int int35 = astRoot9.getParamCount();
        int int36 = astRoot9.getLineno();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode(11);
        astRoot9.setTop(scriptNode38);
        astRoot5.setParent((com.google.javascript.rhino.head.ast.AstNode) astRoot9);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor41 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot9.visitAll(nodeVisitor41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(symbol3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "                                                                                                                                                                                                        " + "'", str29, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean11 = compilerEnvirons0.isGenerateDebugInfo();
        java.lang.String[] strArray21 = new java.lang.String[] { "$0", "                      ", "                                                                                                                                                                                                        ", "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n", "ScriptNode", "AstRoot", "136" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet22);
        boolean boolean25 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setWarnTrailingComma(false);
        com.google.javascript.rhino.head.Context context28 = null;
        // The following exception was thrown during execution in test generation
        try {
            compilerEnvirons0.initFromContext(context28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        astRoot0.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode10 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode11 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator12 = scriptNode11.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.lang.String str20 = comment17.getValue();
        scriptNode11.setParent((com.google.javascript.rhino.head.ast.AstNode) comment17);
        com.google.javascript.rhino.head.ast.AstRoot astRoot22 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator23 = astRoot22.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType26 = null;
        com.google.javascript.rhino.head.ast.Comment comment28 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType26, "");
        boolean boolean29 = comment28.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType32 = null;
        com.google.javascript.rhino.head.ast.Comment comment34 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType32, "");
        boolean boolean35 = comment34.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType38 = null;
        com.google.javascript.rhino.head.ast.Comment comment40 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType38, "");
        java.lang.String str42 = comment40.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray43 = new com.google.javascript.rhino.head.ast.Comment[] { comment28, comment34, comment40 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet44 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet44, commentArray43);
        astRoot22.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet44);
        boolean boolean47 = astRoot22.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray48 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList49 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList49, symbolArray48);
        astRoot22.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList49);
        com.google.javascript.rhino.head.Node node52 = astRoot22.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot22, (com.google.javascript.rhino.head.ast.Scope) scriptNode54);
        com.google.javascript.rhino.head.Node node57 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode10, (com.google.javascript.rhino.head.Node) comment17, (com.google.javascript.rhino.head.Node) scriptNode54);
        astRoot0.addComment(comment17);
        com.google.javascript.rhino.head.Node node59 = astRoot0.getLastSibling();
        astRoot0.setBounds(23, (int) (short) 1);
        java.lang.String str63 = astRoot0.debugPrint();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons64 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean65 = compilerEnvirons64.isReservedKeywordAsIdentifier();
        compilerEnvirons64.setStrictMode(true);
        compilerEnvirons64.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons70 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean71 = compilerEnvirons70.isReservedKeywordAsIdentifier();
        boolean boolean72 = compilerEnvirons70.getWarnTrailingComma();
        compilerEnvirons70.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet75 = compilerEnvirons70.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter76 = compilerEnvirons70.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory77 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons64, errorReporter76);
        com.google.javascript.rhino.head.ast.AstRoot astRoot81 = iRFactory77.parse("                                ", "1\tCOMMENT 1 0\n", (int) (byte) 100);
        astRoot0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot81);
        com.google.javascript.rhino.head.Node node83 = astRoot81.getFirstChild();
        com.google.javascript.rhino.head.ast.Scope scope86 = new com.google.javascript.rhino.head.ast.Scope((-15), 481479666);
        astRoot81.addChild((com.google.javascript.rhino.head.ast.AstNode) scope86);
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeSpliterator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "                                                                                                                                                                                                        " + "'", str42, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(symbolArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "23\tBITXOR 23 -22\n25\t  COMMENT 2 0\n" + "'", str63, "23\tBITXOR 23 -22\n25\t  COMMENT 2 0\n");
        org.junit.Assert.assertNotNull(compilerEnvirons64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertNotNull(errorReporter76);
        org.junit.Assert.assertNotNull(astRoot81);
        org.junit.Assert.assertNull(node83);
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int4 = astRoot3.getBaseLineno();
        java.lang.String str5 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        int int8 = positionComparator1.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot3, (com.google.javascript.rhino.head.ast.AstNode) astRoot6);
        int int9 = astRoot3.getFunctionCount();
        astRoot3.setPosition(1384960853);
        java.lang.String str12 = astRoot3.debugPrint();
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        com.google.javascript.rhino.head.Token.CommentType commentType18 = comment17.getCommentType();
        int int19 = comment17.depth();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator20 = comment17.new NodeIterator();
        int int21 = comment17.getLength();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator22 = comment17.spliterator();
        java.lang.String str23 = comment17.shortName();
        astRoot3.addComment(comment17);
        com.google.javascript.rhino.head.Token.CommentType commentType25 = comment17.getCommentType();
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str5, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1384960853\tSCRIPT 1384960853 1\n" + "'", str12, "1384960853\tSCRIPT 1384960853 1\n");
        org.junit.Assert.assertNull(commentType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Comment" + "'", str23, "Comment");
        org.junit.Assert.assertNull(commentType25);
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setReservedKeywordAsIdentifier(false);
        int int9 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean10 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setWarnTrailingComma(true);
        compilerEnvirons0.setGenerateObserverCount(false);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons0.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons3 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean4 = compilerEnvirons3.isReservedKeywordAsIdentifier();
        boolean boolean5 = compilerEnvirons3.getWarnTrailingComma();
        compilerEnvirons3.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet8 = compilerEnvirons3.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter9 = compilerEnvirons3.getErrorReporter();
        java.lang.String[] strArray15 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        compilerEnvirons3.setActivationNames((java.util.Set<java.lang.String>) strSet16);
        com.google.javascript.rhino.head.ErrorReporter errorReporter19 = compilerEnvirons3.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser20 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter19);
        com.google.javascript.rhino.head.ast.AstRoot astRoot24 = parser20.parse("          hi!", "hi!", 2);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor25 = astRoot24.iterator();
        int int26 = astRoot24.depth();
        astRoot24.removeChildren();
        astRoot24.setEncodedSourceStart((-447184571));
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(errorReporter9);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(errorReporter19);
        org.junit.Assert.assertNotNull(astRoot24);
        org.junit.Assert.assertNotNull(nodeItor25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        com.google.javascript.rhino.head.Node node31 = astRoot1.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot1, (com.google.javascript.rhino.head.ast.Scope) scriptNode33);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode37.getChildScopes();
        int int40 = scriptNode37.getBaseLineno();
        com.google.javascript.rhino.head.Node node41 = scriptNode37.getLastSibling();
        scriptNode37.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode44.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode45);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList47 = scriptNode45.getFunctions();
        scriptNode45.setPosition((int) (byte) 10);
        java.lang.String str50 = scriptNode37.toStringTree(scriptNode45);
        int int51 = scriptNode37.getBaseLineno();
        com.google.javascript.rhino.head.Node node53 = scriptNode37.setType((int) (byte) -1);
        java.lang.String str54 = astRoot1.toStringTree(scriptNode37);
        com.google.javascript.rhino.head.ast.AstRoot astRoot55 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator56 = astRoot55.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType59 = null;
        com.google.javascript.rhino.head.ast.Comment comment61 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType59, "");
        boolean boolean62 = comment61.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType65 = null;
        com.google.javascript.rhino.head.ast.Comment comment67 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType65, "");
        boolean boolean68 = comment67.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType71 = null;
        com.google.javascript.rhino.head.ast.Comment comment73 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType71, "");
        java.lang.String str75 = comment73.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray76 = new com.google.javascript.rhino.head.ast.Comment[] { comment61, comment67, comment73 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet77 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet77, commentArray76);
        astRoot55.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet77);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet77);
        boolean boolean81 = astRoot1.isInStrictMode();
        astRoot1.setEncodedSource("                                                                hi!");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = new com.google.javascript.rhino.head.ast.ScriptNode(170);
        com.google.javascript.rhino.head.ast.AstRoot astRoot87 = new com.google.javascript.rhino.head.ast.AstRoot((-891351598));
        com.google.javascript.rhino.head.Node node88 = new com.google.javascript.rhino.head.Node(654067107, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) scriptNode85, (com.google.javascript.rhino.head.Node) astRoot87);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(functionNodeList47);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "                                                                                                                                                                                                        " + "'", str75, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        boolean boolean3 = compilerEnvirons0.isGenerateObserverCount();
        com.google.javascript.rhino.head.IRFactory iRFactory4 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ErrorReporter errorReporter5 = compilerEnvirons0.getErrorReporter();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        boolean boolean8 = compilerEnvirons0.isRecordingLocalJsDocComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode4.getChildScopes();
        java.lang.Object obj11 = scriptNode4.getCompilerData();
        com.google.javascript.rhino.head.ast.AstRoot astRoot12 = scriptNode4.getAstRoot();
        boolean boolean13 = scriptNode4.hasSideEffects();
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = scriptNode4.getAstRoot();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            astRoot14.visit(nodeVisitor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(astRoot12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(astRoot14);
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator7 = astRoot6.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        boolean boolean19 = comment18.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType22, "");
        java.lang.String str26 = comment24.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray27 = new com.google.javascript.rhino.head.ast.Comment[] { comment12, comment18, comment24 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet28 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet28, commentArray27);
        astRoot6.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet28);
        boolean boolean31 = astRoot6.isInStrictMode();
        com.google.javascript.rhino.head.Token.CommentType commentType34 = null;
        com.google.javascript.rhino.head.ast.Comment comment36 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType34, "hi!");
        astRoot6.addComment(comment36);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode38 = comment36.getEnclosingFunction();
        astRoot0.addComment(comment36);
        java.lang.String str40 = astRoot0.getNextTempName();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = astRoot0.getParamAndVarCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                                                                                                                                                                        " + "'", str26, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(functionNode38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "$0" + "'", str40, "$0");
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        boolean boolean7 = compilerEnvirons0.isRecordingComments();
        compilerEnvirons0.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        int int12 = compilerEnvirons10.getLanguageVersion();
        int int13 = compilerEnvirons10.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons14 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean15 = compilerEnvirons14.isReservedKeywordAsIdentifier();
        compilerEnvirons14.setStrictMode(true);
        compilerEnvirons14.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons20 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean21 = compilerEnvirons20.isReservedKeywordAsIdentifier();
        boolean boolean22 = compilerEnvirons20.getWarnTrailingComma();
        compilerEnvirons20.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet25 = compilerEnvirons20.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter26 = compilerEnvirons20.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory27 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons14, errorReporter26);
        com.google.javascript.rhino.head.IRFactory iRFactory28 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10, errorReporter26);
        com.google.javascript.rhino.head.IRFactory iRFactory29 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter26);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator34 = scriptNode33.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType37 = null;
        com.google.javascript.rhino.head.ast.Comment comment39 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType37, "");
        java.lang.String str41 = comment39.toSource(100);
        java.lang.String str42 = comment39.getValue();
        scriptNode33.setParent((com.google.javascript.rhino.head.ast.AstNode) comment39);
        com.google.javascript.rhino.head.ast.AstRoot astRoot44 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator45 = astRoot44.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        boolean boolean51 = comment50.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType54 = null;
        com.google.javascript.rhino.head.ast.Comment comment56 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType54, "");
        boolean boolean57 = comment56.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType60 = null;
        com.google.javascript.rhino.head.ast.Comment comment62 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType60, "");
        java.lang.String str64 = comment62.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray65 = new com.google.javascript.rhino.head.ast.Comment[] { comment50, comment56, comment62 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet66 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet66, commentArray65);
        astRoot44.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet66);
        boolean boolean69 = astRoot44.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray70 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList71 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList71, symbolArray70);
        astRoot44.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList71);
        com.google.javascript.rhino.head.Node node74 = astRoot44.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode76 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode75.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode76);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot44, (com.google.javascript.rhino.head.ast.Scope) scriptNode76);
        com.google.javascript.rhino.head.Node node79 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode32, (com.google.javascript.rhino.head.Node) comment39, (com.google.javascript.rhino.head.Node) scriptNode76);
        java.lang.String str80 = scriptNode32.getJsDoc();
        int int81 = scriptNode32.getLength();
        int int82 = scriptNode32.getPosition();
        com.google.javascript.rhino.head.Node node83 = iRFactory29.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.lang.Object obj85 = scriptNode32.getProp((int) (byte) 10);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 170 + "'", int12 == 170);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 170 + "'", int13 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(errorReporter26);
        org.junit.Assert.assertNotNull(nodeSpliterator34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "                                                                                                                                                                                                        " + "'", str41, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "                                                                                                                                                                                                        " + "'", str64, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(symbolArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(obj85);
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode2.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode3);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList5 = scriptNode3.getChildScopes();
        int int6 = scriptNode3.getBaseLineno();
        com.google.javascript.rhino.head.Node node7 = scriptNode3.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        java.lang.String str13 = scriptNode9.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode15 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode15);
        java.lang.Object obj18 = scriptNode9.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str21 = scriptNode19.toSource((int) '4');
        java.lang.String str22 = scriptNode9.toStringTree(scriptNode19);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons23 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons23, errorReporter24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        int int31 = scriptNode27.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList35 = scriptNode33.getFunctions();
        scriptNode33.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope38 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode27.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scope38);
        scriptNode33.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node42 = iRFactory25.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory45 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons43, errorReporter44);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node62 = iRFactory45.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        scriptNode33.setTop(scriptNode53);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) scriptNode33, 10);
        int int68 = scriptNode9.getIntProp(5, 100);
        com.google.javascript.rhino.head.ast.AstRoot astRoot70 = new com.google.javascript.rhino.head.ast.AstRoot(12);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor71 = null;
        astRoot70.visitComments(nodeVisitor71);
        astRoot70.setEncodedSourceStart(15);
        astRoot70.setEncodedSourceBounds(95442629, (-405371752));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode78 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode78.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode79);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList81 = scriptNode79.getChildScopes();
        int int82 = scriptNode79.getBaseLineno();
        int int83 = scriptNode79.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode84 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode85 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode84.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode85);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList87 = scriptNode85.getFunctions();
        scriptNode85.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope90 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode79.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode85, (com.google.javascript.rhino.head.Node) scope90);
        boolean boolean92 = scope90.hasChildren();
        java.lang.String str93 = scope90.shortName();
        com.google.javascript.rhino.head.Node node95 = new com.google.javascript.rhino.head.Node(65536, (com.google.javascript.rhino.head.Node) scriptNode9, (com.google.javascript.rhino.head.Node) astRoot70, (com.google.javascript.rhino.head.Node) scope90, 816654735);
        java.lang.Object obj97 = node95.getProp(32);
        org.junit.Assert.assertNull(scopeList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str21, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(functionNodeList35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNull(scopeList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(functionNodeList87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Scope" + "'", str93, "Scope");
        org.junit.Assert.assertNull(obj97);
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        int int26 = astRoot0.getParamCount();
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean28 = astRoot27.hasSideEffects();
        astRoot0.target = astRoot27;
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor30 = null;
        astRoot27.visitComments(nodeVisitor30);
        astRoot27.removeProp((-317066570));
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList34 = astRoot27.getSymbols();
        java.lang.String str35 = astRoot27.debugPrint();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(symbolList34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str35, "-1\tSCRIPT -1 1\n");
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.Scope scope3 = scriptNode1.getDefiningScope("                                          ");
        int int4 = scriptNode1.getRegexpCount();
        int int5 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.ast.AstNode astNode6 = scriptNode1.getParent();
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode1.getChildScopes();
        scriptNode1.setRelative(25);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = scriptNode1.getExistingIntProp((-110742292));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scope3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(astNode6);
        org.junit.Assert.assertNull(scopeList7);
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot((-726073388));
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setRecoverFromErrors(false);
        com.google.javascript.rhino.head.IRFactory iRFactory13 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        java.io.Reader reader14 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot17 = iRFactory13.parse(reader14, "                                                    ", (-307377263));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        java.lang.String str52 = comment50.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray53 = new com.google.javascript.rhino.head.ast.Comment[] { comment38, comment44, comment50 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet54, commentArray53);
        astRoot32.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet54);
        boolean boolean57 = astRoot32.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray58 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList59 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList59, symbolArray58);
        astRoot32.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList59);
        com.google.javascript.rhino.head.Node node62 = astRoot32.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot32, (com.google.javascript.rhino.head.ast.Scope) scriptNode64);
        com.google.javascript.rhino.head.ast.AstRoot astRoot67 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = astRoot67.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor69 = astRoot67.iterator();
        astRoot67.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) astRoot32, (com.google.javascript.rhino.head.Node) astRoot67, (int) (byte) 0);
        java.lang.String str75 = astRoot1.toSource(170);
        com.google.javascript.rhino.head.Token.CommentType commentType78 = null;
        com.google.javascript.rhino.head.ast.Comment comment80 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType78, "");
        boolean boolean81 = comment80.hasSideEffects();
        int int82 = comment80.getLineno();
        com.google.javascript.rhino.head.Node node84 = comment80.setType(18);
        boolean boolean85 = comment80.hasSideEffects();
        astRoot1.addComment(comment80);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = astRoot1.getTop();
        int int88 = scriptNode87.getFunctionCount();
        scriptNode87.setLength(310881041);
        scriptNode87.setEncodedSource("129");
        int int93 = scriptNode87.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            scriptNode87.resetTargets();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                                                                                                                                                                        " + "'", str52, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(symbolArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(nodeItor69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(scriptNode87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator1 = positionComparator0.reversed();
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator3 = astRoot2.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType6 = null;
        com.google.javascript.rhino.head.ast.Comment comment8 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType6, "");
        boolean boolean9 = comment8.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType12 = null;
        com.google.javascript.rhino.head.ast.Comment comment14 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType12, "");
        boolean boolean15 = comment14.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray23 = new com.google.javascript.rhino.head.ast.Comment[] { comment8, comment14, comment20 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet24 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet24, commentArray23);
        astRoot2.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet24);
        boolean boolean27 = astRoot2.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray28 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList29 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList29, symbolArray28);
        astRoot2.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList29);
        int int32 = astRoot2.getEncodedSourceStart();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode33.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode34);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList36 = scriptNode34.getChildScopes();
        int int37 = scriptNode34.getBaseLineno();
        com.google.javascript.rhino.head.Node node38 = scriptNode34.getLastSibling();
        scriptNode34.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode41.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode42);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList44 = scriptNode42.getFunctions();
        scriptNode42.setPosition((int) (byte) 10);
        java.lang.String str47 = scriptNode34.toStringTree(scriptNode42);
        int int48 = scriptNode34.getBaseLineno();
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot2, (com.google.javascript.rhino.head.ast.Scope) scriptNode34);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap50 = scriptNode34.getSymbolTable();
        boolean boolean51 = scriptNode34.hasConsistentReturnUsage();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode54 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode53.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode54);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList56 = scriptNode54.getChildScopes();
        int int57 = scriptNode54.getBaseLineno();
        int int58 = scriptNode54.getParamCount();
        java.util.List<com.google.javascript.rhino.head.ast.Symbol> symbolList59 = scriptNode54.getSymbols();
        int int60 = scriptNode54.getPosition();
        com.google.javascript.rhino.head.Node node61 = new com.google.javascript.rhino.head.Node(13, (com.google.javascript.rhino.head.Node) scriptNode54);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope(18);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = scope63.getTop();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode66.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot69 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator70 = astRoot69.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor71 = astRoot69.iterator();
        scriptNode66.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot69);
        scope63.addChildrenToBack((com.google.javascript.rhino.head.Node) scriptNode66);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode75 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        java.lang.Object obj76 = scriptNode75.getCompilerData();
        com.google.javascript.rhino.head.ast.Scope scope77 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator78 = scope77.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode79 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode80 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode79.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode80);
        scope77.setTop(scriptNode80);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) scriptNode75, (com.google.javascript.rhino.head.ast.Scope) scriptNode80);
        java.lang.String str84 = scope63.toStringTree(scriptNode75);
        scriptNode54.setTop(scriptNode75);
        int int86 = positionComparator0.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode34, (com.google.javascript.rhino.head.ast.AstNode) scriptNode75);
        com.google.javascript.rhino.head.ast.FunctionNode functionNode87 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int88 = scriptNode34.addFunction(functionNode87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(astNodeComparator1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(symbolArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(scopeList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(functionNodeList44);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(strMap50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(scopeList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(symbolList59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(scriptNode64);
        org.junit.Assert.assertNotNull(nodeItor71);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(nodeSpliterator78);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 24 + "'", int86 == 24);
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode24.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = astRoot27.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor29 = astRoot27.iterator();
        scriptNode24.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot27);
        java.lang.String str31 = scriptNode24.toString();
        scriptNode17.setCompilerData((java.lang.Object) scriptNode24);
        int int33 = scriptNode17.getAbsolutePosition();
        java.lang.Object obj35 = scriptNode17.getProp(41);
        int int36 = scriptNode17.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node node37 = scriptNode17.getLastSibling();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(nodeItor29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "136" + "'", str31, "136");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType3, "");
        com.google.javascript.rhino.head.Token.CommentType commentType6 = comment5.getCommentType();
        com.google.javascript.rhino.head.Token.CommentType commentType9 = null;
        com.google.javascript.rhino.head.ast.Comment comment11 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType9, "");
        boolean boolean12 = comment11.hasSideEffects();
        int int13 = comment11.getLineno();
        com.google.javascript.rhino.head.Node node15 = comment11.setType(18);
        comment11.removeChildren();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        comment21.setCommentType(commentType23);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator26 = scriptNode25.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        java.lang.String str33 = comment31.toSource(100);
        java.lang.String str34 = comment31.getValue();
        scriptNode25.setParent((com.google.javascript.rhino.head.ast.AstNode) comment31);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment5, comment11, comment21, comment31 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        astRoot0.setEncodedSourceStart((-603115504));
        astRoot0.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray43 = astRoot0.getParamAndVarNames();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentType6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeSpliterator26);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "                                                                                                                                                                                                        " + "'", str33, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.isIdeMode();
        boolean boolean3 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons6 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean7 = compilerEnvirons6.isReservedKeywordAsIdentifier();
        int int8 = compilerEnvirons6.getLanguageVersion();
        int int9 = compilerEnvirons6.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        compilerEnvirons10.setStrictMode(true);
        compilerEnvirons10.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons16 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean17 = compilerEnvirons16.isReservedKeywordAsIdentifier();
        boolean boolean18 = compilerEnvirons16.getWarnTrailingComma();
        compilerEnvirons16.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet21 = compilerEnvirons16.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter22 = compilerEnvirons16.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory23 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons10, errorReporter22);
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons6, errorReporter22);
        com.google.javascript.rhino.head.IRFactory iRFactory25 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter22);
        boolean boolean26 = compilerEnvirons0.isStrictMode();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(false);
        boolean boolean29 = compilerEnvirons0.getAllowSharpComments();
        boolean boolean30 = compilerEnvirons0.getWarnTrailingComma();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 170 + "'", int8 == 170);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 170 + "'", int9 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNotNull(errorReporter22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        java.lang.String str4 = scriptNode1.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getEncodedSourceEnd();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator12 = scriptNode6.new NodeIterator();
        int int13 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot14 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = astRoot14.new NodeIterator();
        scriptNode6.setCompilerData((java.lang.Object) nodeIterator15);
        int int17 = scriptNode1.compareTo((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        scriptNode6.setLineno(20);
        com.google.javascript.rhino.head.Token.CommentType commentType22 = null;
        com.google.javascript.rhino.head.ast.Comment comment24 = new com.google.javascript.rhino.head.ast.Comment((int) '#', 2, commentType22, "hi!");
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        comment24.setCommentType(commentType25);
        int int29 = comment24.getIntProp((int) (byte) 10, 0);
        comment24.setPosition(161);
        scriptNode6.setJsDocNode(comment24);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons33 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean34 = compilerEnvirons33.isReservedKeywordAsIdentifier();
        int int35 = compilerEnvirons33.getLanguageVersion();
        int int36 = compilerEnvirons33.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons37 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean38 = compilerEnvirons37.isReservedKeywordAsIdentifier();
        compilerEnvirons37.setStrictMode(true);
        compilerEnvirons37.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons43 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean44 = compilerEnvirons43.isReservedKeywordAsIdentifier();
        boolean boolean45 = compilerEnvirons43.getWarnTrailingComma();
        compilerEnvirons43.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet48 = compilerEnvirons43.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter49 = compilerEnvirons43.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory50 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons37, errorReporter49);
        com.google.javascript.rhino.head.IRFactory iRFactory51 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons33, errorReporter49);
        com.google.javascript.rhino.head.ast.AstRoot astRoot52 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int53 = astRoot52.getParamCount();
        java.lang.String str54 = astRoot52.getJsDoc();
        java.lang.String str55 = astRoot52.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = iRFactory51.transformTree(astRoot52);
        int int57 = astRoot52.getParamCount();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator58 = astRoot52.spliterator();
        java.lang.String str59 = comment24.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot52);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor60 = null;
        astRoot52.visitComments(nodeVisitor60);
        java.lang.String str62 = astRoot52.getJsDoc();
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1416940460 + "'", int17 == 1416940460);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 170 + "'", int35 == 170);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 170 + "'", int36 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertNotNull(errorReporter49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "$0" + "'", str55, "$0");
        org.junit.Assert.assertNotNull(scriptNode56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.putIntProp((int) (short) 1, 1);
        scriptNode0.setEncodedSource("typeof");
        java.lang.Object obj7 = scriptNode0.getProp(2);
        java.lang.Object obj8 = scriptNode0.getCompilerData();
        scriptNode0.setBaseLineno(447383136);
        java.lang.String str11 = scriptNode0.toSource();
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{\n}\n" + "'", str11, "{\n}\n");
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter6 = compilerEnvirons0.getErrorReporter();
        boolean boolean7 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean8 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean9 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        boolean boolean10 = compilerEnvirons0.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean12 = compilerEnvirons11.isReservedKeywordAsIdentifier();
        boolean boolean13 = compilerEnvirons11.getWarnTrailingComma();
        compilerEnvirons11.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet16 = compilerEnvirons11.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter17 = compilerEnvirons11.getErrorReporter();
        boolean boolean18 = compilerEnvirons11.isRecordingComments();
        compilerEnvirons11.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        int int23 = compilerEnvirons21.getLanguageVersion();
        int int24 = compilerEnvirons21.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons25 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean26 = compilerEnvirons25.isReservedKeywordAsIdentifier();
        compilerEnvirons25.setStrictMode(true);
        compilerEnvirons25.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons31 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean32 = compilerEnvirons31.isReservedKeywordAsIdentifier();
        boolean boolean33 = compilerEnvirons31.getWarnTrailingComma();
        compilerEnvirons31.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet36 = compilerEnvirons31.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter37 = compilerEnvirons31.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory38 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons25, errorReporter37);
        com.google.javascript.rhino.head.IRFactory iRFactory39 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons21, errorReporter37);
        com.google.javascript.rhino.head.IRFactory iRFactory40 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons11, errorReporter37);
        java.util.Set<java.lang.String> strSet41 = compilerEnvirons11.getActivationNames();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons42 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray48 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        compilerEnvirons42.setActivationNames((java.util.Set<java.lang.String>) strSet49);
        boolean boolean52 = compilerEnvirons42.isGenerateDebugInfo();
        compilerEnvirons42.setOptimizationLevel((int) (short) 1);
        compilerEnvirons42.setAllowSharpComments(true);
        boolean boolean57 = compilerEnvirons42.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter58 = compilerEnvirons42.getErrorReporter();
        int int59 = compilerEnvirons42.getLanguageVersion();
        java.util.Set<java.lang.String> strSet60 = compilerEnvirons42.getActivationNames();
        compilerEnvirons11.setActivationNames(strSet60);
        com.google.javascript.rhino.head.ErrorReporter errorReporter62 = compilerEnvirons11.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser63 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter62);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(errorReporter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(errorReporter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 170 + "'", int23 == 170);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 170 + "'", int24 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNotNull(errorReporter37);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertNotNull(compilerEnvirons42);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(errorReporter58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 170 + "'", int59 == 170);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(errorReporter62);
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        com.google.javascript.rhino.head.IRFactory iRFactory14 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        int int17 = scriptNode16.getEndLineno();
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap18 = scriptNode16.getSymbolTable();
        com.google.javascript.rhino.head.Node node19 = iRFactory14.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode16);
        com.google.javascript.rhino.head.Node node21 = com.google.javascript.rhino.head.Node.newString("136");
        node21.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode25.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode26);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList28 = scriptNode26.getChildScopes();
        int int29 = scriptNode26.getBaseLineno();
        com.google.javascript.rhino.head.Node node30 = scriptNode26.getLastSibling();
        int int31 = scriptNode26.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope34 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot35 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator36 = astRoot35.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType39 = null;
        com.google.javascript.rhino.head.ast.Comment comment41 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType39, "");
        boolean boolean42 = comment41.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType45 = null;
        com.google.javascript.rhino.head.ast.Comment comment47 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType45, "");
        boolean boolean48 = comment47.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType51 = null;
        com.google.javascript.rhino.head.ast.Comment comment53 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType51, "");
        java.lang.String str55 = comment53.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray56 = new com.google.javascript.rhino.head.ast.Comment[] { comment41, comment47, comment53 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet57 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet57, commentArray56);
        astRoot35.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet57);
        boolean boolean60 = astRoot35.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode61 = astRoot35.getParent();
        astRoot35.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node65 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode26, (com.google.javascript.rhino.head.Node) scope34, (com.google.javascript.rhino.head.Node) astRoot35, 6);
        java.lang.String str66 = node21.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot35);
        astRoot35.checkParentLinks();
        astRoot35.checkParentLinks();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = astRoot35.getFunctions();
        boolean boolean70 = astRoot35.hasSideEffects();
        scriptNode16.addChildScope((com.google.javascript.rhino.head.ast.Scope) astRoot35);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(strMap18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(scopeList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "                                                                                                                                                                                                        " + "'", str55, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(astNode61);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(functionNodeList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode3.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet7 = astRoot6.getComments();
        int int8 = astRoot6.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor9 = null;
        astRoot6.visitComments(nodeVisitor9);
        com.google.javascript.rhino.head.Node node11 = astRoot6.getFirstChild();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet12 = astRoot6.getComments();
        com.google.javascript.rhino.head.Node node13 = new com.google.javascript.rhino.head.Node(18, (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) astRoot6);
        int int14 = scriptNode3.getLength();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory17 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons15, errorReporter16);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode18 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode18.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList21 = scriptNode19.getFunctions();
        scriptNode19.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node24 = iRFactory17.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode19);
        java.lang.String str25 = scriptNode19.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode26 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode26.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode27);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList29 = scriptNode27.getChildScopes();
        int int30 = scriptNode27.getBaseLineno();
        com.google.javascript.rhino.head.Node node31 = scriptNode27.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList35 = scriptNode33.getChildScopes();
        java.lang.String str37 = scriptNode33.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode27.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode33, (com.google.javascript.rhino.head.Node) scriptNode39);
        java.lang.Object obj42 = scriptNode33.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str45 = scriptNode43.toSource((int) '4');
        java.lang.String str46 = scriptNode33.toStringTree(scriptNode43);
        scriptNode19.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode33);
        com.google.javascript.rhino.head.Node node48 = new com.google.javascript.rhino.head.Node(170, (com.google.javascript.rhino.head.Node) scriptNode3, (com.google.javascript.rhino.head.Node) scriptNode33);
        java.lang.String str49 = scriptNode33.getJsDoc();
        scriptNode33.setEncodedSourceEnd(1);
        boolean boolean52 = scriptNode33.hasChildren();
        java.lang.String str53 = scriptNode33.debugPrint();
        org.junit.Assert.assertNull(commentSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(commentSet12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(functionNodeList21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(scopeList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(scopeList35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str45, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "-1\t  SCRIPT 0 1\n" + "'", str53, "-1\t  SCRIPT 0 1\n");
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter1 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory2 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode3 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode3.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList6 = scriptNode4.getFunctions();
        scriptNode4.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.Node node9 = iRFactory2.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode4);
        java.lang.String str10 = scriptNode4.getSourceName();
        int int11 = scriptNode4.getRegexpCount();
        java.lang.Object obj12 = scriptNode4.getCompilerData();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        scriptNode14.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode19 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap20 = scriptNode19.getSymbolTable();
        scriptNode14.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode19);
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList22 = scriptNode14.getStatements();
        com.google.javascript.rhino.head.ast.Scope scope23 = scriptNode14.getEnclosingScope();
        scriptNode4.target = scope23;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode4.setDouble((double) 783194089);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.ScriptNode cannot be cast to com.google.javascript.rhino.head.ast.NumberLiteral");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(functionNodeList6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(strMap20);
        org.junit.Assert.assertNotNull(astNodeList22);
        org.junit.Assert.assertNotNull(scope23);
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setStrictMode(true);
        int int4 = compilerEnvirons0.getLanguageVersion();
        boolean boolean5 = compilerEnvirons0.isXmlAvailable();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 170 + "'", int4 == 170);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot(12);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor2 = null;
        astRoot1.visitComments(nodeVisitor2);
        astRoot1.setEncodedSourceStart(15);
        com.google.javascript.rhino.head.Token.CommentType commentType8 = null;
        com.google.javascript.rhino.head.ast.Comment comment10 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType8, "");
        astRoot1.addChild((com.google.javascript.rhino.head.ast.AstNode) comment10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = astRoot1.getParamOrVarName((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        boolean boolean10 = compilerEnvirons0.getWarnTrailingComma();
        com.google.javascript.rhino.head.Parser parser11 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean12 = compilerEnvirons0.isRecordingComments();
        int int13 = compilerEnvirons0.getOptimizationLevel();
        com.google.javascript.rhino.head.IRFactory iRFactory14 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray26 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList27 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList27, symbolArray26);
        astRoot0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList27);
        com.google.javascript.rhino.head.Node node30 = astRoot0.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot0, (com.google.javascript.rhino.head.ast.Scope) scriptNode32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode35 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode35.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode36);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList38 = scriptNode36.getChildScopes();
        int int39 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node40 = scriptNode36.getLastSibling();
        scriptNode36.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode44 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode43.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode44);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList46 = scriptNode44.getFunctions();
        scriptNode44.setPosition((int) (byte) 10);
        java.lang.String str49 = scriptNode36.toStringTree(scriptNode44);
        int int50 = scriptNode36.getBaseLineno();
        com.google.javascript.rhino.head.Node node52 = scriptNode36.setType((int) (byte) -1);
        java.lang.String str53 = astRoot0.toStringTree(scriptNode36);
        scriptNode36.clearParentScope();
        scriptNode36.setEncodedSourceBounds(10, (int) (byte) 10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode59 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode58.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode59);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList61 = scriptNode59.getChildScopes();
        int int62 = scriptNode59.getBaseLineno();
        com.google.javascript.rhino.head.Node node63 = scriptNode59.getLastSibling();
        scriptNode59.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode66 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode67 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode66.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode67);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList69 = scriptNode67.getFunctions();
        scriptNode67.setPosition((int) (byte) 10);
        java.lang.String str72 = scriptNode59.toStringTree(scriptNode67);
        int int73 = scriptNode59.getBaseLineno();
        com.google.javascript.rhino.head.Node node75 = scriptNode59.setType((int) (byte) -1);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor76 = scriptNode59.iterator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator77 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator78 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator79 = positionComparator77.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator78);
        com.google.javascript.rhino.head.ast.AstRoot astRoot80 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int81 = astRoot80.getBaseLineno();
        java.lang.String str82 = astRoot80.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot83 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator84 = astRoot83.new NodeIterator();
        int int85 = positionComparator78.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot80, (com.google.javascript.rhino.head.ast.AstNode) astRoot83);
        boolean boolean86 = astRoot80.isInStrictMode();
        scriptNode59.addChildToFront((com.google.javascript.rhino.head.Node) astRoot80);
        com.google.javascript.rhino.head.Node node88 = scriptNode59.getNext();
        scriptNode36.target = scriptNode59;
        com.google.javascript.rhino.head.ast.Scope scope90 = scriptNode36.getParentScope();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(symbolArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNull(scopeList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(functionNodeList46);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(scopeList61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(functionNodeList69);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeItor76);
        org.junit.Assert.assertNotNull(astNodeComparator79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str82, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertNull(scope90);
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        int int12 = compilerEnvirons0.getOptimizationLevel();
        boolean boolean13 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean14 = compilerEnvirons0.isRecordingComments();
        boolean boolean15 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setGeneratingSource(true);
        compilerEnvirons0.setRecordingComments(true);
        com.google.javascript.rhino.head.ErrorReporter errorReporter20 = compilerEnvirons0.getErrorReporter();
        boolean boolean21 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(errorReporter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.putIntProp((int) (short) 1, 1);
        com.google.javascript.rhino.head.Node node6 = scriptNode1.setType((int) 'a');
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        boolean boolean20 = comment19.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        java.lang.String str27 = comment25.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray28 = new com.google.javascript.rhino.head.ast.Comment[] { comment13, comment19, comment25 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet29 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet29, commentArray28);
        astRoot7.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet29);
        boolean boolean32 = astRoot7.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode33 = astRoot7.getParent();
        java.lang.String str34 = astRoot7.debugPrint();
        int int35 = astRoot7.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = astRoot7.getComments();
        astRoot7.checkParentLinks();
        astRoot7.setEndLineno(842975161);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode43.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray50 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList51 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList51, symbolArray50);
        scriptNode49.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode46.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode43.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode41.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        node6.addChildAfter((com.google.javascript.rhino.head.Node) astRoot7, (com.google.javascript.rhino.head.Node) scriptNode41);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator58 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator59 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator60 = positionComparator58.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator59);
        com.google.javascript.rhino.head.ast.AstRoot astRoot61 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int62 = astRoot61.getBaseLineno();
        java.lang.String str63 = astRoot61.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot64 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator65 = astRoot64.new NodeIterator();
        int int66 = positionComparator59.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot61, (com.google.javascript.rhino.head.ast.AstNode) astRoot64);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(1001288202, node6, (com.google.javascript.rhino.head.Node) astRoot64, 1570909190);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons69 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean70 = compilerEnvirons69.isReservedKeywordAsIdentifier();
        boolean boolean71 = compilerEnvirons69.isIdeMode();
        compilerEnvirons69.setRecordingLocalJsDocComments(false);
        boolean boolean74 = compilerEnvirons69.isGenerateDebugInfo();
        compilerEnvirons69.setRecordingLocalJsDocComments(true);
        boolean boolean77 = compilerEnvirons69.isXmlAvailable();
        boolean boolean78 = compilerEnvirons69.isRecordingLocalJsDocComments();
        compilerEnvirons69.setRecoverFromErrors(true);
        astRoot64.setCompilerData((java.lang.Object) compilerEnvirons69);
        boolean boolean82 = compilerEnvirons69.getWarnTrailingComma();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "                                                                                                                                                                                                        " + "'", str27, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(astNode33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str34, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(commentSet36);
        org.junit.Assert.assertNotNull(symbolArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(astNodeComparator60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str63, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(compilerEnvirons69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        compilerEnvirons0.setGenerateDebugInfo(true);
        compilerEnvirons0.setGenerateDebugInfo(true);
        com.google.javascript.rhino.head.IRFactory iRFactory10 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons11 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean12 = compilerEnvirons11.isReservedKeywordAsIdentifier();
        boolean boolean13 = compilerEnvirons11.getWarnTrailingComma();
        compilerEnvirons11.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet16 = compilerEnvirons11.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter17 = compilerEnvirons11.getErrorReporter();
        boolean boolean18 = compilerEnvirons11.isRecordingComments();
        compilerEnvirons11.setGeneratingSource(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        int int23 = compilerEnvirons21.getLanguageVersion();
        compilerEnvirons21.setLanguageVersion((int) (byte) 100);
        boolean boolean26 = compilerEnvirons21.isAllowMemberExprAsFunctionName();
        compilerEnvirons21.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons29 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray35 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        compilerEnvirons29.setActivationNames((java.util.Set<java.lang.String>) strSet36);
        boolean boolean39 = compilerEnvirons29.isGenerateDebugInfo();
        compilerEnvirons29.setOptimizationLevel((int) (short) 1);
        compilerEnvirons29.setAllowSharpComments(true);
        boolean boolean44 = compilerEnvirons29.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter45 = compilerEnvirons29.getErrorReporter();
        compilerEnvirons21.setErrorReporter(errorReporter45);
        compilerEnvirons11.setErrorReporter(errorReporter45);
        com.google.javascript.rhino.head.IRFactory iRFactory48 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter45);
        com.google.javascript.rhino.head.ast.AstRoot astRoot49 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet50 = astRoot49.getComments();
        int int51 = astRoot49.getEndLineno();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor52 = null;
        astRoot49.visitComments(nodeVisitor52);
        com.google.javascript.rhino.head.Node node54 = astRoot49.getFirstChild();
        boolean boolean55 = astRoot49.isInStrictMode();
        java.lang.String str57 = astRoot49.toSource(4);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = iRFactory48.transformTree(astRoot49);
        int int59 = astRoot49.getBaseLineno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode61 = astRoot49.getFunctionNode(17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(compilerEnvirons11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(strSet16);
        org.junit.Assert.assertNotNull(errorReporter17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 170 + "'", int23 == 170);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons29);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(errorReporter45);
        org.junit.Assert.assertNull(commentSet50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(scriptNode58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor2 = astRoot0.iterator();
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor3 = null;
        astRoot0.visitComments(nodeVisitor3);
        com.google.javascript.rhino.head.Node node5 = astRoot0.getNext();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = astRoot0.getTop();
        java.lang.Object obj8 = scriptNode6.getProp((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.Scope scope9 = scriptNode6.getScope();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeItor2);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNotNull(scriptNode6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        com.google.javascript.rhino.head.ast.AstRoot astRoot1 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator2 = astRoot1.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        com.google.javascript.rhino.head.ast.Comment comment7 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType5, "");
        boolean boolean8 = comment7.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        java.lang.String str21 = comment19.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray22 = new com.google.javascript.rhino.head.ast.Comment[] { comment7, comment13, comment19 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet23 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet23, commentArray22);
        astRoot1.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet23);
        boolean boolean26 = astRoot1.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray27 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList28 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList28, symbolArray27);
        astRoot1.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList28);
        int int31 = astRoot1.getLineno();
        com.google.javascript.rhino.head.ast.AstRoot astRoot32 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator33 = astRoot32.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        boolean boolean39 = comment38.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType42 = null;
        com.google.javascript.rhino.head.ast.Comment comment44 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType42, "");
        boolean boolean45 = comment44.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType48 = null;
        com.google.javascript.rhino.head.ast.Comment comment50 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType48, "");
        java.lang.String str52 = comment50.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray53 = new com.google.javascript.rhino.head.ast.Comment[] { comment38, comment44, comment50 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet54 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet54, commentArray53);
        astRoot32.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet54);
        boolean boolean57 = astRoot32.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray58 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList59 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList59, symbolArray58);
        astRoot32.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList59);
        com.google.javascript.rhino.head.Node node62 = astRoot32.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode64 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode63.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode64);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot32, (com.google.javascript.rhino.head.ast.Scope) scriptNode64);
        com.google.javascript.rhino.head.ast.AstRoot astRoot67 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator68 = astRoot67.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor69 = astRoot67.iterator();
        astRoot67.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node73 = new com.google.javascript.rhino.head.Node(136, (com.google.javascript.rhino.head.Node) astRoot1, (com.google.javascript.rhino.head.Node) astRoot32, (com.google.javascript.rhino.head.Node) astRoot67, (int) (byte) 0);
        java.lang.String str75 = astRoot1.toSource(170);
        com.google.javascript.rhino.head.Token.CommentType commentType78 = null;
        com.google.javascript.rhino.head.ast.Comment comment80 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType78, "");
        boolean boolean81 = comment80.hasSideEffects();
        int int82 = comment80.getLineno();
        com.google.javascript.rhino.head.Node node84 = comment80.setType(18);
        boolean boolean85 = comment80.hasSideEffects();
        astRoot1.addComment(comment80);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode87 = astRoot1.getTop();
        astRoot1.setLength((-509521098));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "                                                                                                                                                                                                        " + "'", str21, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(symbolArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "                                                                                                                                                                                                        " + "'", str52, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(symbolArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertNotNull(nodeItor69);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(scriptNode87);
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        boolean boolean14 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean15 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean16 = compilerEnvirons0.recoverFromErrors();
        boolean boolean17 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setStrictMode(false);
        boolean boolean20 = compilerEnvirons0.isRecordingComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList3 = scriptNode1.getFunctions();
        scriptNode1.setEncodedSourceStart((int) 'a');
        java.lang.String str6 = scriptNode1.shortName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode8.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList11 = scriptNode9.getChildScopes();
        scriptNode9.setBaseLineno(18);
        scriptNode9.setEndLineno(26);
        com.google.javascript.rhino.head.Node node16 = scriptNode9.getLastSibling();
        com.google.javascript.rhino.head.Node node18 = new com.google.javascript.rhino.head.Node(1275261773, (com.google.javascript.rhino.head.Node) scriptNode9, 4);
        scriptNode1.setParent((com.google.javascript.rhino.head.ast.AstNode) scriptNode9);
        int int20 = scriptNode1.getLineno();
        scriptNode1.setRelative(13);
        int int23 = scriptNode1.getAbsolutePosition();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator24 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator25 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator26 = positionComparator24.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator25);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode27 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode28 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode27.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode28);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList30 = scriptNode28.getChildScopes();
        int int31 = scriptNode28.getBaseLineno();
        int int32 = scriptNode28.getParamCount();
        scriptNode28.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope35 = scriptNode28.getEnclosingScope();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode36 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode36.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList39 = scriptNode37.getChildScopes();
        int int40 = scriptNode37.getBaseLineno();
        com.google.javascript.rhino.head.Node node41 = scriptNode37.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode42 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode42.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode43);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList45 = scriptNode43.getChildScopes();
        java.lang.String str47 = scriptNode43.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode37.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode43, (com.google.javascript.rhino.head.Node) scriptNode49);
        scriptNode37.setEncodedSourceEnd(170);
        int int53 = positionComparator25.compare((com.google.javascript.rhino.head.ast.AstNode) scope35, (com.google.javascript.rhino.head.ast.AstNode) scriptNode37);
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode37);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor55 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.visit(nodeVisitor55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(functionNodeList3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ScriptNode" + "'", str6, "ScriptNode");
        org.junit.Assert.assertNull(scopeList11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 18 + "'", int20 == 18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-15) + "'", int23 == (-15));
        org.junit.Assert.assertNotNull(astNodeComparator26);
        org.junit.Assert.assertNull(scopeList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(scope35);
        org.junit.Assert.assertNull(scopeList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(scopeList45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        com.google.javascript.rhino.head.ast.Scope scope2 = new com.google.javascript.rhino.head.ast.Scope((int) (short) 10, 100);
        boolean boolean3 = scope2.hasSideEffects();
        java.util.List<com.google.javascript.rhino.head.ast.AstNode> astNodeList4 = scope2.getStatements();
        boolean boolean5 = scope2.hasConsistentReturnUsage();
        java.lang.Object obj7 = scope2.getProp((-361648642));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(astNodeList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.putIntProp((int) (short) 1, 1);
        com.google.javascript.rhino.head.Node node6 = scriptNode1.setType((int) 'a');
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator8 = astRoot7.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType11 = null;
        com.google.javascript.rhino.head.ast.Comment comment13 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType11, "");
        boolean boolean14 = comment13.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType17 = null;
        com.google.javascript.rhino.head.ast.Comment comment19 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType17, "");
        boolean boolean20 = comment19.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType23 = null;
        com.google.javascript.rhino.head.ast.Comment comment25 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType23, "");
        java.lang.String str27 = comment25.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray28 = new com.google.javascript.rhino.head.ast.Comment[] { comment13, comment19, comment25 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet29 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet29, commentArray28);
        astRoot7.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet29);
        boolean boolean32 = astRoot7.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode33 = astRoot7.getParent();
        java.lang.String str34 = astRoot7.debugPrint();
        int int35 = astRoot7.getEncodedSourceStart();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet36 = astRoot7.getComments();
        astRoot7.checkParentLinks();
        astRoot7.setEndLineno(842975161);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode41 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode43 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode43.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode49 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray50 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList51 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList51, symbolArray50);
        scriptNode49.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode46.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode43.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        scriptNode41.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList51);
        node6.addChildAfter((com.google.javascript.rhino.head.Node) astRoot7, (com.google.javascript.rhino.head.Node) scriptNode41);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator58 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator59 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator60 = positionComparator58.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator59);
        com.google.javascript.rhino.head.ast.AstRoot astRoot61 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int62 = astRoot61.getBaseLineno();
        java.lang.String str63 = astRoot61.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot64 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator65 = astRoot64.new NodeIterator();
        int int66 = positionComparator59.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot61, (com.google.javascript.rhino.head.ast.AstNode) astRoot64);
        com.google.javascript.rhino.head.Node node68 = new com.google.javascript.rhino.head.Node(1001288202, node6, (com.google.javascript.rhino.head.Node) astRoot64, 1570909190);
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet69 = astRoot64.getComments();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "                                                                                                                                                                                                        " + "'", str27, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(astNode33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n" + "'", str34, "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(commentSet36);
        org.junit.Assert.assertNotNull(symbolArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(astNodeComparator60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str63, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(commentSet69);
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator0 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator1 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator2 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator1);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator3 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator5 = positionComparator3.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.ast.AstRoot astRoot6 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int7 = astRoot6.getBaseLineno();
        java.lang.String str8 = astRoot6.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator10 = astRoot9.new NodeIterator();
        int int11 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot6, (com.google.javascript.rhino.head.ast.AstNode) astRoot9);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator12 = positionComparator0.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator4);
        com.google.javascript.rhino.head.Token.CommentType commentType15 = null;
        com.google.javascript.rhino.head.ast.Comment comment17 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType15, "");
        java.lang.String str19 = comment17.toSource(100);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor20 = comment17.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType21 = null;
        comment17.setCommentType(commentType21);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator23 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator24 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator25 = positionComparator23.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator24);
        com.google.javascript.rhino.head.ast.AstRoot astRoot26 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int27 = astRoot26.getBaseLineno();
        java.lang.String str28 = astRoot26.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot29 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator30 = astRoot29.new NodeIterator();
        int int31 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot26, (com.google.javascript.rhino.head.ast.AstNode) astRoot29);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode32.putIntProp((int) (short) 1, 1);
        java.lang.String str36 = scriptNode32.getEncodedSource();
        com.google.javascript.rhino.head.ast.Scope scope37 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator38 = scope37.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        scope37.setTop(scriptNode40);
        scope37.setLineno((int) (short) -1);
        int int45 = positionComparator24.compare((com.google.javascript.rhino.head.ast.AstNode) scriptNode32, (com.google.javascript.rhino.head.ast.AstNode) scope37);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode46.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode47);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList49 = scriptNode47.getChildScopes();
        int int50 = scriptNode47.getBaseLineno();
        int int51 = scriptNode47.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode53 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode52.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode53);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList55 = scriptNode53.getFunctions();
        scriptNode53.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope58 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode47.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode53, (com.google.javascript.rhino.head.Node) scope58);
        scriptNode53.setEncodedSource("-1\tSCRIPT -1 1\n");
        java.lang.String str62 = scriptNode32.toStringTree(scriptNode53);
        int int63 = positionComparator4.compare((com.google.javascript.rhino.head.ast.AstNode) comment17, (com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator64 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator65 = positionComparator4.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator64);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator66 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator67 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator68 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator69 = positionComparator67.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator68);
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator70 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator71 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator72 = positionComparator70.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator71);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator73 = astNodeComparator69.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator70);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator74 = positionComparator66.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator70);
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator75 = positionComparator70.reversed();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator76 = positionComparator64.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator70);
        org.junit.Assert.assertNotNull(astNodeComparator2);
        org.junit.Assert.assertNotNull(astNodeComparator5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str8, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(astNodeComparator12);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                                                                                                                        " + "'", str19, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(nodeItor20);
        org.junit.Assert.assertNotNull(astNodeComparator25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str28, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(nodeSpliterator38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(scopeList49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(functionNodeList55);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(astNodeComparator65);
        org.junit.Assert.assertNotNull(astNodeComparator69);
        org.junit.Assert.assertNotNull(astNodeComparator72);
        org.junit.Assert.assertNotNull(astNodeComparator73);
        org.junit.Assert.assertNotNull(astNodeComparator74);
        org.junit.Assert.assertNotNull(astNodeComparator75);
        org.junit.Assert.assertNotNull(astNodeComparator76);
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        java.lang.String str2 = astRoot0.getSourceName();
        boolean boolean3 = astRoot0.hasChildren();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode4 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode4.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode5);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList7 = scriptNode5.getChildScopes();
        int int8 = scriptNode5.getBaseLineno();
        com.google.javascript.rhino.head.Node node9 = scriptNode5.getLastSibling();
        scriptNode5.setPosition(24);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode12 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode12.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList15 = scriptNode13.getFunctions();
        scriptNode13.setPosition((int) (byte) 10);
        java.lang.String str18 = scriptNode5.toStringTree(scriptNode13);
        int int19 = scriptNode5.getBaseLineno();
        boolean boolean20 = scriptNode5.hasConsistentReturnUsage();
        astRoot0.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode5);
        java.lang.String str22 = astRoot0.getSourceName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = astRoot0.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(scopeList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(functionNodeList15);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        int int2 = compilerEnvirons0.getLanguageVersion();
        int int3 = compilerEnvirons0.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons4 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean5 = compilerEnvirons4.isReservedKeywordAsIdentifier();
        compilerEnvirons4.setStrictMode(true);
        compilerEnvirons4.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons10 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean11 = compilerEnvirons10.isReservedKeywordAsIdentifier();
        boolean boolean12 = compilerEnvirons10.getWarnTrailingComma();
        compilerEnvirons10.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet15 = compilerEnvirons10.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter16 = compilerEnvirons10.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory17 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons4, errorReporter16);
        com.google.javascript.rhino.head.IRFactory iRFactory18 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0, errorReporter16);
        compilerEnvirons0.setAllowSharpComments(false);
        compilerEnvirons0.setGeneratingSource(false);
        com.google.javascript.rhino.head.Parser parser23 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        boolean boolean24 = compilerEnvirons0.getAllowSharpComments();
        boolean boolean25 = compilerEnvirons0.isRecordingLocalJsDocComments();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 170 + "'", int2 == 170);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 170 + "'", int3 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNotNull(errorReporter16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        com.google.javascript.rhino.head.Node node21 = scriptNode17.target;
        scriptNode17.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Scope scope25 = new com.google.javascript.rhino.head.ast.Scope(19);
        scriptNode17.target = scope25;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node27 = scriptNode17.getDefault();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(node21);
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        int int5 = scriptNode1.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList9 = scriptNode7.getFunctions();
        scriptNode7.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope12 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scope12);
        scriptNode7.setEncodedSource("-1\tSCRIPT -1 1\n");
        scriptNode7.setBaseLineno(12);
        com.google.javascript.rhino.head.ast.Comment comment18 = scriptNode7.getJsDocNode();
        int int19 = scriptNode7.getLength();
        com.google.javascript.rhino.head.ast.AstRoot astRoot20 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet21 = astRoot20.getComments();
        int int22 = astRoot20.getEndLineno();
        com.google.javascript.rhino.head.Node node24 = astRoot20.setType((int) (short) 10);
        astRoot20.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode30 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator32 = scriptNode31.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        java.lang.String str39 = comment37.toSource(100);
        java.lang.String str40 = comment37.getValue();
        scriptNode31.setParent((com.google.javascript.rhino.head.ast.AstNode) comment37);
        com.google.javascript.rhino.head.ast.AstRoot astRoot42 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator43 = astRoot42.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType46 = null;
        com.google.javascript.rhino.head.ast.Comment comment48 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType46, "");
        boolean boolean49 = comment48.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType52 = null;
        com.google.javascript.rhino.head.ast.Comment comment54 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType52, "");
        boolean boolean55 = comment54.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType58 = null;
        com.google.javascript.rhino.head.ast.Comment comment60 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType58, "");
        java.lang.String str62 = comment60.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray63 = new com.google.javascript.rhino.head.ast.Comment[] { comment48, comment54, comment60 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet64 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet64, commentArray63);
        astRoot42.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet64);
        boolean boolean67 = astRoot42.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray68 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList69 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList69, symbolArray68);
        astRoot42.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList69);
        com.google.javascript.rhino.head.Node node72 = astRoot42.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode73 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode74 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode73.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode74);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot42, (com.google.javascript.rhino.head.ast.Scope) scriptNode74);
        com.google.javascript.rhino.head.Node node77 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode30, (com.google.javascript.rhino.head.Node) comment37, (com.google.javascript.rhino.head.Node) scriptNode74);
        astRoot20.addComment(comment37);
        java.lang.String str79 = astRoot20.getNextTempName();
        int int80 = astRoot20.getBaseLineno();
        scriptNode7.addChildrenToFront((com.google.javascript.rhino.head.Node) astRoot20);
        com.google.javascript.rhino.head.Node node83 = astRoot20.setType((-1020608546));
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(functionNodeList9);
        org.junit.Assert.assertNull(comment18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(commentSet21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(nodeSpliterator32);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "                                                                                                                                                                                                        " + "'", str39, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "                                                                                                                                                                                                        " + "'", str62, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(symbolArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "$0" + "'", str79, "$0");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        int int9 = astRoot5.getEncodedSourceEnd();
        java.lang.Object obj11 = astRoot5.getProp(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = astRoot5.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.rhino.head.ast.AstRoot cannot be cast to com.google.javascript.rhino.head.ast.Name");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        com.google.javascript.rhino.head.Token.CommentType commentType2 = null;
        com.google.javascript.rhino.head.ast.Comment comment4 = new com.google.javascript.rhino.head.ast.Comment((int) '4', (int) (byte) 1, commentType2, "                                                                                                                                                                                                  ");
        com.google.javascript.rhino.head.Token.CommentType commentType5 = null;
        comment4.setCommentType(commentType5);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        scriptNode8.setBaseLineno(18);
        comment4.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode8);
        org.junit.Assert.assertNull(scopeList10);
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList4 = scriptNode2.getFunctions();
        com.google.javascript.rhino.head.Node node6 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode2, 8);
        int int7 = scriptNode2.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot8 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet9 = astRoot8.getComments();
        java.lang.String str10 = astRoot8.getSourceName();
        boolean boolean11 = astRoot8.hasChildren();
        int int12 = astRoot8.getLineno();
        astRoot8.setEncodedSourceBounds((int) (byte) 10, (int) (short) 100);
        com.google.javascript.rhino.head.ast.Comment comment16 = astRoot8.getJsDocNode();
        scriptNode2.setTop((com.google.javascript.rhino.head.ast.ScriptNode) astRoot8);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        compilerEnvirons18.setGenerateObserverCount(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons21 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean22 = compilerEnvirons21.isReservedKeywordAsIdentifier();
        boolean boolean23 = compilerEnvirons21.getWarnTrailingComma();
        compilerEnvirons21.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet26 = compilerEnvirons21.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter27 = compilerEnvirons21.getErrorReporter();
        java.lang.String[] strArray33 = new java.lang.String[] { "-1\tSCRIPT -1 1\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n1\t  COMMENT 2 0\n", "                                ", "typeof", "                                                                                                                                                                                                        ", "{\n}\n" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        compilerEnvirons21.setActivationNames((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.head.ErrorReporter errorReporter37 = compilerEnvirons21.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser38 = new com.google.javascript.rhino.head.Parser(compilerEnvirons18, errorReporter37);
        com.google.javascript.rhino.head.ast.AstRoot astRoot42 = parser38.parse("          hi!", "hi!", 2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot43 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator44 = astRoot43.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType47 = null;
        com.google.javascript.rhino.head.ast.Comment comment49 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType47, "");
        boolean boolean50 = comment49.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType53 = null;
        com.google.javascript.rhino.head.ast.Comment comment55 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType53, "");
        boolean boolean56 = comment55.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType59 = null;
        com.google.javascript.rhino.head.ast.Comment comment61 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType59, "");
        java.lang.String str63 = comment61.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray64 = new com.google.javascript.rhino.head.ast.Comment[] { comment49, comment55, comment61 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet65 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet65, commentArray64);
        astRoot43.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet65);
        boolean boolean68 = astRoot43.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray69 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList70 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList70, symbolArray69);
        astRoot43.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList70);
        int int73 = astRoot43.getBaseLineno();
        com.google.javascript.rhino.head.ast.Comment comment74 = astRoot43.getJsDocNode();
        astRoot43.setBaseLineno((int) '4');
        com.google.javascript.rhino.head.Token.CommentType commentType79 = null;
        com.google.javascript.rhino.head.ast.Comment comment81 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType79, "");
        com.google.javascript.rhino.head.Token.CommentType commentType82 = null;
        comment81.setCommentType(commentType82);
        astRoot43.setJsDocNode(comment81);
        astRoot42.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot43);
        astRoot8.addChildToBack((com.google.javascript.rhino.head.Node) astRoot43);
        java.lang.String str87 = astRoot8.shortName();
        astRoot8.clearParentScope();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = astRoot8.getRegexpString((-1343149577));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(functionNodeList4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(commentSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(comment16);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertNotNull(compilerEnvirons21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNotNull(errorReporter27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(errorReporter37);
        org.junit.Assert.assertNotNull(astRoot42);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "                                                                                                                                                                                                        " + "'", str63, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(symbolArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNull(comment74);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "AstRoot" + "'", str87, "AstRoot");
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        com.google.javascript.rhino.head.Node node1 = com.google.javascript.rhino.head.Node.newString("136");
        node1.setString("                                                                                                        {\n                                                                                                        }\n");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode5 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode5.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode6);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList8 = scriptNode6.getChildScopes();
        int int9 = scriptNode6.getBaseLineno();
        com.google.javascript.rhino.head.Node node10 = scriptNode6.getLastSibling();
        int int11 = scriptNode6.getLineno();
        com.google.javascript.rhino.head.ast.Scope scope14 = new com.google.javascript.rhino.head.ast.Scope(5, (int) '#');
        com.google.javascript.rhino.head.ast.AstRoot astRoot15 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator16 = astRoot15.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType19 = null;
        com.google.javascript.rhino.head.ast.Comment comment21 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType19, "");
        boolean boolean22 = comment21.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType25 = null;
        com.google.javascript.rhino.head.ast.Comment comment27 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType25, "");
        boolean boolean28 = comment27.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType31 = null;
        com.google.javascript.rhino.head.ast.Comment comment33 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType31, "");
        java.lang.String str35 = comment33.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray36 = new com.google.javascript.rhino.head.ast.Comment[] { comment21, comment27, comment33 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet37 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet37, commentArray36);
        astRoot15.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet37);
        boolean boolean40 = astRoot15.isInStrictMode();
        com.google.javascript.rhino.head.ast.AstNode astNode41 = astRoot15.getParent();
        astRoot15.setEndLineno((int) (short) 0);
        com.google.javascript.rhino.head.Node node45 = new com.google.javascript.rhino.head.Node(0, (com.google.javascript.rhino.head.Node) scriptNode6, (com.google.javascript.rhino.head.Node) scope14, (com.google.javascript.rhino.head.Node) astRoot15, 6);
        java.lang.String str46 = node1.toStringTree((com.google.javascript.rhino.head.ast.ScriptNode) astRoot15);
        astRoot15.checkParentLinks();
        astRoot15.checkParentLinks();
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList49 = astRoot15.getFunctions();
        java.lang.String str50 = astRoot15.getNextTempName();
        com.google.javascript.rhino.head.ast.Scope scope51 = astRoot15.getEnclosingScope();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet52 = astRoot15.getComments();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(scopeList8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "                                                                                                                                                                                                        " + "'", str35, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(astNode41);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(functionNodeList49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "$0" + "'", str50, "$0");
        org.junit.Assert.assertNull(scope51);
        org.junit.Assert.assertNotNull(commentSet52);
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        compilerEnvirons0.setGenerateObserverCount(false);
        boolean boolean14 = compilerEnvirons0.isGenerateObserverCount();
        boolean boolean15 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean16 = compilerEnvirons0.recoverFromErrors();
        boolean boolean17 = compilerEnvirons0.isAllowMemberExprAsFunctionName();
        compilerEnvirons0.setStrictMode(false);
        compilerEnvirons0.setXmlAvailable(true);
        compilerEnvirons0.setRecordingComments(false);
        com.google.javascript.rhino.head.IRFactory iRFactory24 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        boolean boolean25 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setStrictMode(true);
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        com.google.javascript.rhino.head.ast.Scope scope3 = new com.google.javascript.rhino.head.ast.Scope(644758030, (-1020608546));
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator4 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        com.google.javascript.rhino.head.ast.AstNode.PositionComparator positionComparator5 = new com.google.javascript.rhino.head.ast.AstNode.PositionComparator();
        java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode> astNodeComparator6 = positionComparator4.thenComparing((java.util.Comparator<com.google.javascript.rhino.head.ast.AstNode>) positionComparator5);
        com.google.javascript.rhino.head.ast.AstRoot astRoot7 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int8 = astRoot7.getBaseLineno();
        java.lang.String str9 = astRoot7.debugPrint();
        com.google.javascript.rhino.head.ast.AstRoot astRoot10 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator11 = astRoot10.new NodeIterator();
        int int12 = positionComparator5.compare((com.google.javascript.rhino.head.ast.AstNode) astRoot7, (com.google.javascript.rhino.head.ast.AstNode) astRoot10);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator14 = scriptNode13.spliterator();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator15 = scriptNode13.new NodeIterator();
        astRoot10.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode13);
        int int17 = scriptNode13.getRegexpCount();
        boolean boolean18 = scriptNode13.hasChildren();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor19 = scriptNode13.iterator();
        boolean boolean20 = scriptNode13.hasSideEffects();
        com.google.javascript.rhino.head.Node node22 = new com.google.javascript.rhino.head.Node(605628279, (com.google.javascript.rhino.head.Node) scope3, (com.google.javascript.rhino.head.Node) scriptNode13, 603173706);
        com.google.javascript.rhino.head.Node node23 = node22.getLastChild();
        org.junit.Assert.assertNotNull(astNodeComparator6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str9, "-1\tSCRIPT -1 1\n");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.head.Parser parser10 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setRecoverFromErrors(false);
        com.google.javascript.rhino.head.Parser parser13 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0);
        compilerEnvirons0.setStrictMode(false);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons16 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean17 = compilerEnvirons16.isReservedKeywordAsIdentifier();
        boolean boolean18 = compilerEnvirons16.isIdeMode();
        compilerEnvirons16.setRecordingLocalJsDocComments(false);
        boolean boolean21 = compilerEnvirons16.isGenerateDebugInfo();
        compilerEnvirons16.setGenerateDebugInfo(false);
        boolean boolean24 = compilerEnvirons16.isRecordingComments();
        compilerEnvirons16.setGenerateDebugInfo(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons27 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray33 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        compilerEnvirons27.setActivationNames((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.head.Parser parser37 = new com.google.javascript.rhino.head.Parser(compilerEnvirons27);
        compilerEnvirons27.setRecoverFromErrors(false);
        com.google.javascript.rhino.head.IRFactory iRFactory40 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons27);
        java.util.Set<java.lang.String> strSet41 = compilerEnvirons27.getActivationNames();
        compilerEnvirons16.setActivationNames(strSet41);
        compilerEnvirons0.setActivationNames(strSet41);
        boolean boolean44 = compilerEnvirons0.isRecordingComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons27);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        com.google.javascript.rhino.head.ast.AstRoot astRoot2 = new com.google.javascript.rhino.head.ast.AstRoot(136);
        com.google.javascript.rhino.head.ast.Scope scope3 = astRoot2.getEnclosingScope();
        com.google.javascript.rhino.head.Node node4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node(187480948, (com.google.javascript.rhino.head.Node) scope3, node4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scope3);
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        compilerEnvirons0.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet5 = compilerEnvirons0.getActivationNames();
        boolean boolean6 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setAllowSharpComments(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        boolean boolean11 = compilerEnvirons9.isIdeMode();
        compilerEnvirons9.setRecordingLocalJsDocComments(false);
        boolean boolean14 = compilerEnvirons9.isGenerateObserverCount();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons15 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean16 = compilerEnvirons15.isReservedKeywordAsIdentifier();
        int int17 = compilerEnvirons15.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean19 = compilerEnvirons18.isReservedKeywordAsIdentifier();
        boolean boolean20 = compilerEnvirons18.isIdeMode();
        compilerEnvirons18.setRecordingLocalJsDocComments(false);
        boolean boolean23 = compilerEnvirons18.isGenerateDebugInfo();
        compilerEnvirons18.setRecordingLocalJsDocComments(true);
        boolean boolean26 = compilerEnvirons18.isXmlAvailable();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons27 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean28 = compilerEnvirons27.isReservedKeywordAsIdentifier();
        boolean boolean29 = compilerEnvirons27.getWarnTrailingComma();
        boolean boolean30 = compilerEnvirons27.isRecordingComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter31 = compilerEnvirons27.getErrorReporter();
        com.google.javascript.rhino.head.Parser parser32 = new com.google.javascript.rhino.head.Parser(compilerEnvirons18, errorReporter31);
        compilerEnvirons15.setErrorReporter(errorReporter31);
        compilerEnvirons9.setErrorReporter(errorReporter31);
        com.google.javascript.rhino.head.Parser parser35 = new com.google.javascript.rhino.head.Parser(compilerEnvirons0, errorReporter31);
        java.io.Reader reader36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.AstRoot astRoot39 = parser35.parse(reader36, "                                                                                                        2;\n                                                                                                        SCRIPT;\n                                                                                                        2;\n                                                                                                        1;\n", (-905675306));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(compilerEnvirons15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 170 + "'", int17 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(errorReporter31);
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        java.lang.Object obj6 = astRoot0.getProp((int) (short) 10);
        int int7 = astRoot0.getRegexpCount();
        boolean boolean8 = astRoot0.isInStrictMode();
        com.google.javascript.rhino.head.Node node9 = astRoot0.getLastSibling();
        java.lang.String str10 = astRoot0.toSource();
        com.google.javascript.rhino.head.ast.Symbol symbol12 = astRoot0.getSymbol("100\tSCRIPT 100 1\n");
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(symbol12);
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        scriptNode1.setEncodedSourceEnd(11);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap7 = scriptNode6.getSymbolTable();
        scriptNode1.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode6);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons9 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean10 = compilerEnvirons9.isReservedKeywordAsIdentifier();
        int int11 = compilerEnvirons9.getLanguageVersion();
        int int12 = compilerEnvirons9.getLanguageVersion();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons13 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean14 = compilerEnvirons13.isReservedKeywordAsIdentifier();
        compilerEnvirons13.setStrictMode(true);
        compilerEnvirons13.setXmlAvailable(true);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons19 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean20 = compilerEnvirons19.isReservedKeywordAsIdentifier();
        boolean boolean21 = compilerEnvirons19.getWarnTrailingComma();
        compilerEnvirons19.setXmlAvailable(true);
        java.util.Set<java.lang.String> strSet24 = compilerEnvirons19.getActivationNames();
        com.google.javascript.rhino.head.ErrorReporter errorReporter25 = compilerEnvirons19.getErrorReporter();
        com.google.javascript.rhino.head.IRFactory iRFactory26 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons13, errorReporter25);
        com.google.javascript.rhino.head.IRFactory iRFactory27 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons9, errorReporter25);
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int29 = astRoot28.getParamCount();
        java.lang.String str30 = astRoot28.getJsDoc();
        java.lang.String str31 = astRoot28.getNextTempName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = iRFactory27.transformTree(astRoot28);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode33 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray34 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList35 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList35, symbolArray34);
        scriptNode33.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList35);
        com.google.javascript.rhino.head.ast.AstRoot astRoot38 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int39 = astRoot38.getParamCount();
        int int40 = astRoot38.getRegexpCount();
        scriptNode33.addChildToBack((com.google.javascript.rhino.head.Node) astRoot38);
        int int42 = astRoot38.getPosition();
        astRoot28.setTop((com.google.javascript.rhino.head.ast.ScriptNode) astRoot38);
        boolean boolean44 = astRoot38.hasConsistentReturnUsage();
        scriptNode6.target = astRoot38;
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode47 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.Scope scope49 = scriptNode47.getDefiningScope("                                          ");
        int int50 = scriptNode47.getRegexpCount();
        int int51 = scriptNode47.getBaseLineno();
        int int52 = scriptNode47.getLength();
        astRoot38.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode47);
        org.junit.Assert.assertNull(strMap7);
        org.junit.Assert.assertNotNull(compilerEnvirons9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 170 + "'", int11 == 170);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 170 + "'", int12 == 170);
        org.junit.Assert.assertNotNull(compilerEnvirons13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNotNull(errorReporter25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "$0" + "'", str31, "$0");
        org.junit.Assert.assertNotNull(scriptNode32);
        org.junit.Assert.assertNotNull(symbolArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(scope49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet1 = astRoot0.getComments();
        int int2 = astRoot0.getEndLineno();
        com.google.javascript.rhino.head.Node node4 = astRoot0.setType((int) (short) 10);
        com.google.javascript.rhino.head.ast.Scope scope5 = astRoot0.getParentScope();
        int int8 = astRoot0.getIntProp((-1), 18);
        com.google.javascript.rhino.head.ast.Scope scope10 = astRoot0.getDefiningScope("                                        hi;\n                                        !;\n");
        int int11 = astRoot0.depth();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet12 = astRoot0.getComments();
        org.junit.Assert.assertNull(commentSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(scope5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 18 + "'", int8 == 18);
        org.junit.Assert.assertNull(scope10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(commentSet12);
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode(20);
        int int3 = scriptNode2.getLength();
        com.google.javascript.rhino.head.Node node4 = scriptNode2.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.Node node5 = new com.google.javascript.rhino.head.Node((-228505339), node4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.Object obj16 = scriptNode7.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode17 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str19 = scriptNode17.toSource((int) '4');
        java.lang.String str20 = scriptNode7.toStringTree(scriptNode17);
        scriptNode17.setLength((-1));
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode24.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot27 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator28 = astRoot27.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor29 = astRoot27.iterator();
        scriptNode24.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot27);
        java.lang.String str31 = scriptNode24.toString();
        scriptNode17.setCompilerData((java.lang.Object) scriptNode24);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor33 = scriptNode24.iterator();
        // The following exception was thrown during execution in test generation
        try {
            nodeItor33.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: next() has not been called");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str19, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(nodeItor29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "136" + "'", str31, "136");
        org.junit.Assert.assertNotNull(nodeItor33);
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode0.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode1);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList3 = scriptNode1.getChildScopes();
        int int4 = scriptNode1.getBaseLineno();
        com.google.javascript.rhino.head.Node node5 = scriptNode1.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode6 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode6.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode7);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList9 = scriptNode7.getChildScopes();
        java.lang.String str11 = scriptNode7.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode1.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode7, (com.google.javascript.rhino.head.Node) scriptNode13);
        java.lang.String str15 = scriptNode1.getSourceName();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = null;
        scriptNode1.setTop(scriptNode16);
        scriptNode1.flattenSymbolTable(true);
        com.google.javascript.rhino.head.ast.Symbol symbol20 = null;
        // The following exception was thrown during execution in test generation
        try {
            scriptNode1.putSymbol(symbol20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(scopeList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(scopeList9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        boolean boolean1 = astRoot0.hasSideEffects();
        int int2 = astRoot0.getEncodedSourceEnd();
        com.google.javascript.rhino.head.ast.AstRoot astRoot3 = new com.google.javascript.rhino.head.ast.AstRoot();
        java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment> commentSet4 = astRoot3.getComments();
        int int5 = astRoot3.getEndLineno();
        com.google.javascript.rhino.head.Node node7 = astRoot3.setType((int) (short) 10);
        astRoot3.putIntProp(24, (int) 'a');
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator15 = scriptNode14.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType18 = null;
        com.google.javascript.rhino.head.ast.Comment comment20 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType18, "");
        java.lang.String str22 = comment20.toSource(100);
        java.lang.String str23 = comment20.getValue();
        scriptNode14.setParent((com.google.javascript.rhino.head.ast.AstNode) comment20);
        com.google.javascript.rhino.head.ast.AstRoot astRoot25 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator26 = astRoot25.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType29 = null;
        com.google.javascript.rhino.head.ast.Comment comment31 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType29, "");
        boolean boolean32 = comment31.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType35 = null;
        com.google.javascript.rhino.head.ast.Comment comment37 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType35, "");
        boolean boolean38 = comment37.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType41 = null;
        com.google.javascript.rhino.head.ast.Comment comment43 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType41, "");
        java.lang.String str45 = comment43.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray46 = new com.google.javascript.rhino.head.ast.Comment[] { comment31, comment37, comment43 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet47 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet47, commentArray46);
        astRoot25.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet47);
        boolean boolean50 = astRoot25.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray51 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList52 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList52, symbolArray51);
        astRoot25.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList52);
        com.google.javascript.rhino.head.Node node55 = astRoot25.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode56.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode57);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot25, (com.google.javascript.rhino.head.ast.Scope) scriptNode57);
        com.google.javascript.rhino.head.Node node60 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode13, (com.google.javascript.rhino.head.Node) comment20, (com.google.javascript.rhino.head.Node) scriptNode57);
        astRoot3.addComment(comment20);
        int int62 = astRoot0.compareTo((com.google.javascript.rhino.head.ast.AstNode) comment20);
        int int63 = astRoot0.getEncodedSourceStart();
        java.lang.String str64 = astRoot0.debugPrint();
        astRoot0.setInStrictMode(true);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.head.ast.FunctionNode functionNode68 = astRoot0.getFunctionNode(492844799);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(commentSet4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeSpliterator15);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "                                                                                                                                                                                                        " + "'", str22, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "                                                                                                                                                                                                        " + "'", str45, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(symbolArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "-1\tSCRIPT -1 1\n" + "'", str64, "-1\tSCRIPT -1 1\n");
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.isRecordingComments();
        boolean boolean4 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean5 = compilerEnvirons0.isRecordingLocalJsDocComments();
        boolean boolean6 = compilerEnvirons0.isIdeMode();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons7 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray13 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        compilerEnvirons7.setActivationNames((java.util.Set<java.lang.String>) strSet14);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet14);
        boolean boolean18 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean19 = compilerEnvirons0.isStrictMode();
        com.google.javascript.rhino.head.ErrorReporter errorReporter20 = compilerEnvirons0.getErrorReporter();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons7);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(errorReporter20);
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment(16, (int) (byte) -1, commentType3, "AstRoot");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode9 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator10 = scriptNode9.spliterator();
        com.google.javascript.rhino.head.Token.CommentType commentType13 = null;
        com.google.javascript.rhino.head.ast.Comment comment15 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType13, "");
        java.lang.String str17 = comment15.toSource(100);
        java.lang.String str18 = comment15.getValue();
        scriptNode9.setParent((com.google.javascript.rhino.head.ast.AstNode) comment15);
        com.google.javascript.rhino.head.ast.AstRoot astRoot20 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator21 = astRoot20.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType24 = null;
        com.google.javascript.rhino.head.ast.Comment comment26 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType24, "");
        boolean boolean27 = comment26.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType30 = null;
        com.google.javascript.rhino.head.ast.Comment comment32 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType30, "");
        boolean boolean33 = comment32.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType36 = null;
        com.google.javascript.rhino.head.ast.Comment comment38 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType36, "");
        java.lang.String str40 = comment38.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray41 = new com.google.javascript.rhino.head.ast.Comment[] { comment26, comment32, comment38 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet42 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet42, commentArray41);
        astRoot20.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet42);
        boolean boolean45 = astRoot20.isInStrictMode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray46 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList47 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList47, symbolArray46);
        astRoot20.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList47);
        com.google.javascript.rhino.head.Node node50 = astRoot20.getFirstChild();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        com.google.javascript.rhino.head.ast.Scope.joinScopes((com.google.javascript.rhino.head.ast.Scope) astRoot20, (com.google.javascript.rhino.head.ast.Scope) scriptNode52);
        com.google.javascript.rhino.head.Node node55 = new com.google.javascript.rhino.head.Node(16, (com.google.javascript.rhino.head.Node) scriptNode8, (com.google.javascript.rhino.head.Node) comment15, (com.google.javascript.rhino.head.Node) scriptNode52);
        java.lang.Object obj57 = comment15.getProp((int) '4');
        int int58 = comment15.getType();
        com.google.javascript.rhino.head.ast.Scope scope60 = new com.google.javascript.rhino.head.ast.Scope();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator61 = scope60.spliterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode62 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode63 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode62.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode63);
        scope60.setTop(scriptNode63);
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor66 = scope60.iterator();
        com.google.javascript.rhino.head.Token.CommentType commentType69 = null;
        com.google.javascript.rhino.head.ast.Comment comment71 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType69, "");
        boolean boolean72 = comment71.hasSideEffects();
        int int73 = comment71.getLineno();
        com.google.javascript.rhino.head.Node node75 = comment71.setType(18);
        com.google.javascript.rhino.head.Token.CommentType commentType78 = null;
        com.google.javascript.rhino.head.ast.Comment comment80 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType78, "");
        boolean boolean81 = comment80.hasSideEffects();
        int int82 = comment80.getLineno();
        com.google.javascript.rhino.head.Node node84 = comment80.setType(18);
        comment80.removeChildren();
        com.google.javascript.rhino.head.Node node87 = new com.google.javascript.rhino.head.Node((-1116244898), (com.google.javascript.rhino.head.Node) scope60, (com.google.javascript.rhino.head.Node) comment71, (com.google.javascript.rhino.head.Node) comment80, 15);
        comment80.setRelative((-1116244898));
        java.lang.String str91 = comment80.toSource(21);
        com.google.javascript.rhino.head.Node node93 = new com.google.javascript.rhino.head.Node((-1219033885), (com.google.javascript.rhino.head.Node) comment5, (com.google.javascript.rhino.head.Node) comment15, (com.google.javascript.rhino.head.Node) comment80, 0);
        com.google.javascript.rhino.head.Node node94 = comment5.getLastSibling();
        org.junit.Assert.assertNotNull(nodeSpliterator10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "                                                                                                                                                                                                        " + "'", str17, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "                                                                                                                                                                                                        " + "'", str40, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(symbolArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 161 + "'", int58 == 161);
        org.junit.Assert.assertNotNull(nodeSpliterator61);
        org.junit.Assert.assertNotNull(nodeItor66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "                                          " + "'", str91, "                                          ");
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        com.google.javascript.rhino.head.Token.CommentType commentType3 = null;
        com.google.javascript.rhino.head.ast.Comment comment5 = new com.google.javascript.rhino.head.ast.Comment(95442629, 9, commentType3, "          hi!");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode7 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode8 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode7.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode8);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList10 = scriptNode8.getChildScopes();
        int int11 = scriptNode8.getBaseLineno();
        com.google.javascript.rhino.head.Node node12 = scriptNode8.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode13 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode14 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode13.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode14);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList16 = scriptNode14.getChildScopes();
        java.lang.String str18 = scriptNode14.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode20 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode8.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) scriptNode20);
        java.lang.Object obj23 = scriptNode14.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode24 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str26 = scriptNode24.toSource((int) '4');
        java.lang.String str27 = scriptNode14.toStringTree(scriptNode24);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons28 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory30 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons28, errorReporter29);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode31 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode32 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode31.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode32);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList34 = scriptNode32.getChildScopes();
        int int35 = scriptNode32.getBaseLineno();
        int int36 = scriptNode32.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode37 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode38 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode37.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList40 = scriptNode38.getFunctions();
        scriptNode38.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope43 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode32.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode38, (com.google.javascript.rhino.head.Node) scope43);
        scriptNode38.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node47 = iRFactory30.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode38);
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons48 = null;
        com.google.javascript.rhino.head.ErrorReporter errorReporter49 = null;
        com.google.javascript.rhino.head.IRFactory iRFactory50 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons48, errorReporter49);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode51 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode51.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode52);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList54 = scriptNode52.getChildScopes();
        int int55 = scriptNode52.getBaseLineno();
        int int56 = scriptNode52.getParamCount();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode57 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode58 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode57.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode58);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList60 = scriptNode58.getFunctions();
        scriptNode58.setPosition((int) (byte) 10);
        com.google.javascript.rhino.head.ast.Scope scope63 = new com.google.javascript.rhino.head.ast.Scope();
        scriptNode52.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode58, (com.google.javascript.rhino.head.Node) scope63);
        scriptNode58.setEncodedSourceEnd(18);
        com.google.javascript.rhino.head.Node node67 = iRFactory50.transform((com.google.javascript.rhino.head.ast.AstNode) scriptNode58);
        scriptNode38.setTop(scriptNode58);
        com.google.javascript.rhino.head.Node node70 = new com.google.javascript.rhino.head.Node(2, (com.google.javascript.rhino.head.Node) scriptNode14, (com.google.javascript.rhino.head.Node) scriptNode38, 10);
        scriptNode14.flattenSymbolTable(false);
        com.google.javascript.rhino.head.Node node74 = new com.google.javascript.rhino.head.Node(1891424362, (com.google.javascript.rhino.head.Node) comment5, (com.google.javascript.rhino.head.Node) scriptNode14, 9);
        com.google.javascript.rhino.head.Node node76 = comment5.setType(911039682);
        org.junit.Assert.assertNull(scopeList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(scopeList16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str26, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(scopeList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(functionNodeList40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(scopeList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(functionNodeList60);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node76);
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.util.Spliterator<com.google.javascript.rhino.head.Node> nodeSpliterator1 = scriptNode0.spliterator();
        com.google.javascript.rhino.head.Node node3 = scriptNode0.setType((int) '#');
        com.google.javascript.rhino.head.Node node4 = node3.getFirstChild();
        com.google.javascript.rhino.head.Node node6 = node3.setType(1511404125);
        java.lang.String str7 = node6.toString();
        org.junit.Assert.assertNotNull(nodeSpliterator1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1511404125" + "'", str7, "1511404125");
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        com.google.javascript.rhino.head.ast.AstRoot astRoot0 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator1 = astRoot0.new NodeIterator();
        com.google.javascript.rhino.head.Token.CommentType commentType4 = null;
        com.google.javascript.rhino.head.ast.Comment comment6 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType4, "");
        boolean boolean7 = comment6.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType10 = null;
        com.google.javascript.rhino.head.ast.Comment comment12 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType10, "");
        boolean boolean13 = comment12.hasSideEffects();
        com.google.javascript.rhino.head.Token.CommentType commentType16 = null;
        com.google.javascript.rhino.head.ast.Comment comment18 = new com.google.javascript.rhino.head.ast.Comment((int) (byte) 1, 0, commentType16, "");
        java.lang.String str20 = comment18.toSource(100);
        com.google.javascript.rhino.head.ast.Comment[] commentArray21 = new com.google.javascript.rhino.head.ast.Comment[] { comment6, comment12, comment18 };
        java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment> commentSet22 = new java.util.TreeSet<com.google.javascript.rhino.head.ast.Comment>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Comment>) commentSet22, commentArray21);
        astRoot0.setComments((java.util.SortedSet<com.google.javascript.rhino.head.ast.Comment>) commentSet22);
        boolean boolean25 = astRoot0.isInStrictMode();
        astRoot0.setEndLineno(1647296145);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "                                                                                                                                                                                                        " + "'", str20, "                                                                                                                                                                                                        ");
        org.junit.Assert.assertNotNull(commentArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        boolean boolean1 = compilerEnvirons0.isReservedKeywordAsIdentifier();
        boolean boolean2 = compilerEnvirons0.getWarnTrailingComma();
        boolean boolean3 = compilerEnvirons0.reportWarningAsError();
        java.util.Set<java.lang.String> strSet4 = compilerEnvirons0.getActivationNames();
        com.google.javascript.rhino.head.IRFactory iRFactory5 = new com.google.javascript.rhino.head.IRFactory(compilerEnvirons0);
        compilerEnvirons0.setRecordingComments(false);
        boolean boolean8 = compilerEnvirons0.isGenerateDebugInfo();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode1 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode2 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode1.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode2);
        java.util.List<com.google.javascript.rhino.head.ast.FunctionNode> functionNodeList4 = scriptNode2.getFunctions();
        scriptNode2.setPosition((int) (byte) 10);
        int int7 = scriptNode2.getEncodedSourceEnd();
        int int8 = scriptNode2.getLineno();
        scriptNode2.setEncodedSourceEnd((-476424842));
        com.google.javascript.rhino.head.ast.AstRoot astRoot11 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int12 = astRoot11.getParamCount();
        int int13 = astRoot11.getRegexpCount();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator14 = astRoot11.new NodeIterator();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode16 = new com.google.javascript.rhino.head.ast.ScriptNode((int) (short) 1);
        com.google.javascript.rhino.head.ast.Scope scope18 = scriptNode16.getDefiningScope("                                          ");
        int int19 = scriptNode16.getRegexpCount();
        astRoot11.setCompilerData((java.lang.Object) int19);
        int int21 = astRoot11.getLineno();
        astRoot11.setRelative(26);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode25 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode25.removeProp(10);
        com.google.javascript.rhino.head.ast.AstRoot astRoot28 = new com.google.javascript.rhino.head.ast.AstRoot();
        com.google.javascript.rhino.head.Node.NodeIterator nodeIterator29 = astRoot28.new NodeIterator();
        java.util.Iterator<com.google.javascript.rhino.head.Node> nodeItor30 = astRoot28.iterator();
        scriptNode25.replaceWith((com.google.javascript.rhino.head.ast.Scope) astRoot28);
        com.google.javascript.rhino.head.ast.NodeVisitor nodeVisitor32 = null;
        astRoot28.visitComments(nodeVisitor32);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode34 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str36 = scriptNode34.toSource((int) '4');
        com.google.javascript.rhino.head.Node node37 = scriptNode34.getFirstChild();
        astRoot28.addChildToBack((com.google.javascript.rhino.head.Node) scriptNode34);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode39 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode40 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode39.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode40);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList42 = scriptNode40.getChildScopes();
        int int43 = scriptNode40.getBaseLineno();
        com.google.javascript.rhino.head.Node node44 = scriptNode40.getLastSibling();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode45 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode46 = new com.google.javascript.rhino.head.ast.ScriptNode();
        scriptNode45.addChild((com.google.javascript.rhino.head.ast.AstNode) scriptNode46);
        java.util.List<com.google.javascript.rhino.head.ast.Scope> scopeList48 = scriptNode46.getChildScopes();
        java.lang.String str50 = scriptNode46.makeIndent((int) (byte) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode52 = new com.google.javascript.rhino.head.ast.ScriptNode(0);
        scriptNode40.addChildAfter((com.google.javascript.rhino.head.Node) scriptNode46, (com.google.javascript.rhino.head.Node) scriptNode52);
        java.lang.Object obj55 = scriptNode46.getProp((int) (short) -1);
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode56 = new com.google.javascript.rhino.head.ast.ScriptNode();
        java.lang.String str58 = scriptNode56.toSource((int) '4');
        java.lang.String str59 = scriptNode46.toStringTree(scriptNode56);
        com.google.javascript.rhino.head.Node node60 = scriptNode56.target;
        scriptNode34.replaceWith((com.google.javascript.rhino.head.ast.Scope) scriptNode56);
        java.util.Map<java.lang.String, com.google.javascript.rhino.head.ast.Symbol> strMap62 = scriptNode34.getSymbolTable();
        int int63 = scriptNode34.getAbsolutePosition();
        com.google.javascript.rhino.head.Node node64 = new com.google.javascript.rhino.head.Node(811615364, (com.google.javascript.rhino.head.Node) scriptNode2, (com.google.javascript.rhino.head.Node) astRoot11, (com.google.javascript.rhino.head.Node) scriptNode34);
        int int65 = scriptNode34.getParamCount();
        org.junit.Assert.assertNotNull(functionNodeList4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(scope18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(nodeItor30);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str36, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(scopeList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(scopeList48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "                                                                                                        {\n                                                                                                        }\n" + "'", str58, "                                                                                                        {\n                                                                                                        }\n");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertNull(strMap62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        com.google.javascript.rhino.head.ast.ScriptNode scriptNode0 = new com.google.javascript.rhino.head.ast.ScriptNode();
        com.google.javascript.rhino.head.ast.Symbol[] symbolArray1 = new com.google.javascript.rhino.head.ast.Symbol[] {};
        java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol> symbolList2 = new java.util.ArrayList<com.google.javascript.rhino.head.ast.Symbol>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.head.ast.Symbol>) symbolList2, symbolArray1);
        scriptNode0.setSymbols((java.util.List<com.google.javascript.rhino.head.ast.Symbol>) symbolList2);
        com.google.javascript.rhino.head.ast.AstRoot astRoot5 = new com.google.javascript.rhino.head.ast.AstRoot();
        int int6 = astRoot5.getParamCount();
        int int7 = astRoot5.getRegexpCount();
        scriptNode0.addChildToBack((com.google.javascript.rhino.head.Node) astRoot5);
        com.google.javascript.rhino.head.ast.AstRoot astRoot9 = astRoot5.getAstRoot();
        astRoot9.setInStrictMode(true);
        com.google.javascript.rhino.head.Node node13 = astRoot9.setType((-603115504));
        com.google.javascript.rhino.head.ast.FunctionNode functionNode14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = astRoot9.addFunction(functionNode14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: FAILED ASSERTION");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(symbolArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(astRoot9);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons0 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray6 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        compilerEnvirons0.setActivationNames((java.util.Set<java.lang.String>) strSet7);
        boolean boolean10 = compilerEnvirons0.isGenerateDebugInfo();
        boolean boolean11 = compilerEnvirons0.isGeneratingSource();
        compilerEnvirons0.setIdeMode(false);
        boolean boolean14 = compilerEnvirons0.isIdeMode();
        compilerEnvirons0.setAllowMemberExprAsFunctionName(true);
        boolean boolean17 = compilerEnvirons0.isGeneratingSource();
        com.google.javascript.rhino.head.CompilerEnvirons compilerEnvirons18 = com.google.javascript.rhino.head.CompilerEnvirons.ideEnvirons();
        java.lang.String[] strArray24 = new java.lang.String[] { "                                                                                                        {\n                                                                                                        }\n", "                                                                                                        {\n                                                                                                        }\n", "", "-1\tSCRIPT -1 1\n", "-1\tSCRIPT -1 1\n" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        compilerEnvirons18.setActivationNames((java.util.Set<java.lang.String>) strSet25);
        boolean boolean28 = compilerEnvirons18.isGenerateDebugInfo();
        compilerEnvirons18.setOptimizationLevel((int) (short) 1);
        compilerEnvirons18.setAllowSharpComments(true);
        boolean boolean33 = compilerEnvirons18.getAllowSharpComments();
        com.google.javascript.rhino.head.ErrorReporter errorReporter34 = compilerEnvirons18.getErrorReporter();
        int int35 = compilerEnvirons18.getLanguageVersion();
        compilerEnvirons18.setXmlAvailable(false);
        compilerEnvirons18.setXmlAvailable(false);
        com.google.javascript.rhino.head.Parser parser40 = new com.google.javascript.rhino.head.Parser(compilerEnvirons18);
        boolean boolean41 = compilerEnvirons18.recoverFromErrors();
        java.util.Set<java.lang.String> strSet42 = compilerEnvirons18.getActivationNames();
        compilerEnvirons0.setActivationNames(strSet42);
        boolean boolean44 = compilerEnvirons0.isRecordingLocalJsDocComments();
        org.junit.Assert.assertNotNull(compilerEnvirons0);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(compilerEnvirons18);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(errorReporter34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 170 + "'", int35 == 170);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }
}
